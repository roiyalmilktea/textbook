/**
 * JS_CMS -- realtime website development web application
 * http://js-cms.jp/
 * Copyright 2018 Shige Tanaka - tanaka@pixelimage.jp
 * licensed under the MIT licenses.
 */

 
var CMS_INFO = {
	name:"JS CMS",
	lastUpdate:"2018-10-12 22:56:41",
	version:"4.1.5.3",
	url:"http://www.js-cms.jp/",
	loginAbout:'<a href="http://js-cms.jp/" target="_blank">CMS紹介サイト</a>'
}

var CMS_LINKs = {};
	CMS_LINKs.waf = '<a href="http://www.js-cms.jp/waf.html" target="_blank">サーバーについて</a>';

window.SITE_DIR_PATH = "../";

if(window["HEADER_TOOL_BTNS"] == undefined) window.HEADER_TOOL_BTNS = [];
if(window["HEADER_EXTRA_BTNS"] == undefined) window.HEADER_EXTRA_BTNS = [];

if(window["ASSET_DIR_PATH"] == undefined) window.ASSET_DIR_PATH = "../html/";
if(window["DEFAULT_DIR_PATH"] == undefined) window.DEFAULT_DIR_PATH = window.ASSET_DIR_PATH;
if(window["UPLOAD_DIR_PATH"] == undefined) window.UPLOAD_DIR_PATH = "../images/";
if(window["BACKUP_DIR_PATH"] == undefined) window.BACKUP_DIR_PATH = "";
if(window["SITE_NAME"] == undefined) window.SITE_NAME = "サイト管理";
if(window["ASSET_CSS_DIRS"] == undefined) window.ASSET_CSS_DIRS = [];
if(window["DEFAULT_PAGE_W"] == undefined) window.DEFAULT_PAGE_W = 720;
if(window["FILEMANAGER_PREVIEW_LIMIT_MB"] == undefined) window.FILEMANAGER_PREVIEW_LIMIT_MB = 0.5;
if(window["BATCH_EXPORT_COUNT"] == undefined) window.BATCH_EXPORT_COUNT = 5;
if(window["IMAGE_BLOCK_BMP_ZOOM"] == undefined) window.IMAGE_BLOCK_BMP_ZOOM = 1.5;
if(window["DEFAULT_PAGE_WIDES"] == undefined) window.DEFAULT_PAGE_WIDES = [720];
if(window["USE_EDIT_LOCK"] == undefined) window.USE_EDIT_LOCK  = true;
if(window["IS_CHECK_ENV"] == undefined) window.IS_CHECK_ENV = true;
if(window["IS_DEMO"] == undefined) window.IS_DEMO = false;
if(window["IS_ESCAPE_WAF"] == undefined) window.IS_ESCAPE_WAF = false;
if(isSleniumTest) { window.ADD_BTN_SHOW_DEPTH = 9;}

// window.IS_ESCAPE_WAF = true;

$(function(){
	if(window["IS_TEST"] == true) return;
	CMS_InitController.init();
});


//テストフラグ
var isLog = false;
var isSleniumTest = false;
if(location.hash == "#cms_test") isSleniumTest = true;

//定数、ステータスなど
var CONST 				 = {
	SIDEVEIW_PAGE_PREFIX : "_sideview_page_",
	SITE_DIR : "{{SITE_DIR}}"
}

//ブラウザ環境特定
var Env_ = {
	isIE 		: false,
	isIE6 		: false,
	isIE7 		: false,
	isIE8 		: false,
	isIE78 		: false,
	isIE9 		: false,
	isIE10 		: false,
	isIE11 		: false,
	ieEdge 		: false,
	isFirefox 	: false,
	isOpera 	: false,
	isSafari 	: false,
	isChrome 	: false,

	isWin		: false,
	isMac		: false,
	isMobile	: false,
	isIPad		: false,
	isIPhone	: false,
	isAndroid	: false,
	isAndroidTablet : false,

	isSmartPhone:false,
	isTablet:false,

	init:function (){

		var ua = navigator.userAgent;
		{
			if(ua.indexOf('MSIE') != -1) this.isIE = true;
			if(ua.indexOf('trident') != -1) this.isIE = true;
			if(ua.indexOf('MSIE 6') != -1) this.isIE6 = true;
			if(ua.indexOf('MSIE 7') != -1) this.isIE7 = true;
			if(ua.indexOf('MSIE 8') != -1) this.isIE8 = true;
			if(ua.indexOf('MSIE 9') != -1) this.isIE9 = true;
			if(ua.indexOf('MSIE 10') != -1) this.isIE10 = true;
			if(ua.indexOf('Trident') != -1) {
				if(ua.indexOf('rv:11.0') != -1) {
					this.isIE11 = true;
				}
			}
			if(ua.indexOf('Edge') != -1) this.ieEdge = true;
			if(ua.indexOf('Firefox') != -1) 	this.isFirefox = true;
			if(ua.indexOf('Opera') != -1) 	this.isOpera = true;
			if(ua.indexOf('Safari') != -1) 	this.isSafari = true;
			if(ua.indexOf('Chrome') != -1) 	this.isChrome = true;
			if(ua.indexOf('Win') != -1)			this.isWin = true;
			if(ua.indexOf('Mac') != -1) 		this.isMac = true;
			if(ua.indexOf('iPad') != -1) 		this.isIPad = true;
			if(ua.indexOf('iPhone') != -1) 		this.isIPhone = true;
			if(ua.indexOf('Android') != -1){
				this.isAndroid = true;
				if(ua.indexOf('Mobile') != -1) {
				//
				} else{
					this.isAndroidTablet = true;
				}
			}
		}
		{
			if(this.isSafari) 	this.isFirefox = false;
			if(this.isChrome) 	this.isSafari = false;
			if(this.isIE7)		this.isIE78 = true;
			if(this.isIE8)		this.isIE78 = true;
			if(this.isIPad || this.isIPhone || this.isAndroid ||this.isAndroidTablet){
				this.isMobile = true;
			}
			if(this.isIPhone || this.isAndroid) 		this.isSmartPhone = true;
			if(this.isIPad || this.isAndroidTablet) 	this.isTablet = true;
		}
	}
}
Env_.init();

var Dic = {}
Dic.PageType = {
	PAGE: "page",
	FILE: "file",
	SYSTEM: "system",
	PRESET: "preset",
	CMS_MYTAG: "_cms_mytag",
	CMS_SITEMAP: "_cms_sitemap"
}

Dic.DirName	 = {
	SETTING :  "_setting",
	MYTAG :  "_mytag",
	PRESET :  "_preset",
	TEMPLATE :  "_template",
	JSON 	: "_json",
	JSON_REV : "_json"
}
Dic.ListType	 = {
	PAGE 	:  "page",
	DIR 	:  "dir",
	HTML 	:  "html"
}
Dic.GridType	 = {
	BASE 	:  "base",
	M_GRID 	:  "mgrid",
	FREE 	:  "free",
	TEMPLATE:  "template"
}
Dic.DEFAULT_TEMPLATE = "default.html";

Dic.SettingList = {
	dir: Dic.DirName.SETTING,
	id: "sitemap",
	type: Dic.PageType.CMS_SITEMAP,
	name: "サイトマップ"
}

//Myタグファイルリストが格納される
Dic.MyTagList = [];
//リストがない場合のデフォルト
Dic.MyTagListDef = {
	dir: Dic.DirName.MYTAG,
	id: "template",
	type: Dic.PageType.CMS_MYTAG,
	name: "ヘッダ等のUI用"
}

Dic.I = {
	// Edit : '<i class="fa fa-bars"></i>',
	Edit : '<i class="fa fa-align-left "></i> ',
	Grid : '<i class="fa fa-th "></i>',
	External : '<i class="fa fa-external-link-square "></i>'
}
//Dic.I.Grid

var UpdateDelay = (function() {
	var _time = 200;

	function init() {
		if(window["isSleniumTest"]) _time = 0;
	}
	function delay(_func) {
		if(_time == 0) {
			_func();
			return;
		}
		setTimeout(function(){
			_func();
		},_time);
	}
	return {
		init: init,
		delay: delay
	}
})();
UpdateDelay.init();

function escape_url(_s){
	if(window.IS_ESCAPE_WAF){
		_s = _s.split("../").join("__DIR__");
	}
	return _s;
}

function _run_script(_path){
	var script = document.createElement('script');
	script.setAttribute('src', _path + "?r"+ new Date().getTime() );
	var head = document.getElementsByTagName('head');
	head[0].appendChild(script);
}





var NO_CMS = (function(){
	var view;
	var v = {};
	
	function init(){
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = "";
		tag += '<div id="NO_CMS">';
		tag += '	<div class="_title">'+ SITE_NAME +'</div>';
		tag += '	<div>お使いのブラウザでは、CMSの管理画面はご利用いただけません。</div>';
		tag += '	<div>管理画面を利用するには、以下のブラウザをお使いください。</div>';
		tag += '	<div>※モバイル端末は対応していません。</div>';
		tag += '	<div class="_h2">対応ブラウザ</div>';
		tag += '	<ul>';
		tag += '		<li><span style="font-size:24px;"><b>Google Chrome</b></span>　<i class="fa fa-caret-right "></i> <a href="http://www.google.co.jp/chrome">ダウンロード画面へ</a></li>';
		tag += '		<li><span style="font-size:24px;"><b>Internet Explorer 9,10,11</b></span></li>';
		tag += '	</ul><br><br>';
		tag += '	<div><i class="fa fa-info-circle"></i> <a href="http://js-cms.jp/" target="_blank">JS CMSの紹介サイト</a></div>'
		tag += '</div>';
		$("body").html(tag);
	}
	
	function setBtn(){
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			if(isFirst){
				createlayout();
				setBtn();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();

var CMS_CheckedView = (function(){
	var view;
	var v = {};
	var useLogin = true;
	
	function init(){
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){

		//バージョン
		checkVersion(function(_v){
			CMS_ServerStatusFunc.setVersion(_v)
			//WAFチェック
			checkWAF(function(){
				//書き込み権限チェック
				checkWritable(function(_s){
					if(_s.status == "0")showLoginView(_s);
					if(_s.status == "1")checked();
				});
			})
			//,function(){
				// errorWAF();
			//	IS_ESCAPE_WAF = true;
			//});
		},function(_s){
			errorPHP(_s);
		});
	}
	
	function setBtn(){
	}
	function treat(_s){
		_s = _s.split("../").join("/");
		_s = _s.split("///").join("/");
		_s = _s.split("//").join("/");
		return _s;
	}
		
	/* ---------- ---------- ---------- */

	function errorPHP(_s){
		var m = ""
			m += '<div class="_title">エラーが発生しました<div>'
			m += '<div>'+_s+'<div>'
		showError(m);
	}
	/*
	function errorWAF(_s){
		var m = '<div class="_title"><i class="fa fa-warning" style="color:red"></i> JS CMS サーバーチェック</div>'
			m += '<br><div class="_attention">WAF機能はOFFにしてください。</div><br>';
			m += 'お使いのウェブサーバーでは、WAF<span class="_small"> (Webアプリケーションファイヤーウォール) </span>機能が有効の可能性があります。<br>';
			m += '有効の場合、JS CMSの管理画面は、うまく動作しないため、CMSの設定か、ウェブサーバーの設定を変更していただく必要があります。<br>';
			m += '以下の、どちらかの方法で対応してください。<br>'
			m += '<br>'
			// m += '<span class="_h">■方法A .haccessを設置</span>';
			// m += 'JS CMSの管理画面のみ、WAF機能の一部をOFFにします。<br>';
			// m += 'アップロードした_cms/ディレクトリ内の以下のファイルをリネームしてください。<br>';
			// m += '　・変更前：_.htaccess<br>';
			// m += '　・変更後：.htaccess<br>';
			// m += '<br>'
			
			m += '<span class="_h">■方法A ―― CMS設定ファイルを変更</span>';
			m += '設定ファイル <b>/_cms/setting/setting.js</b> の 300行目あたりを以下のように変更してください。<br>';
 			m += '<div class="_box-sett">';
			m += 'var IS_ESCAPE_WAF = false;<br>';
			m += ' ↓ 変更<br>';
			m += 'var IS_ESCAPE_WAF = true;<br>';
			m += '</div>'
			
			m += '<span class="_h">■方法B ―― サーバー管理画面で設定</span>';
			m += 'レンタルサーバーを利用であれば、各サーバー会社さまの管理画面より、WAF機能をOFFにしてください。<br>';
			m += '( OFFにしても、反映されるまで5分〜1時間程度、時間がかかります )<br>';
			m += '独自サーバーの場合は、サーバー管理者に相談してください。<br>';
			m += '<br>'
			m += 'JS CMS紹介サイトでは、各レンタルサーバー会社さまごとの、情報を掲載してますので、そちらも参考にしてください。<br>';
			m += '<br>'
			m += '- '+CMS_LINKs.waf;
		showError(m);
	}
	*/
	function showLoginView(_s) {
		var m = '<div class="_title"><i class="fa fa-warning color:red"></i> JS CMS サーバーチェック</div>'
		if(_s.message == CMS_E.DIR_ERROR) {
			m += 'サイトルート、およびHTML書き出し用ディレクトリに、書き込み権限がありません。<br>'
			m += 'FTPソフトなどで、以下のディレクトリに対して、<span class="_attention">書き込み権限（707など）</span>を設定してください。<br>'
			m += '以下のディレクトリが無い場合は、作成してください。<br>'
			m += 'HTML書き出し用のサブディレクトリも同様に設定してください。'
			m += '<ul class="_errorList">'
			var files = _s.extra.split(",")
			for (var i = 0; i <  files.length ; i++) {
				files[i] = treat( files[i]+"/" );
				if(files[i] == "/"){
					m += '<li><span class="_icon_dir"></span>/ (サイトディレクトリ)</li>'
				} else{
					m += '<li><span class="_icon_dir"></span>' + files[i] + '</li>'
				}
			}
			m += '</ul>'
		}
		showError(m);
	}
	function showError(_s) {
		var tag = "";
			tag += '<div id="CMS_CheckedView">';
			tag += _s
			tag += '</div>';
		$("body").html(tag);
		view = $('#CMS_CheckedView');
		view.show();
	}
	function checked() {
		callback();
	}
	function checkVersion(_callback,_callback_e) {
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: "check.php?action=checkVersion" ,
			dataType		: 'json',
			success : function(data) { _callback(data); },
			error : function(data) { _callback_e(data.responseText); }
		});
	}
	function checkWritable(_callback) {
		var r = "&publish_dir=" + escape_url(ASSET_DIR_PATH);
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: "check.php?action=checkEditable" + r,
			dataType		: 'json',
			success			: function(data) {
				_callback(data);
			},
			error : function(data) { _callback_e(data.responseText); }
		});
	}
	function checkWAF(_callback,_callback_e) {
		var param = {}
			param.action = 'waf';
			param.text = '<script type="text/javascript" src=""></script>'
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: "check.php",
			data			: param,
			dataType		: 'json',
			success			: function(data) {
				_callback(data);
			},
			error : function(data) { 
				window.IS_ESCAPE_WAF = true;
				_callback(data);
				// _callback_e(data.responseText);
			}
		});
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
	}
	var callback = true;
	function stageIn(_callback){
		if(window.IS_CHECK_ENV != true){
			_callback();
			return;
		}
		if(! isOpen){ isOpen = true;
			callback = _callback
			if(isFirst){
				createlayout();
				setBtn();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();


var CMS_LoginView = (function(){
	var view;
	var v = {};
	var useLogin = true;
	
	function init(){
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		getLoginState(function(_s){
			if(_s == "0")showLoginView();
			if(_s == "1")logined();
			if(_s == "2"){
				useLogin = false;
				logined();
			}
		});
	}
	
	function setBtn(){
	}
	
	function getLoginState(_callback) {
		var url = CMS_Path.PHP_LOGIN;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url+"?action=state",
			dataType		: 'json',
			success			: function(data) {
				_callback(data.status);
			},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		});
	}
	
	function logined(){
		callback();
		setInterval(function(){
			updateLoginState();
		},1000*60*5);
	}
	
	/* ---------- ---------- ---------- */
	
	function showLoginView(){
		var tag = "";
			tag += '<div id="CMS_LoginView">';
			tag += '	<div class="_title">'+SITE_NAME+'</div>';
			tag += '	<div class="_read">Powered by JS CMS version '+CMS_INFO.version +' <i class=" fa fa-info-circle"></i> '+CMS_INFO.loginAbout+'</div>';
			tag += '	<table>';
			tag += '	<tr><th>ID</th><td><input type="text" class="_in_login_u" /></td></tr>';
			tag += '	<tr><th>PASS</th><td><input type="password" class="_in_login_p" /></td></tr>';
			tag += '	<tr><th></th><td>'
			tag += '		<div class="_cms_btn_alpha _btn_memori_ac"><i class="fa fa-check-square "></i> ID PASSを保存する</div>'
			tag += '		<div class="_cms_btn_alpha _btn_memori"><i class="fa fa-square-o "></i> ID PASSを保存する</div>'
			tag += '	</td></tr>';
			tag += '	<tr><td></td><td><div class="_cms_btn_alpha _btn_login">LOGIN</div></td></tr>';
			tag += '	<tr><td></td><td><div class="_t_message"></div></td></tr>';
			tag += '	</table>';
			tag += '</div>';
		$("body").html(tag);
		view = $('#CMS_LoginView');
		view.show();
		v.btn_login = view.find('._btn_login');
		v.in_login_u = view.find('._in_login_u');
		v.in_login_p = view.find('._in_login_p');
		v.t_message = view.find('._t_message');

		v.btn_login.click(function(){ 
			var id = v.in_login_u.val();
			var ps = v.in_login_p.val();
			login(id,ps);
		});
		
		setMemoriInit()
	}
		
	/* ---------- ---------- ---------- */
	var isSaveLoginInfo = "1"
	function setMemoriInit() {
		if(localStorage["isSaveLoginInfo"]) isSaveLoginInfo = localStorage["isSaveLoginInfo"];
		v.btn_memori_ac = view.find('._btn_memori_ac');
		v.btn_memori = view.find('._btn_memori');	
		v.btn_memori_ac.click(function(){ setMemori("0")});
		v.btn_memori.click(function(){ setMemori("1")});
		setMemori(isSaveLoginInfo);
		
		if(isSaveLoginInfo != "0"){
			var ids = ["",""];
			if(localStorage["saveLoginInfo"]) ids =JSON.parse(localStorage["saveLoginInfo"]);
			v.in_login_u.val(ids[0]);
			v.in_login_p.val(ids[1]);
		}
	}
	function setMemori(_b) {
		v.btn_memori.hide()
		v.btn_memori_ac.hide()
		if(_b == "0"){
			v.btn_memori.show()
		} else{
			v.btn_memori_ac.show()
		}
		localStorage["isSaveLoginInfo"] = _b;
	}
	function setMemoriInfo(_id,_ps) {
		var a = ["",""]
		if(isSaveLoginInfo) a = JSON.stringify([_id,_ps]);
		localStorage["saveLoginInfo"] = a;
	}
	
	/* ---------- ---------- ---------- */
	
	function login(_u,_p) {
		setMemoriInfo(_u,_p);
		var url = CMS_Path.PHP_LOGIN;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url + "?action=login",
			data			: {u:_u,p:_p},
			dataType		: 'json',
			success			: function(data) {login_comp(data) },
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		})
	}
	function login_comp(_json){
		if(_json.status == 1){
			stageOut();
			callback();
		} else{
			v.t_message.html("ID、もしくはPASSが正しくありません");
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function updateLoginState() {
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: "login.php?action=state",
			dataType		: 'json',
			success			: function(data) {
				//
			}
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function getLogout() {
		return useLogin
	}
	function logout() {
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: CMS_Path.PHP_LOGIN + "?action=logout",
			dataType		: 'json',
			success			: function(data) {
				location.reload();
			}
		})
	}

	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		//view.hide();
	}
	var callback = true;
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			//view.show();
			callback = _callback
			if(isFirst){
				createlayout();
				setBtn();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			//view.hide();
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		getLogout: getLogout,
		logout: logout
	}
})();


var CMS_InitController = (function(){
	
	function init(){
		//ブラウザ分岐
		if( Env_.isIE9) $("body").addClass("_ie9");
		if(Env_.isChrome || Env_.isIE9|| Env_.isIE10 || Env_.isIE11){
			CMS_PathFunc	.init();
			CMS_KeyManager	.init();
			CMS_History		.init();
			CMS_CheckedView	.init();
			CMS_CheckedView	.stageIn(login);
		} else{
			NO_CMS.init()	
			NO_CMS.stageIn();
		}
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	//ログイン
	
	function login(){
		CMS_LoginView.init()
		CMS_LoginView.stageIn(logined);
	}
	
	function logined(){
		//設定データでダミー処理がはいるので、先に初期化
		DummyImageService.init();
		
		//設定データロード
		CMS_Data.Loader.start(checked);
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	//ログイン後処理
	
	function checked(){
		var tag = "";
			tag += '<div id="CMS_RootView">';
			
			//コアビュー
			tag += '	<div id="CMS_SidePreview" ></div>';
			tag += '	<div id="CMS_SidePreviewClose"></div>';
			
			tag += '	<div id="CMS_Header"></div>';
			tag += '	<div id="CMS_HeaderRight"></div>';
			
			tag += '	<div id="CMS_PageStage"></div>';
			
			tag += '	<div id="CMS_AssetStageSideBG"><span></span></div>';
			tag += '	<div id="CMS_AssetStageBG"></div>';
			tag += '	<div id="CMS_AssetStage"></div>';
			tag += '	<div id="CMS_AssetStageCloseBG"></div>';
			tag += '	<div id="CMS_AssetStageClose"></div>';
			tag += '	<div id="CMS_AssetStageResizeView"></div>';
			
			tag += '	<div id="CMS_PagesView_DisableView"></div>';
			tag += '	<div id="CMS_LOCK"></div>';
			
			//ダイアログ系
			tag += '	<div id="CMS_AlertView"			class="_modalView"></div>';
			tag += '	<div id="CMS_AlertLockView"		class="_modalView"></div>';
			tag += '	<div id="CMS_ConfirmView"		class="_modalView"></div>';
			tag += '	<div id="CMS_CopyView"			class="_modalView"></div>';
			tag += '	<div id="CMS_InputView"			class="_modalView"></div>';
			tag += '	<div id="CMS_ProccessView"		class="_modalView"></div>';
			tag += '	<div id="CMS_ErrorView"			class="_modalView"></div>';
			
			//編集画面
			tag += '	<div id="GridDetailView"		class="_modalView"></div>';
			tag += '	<div id="SubPageView"			class="_modalView"></div>';
			
			//フロート
			tag += '	<div id="InspectView"></div>';
			tag += '	<div id="Float_Preview"></div>';
			tag += '	<div id="SimpleToolTip"></div>';
			tag += '	<div id="Float_DateInputView"></div>';
			tag += '	<div id="FreeLayoutInfoView"></div>';
			
			//エディター
			tag += '	<div id="MiniEditer"></div>';
			tag += '	<div id="Editer_JSONView" 		class="_modalView"></div>';
			tag += '	<div id="Editer_TAGView" 		class="_modalView"></div>';
			tag += '	<div id="Editer_TextView" 		class="_modalView"></div>';
			tag += '	<div id="Editer_ExcelView" 		class="_modalView"></div>';
			tag += '	<div id="Editer_CodeCopyView" 	class="_modalView"></div>';
			
			tag += '	<div id="Anchor_InputView" 		class="_modalView"></div>';
			tag += '	<div id="Anchor_BtnView" 		class="_modalView"></div>';
			tag += '	<div id="Anchor_PageListView" 	class="_modalView"></div>';
			tag += '	<div id="Anchor_TargetListView" class="_modalView"></div>';
			
			tag += '	<div id="Preset_IconView" 		class="_modalView"></div>';
			tag += '	<div id="ServerInfoView" 		class="_modalView"></div>';
			
			tag += '	<div id="DirListView" 			class="_modalView"></div>';
			tag += '	<div id="DirTreeViewTest" 		class="_modalView"></div>';
			tag += '	<div id="BackupView" 			class="_modalView"></div>';
			tag += '	<div id="DummyImageView" 		class="_modalView"></div>';
			tag += '	<div id="SitemapEditView" 		class="_modalView"></div>';
			
			tag += '	<div id="FileInfoView"			class="_modalView _modalView-nomargin"></div>';
			tag += '	<div id="GadgetListView" 		class="_modalView"></div>';
			
			tag += '	<div id="PresetStageView" 		></div>';
			
			tag += '	<div id="EmbedTagListView" 	class="_modalView"></div>';
			tag += '	<div id="ImageMapView"></div>';
			tag += '	<div id="ImageMapInspectView"></div>';
			tag += '	<div id="CMS_GuideView" 		></div>';
			//
			tag += '	<div id="TreeViewMakerView" 	class="_modalView"></div>';
			tag += '	<div id="TreeViewMakerViewEditor" ></div>';
			tag += '	<div id="BatchPublishView" 		class="_modalView"></div>';
			tag += '	<div id="InputCnadidate"></div>';
			tag += '	<div id="ColorPickerView"></div>';
			
			tag += '	<div id="FormCandidates"></div>';
			// tag += '	<div id="SelectingBlockView"></div>';
			tag += '	<div id="CMS_DemoView">デモモード<span>保存・公開はできません</span></div>';
			tag += '</div>';
		$("body").append(tag);
		$("._loading").hide();
		
		if(Env_.isWin){
			$("body").addClass("_windows");
		}
		initViews();
	}
	
	//各ビューの初期化
	function initViews(){
		if(IS_DEMO)$('#CMS_DemoView').show();
		//
		var cs = [
			CMS_RootView,
			CMS_Header,
			CMS_AlertView,
			CMS_AlertLockView,
			CMS_ConfirmView,
			CMS_CopyView,
			CMS_InputView,
			CMS_ProccessView,
			CMS_ErrorView,
			CMS_LOCK,
			
			CMS_ScreenManager,
			CMS_SizeManager,
			CMS_SidePreview,
			CMS_SidePreviewClose,
			
			CMS_Data,
			FormCandidates,
			
			/* ---------- ---------- ---------- */

			CMS_PageStage,
			CMS_AssetStage,
			
			
			/* ---------- ---------- ---------- */

			FileInfoView,
			GadgetListView,
			PresetStageView,
			EmbedTagListView,
			ImageMapView,
			//
			InspectView,
			Float_Preview,
			SimpleToolTip,
			Float_DateInputView,
			FreeLayoutInfoView,
			//
			MiniEditer,
			Editer_TAGView,
			Editer_JSONView,
			Editer_ExcelView,
			Editer_CodeCopyView,
			
			Anchor_InputView,
			Anchor_BtnView,
			Anchor_PageListView,
			Anchor_TargetListView,
			Preset_IconView,
			ServerInfoView,
			
			SitemapEditView,
			DirListView,
			BackupView,
			DirTreeViewTest,
			
			CMS_GuideView,
			
			DummyImageView,
			
			TreeViewMakerView,
			TreeViewMakerViewEditor,
			
			BatchPublishView,
			InputCnadidate,
			ColorPickerView,
			
			CMS_FormU,
			CMS_StageController,
		];
		//初期化
		for (var i = 0; i < cs.length ; i++) { cs[i].init(); }
		
		//サイトマップロードあとに、メインコントローラ呼び出し
		CMS_Data.Sitemap.load(function(){
			CMS_MainController.init();
		});
		
		if(window.location.hash == "#publish_all"){
			if(USE_EDIT_LOCK) CMS_LOCK.setIsLocked(false);
			setTimeout(function(){
				$("._btn_publish_all").eq(0).click();$('._btn_start').click();
			},1000);
		}
	}
	
	return {
		init: init
	}
})();
	
/**
 * メインのコントーローラ
 * 重要な操作は、このコントローラを経由する
 */

var CMS_MainController = (function(){

	/* ---------- ---------- ---------- */
	
	//初期時
	function init(){
		//URLハッシュチェック
		init_core(CMS_History.getInitParam(),500);
		CMS_ModalManager.init();
		CMS_RootView.stageIn();
		CMS_PageStage.stageIn();
		CMS_AssetStageClose.stageIn();
	}
	
	function init_core(state,_delay){
		var param = CMS_Data.Sitemap.getData_by_id(state.id,state.dir);
		
		//Myタグの場合
		if(!param){
			if(state.dir == Dic.DirName.MYTAG){
				param = CMS_Data.MyTag.getParam_by_ID(state.id);
			}
		}
		if(param){
			setTimeout(function(){
				openPage(param,false);
			},_delay);
		} else{
			openIntroPage();
		}
	}
	
	//ガイドビューからコールされる
	function openPage_by_hash(_s){
		var state = "/" + _s.split("#").join("");
		var param = CMS_Path.PAGE.getAbsPath_reverse(state);
		init_core(param,100);
	}
	
	//イントロビュー
	function openIntroPage(){
		CMS_PagesView.stageOut();
		if(_currentBtn) _currentBtn.removeClass("_active");
		CMS_IntroView.stageIn();
	}
	
	//テストからコールされる
	// CMS_MainController.openPage_for_test("html/company_outline.html")
	// CMS_MainController.openPage_for_test("html/products.html")
	function openPage_for_test(_s){
		var state = CMS_Path.PAGE.getAbsPath_reverse("/" + _s);
		var param = CMS_Data.Sitemap.getData_by_id(state.id,state.dir);
		openPage(param);
	}
	
	//ID指定でページを開く。sitemapや、検索リストからコールされる
	function openPage_by_id(_id,_dir){
		var param = CMS_Data.Sitemap.getData_by_id(_id,_dir);
		if(param){
			openPage(param);
		} else{
			openIntroPage();
		}
	}
	
	/**
	 * ページを開く
	 * 
	 * 基本的に、サイトマップからコールされるが、戻るボタンなどからも、コールされる
	 * 
	 * @_param ページパラメータ
	 * @_addHistory 履歴に追加するか
	 */
	var isOpening = false;
	function openPage(_param,_addHistory){
		if(isOpening) return;
		isOpening = true;
		 if(isLog) console.log("●CMS_MainController.openPage()" , _param);
		if(_addHistory == undefined)_addHistory = true;
		CMS_ScreenManager.memoryCurrentScroll();
		
		//履歴追加
		if(_addHistory && _param != null) CMS_History.addPage(_param);
		
		//パラメータなければ、イントロビュー表示
		if(_param == null) openIntroPage();
		
		//表示初期化
		hideFloatView();
		CMS_IntroView.stageOut();
		CMS_PagesView.stageOut();
	
		//ボタンアクティブ処理
		_updateBtn(_param);
		
		//JSブロックのプレビュー用
		HTML_ExportState.setCurrent({id: _param.id, dir: _param.dir});
		
		//メイン処理
		CMS_PagesView.stageIn(_param);
		CMS_PageListViewSearch.openPage_(_currentBtn);
	}
	
	//Myタグ設定ページを開く
	function openPageSetting(_no){
		openPage( Dic.MyTagList[_no] );
	}
	
	/* ---------- ---------- ---------- */
	
	var _currentBtn;
	function _updateBtn(_param){
		if(_currentBtn) _currentBtn.removeClass("_active");
		_currentBtn = $("#"+CMS_PageID.getID(_param.id,_param.dir))
		_currentBtn.addClass("_active");
		_currentBtn.addClass("_opened");
	}
	
	/* ---------- ---------- ---------- */
	
	//リセット用
	function removePage(_id,_dir){
		CMS_PagesView.removePage(_id,_dir);
		CMS_PageDB.removePage(_id,_dir);
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//ページステートが変化したらコールされる
	
	//ページを開いたとき
	function openedPage(_page){
		isOpening = false;
		CMS_PageDB.setCurrent(_page);
	}
	function openedPage2(_page){
		CMS_LivePreviewController.openedPage();
		CMS_ScreenManager.setCurrentScroll(_page);
		//MEMO openedPage,openedPage2と分割してる理由
		// ページ表示時に、ローカルなMyタグを表示するときに、
		// 分割しないと初期表示がうまくいかないので分割
	}
	
	//ページ内の要素を編集したとき（しょっちゅうコールされる）
	function editedPage(_id,_dir){
		CMS_PageDB.editedPage();
		CMS_LivePreviewController.editedPage();	
		CMS_PageList_StateManager.editedPage(_id,_dir);
	}
	
	//ページを保存したとき
	function savedPage(_id,_dir){
		if(! CMS_PageDB.hasCurrent())return;
		//
		CMS_PageDB.savedPage();
		CMS_LivePreviewController.savedPage();	
		CMS_PageList_StateManager.savedPage(_id,_dir);
		
		CMS_Data.MyTag.savedPage(_id,_dir);
	}
	
	//ページを公開したとき
	function publishedPage(_id,_dir){
		if(! CMS_PageDB.hasCurrent())return;
		//
		CMS_PageDB.publishedPage();
		CMS_LivePreviewController.publishedPage();
		CMS_PageList_StateManager.publishedPage(_id,_dir);
	}
	//公開削除したとき
	function unPublishedPage(_id,_dir){
		CMS_PageList_StateManager.unPublishedPage(_id,_dir);
	}
	
	//ページリストから、ページ保存
	function savePageByID(_id,_dir){
		CMS_PagesView.savePageByID(_id,_dir);
	}
	
	/* ---------- ---------- ---------- */
	//アセット関連
	
	//そのままアセットへリレー
	function openAssetSelect(_type,_path,_cb){ CMS_AssetStage.openAssetSelect(_type,_path,_cb); }
	function openAssetSelectRel(_type,_path,_cb){ 
		var s = CMS_Path.SITE.REL + _path;
		CMS_AssetStage.openAssetSelect(_type,s,function(_s){
			_cb(_s.split(CMS_Path.SITE.REL).join(""));
		});
	}
	function openAssetFile(_path)			{ CMS_AssetStage.openAssetFile(_path); }
	function openPresetCSSFile(_key)		{ CMS_AssetStage.openPresetCSSFile(_key) } 
	function openTemplateHTMLFile(_file)	{ CMS_AssetStage.openTemplateHTMLFile(_file) }
	function openMyTagFile(_file)			{ CMS_AssetStage.openMyTagFile(_file) }
	function openUploadDir()				{ CMS_AssetStage.openUploadDir() }
	function openCMSSetting(_s)				{ CMS_AssetStage.openCMSSetting(_s) }
	 
	//アセットで選択したブロックをページへ追加
	function addAssetToPage(_u){
		_u = _u.split(CMS_Path.SITE.REL).join("");
		UpdateDelay.delay(function(){
			if( FileU.isImageFile(_u) ){
				window.addBlock("tag.img",{url:_u });
			} else{
				window.addBlock("tag.btn",{url:_u });
			}
		});
	}
	
	//
	function addTextToPage(_s){
		addBlockToPage("tag.p",{text:_s });
	}
	function addHinagataToPage(_id){
		window.addBlock("object.hinagata",{id:_id });
	}
	function addBlockToPage(_type,_param){
		window.addBlock(_type,_param);
	}
	
	/* ---------- ---------- ---------- */
	//
	function closeInspectView(){
		InspectView.stageOut();
	}
	
	/* ---------- ---------- ---------- */

	return {
		init: init,
		openIntroPage: openIntroPage,
		removePage: removePage,
		openPage_for_test: openPage_for_test,
		openPage_by_hash: openPage_by_hash,
		openPage_by_id: openPage_by_id,
		openPage: openPage,
		openPageSetting: openPageSetting,
		//
		openedPage: openedPage,
		openedPage2: openedPage2,
		editedPage: editedPage,
		savedPage: savedPage,
		publishedPage: publishedPage,
		unPublishedPage: unPublishedPage,
		//
		savePageByID: savePageByID,
		//
		openAssetSelect: openAssetSelect,
		openAssetSelectRel: openAssetSelectRel,
		openAssetFile: openAssetFile,
		openPresetCSSFile: openPresetCSSFile,
		openTemplateHTMLFile: openTemplateHTMLFile,
		openMyTagFile: openMyTagFile,
		openUploadDir: openUploadDir,
		openCMSSetting: openCMSSetting,
		
		addAssetToPage: addAssetToPage,
		addTextToPage: addTextToPage,
		addHinagataToPage: addHinagataToPage,
		addBlockToPage: addBlockToPage,
		
		closeInspectView: closeInspectView
		
	}
})();





var CMS_LivePreviewController = (function(){
	
	//ページ開いた時にコールされる
	
	function openedPage(){
		if(! CMS_PageDB.hasCurrent())return;
		CMS_SidePreview.openedPage();
	}
	
	//ページ更新があったら、コールされる
	//ブロック操作時、保存時など
	function editedPage(_delay){
		if(! CMS_PageDB.hasCurrent())return;
		CMS_SidePreview.editedPage(_delay);
	}
	
	//保存時にコールされる
	function savedPage(){
		if(! CMS_PageDB.hasCurrent())return;
		CMS_SidePreview.savedPage();
	}
	function publishedPage(){
		if(! CMS_PageDB.hasCurrent())return;
		CMS_SidePreview.publishedPage();
	}
 
	return {
		openedPage: openedPage,
		editedPage: editedPage,
		savedPage: savedPage,
		publishedPage: publishedPage
	}
})();

//全体のレイアウトを管理する

var CMS_StageController = (function(){
	var v = {};
	
	function init(){
		v.body 			= $("body");
		v.mainStage 	= $("#CMS_PageStage");
		v.mainStageC 	= $("#CMS_PagesView_DisableView");
		v.header 		= $("#CMS_Header");
		v.headerR 		= $('#CMS_HeaderRight');
		v.right 		= $("#CMS_SidePreview");
		v.asset 		= $("#CMS_AssetStage");
		v.assetSBG 		= $("#CMS_AssetStageSideBG");
		v.assetC 		= $("#CMS_AssetStageClose");
		v.preBottom 	= $("#CMS_SidePreviewClose ._bottom");
		
		var state = Storage.Memo.getPreviewState();
		currentS = parseInt(state[0]);
		currentWs = state[1].split(",");
		var ww = 0
		for (var i = 0; i <  currentWs.length ; i++) {
			ww += Number(currentWs[i])*(currentS/100);
		}
		setSideW(ww);
		initView();
		
		CMS_ScreenManager.registResize(function(){resize();})
	}
	
	/* ---------- ---------- ---------- */

	function initView(){
		if(Storage.Memo.getPreviewVisible() == "1"){
			openPreviewStage(true);
		} else{
			openPreviewStage(false);
		}
	}
	var isOpenPreviewStage = false
	// function openPreviewStageToggle(){
	// 	openPreviewStage((isOpenPreviewStage) ? false: true);
	// }
	function openPreviewStage(_b){
		if(_b){
			// v.body.addClass("_sidePreview");
			isOpenPreviewStage = true;
			CMS_SidePreview.stageIn();
			CMS_SidePreviewClose.stageOut();
			Storage.Memo.setPreviewVisible("1");
		} else{
			// v.body.removeClass("_sidePreview");
			isOpenPreviewStage = false;
			CMS_SidePreview.stageOut();
			CMS_SidePreviewClose.stageIn();
			Storage.Memo.setPreviewVisible("0");
		}
		update();
	}
	
	/* ---------- ---------- ---------- */
	//アセット
	
	var isOpenAssetStage = false
	function openAssetStage(_b){
		isOpenAssetStage = _b;
		isAssetFull = false;
		update();
	}
	
	var isSettingSelectStage = false;
	function openSettingSelectStage(_b){
		isSettingSelectStage = _b;
		isOpenAssetStage = _b;
		update();
	}
	
	var isAssetFull = false;
	var isPrevAssetOpen = false
	// var isPrevPreviewOpen = false
	function openSettingFull(_b){
		isAssetFull = _b;
		//アセットひらいてたか
		if(_b) {
			isPrevAssetOpen = isOpenAssetStage;
			isOpenAssetStage = true;
		} else{
			isOpenAssetStage = isPrevAssetOpen;
		}
		//サイドプレビュー開いてたか
		// if(_b) {
		// 	isPrevPreviewOpen = isOpenPreviewStage;
		// 	isOpenPreviewStage = false;
		// } else{
		// 	isOpenPreviewStage = isPrevPreviewOpen;
		// }
		update();
	}
	var asset_update_cb;
	function registAssetCallback(_cb){
		asset_update_cb = _cb;
	}
	
	/* ---------- ---------- ---------- */

	function setSideW(_w){
		currentSideW = _w
		update()
	}
	function update(){
		updateAssetView();
		updateW();
		updateH();
		resize();
		if(asset_update_cb) asset_update_cb(isAssetFull);
	}
	
	function updateAssetView(){
		if(isOpenAssetStage){
			CMS_AssetStage.stageIn();
		} else{
			CMS_AssetStage.stageOut();
		}
	}
	
	//幅
	var currentSideW = 250;
	var minW = 250;
	function updateW(){
		var w = 0;
		if(isOpenPreviewStage){
			if(currentSideW < minW ) currentSideW = minW;
			w = currentSideW;
		} else {
			w = 40;
		}
		v.header.css("right",w);
		v.headerR.css("width",w);
		v.mainStage.css("right",w);
		v.right.css("width",currentSideW);
		//
		if(isSettingSelectStage){
			v.asset.css("right",0);
			v.assetC.css("right",0);
		} else{
			v.asset.css("right",w);
			v.assetC.css("right",w);
		}
	}
	
	//高さ
	var currentSettingH = 500;
	var minH = 100;
	function updateH(){
		var h = 0;
		if(isOpenAssetStage){
			if(currentSettingH < minH ) currentSettingH = minH;
			h = currentSettingH;
		} else {
			h = 40;
		}
		if(isAssetFull){
			v.body.addClass("_assetStageFull");
			v.mainStage.css("bottom","0");
			v.mainStageC.css("bottom","0");
			v.asset.css("height","auto");
			v.assetSBG.css("height","auto");
			v.preBottom.css("height","auto");
		} else{
			v.body.removeClass("_assetStageFull");
			v.mainStage.css("bottom",h);
			v.mainStageC.css("bottom",h);
			v.asset.css("height",h);
			v.assetSBG.css("height",h);
			v.preBottom.css("height",h);
		}
	}
	
	var prevHeight = 500;
	
	/* ---------- ---------- ---------- */
	
	function offsetY(_y){
		currentSettingH = CMS_StatusH - ( _y );
		update();
	}
	/* ---------- ---------- ---------- */

	var cbs = []
	function registResize(_cb){
		cbs.push(_cb);
	}
	/* ---------- ---------- ---------- */


	var tID;
	function resize(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			resize_core()
		},200);
	}
	function resize_core(){
		for (var i = 0; i <  cbs.length ; i++) {
			cbs[i]();
		}
	}

	/* ---------- ---------- ---------- */
	
	return {
		init: init,
		// openPreviewStageToggle: openPreviewStageToggle,
		openPreviewStage: openPreviewStage,
		
		openAssetStage: openAssetStage,
		openSettingFull: openSettingFull,
		openSettingSelectStage: openSettingSelectStage,
		registAssetCallback: registAssetCallback,
		
		setSideW: setSideW,
		offsetY: offsetY,
		
		registResize: registResize
	}
})();



function showModalView(_v){ CMS_ModalManager.showModalView(_v) }
function hideModalView(){ CMS_ModalManager.hideModalView() }
function hideFloatView(){ CMS_ModalManager.hideFloatView() }

//ショートカットキーで、モーダル時にはスルーするように管理
var CMS_ModalManager = (function() {

	var modalStac = 0;
	var isFocus = false;

	function init() {
		var tar = "#InspectView textarea, #InspectView input";
		$(document).on("focus" ,tar,function(){
			isFocus = true;
			update()
		})
		$(document).on("blur" ,tar,function(){
			isFocus = false;
			update()
		})
	}
	// var currentPageType = ""
	// function setEditPageType(_type) {
	// 	currentPageType = _type;
	// }
	
	/* ---------- ---------- ---------- */
	
	var currents = [];
	function showModalView(_view) {
		currents.push(_view);
		hideFloatView();
		modalStac++;
		update();
	}

	function hideModalView() {
		hideFloatView()
		modalStac--;
		currents.pop();
		update();
	}
	function update() {
	}
	function isModal() {
		return(modalStac > 0)
	}
	function isNotModal() {
		if(modalStac == 0){
			if(isFocus == false){
				return true;
			}
		}
		return false;
	}

	function closeModal() {
		if(currents.length == 0)return;
		if (!currents[currents.length-1]) return;
		var currentView = currents[currents.length-1]
		if(currentView["compliteEdit"]) {
			currentView.compliteEdit();
			return;
		}
		if(currentView["stageOut"]) {
			currentView.stageOut();
			return;
		}
	}
	
	function hideFloatView() {
		if (window["Float_DateInputView"]) Float_DateInputView.stageOut();
		if (window["CMS_GuideView"]) CMS_GuideView.stageOut();
		if (window["FreeLayoutInfoView"]) FreeLayoutInfoView.stageOut();
	}
	/* ---------- ---------- ---------- */

	return {
		init: init,
		// setEditPageType: setEditPageType,
		showModalView: showModalView,
		hideModalView: hideModalView,
		hideFloatView: hideFloatView,
		isModal: isModal,
		isNotModal: isNotModal,
		closeModal: closeModal
	}
})();

/**
 * フリーレイアウト時のレイアウト幅を管理する
*/

var CMS_SizeManager = (function() {

	var currentW = "";
	var n100P = "100%";
	
	function init() { }
	
	//ページを開いた時にコールされる
	function getTag_FreePageBar() {
		return _getTag_FreePageBar_core(_getCurrentPageWide());
	}
	
	//ページ幅update時にコールされる
	function updateTag_FreePageBar() {
		return _getTag_FreePageBar_core(currentW);
	}
	function _getTag_FreePageBar_core(_w) {
		currentW = treat(_w);
		var icon = "";
			icon += '<svg viewBox="0 0 30 30" width="30px" height="30px">';
			icon += '	<g><path d="M 5 17 L 11 17 L 11 25 L 19 25 L 19 17 L 25 17 L 15 6 L 5 17 Z" fill="#5b77b1"/></g>';
			icon += '</svg>';
			
		var tag = ""
		if (currentW == n100P) {
			tag += '<div class="_sizeWap" style="left:auto;right:10px">';
			tag += '	<div class="_sizeBar">'+icon+'</div>';
			tag += '	<div class="_sizeText">コンテンツ幅：100% <i class="fa fa-caret-down "></i></div>';
		} else  {
			var w = Number(currentW) + 6;
			tag += '<div class="_sizeWap" style="left:' + w + 'px">';
			tag += '	<div class="_sizeBar">'+icon+'</div>';
			tag += '	<div class="_sizeText">コンテンツ幅：'+ currentW +'px <i class="fa fa-caret-down "></i></div>';
		}
			tag += '	<div class="_float">';
			tag += 			_sizeListTag();
			tag += '	</div>';
			tag += '</div>';
		
		return tag;
	}

	/**
	 * editableViewから呼ばれ、コンテンツ幅CSSを返す
	 */
	function getContentsWidth(_type) {
		if(_type == Dic.PageType.PRESET){
			return "width:" + _def()+"px";
		} else{
			return "width:" + _getUnitNum();
		}
	}

	function setWideInput() {
		var s = prompt("編集エリアの幅を入力してください(500px以上)。\n例) " + _def(), _def())
		if (s === null) return;
		if (isNaN(s)) return;
		if(Number(s) < 500) s= 500;
		currentW = s;
		_update();
	}
	
	function setWide100p() {
		currentW = n100P;
		_update();
	}
	
	function setWide(_s) {
		currentW = _s;
		_update();
	}
	
	function _update() {
		_setCurrentPageWide();
		var tar = EditableView.PageViewState.getCurretPage().view;
		if(tar){
			tar.find('._freeLayoutRoot > ._replaceArea').width( _getUnitNum() );
			tar.find('._memori_area').html(updateTag_FreePageBar());
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function _getUnitNum() {
		if(currentW == n100P){
			 return currentW;
		} else{
			return currentW +"px";
		}
	}
	/* ---------- ---------- ---------- */
	
	//保持
	function _setCurrentPageWide() {
		var page = CMS_PageDB.getCurrentPage();
		if(page){
			try{
				if(_def() == currentW){
					page.storageClass.storeData.meta.wide = "";
				} else{
					page.storageClass.storeData.meta.wide = currentW;
				}
				page.pageView.updateSubData();
			}catch( e ){}
		}
	}
	
	function _getCurrentPageWide() {
		var w = ""
		var page = CMS_PageDB.getCurrentPage();
		if(page){
			try{
				w = treat(page.storageClass.storeData.meta.wide);
			}catch( e ){}
		}
		return w;
	}
	
	/* ---------- ---------- ---------- */
	
	function _def() {
		return DEFAULT_PAGE_WIDES[0];
	}
	function _sizeListTag() {
		var tag = ""
		var wides = DEFAULT_PAGE_WIDES;
		for (var i = 0; i < wides.length ; i++) {
			tag += '		<div class="_btn" onclick="javascript:CMS_SizeManager.setWide('+wides[i]+');"><i class="fa fa-arrows-h "></i> 編集幅指定 : '+wides[i]+'px</div>';
		}
		tag += '		<div class="_btn" onclick="javascript:CMS_SizeManager.setWide100p();"><i class="fa fa-arrows-h "></i> 編集幅指定 : 100%</div>';
		tag += '		<div class="_btn" onclick="javascript:CMS_SizeManager.setWideInput();"><i class="fa fa-arrows-h "></i> 編集幅指定 : 自分で入力</div>';
		tag += 			CMS_GuideU.getGuideTag("setting/wide","コンテンツ幅について");
		return tag;
	}
	
	function treat(_s) {
		if(_s == n100P) return _s;
		var b = false;
		if(!_s) b = true;
		if(isNaN(_s)) b = true;
		if(Number(_s) < 500) b = true;
		if(b) return _def();
		return _s;
	}
	
	/* ---------- ---------- ---------- */

	return {
		init: init,
		getContentsWidth: getContentsWidth,
		getTag_FreePageBar: getTag_FreePageBar,
		
		setWideInput: setWideInput,
		setWide100p: setWide100p,
		setWide: setWide
	}
})();

/**
 * スクリーン情報管理
 * カンバスのリサイズや、高、幅などの管理を行う
 */
 
var CMS_StatusW;
var CMS_StatusH;
var CMS_ScreenManager			 = (function(){

	var MAX_W = 800
	var currentSubPageView;
	var v = {}
	function init(){
		
		CMS_StatusW = $(window).width();
		CMS_StatusH = $(window).height();
		if(CMS_StatusW < MAX_W)CMS_StatusW = MAX_W;
		
		//リアルタイムにマウス位置取得
		$(window).mousemove(function(e){
			CMS_Status.mouseX =e.clientX;
			CMS_Status.mouseY =e.clientY;
		});
		
		//リサイズ時に、画面サイズを更新
		$(window).resize(resize);
		
		v.stageView = $("#CMS_PagesView");
		v.sideView = $("#CMS_PageListView");
		
		v.sideView.scroll(function () {
			Storage.Memo.setSideMenuY(v.sideView.scrollTop());
		});
	}	
	
	/* ---------- ---------- ---------- */
	//リサイズイベント
	//CMS_ScreenManager.registResize
	var _winds = []
	function registResize(_f){
		_winds.push(_f)
	}	
	function setSubView(_view){
		currentSubPageView = _view
	}
	
	/* ---------- ---------- ---------- */
	
	var tID_re;
	function resize(e){
		//jqのresizableイベントに、windowリサイズも反応するため、
		//フィルターをかける
  		if (e.target == window){
			if(tID_re) clearTimeout(tID_re);
			tID_re = setTimeout(function(){
				resize_core()
			},200);
  		}
	}
	function resize_core(){
		CMS_StatusW = $(window).width();
		CMS_StatusH = $(window).height();
		if(CMS_StatusW < MAX_W)CMS_StatusW = MAX_W;
		
		if(currentSubPageView != null){
			currentSubPageView.resize();
		}
		for (var i = 0; i < _winds.length ; i++) {
			if(_winds[i]){
				_winds[i]();
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	/*
		ページに要素を追加、削除するときに、要素が一回リセットされ。
		ページ高さが0になるので、それを回避するため、
		一定作業ごとに、min-heigithを設定し、最低限の高さをほしょうする。
		ページ移動で、リセット
	*/
	var scrollView;
	function initCanvas(){
		scrollView = $('#CMS_PagesView');
	}
	var current;
	function memoryCurrentScroll(){
		if(!current) return;
		var c = _getScrollPage(current);
		c[1] = scrollView.scrollTop();
	}
	function setCurrentScroll(_param){
		if(!scrollView) initCanvas();
		var id = CMS_Path.PAGE.getAbsPath(_param.id,_param.dir);
		current = id;
		var r = _getScrollPage(id)[1];
		scrollView.scrollTop(r);
	}
	var scrolls = [];
	function _getScrollPage(_id){
		var b = false;
		var tar;
		for (var i = 0; i < scrolls.length ; i++) {
			if(scrolls[i][0] == _id) {
				tar = scrolls[i];
				b = true;
			}
		}
		if(!b){
			tar = [_id,0];
			scrolls.push(tar);
		}
		return tar;
	}
	
	/* ---------- ---------- ---------- */
	
	//ページのブロックを選択したとコールされる
	//スクロール位置の調整
	
	function updatePageScroll(_top,_smooth){
		if(_smooth == undefined) _smooth = true;
		var H = CMS_StatusH;
		var SC = v.stageView.scrollTop();
		var tarY = _top + SC;
		var currentY = H + SC;
		var b = false;
		if (tarY > currentY - 100) b = true;
		if (tarY < SC) b = true;
		
		if (b){
			tarY2 = tarY - (H / 2)
			if(_smooth){
				v.stageView.animate( {
					scrollTop:tarY2
				}, {  duration: 100});	
			} else{
				v.stageView.scrollTop(tarY2);
			}
			
		}
	}
	
	/* ---------- ---------- ---------- */
	
	return {
		init:init,
		setSubView:setSubView,
		registResize:registResize,
		memoryCurrentScroll:memoryCurrentScroll,
		setCurrentScroll:setCurrentScroll,
		updatePageScroll:updatePageScroll
	}
})();
//ショートカットキー管理

var CMS_KeyManager = (function(){
	var view;
	var v = {};
	var CK = 91;//17
	
	/* ---------- ---------- ---------- */

	function tooltip(_s,_d){
		var cmd = (Env_.isWin) ? "Ctrl": "Cmd";
		_s = _s.split("#").join(cmd);
		if(!_d){
			return ' data-ks-bottom="'+_s+'" ';
		}
		if(_d == "R"){
			return ' data-ks-right="'+_s+'" ';
		}
		if(_d == "T"){
			return ' data-ks-top="'+_s+'" ';
		}
		return ' ';
	}
	function tooltipT(_s){
		var cmd = (Env_.isWin) ? "Cmd": "Ctrl";
		return '<kbd>' + _s.split("#").join(cmd) + '</kbd>';
	}
	
	/* ---------- ---------- ---------- */

	function init(){
		
		window.TIP = tooltip;
		window.TIP2 = tooltipT;
		window.TIP_ENTER = TIP("#+Enter")
		//
		if(Env_.isWin ) CK = 17;
		window.isPressCommandKey = false;
		window.isPressShiftKey = false;
		$(document).keydown(function(event) {
			var KC = event.keyCode;
			//console.log(KC);
			var b = false;
			if(isPressCommandKey && isPressShiftKey){
				if(KC == 86){ b= true; do_("S_C_v");}//ペースト
			}
			
			if(isPressCommandKey && isPressShiftKey ==false){
				//ブロック操作のショートカットは、モーダルが表示されてないときだけ
				if(CMS_ModalManager.isNotModal()){
					if(editType == "" || editType == "preset"){
						if(KC == 68){ b= true; do_("C_d");}//複製
						if(KC == 67){ b= true; do_("C_c");}//コピー
						if(KC == 86){ b= true; do_("C_v");}//ペースト
						
						if(KC == 88){ b= true; do_("C_x");}//カット
						if(KC == 90){ b= true; do_("C_z");}//取り消し
						if(KC == 8 ){ b= true; do_("C_dell");}//削除
						if(KC == 73){ b= true; do_("C_i");}//プレビュートグル
						if(KC == 72){ b= true; do_("C_h");}//縮小表示
						
						if(KC == 37){ b= true; do_("C_left");}
						if(KC == 38){ b= true; do_("C_up");}
						if(KC == 39){ b= true; do_("C_right");}
						if(KC == 40){ b= true; do_("C_down");}
						if(KC == 109){ b= true; do_("C_minus");}
						if(KC == 107){ b= true; do_("C_plus");}
						if(KC == 13){ b= true; do_("C_Enter");}
						
						//保存とかはいつでも可能
						if(KC == 79){ b= true; do_("C_o");}//別ウィンドウで開く
						if(KC == 80){ b= true; do_("C_p");}//公開
						if(KC == 70){ b= true; do_("C_f");}//一覧ワイド表示
						
						//0,1-9
						if(KC == 49){ b= true; addBlock("tag.heading" ,"h1");}
						if(KC == 50){ b= true; addBlock("tag.heading" ,"h2");}
						if(KC == 51){ b= true; addBlock("tag.heading" ,"h3");}
						if(KC == 52){ b= true; addBlock("tag.heading" ,"h4");}
						if(KC == 53){ b= true; addBlock("tag.p");}
						if(KC == 54){ b= true; addBlock("tag.markdown");}
						if(KC == 55){ b= true; addBlock("tag.img");}
						if(KC == 56){ b= true; addBlock("tag.margin");}
						if(KC == 57){ b= true; addBlock("tag.btn");}
						if(KC == 48){ b= true; addBlock("layout.div");}
					}
				} else if( CMS_ModalManager.isModal() ){
					if(KC == 13){ b= true; do_("C_Enter_modal");}
				}
				//13...ENTER
				if(editType == "setting"){
					if(KC == 83){ b= true; do_("Se.C_s");}//保存
				} else if(editType == "preset"){
					if(KC == 83){ b= true; do_("Pre.C_s");}//保存
				} else {
					if(KC == 83){ b= true; do_("C_s");}//保存
				}
				if(KC == 76){ b= true; do_("C_l");}//更新ロック
				// if(KC == 91){ b= true; do_("C_t");}//タブ切り替え
			}
			// if(KC == 33){ b= true; do_("PAGE_UP");}
			// if(KC == 34){ b= true; do_("PAGE_DOWN");}
		
			if(!b){
				if(CMS_ModalManager.isNotModal()){
					if(editType == "" || editType == "preset"){
						if(KC == 38){ b= true; do_("up");}
						if(KC == 40){ b= true; do_("down");}
					}
				}
			}
			
			if(b){
				event.stopPropagation();
				event.preventDefault();
			}
			
			if(KC == CK){
				isPressCommandKey = true;
				if(CMS_ModalManager.isNotModal()){
				$("body").addClass("_pressCommandPage")
				}
			}
			if(event.shiftKey){
				isPressShiftKey = true;
			}
			if(KC == 122){
				do_("C_Full");
				return false;
			}
		});
		$(document).keyup(function(event) {
			var KC = event.keyCode;
			if(KC == CK){
				isPressCommandKey = false;
				$("body").removeClass("_pressCommandPage");
			}
			if(event.shiftKey == false){
				isPressShiftKey = false;
			}
		});
		
		registKey("PAGE_UP",function(){ })
		registKey("PAGE_DOWN",function(){ })
		
		registKey("Se.C_s"	,function(){ CMS_AssetStage.save(); })
		registKey("Pre.C_s"	,function(){ PresetStageView.save(); })
		
		registKey("C_s"		,function(){ CMS_PagesView.save(); })
		registKey("C_p"		,function(){ CMS_PagesView.publish(); })
		registKey("C_d"		,function(){ window.sc.duplicateCurrent(); })
		registKey("C_c"		,function(){ window.sc.copyCurrent(); })
		registKey("C_v"		,function(){ window.sc.pastCurrent(); })
		registKey("S_C_v"	,function(){ window.sc.pastCurrent2(); })
		registKey("C_x"		,function(){ window.sc.cutCurrent();})
		registKey("C_dell"	,function(){ window.sc.deleteCurrent(); })
		registKey("C_o"		,function(){ CMS_PagesView.openURL(); })
		
		registKey("C_i"		,function(){ CMS_PagesView.editMeta(); })
		
		registKey("C_z"		,function(){ CMS_PagesView.historyBack() })
		registKey("C_l"		,function(){ CMS_LOCK.setIsLocked_toggle() })
		registKey("C_left"	,function(){ CMS_PagesView_ZoomManager.zoomOut() })
		registKey("C_up"	,function(){ window.sc.moveUpCurrent() })
		registKey("C_right"	,function(){ CMS_PagesView_ZoomManager.zoomIn() })
		registKey("C_down"	,function(){ window.sc.moveDownCurrent() })
		
		registKey("up"		,function(){ window.sc.selectNodePrev() })
		registKey("down"	,function(){ window.sc.selectNodeNext() })
		registKey("C_Enter"	,function(){window.sc.dClick() })
		registKey("C_Enter"	,function(){enter();window.sc.dClick() })
		registKey("C_Enter_modal",function(){CMS_ModalManager.closeModal() })
		
		registKey("C_minus"	,function(){ })
		registKey("C_plus"	,function(){  })
		registKey("C_Full"	,function(){ window.editFullScreen() })
	}
	var keyOs = {}
	function registKey(_s,_callback){
		keyOs[_s] = _callback;
	}
	function do_(_s){
		if(keyOs[_s]){
			keyOs[_s]();
		}
	}
	function enter(){
		window.isFireEnterClick = true;
		var tID;
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			window.isFireEnterClick = false;
		},100);
	}
	
	var editType = ""
	var isF = true;
	function setType(_s){
		editType = _s;
		// if(isF){
		// v.log = $('<div style="position:fixed;top:0;left:0;background:#fff;padding:5px;z-index:200000;">_cms_log</div>')
		// 	$("body").append(v.log)
		// 	isF = false;
		// }
		// v.log.html(editType);
	}
	
	return {
		init:init,
		registKey:registKey,
		tooltip:tooltip,
		setType:setType
	}
})();


var CMS_Path = {}

//基本パスデータ管理
CMS_PathFunc = (function(){
	
	function init(_location){
		if(_location == undefined) _location = window.location.href;
		
		var absSett = getAbs(ASSET_DIR_PATH, SITE_DIR_PATH);
		var absDef = getAbs(DEFAULT_DIR_PATH, SITE_DIR_PATH);
		
		//SITE
		CMS_Path.SITE = {}
		CMS_Path.SITE.URL 		= _getBaseDir(_location,SITE_DIR_PATH);
		CMS_Path.SITE.DIR 		= URL_U.getCurrentDir(CMS_Path.SITE.URL,1).split("/").join("");
		CMS_Path.SITE.DOMAIN 	= URL_U.getDomain(CMS_Path.SITE.URL)
		CMS_Path.SITE.REL 		= SITE_DIR_PATH//CMSからみたサイトルート
		CMS_Path.SITE.REL_HTML 	= _getRelTop(DEFAULT_DIR_PATH)//HTMLディレクトリからみたサイトルート
		CMS_Path.SITE.ABS 		= "/"
		CMS_Path.SITE.ABS_PATH 	= window.location.pathname;
		
		//CMS
		CMS_Path.CMS = {}
		CMS_Path.CMS.ABS = URL_U.getCurrentDir(_location) +"/";
		CMS_Path.CMS.REL = URL_U.treatDirName(CMS_Path.SITE.REL + CMS_Path.CMS.ABS)
		
		//UPLOAD
		CMS_Path.UPLOAD = {}
		CMS_Path.UPLOAD.REL = UPLOAD_DIR_PATH;
		CMS_Path.UPLOAD.ABS = getAbs(UPLOAD_DIR_PATH , SITE_DIR_PATH);
		
		//BACKUP
		CMS_Path.BACKUP = {}
		CMS_Path.BACKUP.REL = BACKUP_DIR_PATH;
		CMS_Path.BACKUP.ABS = getAbs(BACKUP_DIR_PATH , SITE_DIR_PATH);
		
		//htmlファイルからみた、トップディレクトリへのパス
		CMS_Path.SITE.getTopRelPath_from_html = function (_dir){
			var s = ""
			if(_dir == undefined ) _dir= "";
			if(_dir == ""){
				s = CMS_Path.SITE.REL_HTML;
			} else if(_dir == "/"){
				s = "./"
			}else {
				_dir = _dir.split("//").join("/");
				var a = _dir.split("/")
				for (var i = 0; i < a.length ; i++) {
					if(a[i] != "") s += "../";
				}
			}
			return s;
		}
		
		/* ---------- ---------- ---------- */

		//MEDIA
		CMS_Path.MEDIA = {}
		CMS_Path.MEDIA.getImagePath = function (_path,_isPub,_isPreview){
			if(DummyImageService.isMock(_path)){
				if(_isPub){
					return "";
				} else {
					return DummyImageService.getImage(_path)
				}
			} else{
				return CMS_Path.MEDIA.getAnchorPath(_path,_isPub,_isPreview)
			}
		}
		CMS_Path.MEDIA.getPreviewImageTag = function (_path){
			return '<img src="' + CMS_Path.MEDIA.getImagePath(_path,false) +'">';
		}
		CMS_Path.MEDIA.getAnchorPath = function (_path,_isPub,_isPreview){
			
			if(typeof _path != "string"){ return "" }
			if(! _path) return "";
			if(_isPub == undefined) _isPub = true;
			if(_isPreview == undefined) _isPreview = false;
			
			//#ページ内リンクは、そのまま返す
			if(_path.charAt(0) == "#") return _path;
			
			//httpからの場合は、そのまま返す
			if(URL_U.isFullPath(_path)) return _path;
	
			_path = _path.split("/////").join("/");
			_path = _path.split("///").join("/");
			_path = _path.split("//").join("/");
			
			function _getPath (_s,_pub){
				var base = (_pub) ? CONST.SITE_DIR : CMS_Path.SITE.REL;
				var s = base + _s;
					s = s.split(base+"/").join(base);
				return s;
			}
			
			//絶対パス
			if(_path.charAt(0) == "/"){
				if(! _isPreview) {
					return _path;
				} else {
					//URLプレビュー
					_path = _path.substr(1,_path.length);
					if(_isPub){
						return CMS_Path.SITE.DOMAIN + _path;
					} else{
						return CMS_Path.SITE.REL + _path;
					}
				}
			}
			//相対パス
			if(_path.substr(0,2) == "./"){
				if(! _isPreview) {
					return _getPath(_path,_isPub);
				} else {
					//URLプレビュー
					return URL_U.joinURL(CMS_Path.SITE.URL,_path)
				}
			}
			if(_path.substr(0,2) == ".."){
				if(! _isPreview) {
					return _getPath(_path,_isPub);
				} else {
					//URLプレビュー
					if(_path.substr(0,3) == "../"){
						return URL_U.joinURL(CMS_Path.SITE.URL,_path)
					}
					return CMS_Path.SITE.URL
				}
			}
			return _getPath(_path,_isPub);
		}
		CMS_Path.MEDIA.getAnchorPath_deco = function (_path,_isPub){
			var path = CMS_Path.MEDIA.getAnchorPath(_path,true,true);
			var icon = (path.indexOf(CONST.SITE_DIR) != -1) ? Dic.I.External :"";
			path = path.split(CONST.SITE_DIR).join(CMS_Path.SITE.URL);
			var tar = _getTargetName(path);
			var s = path.split(_path).join("<span>" + _path + "</span>");
			return '<a href="'+path+'" target="'+tar+'">' + s + ' ' +icon+ '</a>' 
		}
		
		//PAGE 
		CMS_Path.PAGE = {}
		CMS_Path.PAGE.URL = URL_U.treatURL(CMS_Path.SITE.URL + absDef);
		CMS_Path.PAGE.REL = DEFAULT_DIR_PATH
		CMS_Path.PAGE.ABS = absDef;
		CMS_Path.PAGE.ABS2 = (function(_s){ 
			if(_s == "/")return _s;
		   if(_s.charAt(0) == "/") {
		   		return _s.substr(1,_s.length);
		   	}else{
		   		return _s;
		   }
		})(absDef);
		CMS_Path.PAGE.getAbsDirPath = function(_dir){
			_dir = URL_U.treatDirName(_dir)
			var dir = ""
			if(_dir !== "") {
				dir = _dir;
			} else{
				dir = CMS_Path.PAGE.ABS;
			}
			return dir;
		}
		CMS_Path.PAGE.getRelDirPath = function(_dir){
			_dir = URL_U.treatDirName(_dir)
			var s = ""
			if(_dir == ""){
				s = CMS_Path.PAGE.REL;
			} else{
				s = (CMS_Path.SITE.REL + _dir);
				s = s.split("//").join("/");
			}
			return s
		}
		CMS_Path.PAGE.getURL = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var u = CMS_Path.SITE.URL + CMS_Path.PAGE.getAbsPath(_id,_dir);
			return URL_U.treatURL(u);
		}
		CMS_Path.PAGE.getAbsPath_deco = function(_id,_dir,_type){
			var s = CMS_Path.PAGE.getAbsPath(_id,_dir,_type);
			var t = '<span class="_icon_dir_mini"></span><a href="{URL}" target="{TAR}">{T}</a>'
			var u = CMS_Path.PAGE.getRelPath(_id,_dir);
			t = t.split("{URL}").join(u);
			t = t.split("{TAR}").join(_getTargetName(u));
			t = t.split("{T}").join(URL_U.getBaseDir(s) + '<b>' + URL_U.getFileName(s) + '</b> ' +Dic.I.External)
			return t;
		}
		CMS_Path.PAGE.getAbsPath = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			if(!_id ) return "";
			var dir = ""
			if(_dir !== "") {
				dir = _dir;
			} else{
				dir = CMS_Path.PAGE.ABS;
			}
			var s = ""
				s = dir + _id + ".html";
			s = s.split("//").join("/");
			return s;
		}
		CMS_Path.PAGE.getAbsPath_reverse = function(_s){
			var a = _s.split("/")
			var dirs = []
			for (var i = 0; i <  a.length-1 ; i++) {
				dirs.push(a[i])
			}
			var fileName = URL_U.getFileName(_s)
			var id = fileName.split(".")[0]
			var dir = URL_U.treatDirName(dirs.join("/"));
			var type = Dic.PageType.PAGE;
			if(dir.indexOf(CMS_Path.PAGE.ABS) == "0") {
				if(dir == CMS_Path.PAGE.ABS) {
					dir = ""
				}else{
					if(CMS_Path.PAGE.ABS !="/"){
						dir = dir.split(CMS_Path.PAGE.ABS).join("")
						dir = dir.split("/").join("");
					}
				}
			}
			//root
			if(a.length == 2) dir = "/";
			//
			if(CMS_Path.PAGE.ABS == "/") {
				if(dir == "/") dir = "";
			}
			return { id: id, dir: dir, type: type };			
		}
		CMS_Path.PAGE.getRelPath = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var s = ""
			if(_dir == ""){
				s = CMS_Path.PAGE.REL + _id + ".html";
			} else{
				s = CMS_Path.SITE.REL + _dir + _id + ".html";
				s = s.split(".//").join("./");
			}
			return s;
		}
		
		//ASSET
		CMS_Path.ASSET = {}
		CMS_Path.ASSET.URL = URL_U.treatURL(CMS_Path.SITE.URL + absSett);
		CMS_Path.ASSET.REL = ASSET_DIR_PATH
		CMS_Path.ASSET.ABS = absSett;
		CMS_Path.ASSET.ABS2 = (function(_s){ 
			if(_s == "/")return _s;
		   if(_s.charAt(0) == "/") {
		   		return _s.substr(1,_s.length) 
		   	}else{
		   		return _s;
		   }
		})(absSett);
		CMS_Path.ASSET.getAbsDirPath = function(_dir){
			_dir = URL_U.treatDirName(_dir)
			var dir = ""
			if(_dir !== "") {
				dir = _dir;
			} else{
				dir = CMS_Path.ASSET.ABS;
			}
			return dir;
		}
		CMS_Path.ASSET.getRelDirPath = function(_dir){
			_dir = URL_U.treatDirName(_dir)
			var s = ""
			if(_dir == ""){
				s = CMS_Path.ASSET.REL;
			} else{
				s = (CMS_Path.SITE.REL + _dir);
				s = s.split("//").join("/");
			}
			return s
		}
		CMS_Path.ASSET.getURL = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var u = CMS_Path.SITE.URL + CMS_Path.ASSET.getAbsPath(_id,_dir);
			return URL_U.treatURL(u);
		}
		CMS_Path.ASSET.getAbsPath_deco = function(_id,_dir,_type){
			var s = CMS_Path.ASSET.getAbsPath(_id,_dir,_type);
			var t = '<span class="_icon_dir_mini"></span><a href="{URL}" target="{TAR}">{T} </a>'
			var u = CMS_Path.ASSET.getRelPath(_id,_dir,_type);
			t = t.split("{URL}").join(u);
			t = t.split("{TAR}").join(_getTargetName(u));
			t = t.split("{T}").join(URL_U.getBaseDir(s) + '<b>' + URL_U.getFileName(s) + '</b> '+Dic.I.External);
			return t
		}
		CMS_Path.ASSET.getAbsPath_deco_file = function(_id,_dir){
			var s = ( _dir + _id).split(CMS_Path.SITE.REL).join("/");
			var t = '<span class="_icon_dir_mini"></span><a href="{URL}" target="{TAR}">{T} </a>'
			var u =  _dir + _id;
			t = t.split("{URL}").join(u);
			t = t.split("{TAR}").join(_getTargetName(u));
			t = t.split("{T}").join(URL_U.getBaseDir(s) + '<b>' + URL_U.getFileName(s) + '</b> '+Dic.I.External);
			return t
		}
		CMS_Path.ASSET.getAbsPath = function(_id,_dir,_type){
			if(_type == undefined) _type = Dic.PageType.PAGE;
			_dir = URL_U.treatDirName(_dir)
			if(!_id ) return "";
			var dir = ""
			if(_dir !== "") {
				dir = _dir;
			} else{
				dir = CMS_Path.ASSET.ABS;
			}
			var s = ""
			if(_type == Dic.PageType.PAGE){
				s = dir + _id + ".html";
			}
			if(_type.indexOf("_cms_") == 0){
				s = CMS_Path.ASSET.ABS + dir + _id + ".json"
			}
			if(_type == Dic.PageType.FILE){
				s=  CMS_Path.ASSET.ABS + dir + _id;
			}
			s = s.split("//").join("/");
			return s;
		}
		CMS_Path.ASSET.getRelPath = function(_id,_dir,_type){
			if(_type == undefined) _type = Dic.PageType.PAGE;
			_dir = URL_U.treatDirName(_dir)
			var s = "";
			if(_type == "file"){
				s = CMS_Path.ASSET.REL + _dir + _id;
			} else {
				if(_dir == ""){
					s = CMS_Path.ASSET.REL + _id + ".html";
				} else{
					s = CMS_Path.SITE.REL + _dir + _id + ".html";
				}
			}
			s = s.split("//").join("/");
			if(_type.indexOf("_cms_") == 0){
				s = CMS_Path.ASSET.REL + _dir + "/" + _id + ".json";
			}
			return s;
		}
		
		//ASSETとPAGE分岐
		CMS_Path.ASSET_PAGE = {}
		CMS_Path.ASSET_PAGE.getAbsPath = function (_id,_dir,_type){
			if(_type == Dic.PageType.PAGE){
				return CMS_Path.PAGE.getAbsPath(_id,_dir);
			} else{
				return CMS_Path.ASSET.getAbsPath(_id,_dir,_type);
			}
		}

		/* ---------- ---------- ---------- */
		
		CMS_Path.JSON = {}
		CMS_Path.JSON.URL = CMS_Path.ASSET.URL + Dic.DirName.JSON +"/";
		CMS_Path.JSON.REL = CMS_Path.ASSET.REL + Dic.DirName.JSON +"/";
		CMS_Path.JSON.ABS = CMS_Path.ASSET.ABS + Dic.DirName.JSON +"/";
		CMS_Path.JSON.getRelDirPath = function(_type,_dir){
			_dir = URL_U.treatDirName(_dir)
			var s = ""
			if(_type == Dic.PageType.PAGE) s =  CMS_Path.JSON.REL;
			var seti = false
			if(_type == Dic.PageType.PRESET) seti = true;
			if(_type == Dic.PageType.CMS_MYTAG) seti = true;
			if(_type == Dic.PageType.SYSTEM) seti = true;
			if(seti){
				if(_dir != ""){
					if(_dir.indexOf("/") == -1) _dir += "/" ;
					s = CMS_Path.ASSET.REL + _dir;
					s = s.split("//").join("/");
				}
			}
			return s
		}
		CMS_Path.JSON.getURL = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var u = CMS_Path.SITE.URL + CMS_Path.JSON.getAbsPath(_id,_dir)
			return URL_U.treatURL(u);
		}
		CMS_Path.JSON.getAbsPath = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			if(!_id) return "";
			return CMS_Path.JSON.ABS + CMS_Path.JSON.getFileName(Dic.PageType.PAGE,_id,_dir);
		}
		CMS_Path.JSON.getRelPath = function(_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var ff = CMS_Path.JSON.getFileName(Dic.PageType.PAGE,_id,_dir);
			return CMS_Path.JSON.REL + ff;
		}
		CMS_Path.JSON.getFileName = function(_type,_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var r = CMS_Path.JSON.getFileName_core(_type,_id,_dir)
			return r
		}
		CMS_Path.JSON.getFileName_core = function(_type,_id,_dir){
			_dir = URL_U.treatDirName(_dir)
			var ex = ".json"
			if(_type == Dic.PageType.PRESET) return _id + ex
			if(_type == Dic.PageType.CMS_MYTAG) return _id + ex
			if(_type == Dic.PageType.SYSTEM) return _id + ex
			
			//special
			if(_dir == "") return "_html_." + _id  + ex
			if(_dir == "/")return "" + _id  + ex
			
			//先頭の/を削除
			if(_dir.substr(0,1) == "/") {
				_dir = _dir.substr(1,_dir.length-1)
			}
			//最後に/を追加
			if(_dir.substr(_dir.length-1,1) != "/") {
				_dir += "/"
			}
			var s = "";
				s += _dir.split("/").join(".");
				s += _id;
			return s  + ex;
		}

		/* ---------- ---------- ---------- */
		
		//JSON_REV 20160429 revision用
		CMS_Path.JSON_REV = {}
		CMS_Path.JSON_REV.URL = CMS_Path.ASSET.URL + Dic.DirName.JSON_REV +"/";
		CMS_Path.JSON_REV.REL = CMS_Path.ASSET.REL + Dic.DirName.JSON_REV +"/";
		CMS_Path.JSON_REV.ABS = CMS_Path.ASSET.ABS + Dic.DirName.JSON_REV +"/";
		CMS_Path.JSON_REV.getRelDirPath = function(_type,_dir,_date){
			var s = CMS_Path.JSON.getRelDirPath(_type,_dir);
				s = s.split("/"+Dic.DirName.JSON).join("/"+Dic.DirName.JSON_REV);
			return s;
		}
		CMS_Path.JSON_REV.getRelPath = function(_id,_dir,_date){
			_dir = URL_U.treatDirName(_dir)
			var ff = CMS_Path.JSON_REV.getFileName(Dic.PageType.PAGE,_id,_dir,_date);
			return CMS_Path.JSON_REV.REL + ff;
		}
		CMS_Path.JSON_REV.getFileName = function(_type,_id,_dir,_date){
			var s = CMS_Path.JSON.getFileName(_type,_id,_dir);
				s = s.split(".json").join("."+_date+".json");
			return s;
		}
		
		//PHP	
		CMS_Path.PHP_LOGIN 		 = "login.php";
		CMS_Path.PHP_FILEPATH 	 = "storage.php";
		CMS_Path.PHP_DIRECTORY 	 = "directory.php";
		CMS_Path.PHP_EMBED 		 = "embed.php";
		CMS_Path.PHP_UPLOAD 	 = "upload.php";
		CMS_Path.PHP_BACKUP 	 = "backup.php";
		
		//その他
		CMS_Path.PREVIEW_HTML 	 = "_cms_preview.html";
	}

	/* ---------- ---------- ---------- */
	
	function _getTargetName(_u){
		var t = _u;
			t = t.split("/").join("");
			t = t.split(".").join("");
		if(t == "") t = "_blank";
		return t;
	}
	
	/* ---------- ---------- ---------- */
	
	//サイトトップのフルパス
	function _getBaseDir(url, _siteroot) {
		url = url.split("#")[0];
		var dir = url.substring(0, url.lastIndexOf("/"));
		var dd = _siteroot.match(/..\//g)
		if (dd == null) return dir + "/";
		var deep = dd.length;
		var ss = dir.split("/");
		var a = []
		for (var i = 0; i < ss.length - deep; i++) {
			a.push(ss[i])
		}
		return a.join("/") + "/";
	}
	
	/* ---------- ---------- ---------- */
	
	function _getRelTop(_path){
		_path = _path.split("../").join("")
		_path = _path.split("./").join("")
		var a = _path.split("/");
		var s = ""
		for (var i = 0; i <  a.length ; i++) {
			if(a[i] != "") s += "../";
		}
		if(s == "") return "./";
		return s;
	}
	function getAbs(_path,_root){
		if(_path.indexOf(_root) == 0){
			return _path.substr(_root.length-1 ,_path.length)
		}
		return "";
	}
	
	function treatRel(_path){
		_path = _path.split("../").join("");
		_path = _path.split("./").join("");
		return _path;
	}
	
	function imagePathTreat(_s){
		return _s.split("__IMAGE_DIR_SAMPLE__").join(CMS_Path.IMAGE_DIR_SAMPLE)
	}
	
	return {
		init: init,
		_getBaseDir: _getBaseDir,
		_getRelTop: _getRelTop,
		getAbs: getAbs,
		treatRel: treatRel,
		imagePathTreat:imagePathTreat,
}
})();

var CMS_E = {}
	CMS_E.DIR_ERROR = "dir error";
	CMS_E.PARSE_ERROR = '<div style="color:red;background:#ff0;">パースエラー</div>';
	CMS_E.NOT_FOUND = "file or directory not found";
	CMS_E.getText = function(_s){
		if(_s == this.DIR_ERROR) return "ディレクトリがありません";
		if(_s == this.NOT_FOUND) return "ディレクトリかファイルがありません";
		return _s;
	}
	
	

var CMS_History = (function(){
	var view;
	var v = {};
	
	function init(){
		document.title = SITE_NAME;
		try{
			window.addEventListener('popstate', function(e) {
				if(e.state == null )return;
				openPage(e.state);
			},false);
			window.addEventListener('hashchange', function() {
				if(!openBlock){
					var state = window.location.hash;
					CMS_MainController.openPage_by_hash(state);
				}
			},false);
		}catch( e ){}
	}
	function getInitParam(){
		var state = window.location.hash;
		state = "/" + state.split("#").join("");
		return CMS_Path.PAGE.getAbsPath_reverse(state);
	}
	
	var openBlock = false
	function openPage(_state){
		if(openBlock == false){
			openBlock = true;
			openPage_core(_state);
			setTimeout(function(){
				openBlock = false;
			},100);
		}
	}
	
	function openPage_core(_state){
		var state = CMS_Path.PAGE.getAbsPath_reverse(_state);
		var param = CMS_Data.Sitemap.getData_by_id(state.id,state.dir);
		if(param){
			CMS_MainController.openPage(param,false);
		}
	}
	function addPage(_param){
		var dir = ""
		var id = _param.id
		if(_param["dir"] != undefined) dir = _param.dir;
		
		var state = CMS_Path.PAGE.getAbsPath(id,dir);
		var name = _param.name;
		
		//myタグページ調整
		if(_param.type == Dic.PageType.CMS_MYTAG){
			state = CMS_Path.PAGE.ABS + state;
			state = state.split("//").join("/");
			name = "{{Myタグ設定}} " + name;
		}
		
		var hash = state;
		if(hash.charAt(0) == "/") hash = state.substr(1,state.length)
		
		document.title = (function(_param){ 
			if(name == undefined){
				return CMS_INFO.name + " : " + _param.id;
				// return CMS_INFO.name + " : " + _param.id;
			} else{
				return SITE_NAME + " : " + name;
			}
		})(_param);
		if(history["pushState"]){
			history.pushState(state, null, "#" +hash);
		}
	}

return {
	init: init,
	getInitParam: getInitParam,
	addPage: addPage
}
})();


var CMS_Status = {
	sitemapDirOpens: null,
	W: 1000,
	H: 1000,
	mouseX: 0,
	mouseY: 0,

	//現在編集中の情報
	// currentPage:null,
	// currentPage_preview:null,	
	//フリーレイアウトで、コピペで使う
	clipBord: "",
	clipBordPage: ""
}

var CMS_StatusFunc = (function() {

	function setSitemapDirOpens(_a) {
		CMS_Status.sitemapDirOpens = _a
	}

	function checkSitemapDirOpens_by_id(_id) {
		var openList = CMS_Status.sitemapDirOpens
		for (var i = 0; i < openList.length; i++) {
			if ("sitemap_" + _id == openList[i][0]) {
				if (openList[i][1] == 1) {
					return true;
				}
			}
		}
		return false;
	}

	return {
		setSitemapDirOpens: setSitemapDirOpens,
		checkSitemapDirOpens_by_id: checkSitemapDirOpens_by_id
	}
})();

var CMS_ServerStatus = {
	version: ""
}
var CMS_ServerStatusFunc = (function() {
	var versionNumber

	function setVersion(_v) {
		var vs = _v.phpversion.split(".")
		if (vs.length != 3) return;
		CMS_ServerStatus.version = _v.phpversion;
		versionNumber = convert(CMS_ServerStatus.version)
	}

	function convert(_s) {
		var vs = _s.split(".")
		if (vs.length != 3) return 0;
		return vs[0] * 1000000 + vs[1] * 1000 + vs[2] * 1;
	}

	function checkCoverVersion(_v) {
		var vv = convert(_v)
		if (vv <= versionNumber) {
			return true;
		} else {
			return false;
		}
	}

	return {
		setVersion: setVersion,
		checkCoverVersion: checkCoverVersion
	}
})();



var CMS_UtilClass = {}
CMS_UtilClass.HoverMenu = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_float) {
	  this.init(_view,_float);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_view,_float) {
		this.view = _view;
		this.view.each(function (index, dom) {
			new CMS_UtilClass.HoverMenuClass($(this),_float);
		});
	}

	return c;
})();
CMS_UtilClass.HoverMenuClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_float) {
	  this.init(_view,_float);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_view,_float) {
		this.view = _view;
		this.float = _float;
		var self = this;
		this.view.hover(function(){
			self.show($(this));
		},function(){
			self.hide($(this));
		})
	}
	p.tID;
	p.show = function(_tar){
		var self = this;
		if(self.tID) clearTimeout(self.tID);
		self.tID = setTimeout(function(){
			_tar.find(self.float).show(); 
		},200);
	}
	p.hide = function(_tar){
		var self = this;
		if(self.tID) clearTimeout(self.tID);
		self.tID = setTimeout(function(){
			_tar.find(self.float).hide(); 
		},200);
	}

	return c;
})();


//メインビュー管理
var CMS_RootView = (function() {
	var view;
	var v = {};

	function init() {
		view = $('#CMS_RootView');
		stageInit();
		createlayout();
		setBtn();
	}

	function setBtn() {}

	function createlayout() {}

	/* ---------- ---------- ---------- */

	var isOpen = false;
	var isFirst = true;

	function stageInit() {
		view.hide();
	}

	function stageIn() {
		if (!isOpen) {
			isOpen = true;
			view.show();
			if (isFirst) {
				createlayout();
			}
			isFirst = false;
		}
	}

	function stageOut() {
		if (isOpen) {
			isOpen = false;
			view.hide();
		}
	}

	function resize() {
		if (isOpen) {}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();

var CMS_Header 			 = (function(){
	var view;
	var v = {};
	
	function init(){
		
		var toolBtns = (function(_a){ 
			var tag = "";
			for (var i = 0; i < _a.length ; i++) {
				if(_a[i] == "UPLOAD"){
				tag += '	<div class="_cms_btn_alpha _btn_file"><span class="ss_icon _file"></span><span class="_t">アップロード</span></div>';
				}
				if(_a[i] == "BACKUP"){
				tag += '	<div class="_cms_btn_alpha _btn_zip"></span><span class="_t"><i class="fa fa-download "></i> サイトバックアップ</span></div>';
				}
				if(_a[i] == "ICON"){
				tag += '	<div class="_cms_btn_alpha _btn_icon"><span class="_t"><i class="fa fa-leaf "></i> アイコン</span></div>';
				}
				if(_a[i] == "EMBED_TAG"){
				tag += '	<div class="_cms_btn_alpha _btn_embedtag"><span class="_t">{{ 埋込みタグ }}</span></div>';
				}
				if(_a[i] == "GRID"){
				tag += '	<div class="_cms_btn_alpha _btn_grid"><span class="_t"><i class="fa fa-th "></i> グリッド</span></div>';
				}
			}
			return tag;
		})(HEADER_TOOL_BTNS);
		
		var gudieTag = CMS_GuideU.getGuideTag("","利用ガイド","header") + " ";
		
		var loginTag = (function(_b){ 
			var tag = "";
				tag += '<div class="_menuset">';
			if(_b){
			 	tag += '<div class="_menu">設定・ログアウト <i class="fa fa-caret-down "></i></div>';
			 	// tag += '<div class="_menu _cms_btn_alpha _btn_logout"><i class="fa fa-user "></i> ログアウト <i class="fa fa-caret-down "></i></div>';
			} else{
				tag += '<div class="_menu">CMS設定 <i class="fa fa-caret-down "></i></div>';
			}
			tag += '	<div class="_float">';
			tag += '		<div class="_item _cms_btn_alpha _btn_setting"><i class="fa fa-lg fa-cog "></i> CMS設定</div>';
			tag += '		<div class="_item _cms_btn_alpha _btn_setting_php"><i class="fa fa-lg fa-cog "></i> ログイン設定</div>';
			tag += '		<div class="_item _cms_btn_alpha _btn_sever"><i class="fa fa-lg fa-globe "></i> サーバー情報</div>';
			
			if(_b){
			tag += '		<div class="_item _cms_btn_alpha _btn_logout"><i class="fa fa-lg fa-user "></i> ログアウト</div>';
			}
			tag += '		<div class="_item _cms_btn_alpha">'+gudieTag+'</div>';
			tag += '		<div class="_item _cms_btn_alpha _btn_cms">Powered by<br>JS CMS<br>version '+CMS_INFO.version+'</div>';
			tag += '	</div>'
			tag += '	</div>'
			return tag;
		})(CMS_LoginView.getLogout());
		
		var extraBtns = (function(_a){
			if(!_a)return;
			var tag = "";
			for (var i = 0; i <  _a.length ; i++) {
				var ls = _a[i]
				tag += '<div class="_menuset">';
				tag += '	<div class="_menu ">'+ls.label+'  <i class="fa fa-caret-down "></i></div>';
				tag += '	<div class="_float">';
				for (var u = 0; u < ls.items.length ; u++) {
					tag += '	<div class="_item _cms_btn_alpha">' + ls.items[u] + '</div>'
				}
				tag += '	</div>';
				tag += '</div>';
			}
			return tag;
		})(HEADER_EXTRA_BTNS);
		
		/* ---------- ---------- ---------- */
		
		view = $('#CMS_Header');
		var tag = "";
			tag += '<div class="_sitename _cms_ellipsis _cms_btn_alpha">' + SITE_NAME + '</div>';
			tag += '<div class="_header_btns">' + toolBtns + '</div>';
			tag += '<div class="_cmsBlock">' + loginTag + '</div>'
			tag += '<div class="_freeBlock">' + extraBtns + '</div>';
		view.html(tag)
		stageInit();
		stageIn();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */	
	
	function setBtn(){
		view.find('._sitename').click(function(){ CMS_U.openURL_blank(CMS_Path.SITE.REL); });
		
		view.find('._btn_icon').click(function(){ openIcon()});
		view.find('._btn_file').click(function(){ CMS_MainController.openUploadDir(); });
		view.find('._btn_zip').click(function(){ BackupView.stageIn(); });
		view.find('._btn_embedtag').click(function(){ openEmbed(); });
		view.find('._btn_grid').click(function(){ openGrid(); });
		
		view.find('._btn_setting').click(function(){ CMS_MainController.openCMSSetting("setting.js"); });
		view.find('._btn_setting_php').click(function(){ CMS_MainController.openCMSSetting("setting.php"); });
		view.find('._btn_sever').click(function(){ ServerInfoView.stageIn(); });
		view.find('._btn_logout').click(function(){CMS_LoginView.logout()});
		view.find('._btn_cms').click(function(){ window.open(CMS_INFO.url); });
		
		new CMS_UtilClass.HoverMenu(view.find('._menuset'),"._float");
	}
	
	function createlayout(){
	}
	
	/* ---------- ---------- ---------- */
	
	function openIcon(){
		Preset_IconView.stageIn();
		// Preset_IconView.stageIn(function(_s){
		// 	CMS_MainController.addTextToPage(_s);
		// });
	}
	function openEmbed(){
		EmbedTagListView.stageIn();
		// EmbedTagListView.stageIn("my",function(_s){
		// 	CMS_MainController.addHinagataToPage(_s);
		// 	// CMS_MainController.addTextToPage(_s);
		// });
	}
	function openGrid(){
		window.open("./grid/","grid_preview");
	}
	
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();



var CMS_AlertView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_AlertView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do"><i class="fa fa-check"></i> OK</div> ';
		v.footer.html(tag);
		setBtn();
	}
		
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._btn_do').click(function(){ callback(); stageOut() });
	}
	
	/* ---------- ---------- ---------- */
		
	function update(_s,_s2){
		
		
		var tag = '<div class="_title">'+_s+'</div>'
		v.header.html(tag);
		var tag = '<div class="_p">'+_s2+'</div>'
		v.body.html(tag);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_s,_s2,_callback){
		if(!view){
			$("body").append('<div id="CMS_AlertView" class="_modalView"></div>');
			init();
		}
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			callback = _callback;
			if(callback ==undefined) callback = function(){}
			update(_s,_s2);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();



var CMS_AlertLockView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_AlertLockView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_bg"></div>'
			tag += '<div class="_modalBox">'
			tag += '<div class="_read">更新ロックを解除してください<br><i class="fa fa-2x fa-lock "></i> <i class="fa fa-long-arrow-right "></i>  <i class="fa fa-2x fa-unlock-alt "></i>  </div>'
			// tag += '<div class="_btn_close">閉じる</div>'
			tag += '<div class="_mark"></div>'
			tag += '</div>'
		view.html(tag)
		setBtn();
	}
		
	function setBtn(){
		view.click(function(){ stageOut() });
		// view.find('._btn_close').click(function(){ stageOut() });
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	var tID
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			setTimeout(function(){
				view.addClass("_show");
			},10);
			if(tID) clearTimeout(tID)
			tID = setTimeout(function(){
				stageOut()
			},3500);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
			view.removeClass("_show");
			if(tID)clearTimeout(tID)
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();

var CMS_ConfirmView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_ConfirmView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do"><i class="fa fa-check"></i> OK</div> ';
			tag += '<div class="_cms_btn _cms_btn_red _btn_do" '+TIP_ENTER+' ><i class="fa fa-trash-o"></i> 削除</div> ';
		v.footer.html(tag);
		v.btn_active = view.find("._cms_btn_active")
		v.btn_red = view.find("._cms_btn_red")
		setBtn();
	}
		
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._btn_do').click(function(){ callback(); stageOut() });
	}
	
	/* ---------- ---------- ---------- */
		
	function update(_s,_s2,_isDell){
		var tag = '<div class="_title">'+_s+'</div>'
		v.header.html(tag);
		var tag = '<div style="font-size:18px">'+_s2+'</div>'
		v.body.html(tag);
		
		v.btn_red.hide()
		v.btn_active.hide()
		if(_isDell == "DELL"){
			v.btn_red.show()
		} else{
			v.btn_active.show()
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_s,_s2,_callback,_isDell){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			callback = _callback
			update(_s,_s2,_isDell);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();



var CMS_CopyView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_CopyView');
		stageInit();
		
		$("body").on("click","._cms_btn_copy_text",function(){
			var s = $(this).data("text");
			CMS_CopyView.stageIn(s);
		})
		$("body").on("click","._cms_btn_copy_page_id",function(){
			var s = $(this).text();
			CMS_CopyView.stageIn(s);
		});
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag);
		setBtn();
	}
		
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		// view.find('._btn_do').click(function(){ callback(); stageOut() });
	}
	
	/* ---------- ---------- ---------- */
		
	function update(_s){
		var tag = '<div class="_title">コピーしてください</div>'
		v.header.html(tag);
		var tag = '';
			tag +='<textarea>'+_s+'</textarea>';
		
		v.body.html(tag);
		view.find("textarea").select()
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_s,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			callback = _callback
			update(_s);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();




var CMS_InputView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_InputView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do"><i class="fa fa-check"></i> OK</div> ';
		v.footer.html(tag);
		setBtn();
	}
		
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._btn_do').click(function(){ done(); stageOut(); });
	}
	
	/* ---------- ---------- ---------- */
	
	var defParam =  {}
	function update(_param){
		defParam = JSON.parse(JSON.stringify(_param));

		var tag = '<div class="_title">'+_param.title+'</div>'
		v.header.html(tag);
		var tag = '';
			tag += '<div class="_read">'+_param.read+'</div>'
		
		//single
		if(_param.type == "single"){
			tag +='<input>';
		}
		//single以外は、未実装
			tag += '<div class="_notes">'+_param.notes+'</div>'
		v.body.html(tag);
		view.find("input").val(_param.val).select();
	}
	
	/* ---------- ---------- ---------- */
		
	function done(){
		var val = view.find("input").val();
		callback(val);
		
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_param,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			callback = _callback
			update(_param);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();




var CMS_ProccessView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_ProccessView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		var tag = "";
			tag += '	<div class="_bg"></div>';
			tag += '	<div class="_modalBox">';
			tag += '	<div class="_process"></div>';
			tag += '	</div>';
		view.html(tag)
		v.process = view.find("._process")
	}
	
	/* ---------- ---------- ---------- */
		
	function update(_s){
		if(!_s){
			v.process.html('<i class="fa fa-refresh fa-spin"></i> 処理中...')
		} else{
			v.process.html(_s)
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			update();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	 return {
		init:init, 
		update:update, 
		stageIn:stageIn, 
		stageOut:stageOut 
	}
})();


var CMS_ErrorView			 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_ErrorView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */	
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag);
		setBtn();
	}
		
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	
	/* ---------- ---------- ---------- */
		
	function update(_type,_url,_req,_res){
		var title = '<div class="_title">エラー</div>';
		var tag = "";
		if(_type == "NET"){
			title = '<div class="_p _title"><i class="fa fa-warning"></i> ネットワークエラー</div>';
			tag += '<div class="_p _h">●リクエストURL</div>';
			tag += '<div class="_p _path">'+_url+'</div>';
			if(_req){
				tag += '<div class="_p _h">●リクエストデータ</div>';
				tag += '<textarea>' + JSON.stringify(_req, null, "	") + '</textarea>';
			}
			if(_res){
				tag += '<div class="_p _h">●リザルトステート</div>';
				tag += '<div class="_p _res_error">';
				tag += _res["status"] + " " + _res["statusText"];
				tag += '</div>';
				if(_res["status"] == "403"){
				tag += '<div class="_p">403の場合は、ウェブサーバーのWAF機能が有効になっている可能性があります。詳しくは'+CMS_LINKs.waf+'のページで</div>';
				}
			}
		} else{
			tag = '<div class="_p">'+_res+'</div>'
		}
		v.header.html(title);
		v.body.html(tag);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	// var callback;
	function stageInit(){
		view.hide();
	}		
	var tID;
	if(tID) clearTimeout(tID);
	function stageIn(_type,_url,_req,_res){
		if(!view){
			$("body").append('<div id="CMS_ErrorView" class="_modalView"></div>');
			init();
		}
		if(! isOpen){ isOpen = true;
			tID = setTimeout(function(){
				stageIn_core(_type,_url,_req,_res)
			},200);
		}
	}
	function stageIn_core(_type,_url,_req,_res){
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			update(_type,_url,_req,_res);
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var CMS_IntroView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_IntroView');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
	}
	
	function createlayout(){
		var tag = ''
			tag += '<div class="_core">'
			tag += '<p>←左のメニューから、サイト設定やページ作成・編集などの操作できます</p>'
			//tag += '<div class="_guide"><i class="fa fa-arrow-up "></i> 初めての方は、ガイドを確認してください。</div>'
			tag += '</div>'
		view.append(tag)
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();

var CMS_LOCK = (function(){
	var view;
	var v = {};
	function init(){
		view = $('#CMS_LOCK');
		stageInit();
		stageIn();
		createlayout();
		setBtn();
		
		window.isLocked = CMS_LOCK.getIsLocked;
		
		if(USE_EDIT_LOCK == false){
			v.btn_lock.hide();
			v.btn_unlock.hide();
			window.isLocked = function(){
				return false;
			}
		}
		
		// if(window.location.href.indexOf("http://192.168.1.23:999") == 0){
		// 	setIsLocked(false);
		// 	return;
		// }
		setIsLocked(true);
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_btn _btn_lock " '+TIP("#+L","R")+'><i class="fa fa-lock "></i><span>ロック</span></div>';
			tag += '<div class="_btn _btn_unlock "'+TIP("#+L","R")+'><i class="fa fa-unlock-alt "></i><span>ロック</span></div>';
		view.html(tag);
	}
	
	function setBtn(){
		v.btn_lock = view.find('._btn_lock');
		v.btn_lock.click(function(){ 
			setIsLocked(false)
		});
		
		v.btn_unlock = view.find('._btn_unlock');
		v.btn_unlock.click(function(){ 
			setIsLocked(true)
		});
	}
	
	/* ---------- ---------- ---------- */
	
	var isLocked = true;
	function getIsLocked(_b){
		if(! USE_EDIT_LOCK )return;
		
		if(isLocked){
			if(_b){
				CMS_AlertLockView.stageIn()
			}
		}
		return isLocked;
	}
	function setIsLocked_toggle(){
		if(! USE_EDIT_LOCK )return;
		setIsLocked((isLocked) ? false:true);
	}
	function setIsLocked(_b){
		if(! USE_EDIT_LOCK )return;
		
		isLocked = _b;
		if(_b){
			view.removeClass("_unlock");
		} else{
			view.addClass("_unlock");
		}
		isLocked = _b;
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		getIsLocked: getIsLocked,
		setIsLocked: setIsLocked,
		setIsLocked_toggle: setIsLocked_toggle
}
})();


var CMS_PageStage = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_PageStage');
		// stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = ""
			tag += '		<div id="CMS_PageListView"></div>';
			tag += '		<div id="CMS_PageListBgView"></div>';
			tag += '		<div id="CMS_PagesView"></div>';
			tag += '		<div id="CMS_IntroView"></div>';
			tag += '		<div id="AddElements"></div>';
		view.append(tag);
		
	 	CMS_PageListView.init();
	 	CMS_PageListBgView.init();
		CMS_PagesView.init();
		CMS_IntroView.init();
		AddElements.init();
	}
	
	function setBtn(){
		view.on("mousedown",function(){
			CMS_KeyManager.setType("");
		})
		
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				CMS_PageListView.stageIn();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var CMS_PagesView 		 = (function(){

	var view;

	function init(){
		view = $('#CMS_PagesView');
	}
	
	/* ---------- ---------- ---------- */
	
	function _getID 		(_id,_dir){ return CMS_PageID.getID_s(_id,_dir) }
 	function _has 			(){ 		return CMS_PageDB.hasCurrent(); }
 	function _getCurrent 	(){ 		return CMS_PageDB.getCurrentPage(); }
 	function getCurrent 	(){ 		return _getCurrent(); }
 	
	function _has_ps (_id,_dir){
		for (var i = 0; i < _ps.length ; i++) {
			var id1 = _getID(_id,_dir);
			var id2 = _getID(_ps[i].id,_ps[i].dir);
			if(id1 == id2)return true;
		}
		return false;
	}
	function _getPageByID(_id,_dir){
		for (var i = 0; i < _ps.length ; i++) {
			var id1 = _getID(_id,_dir);
			var id2 = _getID(_ps[i].id,_ps[i].dir);
			if(id1 == id2) return _ps[i];
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	function historyBack 	(){ if(_has()) _getCurrent().historyBack(); }
	function save 			(){ if(_has()) _getCurrent().saveData(); }
	function publish 		(){ if(_has()) _getCurrent().publishData(); }
	function openURL 		(){ if(_has()) _getCurrent().openURL(); }
	function editMeta 		(){ if(_has()) _getCurrent().editMeta(); }
	
	function refresh (){ openPage(); } 
	
	/* ---------- ---------- ---------- */
	
	var _ps = [];
	var _current;
	
	function removePage (_id,_dir){
		var tar = -1;
		for (var i = 0; i < _ps.length ; i++) {
			if(_ps[i].id == _id) {
				if(_ps[i].dir == _dir) {
					_ps[i].stageOut();
					_ps[i].remove();
					_ps[i] = null;
					_ps.splice(i,1);
				}
			}
		}
	}
	function openPage (_param){
		if(_param == undefined) {
			if(_current == undefined)return;
			_param = _current;
		}
		
		//ページ作成
		if(_has_ps(_param.id,_param.dir) == false){
			_ps.push(new CMS_PageClass(view, _param));
		}
		_current = _param;
		
		//前のページは非表示にして、現在のページを表示
		// if(_has()) _getCurrent().stageOut();
		for (var i = 0; i < _ps.length ; i++) {
			var id1 = _getID(_param.id,_param.dir)
			var id2 = _getID(_ps[i].id,_ps[i].dir)
			if(id1 == id2) {
				_ps[i].stageIn();
			} else{
				_ps[i].stageOut();
			}
		}
	}

	/* ---------- ---------- ---------- */
	
	//外からIDとDIRを指定して保存、公開
	
	function savePageByID(_id,_dir){
		var tar = _getPageByID(_id,_dir)
		if(tar)tar.saveData()
	}
	
	function publishPageByID(_id,_dir){
		var tar = _getPageByID(_id,_dir);
		if(tar)tar.publishData();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_pageModel,_extra){
		if(! isOpen){ isOpen = true;
			view.show();
			openPage(_pageModel,_extra);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		removePage: removePage,
		stageIn: stageIn,
		stageOut: stageOut,
		historyBack: historyBack,
		save: save,
		publish: publish,
		openURL: openURL,
		editMeta: editMeta,
		refresh: refresh,
		
		savePageByID : savePageByID,
		publishPageByID : publishPageByID,
		getCurrent : getCurrent	
	}
})();



var CMS_PageClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_pageModel) {
	  this.init(_view,_pageModel);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view,_pageModel) {
		this.parentView = _view;
		this.pageModel 	= _pageModel;
		this.id 		= this.pageModel.id;
		this.dir 		= this.pageModel.dir;
		this.type 		= this.pageModel.type;
		
		var this_ 		= this;
		// this.storageClass = new Storage.Online(Dic.PageType.PAGE, this.id, this.dir, {});
		this.storageClass = new Storage.Online(this.type, this.id, this.dir, {});
		this.storageClass.load(function() {
			this_.loadData();
		});
	}
	
	p.loadData = function() {
		CMS_MainController.openedPage(this);
		this.pageView = new EditableView.PageView (this.pageModel,this.storageClass,this.parentView);
		this.pageView.stageIn();
		CMS_MainController.openedPage2(this);
	}
	
	/* ---------- ---------- ---------- */
	//そのままリレー
	
	p.previewData =function (_callback)	{ if(this.pageView) this.pageView.previewData(_callback) }
	p.historyBack =function ()			{ if(this.pageView) this.pageView.historyBack() }
	p.saveData =function ()				{ if(this.pageView) this.pageView.saveData() }
	p.publishData =function ()			{ if(this.pageView) this.pageView.publishData() }
	p.editMeta =function ()				{ if(this.pageView) this.pageView.editMeta() }
	p.openURL =function ()				{ if(this.pageView) this.pageView.openURL() }
	
	/* ---------- ---------- ---------- */

	p.stageInit = function() {}
	
	p.stageIn = function() {
		if(this.pageView){
			this.pageView.stageIn();
			CMS_MainController.openedPage(this);
			CMS_MainController.openedPage2(this);
		}
	}
	p.stageOut = function() {
		if(this.pageView){
			this.pageView.stageOut();
		}
	}
	p.remove = function() {
		if(this.pageView){
			this.isShow = false;
			this.pageView.remove();
		}
	}
	return c;
})();

/**
 * 表示済みのページを管理する
*/
var CMS_PageDB 		 = (function(){
	
	var observer = []
	function registerObserver(_v){
		observer.push(_v)
	}
	
	/* ---------- ---------- ---------- */
	//パラメータがフォーマットにそってるか
	function isPageParam(_pageModel){
		if(_pageModel.type == "")return false;
		if(_pageModel.id == "")return false;
		return true;
	}
	
	/* ---------- ---------- ---------- */
	var pages = [];
	
	//ページ追加
	function addPage(_pageModel){
		if(hasPages(_pageModel) == false){
			pages.push(_pageModel);
			updatedList();
		}
	}
	
	//ページ削除
	function removePage(_id,_dir){
		for (var i = 0; i < pages.length ; i++) {
			if(pages[i].id == _id){
				if(pages[i].dir == _dir){
					pages[i] = null;
					pages.splice(i,1);
					updatedList();
				}
			}
		}
	}
	
	function updatedList(){
		for (var i = 0; i <  observer.length ; i++) {
			observer[i].updateList();
		}
	}
	function updatedCurrent(){
		for (var i = 0; i <  observer.length ; i++) {
			observer[i].updatedCurrent();
		}
	}
	
	//ページにDBに存在するか
	function hasPages (_pageModel){
		for (var i = 0; i < pages.length ; i++) {
			if(pages[i].id == _pageModel.id) {
				if(pages[i].dir == _pageModel.dir) {
					return true;
				}
			}
		}
		return false;
	}
	/* ---------- ---------- ---------- */

	function setCurrent(_page){
		addPage(_page.pageModel);
		currentPage = _page;
		currentPage_preview = _page;
		updatedCurrent()
	}
	/* ---------- ---------- ---------- */

	function getList(){
		return pages;
	}
	
	/* ---------- ---------- ---------- */

	var currentPage
	var currentPage_preview
	
	//現在のページを取得
	function getCurrentPage()		{ return currentPage; }
	function getCurrentPageModel()	{ return currentPage.pageModel; }
	function getCurrentPageStoreData()	{ 
		if(currentPage){
			if(currentPage.storageClass) {
				return currentPage.storageClass.storeData;
			}
		}
		return null;
	}
	
	var prevCurrent;
	function getPreviewPageModel() {
		var param = getCurrentPageModel();
		if(Dic.PageType.CMS_MYTAG == param.type){
			return prevCurrent;
		} else{
			prevCurrent = param;
			return param;
		}
	}	
	//現在のプレビュページを取得
	//設定系のページは、はいらない。フリーページのみ入る
	function getLivePreviewPage()		{ return currentPage_preview;	}
	function getLivePreviewPageModel()	{ return currentPage_preview.pageModel; }
	function hasCurrent()	{
		if(currentPage == undefined) return false;
		return true;
	}

	
	/* ---------- ---------- ---------- */

	function editedPage(){}
	function savedPage(){}
	function publishedPage(){ }
	
	/* ---------- ---------- ---------- */
	
	function updateSitemap(){
		CMS_Data.Sitemap.update();
	}
	
	/* ---------- ---------- ---------- */
	
	return {
		registerObserver : registerObserver,
		isPageParam : isPageParam,
		
		addPage : addPage,
		removePage : removePage,
		hasPages : hasPages,
		setCurrent : setCurrent,
		
		getCurrentPage : getCurrentPage,
		getCurrentPageModel : getCurrentPageModel,
		getCurrentPageStoreData : getCurrentPageStoreData,
		getPreviewPageModel : getPreviewPageModel,
		
		getLivePreviewPage : getLivePreviewPage,
		getLivePreviewPageModel : getLivePreviewPageModel,
		hasCurrent : hasCurrent,
		
		editedPage : editedPage,
		savedPage : savedPage,
		publishedPage : publishedPage,
		
		getList : getList,
		
		updateSitemap : updateSitemap
	}
})();



var CMS_PageID = (function(){
	function getID(_id,_dir){
		if(_dir == undefined) _dir = "";
		if(_id == undefined) _id = "";
		var dir = _dir.split("/").join("__SP__")
		var id = _id.split(".").join("")
		return CMS_PageID.PAGE_PREFIX + dir + "_" + id;
	}
	function getID_s(_id,_dir){
		if(_dir == undefined) _dir = "";
		if(_id == undefined) _id = "";
		var dir = _dir.split("/").join("__SP__")
		var id = _id.split(".").join("")
		
		return dir + "_" + id;
	}
	function getID_s2(_id){
		if(_id == undefined) _id = "";
		var _id = _id.split("/").join("__SP__")
			_id	 = _id.split(".").join("")
		return _id;
	}
	return {
		getID: getID,
		getID_s: getID_s,
		getID_s2: getID_s2
	}
})();

CMS_PageID.PAGE_PREFIX = "_SVP_";


var CMS_PagesView_ZoomManager = (function(){
	var view;
	var v = {};
	
	function setView(_view){
		view = _view;
		setBtn();
		zoom(Storage.Memo.getZoomVal());
	}
	function setBtn(_view){
		view.find("._btn_zoom").click(function(){ 
			var s = parseInt(prompt("ズーム値を指定してください(10〜100%)",currentZoom*100));
			zoom(s/100);
		});
		v._btn_zoomIn = view.find('._btn_zoomIn');
		v._btn_zoomOut = view.find('._btn_zoomOut');
		v._btn_zoomIn.click(function(){ zoomIn()});
		v._btn_zoomOut.click(function(){ zoomOut()});
	}
	var currentZoom = 1
	var zooms = [
		0.25,
		0.33,
		0.5,
		0.75,
		1
	]
	function zoomIn(){
		var s = 1
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom < zooms[i]){
				s = zooms[i];
				break;
			}
		}
		zoom(s);
	}
	function zoomOut(){
		var s = zooms[0]
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom > zooms[i]){
				s = zooms[i];
			}
		}
		zoom(s);
	}
	function zoom(_s){
		if(!_s)return;
		if(isNaN(_s))return;
		if(_s > 1) _s = 1;
		if(_s < zooms[0]) _s = zooms[0];
		currentZoom = _s;
		//
		_setZoom( $('#CMS_PagesView > ._cms_page > ._page_inner > ._page_inner_zoom') , currentZoom,true) ;
		
		Storage.Memo.setZoomVal(_s);
		updateViewState();
	}
	function _setZoom(_tar,_s,_isW){
		_tar.css("-webkit-transform" , "scale(" + _s + ")" );
		_tar.css("transform" , "scale(" + _s + ")" );
		if(_isW)_tar.css("width" ,100* (1/_s)+ "%" );
		if(_isW)_tar.css("height" ,100* (1/_s)+ "%" );
	}
	
	function updateViewState(){
		var btns = $("#CMS_PagesView ._page_zooms");
			btns.find("._btn_zoom").text( currentZoom * 100 +"%");
			btns.find("._btn_zoomIn").removeClass("_btn_disable");
			btns.find("._btn_zoomOut").removeClass("_btn_disable");
		if(currentZoom == 1){
			btns.find("._btn_zoomIn").addClass("_btn_disable");
		}
		if(currentZoom == zooms[0]){
			btns.find("._btn_zoomOut").addClass("_btn_disable");
		}
	}
	return {
		setView: setView,
		zoomIn: zoomIn,
		zoomOut: zoomOut,
		zoom: zoom
	}
})();

var CMS_PresetView_ZoomManager = (function(){
	var view;
	var v = {};
	
	function setView(_view){
		view = _view;
		setBtn();
		zoom(currentZoom);
	}
	function setBtn(_view){
		view.find("._btn_zoom").click(function(){ 
			var s = parseInt(prompt("ズーム値を指定してください(10〜100%)",currentZoom*100));
			zoom(s/100);
		});
		v._btn_zoomIn = view.find('._btn_zoomIn');
		v._btn_zoomOut = view.find('._btn_zoomOut');
		v._btn_zoomIn.click(function(){ zoomIn()});
		v._btn_zoomOut.click(function(){ zoomOut()});
	}
	var currentZoom = 1
	var zooms = [
		0.25,
		0.33,
		0.5,
		0.75,
		1
	]
	function zoomIn(){
		var s = 1
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom < zooms[i]){
				s = zooms[i];
				break;
			}
		}
		zoom(s);
	}
	function zoomOut(){
		var s = zooms[0]
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom > zooms[i]){
				s = zooms[i];
			}
		}
		zoom(s);
	}
	function zoom(_s){
		if(!_s)return;
		if(isNaN(_s))return;
		if(_s > 1) _s = 1;
		if(_s < zooms[0]) _s = zooms[0];
		currentZoom = _s;
		//
		_setZoom( $('#PresetStage_PagesView > ._cms_page > ._page_inner > ._page_inner_zoom') , currentZoom,true) ;
		
		// Storage.Memo.setZoomVal(_s);
		updateViewState();
	}
	function _setZoom(_tar,_s,_isW){
		_tar.css("-webkit-transform" , "scale(" + _s + ")" );
		_tar.css("transform" , "scale(" + _s + ")" );
		if(_isW)_tar.css("width" ,100* (1/_s)+ "%" );
		if(_isW)_tar.css("height" ,100* (1/_s)+ "%" );
	}
	
	function updateViewState(){
		var btns = $("#PresetStage_PagesView ._page_zooms");
			btns.find("._btn_zoom").text( currentZoom * 100 +"%");
			btns.find("._btn_zoomIn").removeClass("_btn_disable");
			btns.find("._btn_zoomOut").removeClass("_btn_disable");
		if(currentZoom == 1){
			btns.find("._btn_zoomIn").addClass("_btn_disable");
		}
		if(currentZoom == zooms[0]){
			btns.find("._btn_zoomOut").addClass("_btn_disable");
		}
	}
	return {
		setView: setView,
		zoomIn: zoomIn,
		zoomOut: zoomOut,
		zoom: zoom
	}
})();

var CMS_PageListView 		 = (function(){
	var view;
	var v = {};

	function init(){	
		view = $('#CMS_PageListView');
		var tag = "";
			tag += '<div class="_header">';
			tag += '	<div class="_header_visual"><span class="_btn_edit"><i class="fa fa-pencil "></i> 変更</span></div>';
			tag += '	<div class="_header_btns">';
			tag += '		<div class="_left">';
			tag += '			<span class="_cms_btn_alpha _btn_closeAll _fs12"><i class="fa fa-folder "></i> <span class="_hide_S">すべて</span>閉じる</span>';
			tag += '			<span class="_cms_btn_alpha _btn_openAll _fs12"><i class="fa fa-folder-open "></i> <span class="_hide_S">すべて</span>開く</span>';
			tag += '		</div>';
			tag += '		<div class="_right">';
			tag += '			<div class="_table" style="padding:0 20px 0 0;">';
			tag += '				<div class="_cell" style="padding:0 180px 0 0;">';
			tag += '					<div class="_wideShow _cms_btn_alpha _btn_editSubFiles"><i class="fa fa-level-up fa-rotate-180 "></i> まとめて設定</div>'
			tag += '				</div>';
			tag += '				<div class="_cell">';
			tag += '					<div class="_wideShow _cms_btn_alpha _btn_publish_all"><i class="fa fa-level-up fa-rotate-180 "></i> まとめて公開</div>'
			tag += '				</div>';
			tag += '			</div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '	<div class="_btn_close"><i class="fa fa-caret-right "></i></div>';
			tag += '</div>';
			tag += '<div class="_body _sideAera-scroll">';

			tag += '	<div class="_asset_list _asset_list_setting">'
			tag += '		<div class="_mytag_title">{{ Myタグ設定 }}</div>';
			
			var kyes = Dic.MyTagList;
			for (var i = 0; i < kyes.length ; i++) {
				tag += '<div id="_SVP__mytag_' + kyes[i].id + '" class="_btn_page _btn_doc_keys" data-no="'+i+'">';
				tag += '<i class="fa fa-lg fa-cog" style="margin:2px 2px 0 2px;"></i> <span class="_rep">' + kyes[i].name + '</span>';
				tag += '</div>';
			}
			
			tag += '	</div>'

			tag += '	<div id="CMS_PageListViewTree" class="_listItem"></div>';
			tag += '	<div id="CMS_PageListViewSearchBody" class="_listItem">';
			tag += '		<div class="_status"></div>'
			tag += '		<div class="_replaceView"></div>'
			tag += '	</div>';
			tag += CMS_GuideU.getGuideTag("page/pages","ガイド","blue");
			tag += '	<div style="height:50px"></div>';
			tag += '</div>';
			tag += '<div id="CMS_PageListViewSearch" class="_listItem"></div>';
		view.append(tag);
		
		view.find('._btn_doc_keys').click(function(){
			var no = $(this).data("no");
			CMS_MainController.openPageSetting(no);
		});
		
		view.find('._header_visual ._btn_edit').click(function() {
		    CMS_PageListBgView.stageIn($(this));
		});
		
		//すべて開閉ボタン
		view.find('._btn_closeAll')	.click(function(){ CMS_PageList_ListDB.closeAll()});
		view.find('._btn_openAll')	.click(function(){ CMS_PageList_ListDB.openAll()});
		
		v.btn_editSubFiles = view.find('._btn_editSubFiles')
		v.btn_editSubFiles.click(function(){ CMS_PageListViewTree.editSubFiles()});
		v.btn_editSubFiles.hover(
			function(){ $("#sitemap_sitemap_root").addClass("_hoverSetAll") },
			function(){ $("#sitemap_sitemap_root").removeClass("_hoverSetAll") }
		);
		
		v.btn_publish_all = view.find('._btn_publish_all')
		v.btn_publish_all.click(function(){ CMS_PageListViewTree.publishAll()});
		v.btn_publish_all.hover(
			function(){ $("#sitemap_sitemap_root").addClass("_hoverPubAll") },
			function(){ $("#sitemap_sitemap_root").removeClass("_hoverPubAll") }
		);
		
		initToggle();
		
		CMS_PageListViewTree		.init();
		CMS_PageListViewSearch		.init();
		
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	var isWide = false
	var stageLeft = 0;
	function initToggle(){
		v.btn_toggle =view.find('._header ._btn_close')
		v.body = $("body")
		v.stage = $("#CMS_PageStage")
		v.btn_toggle.click(function(){ 
			toggle();
		});
		
		$("#CMS_PagesView_DisableView").click(function(){
			toNormal();
		})
	}
	function toggle(){
		if(isWide){
			toNormal();
		} else{
			toWide()
		}
	}
	function toNormal(){
		if(!isWide)return;
		v.btn_toggle.html('<i class="fa fa-caret-right "></i>');
		v.stage.css("right",stageLeft+"px");
		v.body.removeClass("_wideNavi");
		v.body.removeClass("_wideNaviCore");
		isWide = false;
	}
	function toWide(){
		if(isWide)return;
		v.btn_toggle.html('<i class="fa fa-caret-left "></i>');
		stageLeft = v.stage.css("right").split("px").join("");
		v.stage.css("right","-10px");
		v.body.addClass("_wideNavi");
		
		setTimeout(function(){
			v.body.addClass("_wideNaviCore");
		},200);
		isWide = true;
	}
	/* ---------- ---------- ---------- */
	//#Stage
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			//
			CMS_PageListViewTree		.stageIn();
			CMS_PageListViewSearch		.stageIn();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	return {
		init:init, stageIn:stageIn, stageOut:stageOut
	}
})();

var CMS_PageListBgView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_PageListBgView');
		v.target = $('#CMS_PageListView ._header_visual');
		
		stageInit();
		createlayout();
		setBG( Storage.Memo.getCustomBG() );
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = "";
			tag += '<div class="_inner">';
			tag += '	<div class="_read">好きなテーマ写真を選択できます。この設定は、サーバーごと、ブラウザごとに設定出来ます。</div>';
			tag += '	<div class="_items">';
			for (var i = 0; i < 4*10 ; i++) {
				tag += '<div class="_item _item_a _btn_bg" data-id="a-'+i+'" style="background-position: left -'+(i*50)+'px;"></div>';
			}
			for (var i = 0; i < 4*3 ; i++) {
				tag += '<div class="_item _item_b _btn_bg" data-id="b-'+i+'" style="background-position: left -'+(i*50)+'px;"></div>';
			}
			tag += '	</div>';
			tag += '	<div class="_read">/_cms/images/custom_bg_a.jpg , /_cms/images/custom_bg_b.png を編集すれば、好きな画像を管理画面へ設定できます。</div>';
			tag += '</div>';
		view.html(tag);
		v.item = view.find("._item");
		v.item_a = view.find("._item_a");
		v.item_b = view.find("._item_b");
		setBtn();
	}
	
	function setBtn(){
		view.find("._btn_bg").click(function(){
			var id = $(this).data("id");
			Storage.Memo.setCustomBG(id);
			setBG(id);
		});
		
		view.hover(
			function(){
				if(tID) clearTimeout(tID);
			},
			function(){
				stageOut_delay()
			}
		)
	}
	
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	function setBG(_id){
		if(_id.indexOf("-") == -1){ _id = "a-0" };
		
		var a = _id.split("-");
		var ty = a[0];
		var no = Number(a[1]);
		
		v.target.removeClass("_image_a");
		v.target.removeClass("_image_b");
		v.item_a.removeClass("_current");
		v.item_b.removeClass("_current");
		
		if(ty == "a"){
			v.target.addClass("_image_a");
			v.item_a.eq(no).addClass("_current");
		} else{
			v.target.addClass("_image_b");
			v.item_b.eq(no).addClass("_current");
		}
		v.target.css("background-position", "0 -" + (no * 50) + "px");
	}

	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			// if(isFirst){
			// 	createlayout();
			// }
			isFirst = false;
		}
	}
	var tID;
	function stageOut_delay(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			stageOut();
		},200);
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();



var CMS_PageListViewSearch 	  = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_PageListViewSearch');
		v.treeView = $('#CMS_PageListViewTree');
		storage_search_word= new Storage.Local("cms_search_word","");
	}
	
	/* ---------- ---------- ---------- */
	var storage_search_word;
	
	function createlayout(){
		var tag = ''
			tag += '<div class="_inputView">'
			tag += '<input class="_in_search" placeholder="名称やIDで検索" list="sitemapDatalist" >'
			tag += ' <i class="fa fa-times-circle _cms_btn_alpha _btn_delete"></i>'
			tag += '</div>'
		view.append(tag)
		v.inputView	 = view.find('._inputView');
		v.in_search	 = view.find('._in_search');
		v.btn_delete = view.find('._btn_delete');
		
		v.status	 = $('#CMS_PageListViewSearchBody ._status');
		v.replaceView = $('#CMS_PageListViewSearchBody ._replaceView');
		
		v.replaceView.hide();
		
		setBtn();
	}
	function setBtn(){
		v.in_search.focus(function(){
			prepa();
			searchWord = $(this).val();
			searchPage();
		});
		v.in_search.keyup(function(){
			searchWord = $(this).val();
			searchPage();
		});
		v.in_search.on('input', function(){
			searchWord = $(this).val();
			searchPage();
		});
		
		v.btn_delete.click(function(){ 
			searchWord = "";
			v.in_search.val(searchWord);
			searchPage();
		});
		//
		
		storage_search_word.load(function(){});
		searchWord = storage_search_word.getData();
		setTimeout(function(){
			if(searchWord != ""){
				prepa();
				v.in_search.val(searchWord).keyup()
			}
		},200)
	}

	var searchWord = "";
	var resultList = []
	function prepa(){
		resultList = [];
		prepa_loop(CMS_Data.Sitemap.getFilelist());
		updateView();
		
	}
	function prepa_loop(list){
		for (var i = 0; i < list.length ; i++) {
			if(list[i].list){
				prepa_loop(list[i].list)
			} else{
				if(list[i].type == Dic.PageType.PAGE){
					resultList.push(list[i]);
				}
			}
		}
	}
	function updateView(){
		var tags = ""
		var list = resultList
		for (var i = 0; i < list.length ; i++) {
				var isHide 		 = (list[i].isHide 		!= "1") ? true:false;
				var isHideMenu	 = (list[i].isHideMenu 	!= "1") ? true:false;
				var isUnderConst  = (list[i].isUnderConst != "1") ? true:false;
				var pubText = (isHide) 			? "" : '<b style="color:#999">(非公開)</b>';
					pubText += (isHideMenu) 	? "" : '<b style="color:#999">(メニュ非表示)</b>';
					pubText += (isUnderConst) 	? "" : '<b style="color:#999">(工事中)</b>';
				var pubClass = (isHide) ? "" : '_isHide';
				var tag  = '<div class="_btn_page '+pubClass+'" data-no="'+i+'" id="_search_'+list[i].id+'" data-dir="'+list[i].dir+'">'
					tag += '<table>'
					tag += '<tr>';
					tag += '<td style="width:17px;"><i class="fa fa-lg fa-file-text" style="margin:2px 2px 0 2px;"></i></td>';
					tag += '<td>';
					tag += '<span class="_btn_file_text">'+list[i].name+pubText+'</span>';
					tag += '<span class="_btn_file_text2">'+list[i].id+'</span>';
					tag += '</td>';
					tag += '</tr>';
					tag += "</table>";
					tag +='</div>';
				tags +=tag;
		}
		v.replaceView.html(tags);
		var s = ' > ._btn_page';
		v.btn_page = v.replaceView.find(s);
		v.btn_page.click( function(){
			var id = $(this).attr("id").split("_search_").join("");
			var dir = $(this).data("dir")
			CMS_MainController.openPage_by_id(id,dir);
		});
		v.btn_page.hide();
	}
	
	function searchPage(){
		if(!v.btn_page)return 
		
		storage_search_word.setData(searchWord);
		storage_search_word.save(function(){});
		
		var list = resultList;
		v.btn_page.hide();
		
		if(searchWord ==""){
			v.replaceView.hide()
			v.status.hide()
			v.treeView.show()
			v.btn_delete.removeClass("_active")
		} else{
			v.replaceView.show()
			v.status.show()
			v.treeView.hide()
			v.btn_delete.addClass("_active")
		}
		var c = 0;
		for (var i = 0; i < list.length ; i++) {
			if(isMatch(list[i])){
				c++;
				v.btn_page.eq(i).show();
				if(list[i].name){
					var s1 = list[i].name.split(searchWord).join('<span class="_cms_match">'+searchWord+'</span>');
					v.btn_page.eq(i).find('._btn_file_text').html(s1);
				}
				if(list[i].id){
					var s2 = list[i].id.split(searchWord).join('<span class="_cms_match">'+searchWord+'</span>');
					v.btn_page.eq(i).find('._btn_file_text2').html(s2);
				}
			}
		}
		v.status.html("<b>" + c + "</b>件が該当しました");
	}
	
	function isMatch(_page){
		var b 	 = false;
		var w 	 = searchWord;
		var name  = _page.name;
		var id 	 = _page.id;
		
		if(name.indexOf(w) != -1) b = true;
		if(id){
			if(id.indexOf(w) != -1) b = true;
		}
		return b;
	}
	var currentSelectView
	function openPage_(_sitemap){
		var id  = ""
		try{
		 id = _sitemap.attr("id").split(CMS_PageID.PAGE_PREFIX).join("_search_");
		}catch( e ){}
		if(currentSelectView){
			currentSelectView.removeClass("_active");
		}
		currentSelectView = $("#"+id);
		currentSelectView.addClass("_active");
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,
		openPage_:openPage_
	 }
})();
var CMS_PageListViewTree 	  = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_PageListViewTree');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	//サイトマップデータロード
	function loadSitemapData (){
		loadDirManager();
	}
	
	/* ---------- ---------- ---------- */
	//#サイトマップのフォルダ開閉状態のメモリ
	
	var listOpenManager
	
	//ロード
	function loadDirManager(){
		listOpenManager= new Storage.Local("cms_listOpenManager",[]);
		listOpenManager.load(function(){
			showSitemap();
		});
	}
	//保存
	function saveDirManager(){
		var dirs = $('._subDir');
		var list = [];
		for (var i = 0; i < dirs.length ; i++) {
			list[i] = [ dirs.eq(i).attr("id"), 1 ];
			if(dirs.eq(i).attr("data-isOpen") == "0") list[i][1] = 0;
		}
		listOpenManager.setData(list);
		listOpenManager.save(function(){});
		CMS_StatusFunc.setSitemapDirOpens(listOpenManager.getData());
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	function editSubFiles(){
		filelist.editSubFiles()
	}
	
	function publishAll(){
		filelist.publishAll()
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var filelist;
	function showSitemap(){
		
		//開閉リストを登録
		CMS_StatusFunc.setSitemapDirOpens(listOpenManager.getData());
		filelist = new CMS_PageList_ListClass();
		filelist.registParent(this,view,0);
		filelist.initData(CMS_Data.Sitemap.getData(),0);
		
		//CMS_MainController.openPage();
		
		view.scrollTop(Storage.Memo.getSideMenuY())
		setTimeout(function(){
			isSaveable = true;
		},500);
	}
	
	//ファイル名変更
	function changeFileName(_edited,_original){	
		if(_edited.id != _original.id || _edited.dir != _original.dir){
			if(isLog)console.log("●changeFileName : " + _original.id + " > " + _edited.id );
			Storage.Util.rename(_original , _edited);
		}
		UpdateDelay.delay(function(){
			CMS_MainController.removePage(_original.id,_original.dir);
			CMS_MainController.openPage_by_id(_edited.id,_edited.dir);
		})
	}
	
	//ファイル削除
	function deleteFile(_edited){
		//削除
		if(isLog)console.log("●deleteFile : " + _edited.id );
		Storage.Util.delete_(_edited);
		UpdateDelay.delay(function(){
			CMS_MainController.removePage(_edited.id,_edited.dir);
			CMS_MainController.openIntroPage();
		})
	}
	
	//アップデート
	var isSaveable = false
	function updatedSitemap(){
		if(!isSaveable) return;
		CMS_Data.Sitemap.save();
		// Float_Preview.updateSitemapDate()
	}
	
	/* ---------- ---------- ---------- */
	//ページを開く
	
	function openPage_(){
		//CMS_MainController.openPage(_param);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				loadSitemapData();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	 return {
		init:init, stageIn:stageIn, stageOut:stageOut ,
		openPage_ 		:openPage_,
		updatedSitemap 	:updatedSitemap,
		changeFileName 	:changeFileName,
		deleteFile 		:deleteFile,
		saveDirManager:saveDirManager,
		editSubFiles:editSubFiles,
		publishAll:publishAll
	}

})();




var CMS_PageList_ListEditNo = 0;

var CMS_PageList_ListDB = (function(){
	var list =[]
	function add_(a){
		list.push(a)
	}
	
	function closeAll(){
		for (var i = 0; i <  list.length ; i++) {
			list[i].trigger("_closeAll");
		}
		CMS_PageListViewTree.saveDirManager();
	}
	function openAll(){
		for (var i = 0; i <  list.length ; i++) {
			list[i].trigger("_openAll");
		}
		CMS_PageListViewTree.saveDirManager();
	}
	
	return {
		add_: add_,
		closeAll: closeAll,
		openAll: openAll
	}
})();


var CMS_PageList_ListClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view) {
	  this.init(_view);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view) {
		this.type = Dic.ListType.DIR;
		this.v = {};
	}
	
	/* ---------- ---------- ---------- */
	
	p.path = ""
	p.registParent 		 = function (_parent,_parentView,_deep,_n){
		this.parent = _parent;
		this.parentView = _parentView;
		this.deep = (_deep == null) ? 0:_deep;
		this.numb = (_n == null) ? 0:_n;
		
		if(_parent.path == undefined)_parent.path = "";
		this.path += _parent.path + this.numb + "_";
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	
	p.getData 	 		 = function (){
		return this.gridData.getRecords();
	}
	p.getDataAt 	 	 = function (_n){
		return this.gridData.getRecordAt(_n);
	}
	p.addData 	 		 = function (_param){
		this.gridData.addRecord(_param);
		this.update();
	}
	p.addDataAt 	 	 = function (data,_n){
		this.gridData.addRecordAt(data,_n);
	}
	p.changeData 	 	 = function (data,no){
		this.gridData.overrideRecordAt(data,no);
	}
	p.removeData 	 	 = function (no){
		this.gridData.removeRecordAt(no);
		this.update();
	}
	p.removeDataAll 	 = function (no){
		Storage.Util.deleteSubFiles(this.gridData.getRecordAt(no));
		this.gridData.removeRecordAt(no);
		this.update();
	}
	p.moveData 	 		 = function (targetNo,_move){	
		this.gridData.moveRecord(targetNo,_move);
		this.update();
	}
	p.initData 	 		 = function (_data,_no){
		this.no = _no;
		this.data = _data;
		this.gloupUID = _data.uid;
		this.gloupID = _data.id;
		this.gloupName = _data.name;
		this.gridData = new EditableView.GridClass();
		this.gridData.initRecords(_data.list);
		this.setInitView();
		this.update();
	}
	
	/* ---------- ---------- ---------- */
	//#setInitView
	var btnsCount = 0;
	p.setInitView 		 = function (){
		var this_ = this;
		var tag = '';
		if(this.data.id == undefined) this.data.id = "sitemap_root";
		this.uid = "sitemap_" +this.data.id;
		if(this.deep > 0){
			var pubText = CMS_PateStateU.getStateText(this.data.state);
			var pubClass = CMS_PateStateU.getPubClass(this.data.state);
			var cmsClass = CMS_PateStateU.getCMSClass(this.data.stateCMS);
			tag += '<div class="_subDir '+pubClass + " " + cmsClass +'" data-no="'+this.no+'" id="'+this.uid+'" data-isOpen="1" >';
			tag += '	<div class="_table _btn_dir ">';
			tag += '		<div class="_cell">';
			tag += '			<span data-no="'+this.no+'" class="_btn_dir_text" data-id="'+this.uid+'" data-name="'+this.data.name+'" data-myid="'+this.data.id+'">'
			tag += '			<span class="_icon"><i class="fa fa-folder-open fa-lg"></i> </span>'+this.data.name+pubText+'</span>';
			tag += '		</div>';
			tag += '		<div class="_cell _settingTD _pdt5">'
			tag += '			<span data-no="'+this.no+'" class=" _btn_dir_setting"><i class="fa fa-exclamation"></i> 設定</span>'
			tag += '		</div>';
			tag += '		<div class="_cell _wideShow _cell_edit">'
			tag += '			<div class="_right _pdt5"><div class="_cms_btn_alpha _btn_setting_all"><i class="fa fa-level-up fa-rotate-180 "></i> まとめて設定</div></div>';
			tag += '		</div>';
			tag += '		<div class="_cell _wideShow _cell_pub">'
			tag += '			<div class="_right _pdt5"><div class="_cms_btn_alpha _btn_publish_all"><i class="fa fa-level-up fa-rotate-180 "></i> まとめて公開</div></div>';
			tag += '		</div>';
			tag += '	</div>';
		} else{
			tag += '<div id="'+this.uid+'">';
		}
		
		//置換えエリア
			tag += '	<div class="_replaceAreaClose">'+this.getState()+'</div>';
			tag += '	<div class="_replaceArea"></div>';
			if(this.deep <= 1){
				tag += '<div class="_btnInfo clearfix" >'
				tag += '	<div class="_btnAdd  _btn_add _btn_add_file ss_icon _file_add2" data-tooltip2="ページ追加"></div>';
				tag += '</div>';
			}
			tag += '	<div class="clearfix _btns _btns_'+ this.path +' _show">';
			tag += '		<span class="_label">先頭に追加</span>';
			tag += '		<span class="_cms_btn_alpha _btn_add_t _btn_add_dir_t ss_icon _dir_add" data-tooltip="グループ追加"></span>';
			tag += '		<span class="_cms_btn_alpha _btn_add_t _btn_add_html_t ss_icon _html_add" data-tooltip="見出し追加"></span>';
			tag += '		<span class="_cms_btn_alpha _btn_add_t _btn_add_file_t ss_icon _file_add" data-tooltip="ページ追加"></span>';
			tag += '		<span class="_label" style="margin:0 0 0 20px;">最後に追加</span>';
			tag += '		<span class="_cms_btn_alpha _btn_add _btn_add_dir ss_icon _dir_add" data-tooltip="グループ追加"></span>';
			tag += '		<span class="_cms_btn_alpha _btn_add _btn_add_html ss_icon _html_add" data-tooltip="見出し追加"></span>';
			tag += '		<span class="_cms_btn_alpha _btn_add _btn_add_file ss_icon _file_add" data-tooltip="ページ追加"></span>';
			tag += '	</div>';
			tag += '</div>';
			
		this.view = $(tag);
		this.parentView.append(this.view);
		this.v.replaceAreaClose  = this.view.find('> ._replaceAreaClose');
		this.v.replaceView  = this.view.find('> ._replaceArea');
		this.v.replaceView.append(DragControllerFileList.getDropTag(this.no));

		this.v._btnInfoBtn = this.view.find('._btnInfo ._btn_add');
		this.v._btnInfoBtn.click(function(){ this_.openEditFileInfo_NewFile("LAST") });

		this.v.btn_setting_all = this.view.find('._btn_setting_all');
		this.v.btn_setting_all.click(function(){ this_.editSubFiles() });
		this.v.btn_setting_all.hover(
			function(){ this_.view.addClass("_hoverSetAll") },
			function(){ this_.view.removeClass("_hoverSetAll") }
		);

		this.v.btn_publish_all = this.view.find('._btn_publish_all');
		this.v.btn_publish_all.click(function(){ this_.publishAll() });
		this.v.btn_publish_all.hover(
			function(){ this_.view.addClass("_hoverPubAll") },
			function(){ this_.view.removeClass("_hoverPubAll") }
		);
		
		this.v.btn_dir = this.view.find('._btn_dir_text');
		this.v.btn_dir.click(function(){ this_.openCloseSubDir(this_.view) });
		this.v.btn_dir.bind("_closeAll",function(){ this_.closeSubDir(this_.view) });
		this.v.btn_dir.bind("_openAll" ,function(){ this_.openSubDir(this_.view) });
		// this.v.btn_dir.hover( 
		// 	function(event){this_.showFlowtPreview(this); event.stopPropagation();},
		// 	function(){Float_Preview.stageOut();}
		// );
		CMS_PageList_ListDB.add_(this.v.btn_dir);
		
		//初期開閉の判別
		if(this.data.id == "sitemap_root"){
			this.isInitOpen = true;
		} else{
			if(CMS_StatusFunc.checkSitemapDirOpens_by_id(this.data.id)){
				this.isInitOpen = true;
				
			} else{
				this.isInitOpen = false;
				this.closeSubDir(this.view);
			}
		}
		if(this.isInitOpen){
			this.v.replaceAreaClose.hide();
		}
		
		this.v.btn_add_t = this.view.find('._btn_add_t');
		this.v.btn_add_t.hover(
			function(){this_.firstDrops.addClass("_active")},
			function(){this_.firstDrops.removeClass("_active")}
		);
		this.v.btn_add = this.view.find('._btn_add');
		this.v.btn_add.hover(
			function(){this_.lastDrops.addClass("_active")},
			function(){this_.lastDrops.removeClass("_active")}
		);
		
		this.v.btn_setting = this.view.find('._btn_dir_setting');
		this.v.btn_setting.click(function(){ this_.showSetting(this); });
		
		this.v.add_dir_t = this.view.find('> ._btns > ._btn_add_dir_t');
		this.v.add_dir = this.view.find('> ._btns > ._btn_add_dir');
		this.v.add_dir_t	.click( function(){ this_.openEditFileInfo_NewDir("FIRST") });
		this.v.add_dir		.click( function(){ this_.openEditFileInfo_NewDir("LAST") });
		
		this.v.add_file_t = this.view.find('> ._btns > ._btn_add_file_t');
		this.v.add_file = this.view.find('> ._btns > ._btn_add_file');
		this.v.add_file_t	.click( function(){ this_.openEditFileInfo_NewFile("FIRST") });
		this.v.add_file		.click( function(){ this_.openEditFileInfo_NewFile("LAST") });
		
		if(this.deep > 0){ 
			DragControllerFileList.setDrag(this.parent,this.view,DragController.FILE_DROP);
		}
		
		this.v._btn_add_html_t = this.view.find('> ._btns > ._btn_add_html_t');
		this.v._btn_add_html = this.view.find('> ._btns > ._btn_add_html');
		this.v._btn_add_html_t	.click( function(){ this_.openEditFileInfo_NewHTML("FIRST") });
		this.v._btn_add_html	.click( function(){ this_.openEditFileInfo_NewHTML("LAST") });
	}
		
	p.getState = function(){
		return "";
	}
	
	p.showSetting = function(_tar){
		var no = Number($(_tar).attr("data-no"));
		CMS_PageList_ListEditNo = no;
		this.openEditFileInfo_EditDir(no);
	}
	
	// p.showFlowtPreview = function(_tar){
	// 	var tar = $(_tar);
	// 	var param = { id: tar.data("myid"), name: tar.data("name") }
	// 	var xy= { x:tar.offset().left, y:tar.offset().top }
	// 	Float_Preview.stageIn(Dic.ListType.DIR,xy,param);
	// }
	
	/* ---------- ---------- ---------- */
	
	p.isInitOpen
	
	/* ---------- ---------- ---------- */
	//#メニュー開閉 ディレクトリクリック時にコール
	
	p.openCloseSubDir 	 = function (tar){
		
		//ファイルドラッグ後にコールされるので、そのときはブロック
		if(DragControllerFileList.isDraging())return;
		
		//
		if(tar.attr("data-isOpen") == "1"){
			this.closeSubDir(tar);
		} else {
			this.openSubDir(tar);
		}
		CMS_PageListViewTree.saveDirManager();
	}
	p.closeSubDir  		 = function (tar){
		tar.addClass("_close");
		tar.find("._replaceAreaClose:first").show();
		tar.find("._replaceArea:first").hide();
		tar.find("._btns:last").removeClass("_show");
		tar.find("._icon:first").html('<i class="fa fa-folder fa-lg"></i> ');
		tar.attr("data-isOpen","0");
		
		
	}
	p.openSubDir  		 = function (tar){
		if(this.isInitOpen == false){
			this.isInitOpen = true;
			this.update();
		}
		tar.removeClass("_close");
		tar.find("._replaceAreaClose:first").hide();
		tar.find("._replaceArea:first").slideDown(200);
		tar.find("._btns:last").addClass("_show");
		tar.find("._icon:first").html('<i class="fa fa-folder-open fa-lg"></i> ');
		tar.attr("data-isOpen","1");
	}
	
	/* ---------- ---------- ---------- */
	//#フォルダ・ファイルの作成・編集・削除
	
	//新規フォルダ
	p.openEditFileInfo_NewDir   = function (_pos){
		if(window.isLocked(true))return;
		this.openEditFileInfo_comp("dir_new",FileInfoView_U.getParam("dir_new"),"",_pos);
	}
	p.openEditFileInfo_NewFile  = function (_pos){
		if(window.isLocked(true))return;
		var extra = { uid : this.gloupUID }
		// var ss = FileInfoView_U.getParam("file_new",{ uid : this.gloupUID });
		// console.log([ss.id,ss.dir,ss.name]);
		// return 
		this.openEditFileInfo_comp("file_new",FileInfoView_U.getParam("file_new",extra),"",_pos);
	}
	p.openEditFileInfo_NewHTML  = function (_pos){
		if(window.isLocked(true))return;
		this.openEditFileInfo_comp("html_new",FileInfoView_U.getParam("html_new"),"",_pos);
	}
	//それぞれ編集
	p.openEditFileInfo_EditDir  = function (_no){
		FileInfoView.stageIn("dir_edit",this.parent,this.parent.getDataAt(_no));
	}
	p.openEditFileInfo_EditFile = function (_no){
		editOriginData = clone(this.getDataAt(_no));
		FileInfoView.stageIn("file_edit",this,this.getDataAt(_no));
	}
	p.openEditFileInfo_EditHTML = function (_no){
		editOriginData = clone(this.getDataAt(_no));
		FileInfoView.stageIn("html_edit",this,this.getDataAt(_no));
	}
	
	//それぞれのコールバック
	p.openEditFileInfo_comp   = function (_action,_param,_extra,_pos){
		var this_ = this;
		
		//自動テスト用
		window._lastAddFile = _param;
		
		//new
		if(_pos == "FIRST"){
			if (_action == "dir_new") this.addDataAt(_param,0);
			if (_action == "file_new") this.addDataAt(_param,0);
			if (_action == "html_new") this.addDataAt(_param,0);
		} else {
			if (_action == "dir_new") this.addData(_param);
			if (_action == "file_new") this.addData(_param);
			if (_action == "html_new") this.addData(_param);
		}
		
		//edit
		if(_action == "dir_edit"){
			if(_extra =="delete"){
				var s1 = "削除の確認"
				var s2 = "グループ内のページも削除されますが、削除しますか？"
				CMS_ConfirmView.stageIn(s1,s2,function(){
					this_.removeDataAll(CMS_PageList_ListEditNo);
				},"DELL")
			} else{
				this.changeData(_param,CMS_PageList_ListEditNo);
			}
		}
		if(_action == "file_edit" || _action == "html_edit"){
			//ファイル編集削除の場合は、出力ファイル名の変更を行う
			editedData = clone(this.getDataAt(CMS_PageList_ListEditNo));
			if(_extra =="delete"){
				CMS_PageListViewTree.deleteFile(editedData);
				this.removeData(CMS_PageList_ListEditNo);
			} else{
				CMS_PageListViewTree.changeFileName(editedData,editOriginData);
				this.changeData(_param,CMS_PageList_ListEditNo);
			}
		}
		this.update();
	}
	
	/* ---------- ---------- ---------- */

	//#Update		
	p.tID;
	p.update = function (){
		//ドラッグ時になんどもコールされるので、ディレイ
		var this_ = this;
		if(this.tID) clearTimeout(this.tID);
		this.tID = setTimeout(function(){
			this_.update_delay();
		},50);
	}
	
	p.update_delay = function (){
		//初期に開いてないディレクトリは、レンダリングしない
		//開いたときに、レンダリング
		if(this.isInitOpen == false) return;
		
		//
		var this_ = this;
		var list = this.gridData.getRecords();
		
		if(this.nodeList != undefined){
			for (var i = 0; i <  this.nodeList.length ; i++) {
				this.nodeList[i].remove();
				this.nodeList[i] = null;
			}
		}
		this.nodeList = [];
		
		this.v.replaceView.html("");
		this.v.replaceView.append(DragControllerFileList.getDropTag(0));
		var dirCount = 0;
		for (var i = 0; i < list.length ; i++) {
			if(list[i]){
				var type = list[i].type;
				var name = list[i].name;
				var name15 = CMS_U.roundText(list[i].name,15);
				if(type == Dic.ListType.DIR ){
					var filelist = new CMS_PageList_ListClass();
						filelist.registParent(this_,this_.v.replaceView,this.deep+1,dirCount++);
						filelist.initData(list[i],i);
					this.nodeList.push(filelist);
				}
				if(type == Dic.ListType.PAGE){
					var page = new CMS_PageList_PageClass(this, this.v.replaceView , list[i],i);
					this.nodeList.push(page);
				} 
				if(type == Dic.ListType.HTML){
					var tag  = '<div class="_table _btn_html" data-no="'+i+'">'
						tag += '	<div class="_cell" style="width:17px;"><i class="fa fa-lg fa-font" style="margin:0px 2px 0 2px;"></i></div>';
						tag += '	<div class="_cell"><span class="_btn_file_text">'+name15+'</span></div>';
						// tag += '	<div class="_cell _settingTD " ><span data-no="'+i+'" class="_btn_html_setting ss_icon _fileinfo2"></span></div>';
						tag += '	<div class="_cell _settingTD " ><span data-no="'+i+'" class="_btn_html_setting"><i class="fa fa-exclamation"></i> 設定</span></div>';
						tag += '	<div class="_cell _wideShow " style="width:400px;"></div>';
						tag += '</div>';
					this.v.replaceView.append(tag);
				}
				this.v.replaceView.append(DragControllerFileList.getFileDropTag(i+1));
			}
		}
		
		//
		var drops = this.v.replaceView.find("._dropArea");
		this.firstDrops = drops.eq(0);
		this.lastDrops = drops.eq(drops.length-1);
		
		//ドラッグイベントアサイン
		DragControllerFileList.setDrag(this,this.v.replaceView.find(' > ._btn_page'),DragController.FILE_DROP)
		DragControllerFileList.setDrag(this,this.v.replaceView.find(' > ._btn_html'),DragController.FILE_DROP)
		DragControllerFileList.setDrop(this,this.v.replaceView.find(' > ._dropArea'),DragController.FILE_DROP);
		
		//HTMLの[i]ボタン
		this.v.btn_html_setting = this.v.replaceView.find(' > ._table > ._cell > ._btn_html_setting');
		this.v.btn_html_setting.click( function(event){ this_.clickHTML(this);event.stopPropagation(); });
		
		this.isRemoved = false;
		CMS_PageListViewTree.updatedSitemap();
		CMS_PageDB.updateSitemap();
	}
	
	//HTML設定クリック
	p.clickHTML = function(_tar){
		var no = Number($(_tar).attr("data-no"));
		CMS_PageList_ListEditNo = no;
		this.openEditFileInfo_EditHTML(no);
	}
	
	p.remove = function(){
		this.isRemoved = true;
		if(this.nodeList){
			for (var i = 0; i <  this.nodeList.length ; i++) {
				this.nodeList[i].remove();
			}
		}
		this.nodeList = null;
	}
	
	/* ---------- ---------- ---------- */
	
	//まとめて編集
	p.editSubFiles = function(){
		var this_ = this;
		SitemapEditView.stageIn(this.data,function(_list,_changeNameList){
			this_.update();
			this_.renameAll(_changeNameList);
		});
	}
	p.renameAll = function(_a){
		if(_a == undefined) return;
		if(_a.length == 0) return;
		Storage.Util.renameAll(_a);
	}
	
	//まとめて書き出し
	p.publishAll = function(){
		if(window.isLocked(true))return;
		//
		this.subPages = [];
		this.getAllPage(this.gridData.getRecords());
		BatchPublishView.stageIn(this.subPages);
	}
	
	p.getAllPage = function(_list){
		for (var i = 0; i <  _list.length ; i++) {
			if(_list[i].type == Dic.ListType.DIR){
				this.getAllPage(_list[i].list);
			}
			if(_list[i].type == Dic.ListType.PAGE){
				this.subPages.push(_list[i])
			}
		}
	}
	return c;
})();

var CMS_PageList_PageDB = (function(){
	
	var list = [];
	
	function _trace(){
		return list;
	}
	function add_(_page){
		var a = []
		for (var i = 0; i <  list.length ; i++) {
			if(list[i].isRemoved == false){
				a.push(list[i])
			}
		}
		list = a;
		list.push(_page);
	}

	/* ---------- ---------- ---------- */
	
	function getPage(_id,_dir){
		for (var i = 0; i <  list.length ; i++) {
			if(list[i].param.id == _id){
			if(list[i].param.dir == _dir){
				return list[i];
			}
			}
		}
		return null;
	}

	/* ---------- ---------- ---------- */

	var tID;
	function updateState(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			updateState_delay()
		},200);
	}
	function updateState_delay(){
		for (var i = 0; i <  list.length ; i++) {
			list[i].updateState();
		}
	}
	
	/* ---------- ---------- ---------- */

	var tID2;
	function updateEditState(){
		if(tID2) clearTimeout(tID2);
		tID2 = setTimeout(function(){
			updateState_delay()
		},200);
	}
	function updateEditState_delay(){
		for (var i = 0; i <  list.length ; i++) {
			list[i].updateEditState();
		}
	}
	return {
		_trace: _trace,
		add_: add_,
		getPage: getPage,
		updateState: updateState,
		updateEditState: updateEditState
	}
})();

var CMS_PageList_PageClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_parentV,_param,_no) {
	  this.init(_parent,_parentV,_param,_no);
	}
	var p = c.prototype;
	
	/* ---------- ---------- ---------- */

	p.init = function(_parent,_parentV,_param,_no) {
		this.type = Dic.ListType.PAGE;
		this.parent = _parent;
		this.parentView = _parentV;
		this.param = _param;
		this.no = _no;
		this.v = {}
		
		this.createLayout();
	}
	
	p.createLayout = function() {
		var this_ = this;
		
		var param = this.param;
		var name = param.name;
		var name15 = CMS_U.roundText(CMS_TagU.treatTag(param.name),15);
		var name20 = CMS_U.roundText(CMS_TagU.treatTag(param.name),20);

		var path =  CMS_Path.PAGE.getAbsPath(param.id,param.dir);
		var _save = CMS_SaveDateU.getRelatedDate(param.saveDate);
		var _pub = CMS_SaveDateU.getRelatedDate(param.publicDate);
		
		this.pageID  = CMS_PageID.getID(param.id,param.dir);
		var pubText  = CMS_PateStateU.getStateText(param.state);
		var pubClass = CMS_PateStateU.getPubClass(param.state);
		var cmsClass = CMS_PateStateU.getCMSClass(param.stateCMS);

		var tags = (param.tag) ? param.tag : '--';
		var dd = (param.date) ? param.date : '--';

		var tag  = '<div class="_table _btn_page '+pubClass+" "+cmsClass+'" data-no="'+this.no+'" id="'+this.pageID+'">'
			tag += '	<div class="_cell" style="width:17px;"><i class="fa fa-lg fa-file-text" style="margin:2px 2px 0 2px;"></i></div>';
			tag += '	<div class="_cell _wideHide"><span class="_btn_file_text">'+name15 + pubText+'</span></div>';
			tag += '	<div class="_cell _wideShow"><span class="_btn_file_text">'+name20 + pubText+'</span><span class="_path">'+path+'</span></div>';
			// tag += '	<div class="_cell _settingTD _settingTD_file"><span class=" _btn_file_setting ss_icon _fileinfo2"></span></div>';
			tag += '	<div class="_cell _settingTD _settingTD_file"><span class=" _btn_file_setting "><i class="fa fa-exclamation"></i> 設定</span></div>';
			tag += '	<div class="_cell _wideShow" style="width:400px;">';
			tag += '			<div class="_right _w50 _fs10 _date _date_publish">' + _pub + '</div>'
			tag += '			<div class="_right _cms_btn_alpha _commandBtnsN _btn_publish_more"><i class="fa fa-external-link-square "></i></div>'
			tag += '			<div class="_right _cms_btn_alpha _commandBtnsA _btn_publish"><i class="fa fa-globe "></i> 公開</div>'
			tag += '			<div class="_right _w50 _fs10 _date _date_save">' + _save + '</div>';
			tag += '			<div class="_right _cms_btn_alpha _commandBtnsN _btn_save"><i class="fa fa-check "></i> 保存済</div>'
			tag += '			<div class="_right _cms_btn_alpha _commandBtnsN _btn_save_pre"><i class="fa fa-pencil "></i> 保 存</div>'
			tag += '			<div class="_right _op5 _fs10 _pd5"><i class="fa fa-lg fa-calendar "></i> '+dd+' </div>'
			tag += '			<div class="_right _op5 _fs10 _pd5"><i class="fa fa-lg fa-tags "></i> '+tags+' </div>'
			tag += '		</div>';
			tag += '	</div>';
		this.view = $(tag);
		this.parentView.append(this.view);
		
		//ページボタン
		this.view.click( function(event){ 
			this_.clickPage(this);
			event.stopPropagation();
		});
		this.view.hover( 
			function(event){ 
				this_.hoverPage(this);
				event.stopPropagation()
			},
			function(){ 
				Float_Preview.stageOut();
			}
		);
		
		
		this.v.btn_setting = this.view.find(' ._btn_file_setting');
		this.v.btn_setting.click(function(event) {
			this_.clickSetting(this);
			event.stopPropagation();
		});
		
		//公開ボタン
		this.v.btn_save = this.view.find('._btn_save');
		this.v.btn_save_pre = this.view.find('._btn_save_pre');
		this.v.btn_save_pre.click(function(event) {
			this_.save();
			event.stopPropagation();
		});	
		this.v.btn_save_pre.hide();
		
		//公開ボタン
		this.v.btn_publish = this.view.find('._btn_publish');
		this.v.btn_publish.click(function(event) {
			this_.publish();
			event.stopPropagation();
		});	
		
		//開く
		this.v.btn_publish_more = this.view.find('._btn_publish_more');
		this.v.btn_publish_more.click(function(event) {
			this_.openURL();
			event.stopPropagation();
		});	
		
		this.v.publish = this.view.find(' ._date_publish');
		this.v.save = this.view.find(' ._date_save');
		
		this.isRemoved = false;
		CMS_PageList_PageDB.add_(this);
	}
	
	p.openURL = function(){
		var u = CMS_Path.PAGE.getRelPath(this.param.id,this.param.dir);
		var t = u;
			t = t.split("/").join("");
			t = t.split(".").join("");
		window.open(u,t);
	}
	
	//ページクリック
	p.clickPage = function(){
		CMS_MainController.openPage(this.param);
		Float_Preview.stageOut_core();
	}
	
	//ホバープレビュー
	
	p.hoverPage = function(_tar){
		var no = Number($(_tar).attr("data-no"));
		var xy= { x:$(_tar).offset().left, y:$(_tar).offset().top };
		Float_Preview.stageIn( Dic.ListType.PAGE ,xy,this.param);
	}
	
	//設定クリック
	p.clickSetting = function(_tar){
		CMS_PageList_ListEditNo = this.no;
		this.parent.openEditFileInfo_EditFile(this.no);
	}
	
	//保存処理
	p.save = function(){
		if(window.isLocked(true))return;
		CMS_MainController.savePageByID(this.param.id, this.param.dir);
	}
	
	//公開処理
	p.publish = function(){
		if (window.isLocked(true)) return;
		
		var this_ = this;
		var storage = new Storage.Online(Dic.PageType.PAGE,this.param.id,this.param.dir,"{}")
			storage.load(function(_storage){
				_storage.publicData(function(){
					CMS_PageList_PageDB.updateState();
				})
			});
	}
	//時間ステート更新
	p.updateState = function(){
		this.v.publish.html( CMS_SaveDateU.getRelatedDate(this.param.publicDate) );
		this.updateEditState()
	}
	
	//編集中ステート更新
	p.updateEditState = function(){
		if(CMS_PageList_StateManager.isEdited(this.param.id,this.param.dir)){
			this.v.btn_save_pre.show();
			this.v.btn_save.hide();
		} else{
			this.v.btn_save_pre.hide();
			this.v.btn_save.show();
		}
		this.v.save.html( CMS_SaveDateU.getRelatedDate(this.param.saveDate) );
	}
	
	p.remove = function(){
		this.isRemoved = true;
	}
	
	return c;
})();

//ページ編集ステートを管理する。サイトマップのDate更新用
var CMS_PageList_StateManager = (function() {

	var list = []
	function hasData(_id,_dir) {
		_dir = _dir || "";
		for (var i = 0; i < list.length; i++) {
			if (_id == list[i][0]) {
			if (_dir == list[i][1]) {
				return true;
			}
			}
		}
		return false;
	}

	/* ---------- ---------- ---------- */

	function isEdited(_id,_dir){
		var b = hasData(_id,_dir);
		// console.log([b,_id,_dir]);
		return b;
	}
	/* ---------- ---------- ---------- */

	function openedPage(_page){
		//
	}
	
	var lastEeditID;
	var lastEeditDIR;
	
	function editedPage(_id,_dir){
		_dir = _dir || "";
		if (hasData(_id,_dir) == false) {
			list.push([_id,_dir]);
		}
		
		var b  = true
		if(lastEeditID == _id){
			if(lastEeditDIR == _dir){
				b = false;
			}
		}
		if(b)CMS_PageList_PageDB.updateEditState();
		lastEeditID = _id;
		lastEeditDIR = _dir;
	}
	function savedPage(_id,_dir){
		_dir = _dir || "";
		var a = []
		for (var i = 0; i < list.length; i++) {
			var b = true;
			if (_id == list[i][0]) {
				if (_dir == list[i][1]) {
					b = false;
				}
			}
			if(b)a.push(list[i]);
		}
		list = a;
		CMS_PageList_PageDB.updateEditState();
		lastEeditID = false;
		lastEeditDIR = false;
	}
	
	function publishedPage(_id,_dir){
		_dir = _dir || "";
		CMS_PageList_PageDB.updateEditState();
	}
		
	function unPublishedPage(_id,_dir){
		_dir = _dir || "";
		CMS_PageList_PageDB.updateEditState();
	}	
	
	/* ---------- ---------- ---------- */

	return {
		openedPage:openedPage,
		editedPage:editedPage,
		savedPage:savedPage,
		publishedPage:publishedPage,
		unPublishedPage:unPublishedPage,
		isEdited:isEdited
	}
})();

var CMS_SidePreviewState = {
	isLiveTab:false,
	isLiveCheck:false,
	currentWs:[1000],
	currentZoom:0.33
}
var CMS_SidePreview = (function(){
	var view;
	var viewClose;
	var v = {};
	
	function init(){
		view = $('#CMS_SidePreview');
		v.root = $("body");
		stageInit();
		//setBtn();
		//stageIn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = ''
			tag += '<div class="_header">'
			tag += '	<div class="_cms_btn_alpha _btn_close"><i class="fa fa-desktop "></i> <i class="fa fa-caret-right "></i> </div>';	
			tag += '	<div class="_row _row_init_hide _row_view clearfix">'
			tag += '		<div class="_row_init_hide">'
			tag += '			<div class="_btnSet">'
			tag += '			幅 : ';
			tag += '				<span class="_btn_ws _cms_btn_alpha"> </span>'
			tag += '			</div>';
			tag += '			<div class="_btnSet">'
			tag += '				拡大 : ';
			tag += '				<span class="_cms_btn_alpha _btn_zoomIn"><i class="fa fa-lg fa-plus-circle "></i> </span>';
			tag += '				<span class="_cms_btn_alpha _btn_zoom">100%</span>';
			tag += '				<span class="_cms_btn_alpha _btn_zoomOut"><i class="fa fa-lg fa-minus-circle "></i> </span>';
			tag += '			</div>';
			tag += '		</div>'	
			tag += '	</div>'		
			tag += '	<div class="_row _row_init_hide _row_tab clearfix">'
			tag += '		<div class="_cms_btn_alpha _tab _tab_pub">公開ページ</div>'
			tag += '		<div class="_cms_btn_alpha _tab _active _tab_pub_ac">公開ページ</div>'
			tag += '		<div class="_cms_btn_alpha _tab _tab_live"><i class="fa fa-refresh"></i> ライブプレビュー</div>'
			tag += '		<div class="_cms_btn_alpha _tab _active _tab_live_ac"><i class="_ic1 fa fa-refresh "></i> <i class="_ic2 fa fa-refresh _icon_autorepeat fa-spin"></i> ライブプレビュー</div>'
			tag += '		<div style="float:right;margin:5px 5px 0 0;">'
			tag += 			CMS_GuideU.getGuideTag("window/preview","_BASE_","dark");
			tag += '		</div>'
			tag += '	</div>'	
			tag += '	<div class="_row _row_init_hide _row_function clearfix">'
			tag += '		<div class="_left _live_btns">'
			tag += '			<div class="_btnSet _btn_reload_live _cms_btn_alpha"><i class="fa fa-repeat "></i> リロード</div>'
			tag += '			<div class="_btnSet _btn_live _cms_btn_alpha"><i class="fa fa-square-o "></i> 自動更新</div>'
			tag += '			<div class="_btnSet _btn_live_ac _cms_btn_alpha"><i class="fa fa-check-square "></i>  自動更新</div>'
			tag += '		</div>'	
			tag += '		<div class="_left _pub_btns">'
			tag += '			<div class="_btnSet _btn_reload_pub _cms_btn_alpha"><i class="fa fa-repeat "></i> リロード</div>'
			tag += '		</div>'	
			tag += '		<div class="_right">'
			tag += '			<div class="_btnSet _btn_blank _cms_btn_alpha">別ウィンドウ <i class="fa fa-external-link-square "></i></div>'
			tag += '		</div>'	
			tag += '	</div>'	
			tag += '</div>'	
			tag += '<div class="_body">'
			tag += '</div>'

		view.append(tag);
		v.body = view.find('._body');
		
		v.btn_reload_pub 	= view.find('._btn_reload_pub');
		v.btn_reload_live 	= view.find('._btn_reload_live');
		v.btn_blank 		= view.find('._btn_blank');
		
		v.btn_reload_pub.click(function(){ if(current) current.reload() });
		v.btn_reload_live.click(function(){ if(current) current.reload() });
		v.btn_blank.click(function(){ if(current) current.openExternal() });
		
		v.btn_ws = view.find('._btn_ws');
		v.btn_ws.click(function(){ 
			setW(prompt("プレビュー幅を指定してください(px)。カンマで区切ると複数のプレビューを作成できます。",currentWs.join(",")));
		});
		v._btn_zoom = view.find('._btn_zoom');
		v._btn_zoom.click(function(){ zoomInput() });	
		v._btn_zoomOut = view.find('._btn_zoomOut');
		v._btn_zoomIn = view.find('._btn_zoomIn');
		v._btn_zoomOut.click(function(){ zoomOut() });	
		v._btn_zoomIn.click(function(){ zoomIn() });	
		
		v._btn_close = view.find('._btn_close');
		v._btn_close.click(function(){ CMS_StageController.openPreviewStage(false)});
		
		v._row_init_hide = view.find('._row_init_hide');
		
		setLiveTabInit()
		initStage();
	}
	
	/* ---------- ---------- ---------- */
	
	function setLiveTabInit(){
		v.ic1 = view.find('._ic1');
		v.ic2 = view.find('._ic2');
		
		v.pub_btns = view.find('._pub_btns');
		v.live_btns = view.find('._live_btns');
		
		v._tab_pub	 = view.find('._tab_pub');
		v._tab_pub_ac = view.find('._tab_pub_ac');
		v._tab_live	 = view.find('._tab_live');
		v._tab_live_ac = view.find('._tab_live_ac');
		v._tab_pub.click(function(){ showLive(false) });
		v._tab_live.click(function(){ showLive(true) });
		
		v.btn_live = view.find('._btn_live');
		v.btn_live_ac = view.find('._btn_live_ac');
		v.btn_live.click(function(){ playLive(true) });
		v.btn_live_ac.click(function(){ playLive(false) });
		//
		var b = (Storage.Memo.getPreviewisLiveTab() == "1") ? true:false;
		var b2 = (Storage.Memo.getPreviewisLiveCheck() == "1") ? true:false;
		
		showLive(b,false);
		playLive(b2,false);
		
	}
	var isLiveCheck
	function playLive(_b,_isUpdate){
		if(_isUpdate == undefined) _isUpdate= true;
		isLiveCheck = _b;
		v.btn_live.hide()
		v.btn_live_ac.hide()
		v.ic1.hide()
		v.ic2.hide()
		if(isLiveCheck){
			v.btn_live_ac.show()
			v.ic2.show()
		} else{
			v.btn_live.show()
			v.ic1.show()
		}
		CMS_SidePreviewState.isLiveCheck = isLiveCheck;
		Storage.Memo.setPreviewisLiveCheck( isLiveCheck ? "1" : "0" );
	}
	var isLiveTab
	function showLive(_b,_isUpdate){
		if(_isUpdate == undefined) _isUpdate= true;
		isLiveTab = _b;
		
		v.pub_btns.hide()
		v.live_btns.hide()
		
		v._tab_pub.hide()
		v._tab_pub_ac.hide()
		v._tab_live.hide()
		v._tab_live_ac.hide()
		if(isLiveTab){
			v._tab_pub.show()
			v._tab_live_ac.show()
			v.live_btns.show()
		} else{
			v._tab_pub_ac.show()
			v._tab_live.show()
			v.pub_btns.show()
		}
		CMS_SidePreviewState.isLiveTab = isLiveTab;
		Storage.Memo.setPreviewisLiveTab( isLiveTab ? "1" : "0" );
		if(current) current.updateTabState();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentWs
	
	function updateState(){
		Storage.Memo.setPreviewisLiveCheck( isLiveCheck ? "1" : "0" );
		Storage.Memo.setPreviewisLiveTab( isLiveTab ? "1" : "0" );
		Storage.Memo.setPreviewState([ currentZoom , currentWs.join(",") ]);
		//
		updateStateView();
		for (var i = 0; i <  pages.length ; i++) {
			pages[i].reset();
		}
		if(current) current.updateWS_State();
	}
	function updateStateView(){
		CMS_SidePreviewState.currentWs = currentWs;
		CMS_SidePreviewState.currentZoom = currentZoom;
		
		v._btn_zoom.html(currentZoom+"%");
		v.btn_ws.html(currentWs.join(",")+"px");
		
		var s = currentZoom /100
		var ww = 0
		for (var i = 0; i < currentWs.length ; i++) {
			ww += currentWs[i] * s;
		}
		CMS_StageController.setSideW(ww);
		updateZoomState();
		
	}
	
	function initStage(){
		var state = Storage.Memo.getPreviewState();
		currentZoom = parseInt(state[0]);
		if(currentZoom < 10)currentZoom = 50;
		if(currentZoom > 100)currentZoom = 100;
		currentWs = state[1].split(",");
		
		updateStateView();
	}
	function setW(_s){
		if(!_s)return;
		var a = _s.split(",")
		for (var i = 0; i < a.length ; i++) {
			if(isNaN(a[i]))return;
		}
		currentWs = _s.split(",");
		for (var i = 0; i < currentWs.length ; i++) {
			var s = currentWs[i]
			if(s < 320)s = 320;
			if(s > 2000)s = 2000;
			currentWs[i] = s
		}
		updateState();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentZoom = 50;
	var zooms = [ 25, 33, 50, 75, 100 ];
	function zoomInput(){
		zoom(parseInt(prompt("ズーム値を指定してください(10〜100%)",currentZoom)));
	}
	function zoomIn(){
		var s = 100;
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom < zooms[i]){
				s = zooms[i];
				break;
			}
		}
		zoom(s);
	}
	function zoomOut(){
		var s = zooms[0];
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom > zooms[i]){
				s = zooms[i];
			}
		}
		zoom(s);
	}
	function zoom(_s){
		if(!_s)return;
		if(isNaN(_s))return;
		if(currentZoom == _s)return;
		 if(_s >= 100) { _s = 100; }
		 if(_s <= zooms[0]) { _s = zooms[0]; }
		currentZoom = _s;
		updateState();
	}
	function updateZoomState(){
		v._btn_zoomIn.removeClass("_btn_disable");
		v._btn_zoomOut.removeClass("_btn_disable");
		if(currentZoom == 100) {
			v._btn_zoomIn.addClass("_btn_disable");
		}
		if(currentZoom == zooms[0]) {
			v._btn_zoomOut.addClass("_btn_disable");
		}
	}
	
	/* ---------- ---------- ---------- */

	var pages = [];
	var current
	function openedPage(){
		if(!isOpen)return;
		if(CMS_PageDB.hasCurrent() == false)return;
		//
		v._row_init_hide.show();
		// var model = CMS_PageDB.getCurrentPageModel();
		var model = CMS_PageDB.getPreviewPageModel();
		var tar;
		for (var i = 0; i < pages.length ; i++) {
			var id1 = CMS_PageID.getID_s(pages[i].pageModel.id,pages[i].pageModel.dir)
			var id2 = CMS_PageID.getID_s(model.id,model.dir)
			if(id1 == id2){
				tar = pages[i];
			} else{
				pages[i].stageOut()
			}
		}
		if(!model) return;
		if(tar == undefined){
			var page = new CMS_SidePreviewPage(v.body,model);
				pages.push(page);
			tar = page;
		}
		current = tar;
		current.stageIn();
	}
	
	var tID
	function editedPage(_delay){
		if(!isOpen)return;
		if(!current) return;
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			current.editedPage()
		},500);
	}
	
	function savedPage(){
		if(!isOpen)return;
		if(!current) return;
		current.savedPage()
	}
	
	function publishedPage(){
		if(!isOpen)return;
		if(!current) return;
		current.publishedPage()
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.addClass("_open");
			v.root.addClass("_openPreview");
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			openedPage();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.removeClass("_open");
			v.root.removeClass("_openPreview");
		}
	}
	return {
		init: init,
		// reload: reload,
		openedPage: openedPage,
		editedPage: editedPage,
		savedPage: savedPage,
		publishedPage: publishedPage,
		
		stageIn: stageIn,
		stageOut: stageOut
	}
})();


var CMS_SidePreviewPage = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_pageModel) {
	  this.init(_parent,_pageModel);
	}
	var p = c.prototype;
	
	/* ---------- ---------- ---------- */

	p.init = function(_parent,_pageModel) {
		this.parentView = _parent;
		this.pageModel = _pageModel;
		this.url = CMS_Path.PAGE.getRelPath(_pageModel.id,_pageModel.dir);
		var tag =  '<div>';
			tag += '<div class="_frame_pub"></div>';
			tag += '<div class="_frame_live"></div>';
			tag += '</div>';
		this.view = $(tag);
		this.parentView.append(this.view);
		
		this.v = {}
		this.v.frame_pub  = this.view.find("._frame_pub");
		this.v.frame_live  = this.view.find("._frame_live");
		this.v.frame_live.hide()
		
		this.viewURL = this.pageModel.id + ".html"
		this.stageInit();
		
		this.initViewPub = false;
		//
		this.lastEditDateTime = new Date().getTime();
		this.lastLivePreviewTime = 0;
		//
		this.lastPublishDate = new Date().getTime();
	}
	
	/* ---------- ---------- ---------- */

	p.reset = function() {
		this.initViewPub = false;
		this.lastLivePreviewTime = 0;
		this.v.frame_pub.html("")
		this.v.frame_live.html("")
	}
	
	p.updateWS_State = function() {
		if(this.isLiveTab){
			this.update_liveView();
		} else{
			this.update_pubView();
		}
	}
	p.reload = function() {
		if(this.isLiveTab){
			this.lastLivePreviewTime = 0;
			this.update_liveView();
		} else{
			this.initViewPub = false;
			this.update_pubView();
		}
	}
	p.updateTabState = function() {
		this.showLive(CMS_SidePreviewState.isLiveTab);
	}
	
	/* ---------- ---------- ---------- */
	
	p.isLiveTab = false;
	//タブきりかえ
	p.showLive = function(_b) {
		if(this.isLiveTab == _b)return ;
		this.isLiveTab = CMS_SidePreviewState.isLiveTab;
		this.v.frame_pub.hide();
		this.v.frame_live.hide();
		
		if(this.isLiveTab){
			this.v.frame_live.show();
			this.update_liveView();
		} else{
			this.v.frame_pub.show();
			this.update_pubView();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//公開ページ
	p.initViewPub;
	p.update_pubView = function() {
		if(this.initViewPub)return;
		this.initViewPub = true;
		this.v.frame_pub.html(this.update_common(false));
	}
	
	//ライブプレビュー
	p.lastLivePreviewTime;
	p.update_liveView = function() {
		if(this.isLiveTab == false) return;
		var this_ = this;
		//
		var page = CMS_PageDB.getLivePreviewPage();
		if(page == undefined ) return;
		
		var d = this.lastEditDateTime;
		if(this.lastLivePreviewTime == d) return;
		this.lastLivePreviewTime = d;
		
		page.previewData(function(){
			this_.v.frame_live.html(this_.update_common(true));
		})
	}
	
	/* ---------- ---------- ---------- */
	
	p.update_common = function(_isLiveTab) {
		
		var currentWs = CMS_SidePreviewState.currentWs
		var s = CMS_SidePreviewState.currentZoom /100;
		var tag = "";
		var ww = 0;
		
		
		if(_isLiveTab){
			this.loadURL = CMS_Path.ASSET.REL + CMS_Path.PREVIEW_HTML;
			this.loadURL += "?p=" + DateUtil.getRandamCharas(10);
			this.loadURL += "&url=" + this.url;
		} else{
			this.loadURL = this.url;
			this.loadURL += "?p=" + DateUtil.getRandamCharas(10)
		}
		for (var i = 0; i < currentWs.length ; i++) {
			var ts = '';
				ts +="-webkit-transform: scale("+s+");"
				ts +="-moz-transform: scale("+s+");"
				ts +="-ms-transform: scale("+s+");"
				ts +="transform: scale("+s+");"
				ts += "width:"+(100/s)+"%;";
				ts += "height:"+(100/s)+"%;";
			
			var temp = '';
				temp += '<div class="_iframeDiv" style="width:{WW}px;">';
				temp += '	<iframe src="{U}" width="{W}" style="{S}"></iframe>';
				temp += '</div>';
			
			// if(CMS_PageDB.isCurrent_is_Setting()){
			// 	//外部JSONファイルを、キャッシュなしで読み込むように
			// 	this.loadURL += "&c=noChash";
			// }
			temp = temp.split("{U}").join(this.loadURL);
			temp = temp.split("{WW}").join(currentWs[i]*s);
			ww += currentWs[i] * s;
			temp = temp.split("{W}").join(currentWs[i]);
			temp = temp.split("{S}").join(ts);
			tag += temp;
		}
		return tag;
	}
	//p.c = 0
	p.openedPage = function() {
		this.updateTabState();
		if(this.isLiveTab){
			this.update_liveView();
		} else{
			this.update_pubView();
		}
	}
	p.editedPage = function() {
		if(!this.isLiveTab) return;
		if(CMS_SidePreviewState.isLiveCheck == false) return;
		var this_ = this;
		var page = CMS_PageDB.getLivePreviewPage();
		if(page == undefined ) return;
		//
		this.lastEditDateTime = new Date().getTime();
		page.previewData(function(){
			this_.update_liveView()
		})
	}
	p.savedPage = function() {
		var this_ = this;
		if(CMS_SidePreviewState.isLiveCheck == false) return;
		// if(CMS_PageDB.isFreePage() ) {
		// 	//
		// } else{
			var page = CMS_PageDB.getLivePreviewPage()
			if(page == undefined ) return;
			page.previewData(function(){
				this_.lastLivePreviewTime = 0;
				this_.v.frame_live.html(this_.update_common(true));
				// this_.update_liveView();
			})
		// }
	}
	
	p.lastPublishDate
	p.publishedPage = function() {
		if(this.isLiveTab) return;
		var currentDate = new Date().getTime();
		if(currentDate - this.lastPublishDate < 1000) return;
		this.lastPublishDate = currentDate;
		//
		this.initViewPub = false;
		this.update_pubView()
	}
	
	/* ---------- ---------- ---------- */
	
	p.getPageTitle = function() {
		return this.viewURL;
	}
	
	p.openExternal = function() {
		var u = ""
		var p = ""
		if(this.isLiveTab){
			p = u = CMS_Path.ASSET.REL + CMS_Path.PREVIEW_HTML;
			p += "?p=" + DateUtil.getRandamCharas(10);
			p += "&url=" + this.url;
		} else{
			p = u = this.url;
			p += "?p=" + DateUtil.getRandamCharas(10)
		}
		CMS_U.openURL_blank(p,u);
	}
	
	/* ---------- ---------- ---------- */

	/**/
	p.openFlg = false;
	p.stageInit = function() {
		this.openFlg = false
		//this.view.hide()
	}
	p.stageIn = function() {
		if (!this.openFlg) {
			this.openFlg = true;
			this.view.show();
			this.openedPage();
			
		}
	}
	p.stageOut = function() {
		if (this.openFlg) {
			this.openFlg = false
			this.view.hide()
		}
	}
	return c;
})();


var CMS_SidePreviewClose = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_SidePreviewClose');
		//stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = ''
			tag += '<div class="_header">';
			tag += '	<div class="_cms_btn_alpha _btn_open"><i class="fa fa-caret-left "></i> <i class="fa fa-desktop "></i> </div>';
			tag += '</div>';
			// tag += '<div class="_bottom"><div class="_core"></div></div>';
			// tag += '<div class="_bottom _b1"><div class="_core">+</div></div>';
			// tag += '<div class="_bottom _b2"><div class="_core">-</div></div>';
			
		view.append(tag);
		v.btn_open = view.find('._btn_open');
		v.btn_open.click(function() {
			CMS_StageController.openPreviewStage(true);
		});
	}
	
	function setBtn(){
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var CMS_AssetStage = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_AssetStage');
		v.bg = $('#CMS_AssetStageBG');
		v.side_bg = $('#CMS_AssetStageSideBG');
		var tag = ''
			tag += '<div id="CMS_Asset_DirArea"></div>';
			tag += '<div id="CMS_Asset_FilesArea"></div>';
			tag += '<div class="_cms_btn_alpha ss_icon asset_full _btn_full_on"></div>';
			tag += '<div class="_cms_btn_alpha ss_icon asset_full_off _btn_full_off"></div>';
			tag += '<div class="_selectHeader">'
			tag += '	<div class="_bg"></div>';
			tag += '	<div class="_title"></div>';
			tag += '	<div class="_path"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_select _cms_anim_zoom"><i class=" fa fa-check "></i> 選択する</div>';
			tag += '	<div class="_cms_btn_alpha _btn_close">キャンセル</div>';
			tag += '</div>';
		view.html(tag);	
	
		CMS_AssetStageClose.init();
		CMS_AssetStageResizeView.init();
		
		initFull();
		initSelectHeader();
		
		stageInit();
		initResize();
		// stageIn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		setBtn();
		
		CMS_Asset_DirArea.init();
		CMS_Asset_FilesArea.init();
		CMS_Asset_DirArea.stageIn();
	}
	
	function setBtn(){
		view.on("mousedown",function(){
			CMS_KeyManager.setType("setting");
		})
		v.bg.click(function(){
			closeAssetSelect();
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function refresh(_path){
		CMS_Asset_DirArea.resetDir();
		openFile({dir:_path,id:""});
	}
	// CMS_AssetStage.refresh("../aa/");
	// CMS_AssetStage.refresh({dir:"../aa/",id:""});

	
	/* ---------- ---------- ---------- */
	//個別処理
	//外からコールされる
	var tID_open;
	function openFile(_param,_delay){

		if(!isOpen) stageIn();
		if(!_delay) _delay = 10;
		CMS_StageController.openAssetStage(true);
		
		//パスのみの場合は、オブジェクトに変換
		if(typeof _param == "string"){
			_param = URL_U.getPageObject(_param);
		}
		//ディレクトリ名を整える
		_param.dir = URL_U.treatDirName(_param.dir);
		
		//外からひらいたとき、わかりやすくするため、ディレイかける
		if(tID_open) clearTimeout(tID_open);
		tID_open = setTimeout(function(){
			CMS_Asset_DirArea.openFile(_param);
		},_delay);
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	//ショートカットSでコール
	function save(){
		if(isOpen){
			CMS_Asset_FileDetailView.save();
		}
	}
	//テキストエディターで開いた時コール
	function openedTextPage(_param){
		CMS_Data.AssetFile.addFile(_param.dir,_param.id);
	}
	//テキストエディターで保存した時コール
	function savedTextPage(_param){
		CMS_Data.update(_param.id , _param.dir);
		CMS_LivePreviewController.savedPage();
	}
		
	/* ---------- ---------- ---------- */
	
	//画像選択や、リンク選択時にコールされる
	
	var SELECT_ADD = "add";
	var SELECT_IMAGE = "image";
	var SELECT_LINK = "link";
	
	var select_type = SELECT_ADD;
	var select_callback;
	
	function openAssetSelect(_type,_path,_callback){
		if(!isOpen) stageIn();
		
		select_type = _type;
		select_callback = _callback;
		$("body").addClass("_modalAsset");
		
		setSelectPath(_path,false);
		v.selectHeader.show();
		
		if(select_type == SELECT_IMAGE ){ 
			v.header_title.html("画像ファイルを選択");
			window.asset_selectListThumb();
		}
		if(select_type == SELECT_LINK ){ 
			v.header_title.html("リンク先ファイルを選択");
			window.asset_selectListNormal2();
		}
		openFile(_path,200);
		CMS_StageController.openSettingSelectStage(true);
	}
	function closeAssetSelect(){
		select_type = SELECT_ADD;
		$("body").removeClass("_modalAsset");
		v.selectHeader.hide();
		CMS_StageController.openAssetStage(false);
		CMS_StageController.openSettingSelectStage(false);
	}
	function addFile2page(_u){
		if(select_type == SELECT_ADD	){ CMS_MainController.addAssetToPage(_u); }
		if(select_type == SELECT_IMAGE 	){ select_callback(_u); }
		if(select_type == SELECT_LINK 	){ select_callback(_u); }
		closeAssetSelect();
	}
	
	/* ---------- ---------- ---------- */
	
	//パスでもparamでも対応
	function openAssetFile(_path){
		openFile(_path,200);
		window.asset_selectListNormal();
	}
	/* ---------- ---------- ---------- */
	
	function initSelectHeader(){
		v.selectHeader = view.find("._selectHeader");
		v.header_title = view.find("._title");
		v.header_path = view.find("._path");
		v.btn_close = view.find("._btn_close");
		v.btn_close.click(function(){
			closeAssetSelect();
		});
		v.header_select = view.find("._btn_select");
		v.header_select.click(function(){ 
			var s = v.header_path.html();
			if(select_callback) select_callback(s);
			closeAssetSelect();
		});
		v.selectHeader.hide();
	}
	
	//詳細画面で開いた時に、こーるされる
	function openedDetailPage(_param){
		var s = _param.dir + _param.id;
		setSelectPath(s,true);
	}
		
	var prevText = ""
	function setSelectPath(_s,_anno){
		var s = URL_U.treatURL(_s);
			s = s.split(CMS_Path.SITE.REL).join("");
		if(prevText == s)return;
		prevText = s;
		v.header_path.html(s).hide().fadeIn(200);
		if(_anno){
			// AnimU.attention({v:v.header_select.find("i"),d:200});
			AnimU.attention({v:v.header_select,d:200});
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//プリセットCSSを表示し、指定したキーに移動する
	function openPresetCSSFile(_key){
		var _param;
		if(ASSET_CSS_DIRS.length > 0){
			_param = URL_U.getPageObject(ASSET_CSS_DIRS[0]);
			_param.extra = { findCss : _key }
		} else {
			_param = { dir : CMS_Path.ASSET.REL + "css/" , id : "" };
		}
		openFile(_param);
		window.asset_selectListNormal();
	}	
	function openTemplateHTMLFile(_file){
		openFile({dir:CMS_Path.ASSET.REL + Dic.DirName.TEMPLATE + "/" , id : _file});
		window.asset_selectListNormal();
	}
	function openMyTagFile(_file){
		openFile({dir:CMS_Path.ASSET.REL + Dic.DirName.MYTAG + "/" , id : _file + ".json"});
		window.asset_selectListNormal();
	}
	function openUploadDir(){
		openFile({
			dir:CMS_Path.UPLOAD.REL,
			id:"",
			extra:{ when_opened:function(){
				setTimeout(function(){
					CMS_Asset_FileListView.uploadFile();
				},200);
			}}
		});
		window.asset_selectListThumb();
	}
	
	function openCMSSetting(_s){
		openFile({dir:CMS_Path.CMS.REL + "setting/" , id : _s });
		window.asset_selectListNormal();
	}
	
	/* ---------- ---------- ---------- */
	//アセットフルスクリーン
	
	function initFull(){
		v.btn_full_on = view.find("._btn_full_on");
		v.btn_full_off = view.find("._btn_full_off");
		v.btn_full_off.hide();
		
		v.btn_full_on.click(function(){
			CMS_StageController.openSettingFull(true);
		});
		v.btn_full_off.click(function(){
			CMS_StageController.openSettingFull(false);
		});
		
		CMS_StageController.registAssetCallback(function(_b){
			if(_b){
				v.btn_full_on.hide()
				v.btn_full_off.show()
			} else{
				v.btn_full_on.show()
				v.btn_full_off.hide()
			}
		})
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
		v.side_bg.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			v.side_bg.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			CMS_KeyManager.setType("setting");
			CMS_AssetStageResizeView.stageIn();
			CMS_AssetStageClose.stageOut();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
			v.side_bg.hide();
			setTimeout(function(){
				CMS_KeyManager.setType("");
			},100);
			CMS_AssetStageResizeView.stageOut();
			CMS_AssetStageClose.stageIn();
		}
	}
	/* ---------- ---------- ---------- */
	
	var _winds = [];
	function initResize(){
		CMS_StageController.registResize(function(){
			for (var i = 0; i < _winds.length ; i++) {
				if(_winds[i]) _winds[i]();
			}
		})
	}
	function registResize(_cs){
		_winds.push(_cs);
	}
	function getH(){
		return view.height();
	}
	/* ---------- ---------- ---------- */
	
	 return {
		init:init,
		stageIn:stageIn,
		stageOut:stageOut,
		
		refresh:refresh,
		openFile:openFile,
		openAssetSelect:openAssetSelect,
		openAssetFile:openAssetFile,
		addFile2page:addFile2page,
		openedDetailPage:openedDetailPage,
		
		openPresetCSSFile:openPresetCSSFile,
		openTemplateHTMLFile:openTemplateHTMLFile,
		openMyTagFile:openMyTagFile,
		openUploadDir:openUploadDir,
		openCMSSetting:openCMSSetting,
		
		openedTextPage: openedTextPage,
		savedTextPage: savedTextPage,
		save: save,
		
		registResize: registResize,
		getH: getH,
	}
})();

if(!USE_SITE_MANAGER){
	var CMS_AssetStage = (function(){
		
		 return {
			init:function(){},
			stageIn:function(){},
			stageOut:function(){},
			
			refresh:function(){},
			openFile:function(){},
			openAssetSelect:function(){},
			openAssetFile:function(){},
			addFile2page:function(){},
			openedDetailPage:function(){},
			
			openPresetCSSFile:function(){},
			openTemplateHTMLFile:function(){},
			openMyTagFile:function(){},
			openUploadDir:function(){},
			openCMSSetting:function(){},
			
			openedTextPage: function(){},
			savedTextPage: function(){},
			save: function(){},
			
			registResize: function(){},
			getH: function(){},
		}
	})();
}

// setTimeout(function(){
// 	CMS_AssetStage.stageIn()
// 	CMS_AssetStage.openFile({dir:"../_____html/_json/",id:"_html_.AAAZZ.json"});
// },1000);
// setTimeout(function(){
// 	CMS_AssetStage.stageIn()
// 	CMS_AssetStage.openFile({dir:"../_____html/css/",id:"site.css"});
// },2000);
// setTimeout(function(){
	// $("body").addClass("_modalAsset");
	// CMS_AssetStage.openFile({dir:"../images/",id:"header_logo.png",extra:{find:"IE 6"}});
	// window.asset_selectListThumb();
	// CMS_AssetStage.openFile({dir:"../__test_file/",id:"test.html",extra:{find:"IE 6"}});
	// CMS_AssetStage.openFile({dir:"../__test_file/brand_site/sb-include/common/subdomain/recommend/",id:"ad-card-register-complete-pc.html"});
		// CMS_AssetStage.openFile({dir:"../aa/",id:""});
// },1500);



var CMS_AssetStageResizeView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_AssetStageResizeView');
		view.hide();
		
		var tag = ""
			tag += '<div class="_bar"></div>'
			tag += '<div class="_bar2"></div>'
		view.html(tag);
		
		view.draggable({ axis: "y" });
		view.on( "drag", function( event, ui ) {
			resizeH(ui.position.top);
		});
		CMS_AssetStage.registResize(function(){
			view.css("top", CMS_StatusH - CMS_AssetStage.getH());
		})
	}
	
	var tID_resizeW;
	function resizeWindow(){
		if(tID_resizeW) clearTimeout(tID_resizeW);
		tID_resizeW = setTimeout(function(){
			view.css("top", CMS_StatusH - CMS_AssetStage.getH());
		},100);
	}
	
	var tID_resizeH;
	function resizeH(_y){
		if(tID_resizeH) clearTimeout(tID_resizeH);
		tID_resizeH = setTimeout(function(){
		  	CMS_StageController.offsetY(_y);
		},33);
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			resizeWindow();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	 return {
	 	init: init,
		stageIn: stageIn,
		stageOut: stageOut
	 }
})();

var CMS_AssetStageClose = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_AssetStageClose');
		v.bg = $('#CMS_AssetStageCloseBG');
		
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_headerBg"></div>'
			tag += '<div class="_header">'
			tag += '	<div class="_btn_close"><i class="fa fa-caret-up"></i> </div>';
			tag += '	<div class="_title">ファイルマネージャ</div>'
			tag += '</div>'
		view.html(tag);
	}
	
	function setBtn(){ 
		view.find(">._header").click(function(){
			CMS_StageController.openAssetStage(true);
		});
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
		v.bg.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			v.bg.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
			v.bg.hide();
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();


if(!USE_SITE_MANAGER){
	var CMS_AssetStageClose = (function(){
			
		function init(){
		}
		function stageIn(){
			$('#CMS_AssetStageClose').html('<div class="_dont_use">※ファイルマネージャは利用できない設定です。</div>');
		}
		 return {
			init:init,
			stageIn:stageIn,
			stageOut:function(){}
		}
	})();
}
// setTimeout(function(){
// 	CMS_AssetStage.stageIn()
// 	CMS_AssetStage.openFile({dir:"../_____html/_json/",id:"_html_.AAAZZ.json"});
// },1000);
// setTimeout(function(){
// 	CMS_AssetStage.stageIn()
// 	CMS_AssetStage.openFile({dir:"../_____html/css/",id:"site.css"});
// },2000);
// setTimeout(function(){
	// $("body").addClass("_modalAsset");
	// CMS_AssetStage.openFile({dir:"../images/",id:"header_logo.png",extra:{find:"IE 6"}});
	// window.asset_selectListThumb();
	// CMS_AssetStage.openFile({dir:"../__test_file/",id:"test.html",extra:{find:"IE 6"}});
	// CMS_AssetStage.openFile({dir:"../__test_file/brand_site/sb-include/common/subdomain/recommend/",id:"ad-card-register-complete-pc.html"});
	// CMS_AssetStage.openFile({dir:"../__test_file/",id:"test.html"});
// },1500);


var CMS_Asset_DirArea = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_Asset_DirArea');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_header">'
			tag += '	<div class="_btn_close"><i class="fa fa-caret-down "></i></div>';
			tag += '	<div class="_title">ファイルマネージャ</div>'
			tag += '</div>'
			tag += '<div class="_body _asset-scroll">'
			tag += '	<div class="_btn_reload"><i class="fa fa-repeat "></i></div>'
			tag += '	<div class="_replaceDir"></div>'
			tag += '	<div style="margin:20px 0 10px 20px;">'
			tag += 	CMS_GuideU.getGuideTag("window/filemanager","ガイド","dark");
			tag += '	</div>';
			tag += '</div>';
			view.html(tag);
		
		v.replaceDir = view.find("._replaceDir");
		v.body = view.find("._body");
		v.btn_close = view.find("> ._header");
		v.btn_reload = view.find("._btn_reload");
		
		setBtn();
		load_dir();
	}
	
	
	function setBtn(){
		v.btn_close.click(function(){ 
			CMS_StageController.openAssetStage(false);
		});
		v.btn_reload.click(function(){ 
			reload_dir();
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function resetDir(){
		if(dirTree){
			dirTree.remove();
			dirTree = null;
			v.replaceDir.empty();
		}
		load_dir();
	}
	
	/* ---------- ---------- ---------- */
	
	var reload_tID
	function reload_dir(){
		if(dirTree){
			dirTree.remove();
			dirTree = null;
			v.replaceDir.empty()
		}
		if(reload_tID)clearTimeout(reload_tID);
		reload_tID = setTimeout(function(){
			load_dir()
			// if(currentPath){
			// 	openCurrent(currentPath);	
			// }
		},200);
	}
	
	/* ---------- ---------- ---------- */
	var dirTree
	function load_dir(){
		dirTree = new DirTreeViewNode(
			v.replaceDir,null,0,
			{
				initDeep :1,
				def :{ path: "", name: ""},
				showCMSDir :true,
				showWriteDir :true,
				isClickNGDir :true,
				currentSelect :null,
				extentions :"",
				// hideRootNode :true,
				settingDirs :[ 
					{path:CMS_Path.CMS.REL		,label:"CMS管理画面"},
					{path:CMS_Path.UPLOAD.REL	,label:"アップロード"},
					{path:CMS_Path.BACKUP.REL	,label:"バックアップ" },
					{path:CMS_Path.ASSET.REL	,label:"サイト設定" }
				],
				// hideDirs :[ "../__" ],
				// extentions :"png_gif_jpeg_jpg",
				showSelectBtn:false,
				callback:function(s,_view){
					
					//dirクリック時にコールされる
					var param = {
						dir:s.path,
						id:s.fileName,
						extra:s.extra
					}
					CMS_Asset_FilesArea.openPath(param);
					updatePos(_view);
				},
				callback_select:function(s){}
			}
		);
	}
	
	/* ---------- ---------- ---------- */
	
	//スクロール位置を調整
	function updatePos(_view){
		var tarY = _view.offset().top - view.offset().top;
		var scY = v.body.scrollTop();
		
		var b = false;
		if(scY + tarY > scY + v.body.height() ) b = true;
		if(scY + tarY < scY ) b = true;
		//
		if(b) updatePosCore(tarY + scY -50);
	}
	function updatePosCore(_y){
		v.body.delay(200).animate({
			scrollTop:_y
		},{ duration: 200 });
	}
	
	/* ---------- ---------- ---------- */
	//外からコール
	function openFile(_param){	
		dirTree.setCurrent(_param);
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				CMS_Asset_FilesArea.stageIn();
				createlayout();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		resetDir: resetDir,
		openFile: openFile,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();

var CMS_Asset_FilesArea = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_Asset_FilesArea');
		
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = "";
			tag += '<div id="CMS_Asset_FileListView"></div>';
			tag += '<div id="CMS_Asset_FileDetailView"></div>';
			
			tag += '<div id="CMS_Asset_UploaderView"></div>';
			tag += '<div id="CMS_Asset_CreateFileView"></div>';
			tag += '<div id="CMS_Asset_RenameFileView"></div>';
		view.html(tag);

		CMS_Asset_FileListView.init();
		CMS_Asset_FileDetailView.init();
		
		CMS_Asset_UploaderView.init();
		CMS_Asset_CreateFileView.init();
		CMS_Asset_RenameFileView.init();
	}
	
	function setBtn(){
	}
	
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	function openPath(_param){
		CMS_Asset_FileListView.openPath(_param);
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				CMS_Asset_FileListView.stageIn();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		openPath: openPath,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();

var CMS_Asset_FileListView 	 = (function(){
	var view;
	var v = {};
	var baseDir = "";
	var targetDir = ""
	
	function init(){
		view = $('#CMS_Asset_FileListView');
		v.root = $("body");
		stageInit();
	}
	
	function createlayout(){

		var tag = "";
			tag += '<div class="_header">';
			tag += '	<span class="_btn_icon _normalList"><i class="fa fa-fw fa-bars" ></i></span>'
			tag += '	<span class="_btn_icon _normalList2"><i class="fa fa-fw fa-list-ul "></i></span>'
			tag += '	<span class="_btn_icon _thumbList"><i class="fa fa fa-fw fa-th-large "></i></span>'
			tag += '	<div class="_right"> '
			// tag += '		<span class="_btn_icon _btn_reload"><i class="fa fa-repeat "></i></span> '
			tag += '	</div>'
			tag += '</div>'
			tag += '<div class="_header2">'
			tag += '	<div class="_btn_parent"><i class="fa fa-level-down fa-rotate-180 "></i> 上階層へ</div>'
			tag += '	<div class=" _sizeList">'
			tag += '		<div class="_btn _brn_S">S</div>'
			tag += '		<div class="_btn _brn_M">M</div>'
			tag += '		<div class="_btn _brn_L">L</div>'
			tag += '	</div>'
			tag += '	<span class="_btn_icon _btn_reload"><i class="fa fa-repeat "></i></span> '
			tag += '</div>'
			tag += '<div class="_body _asset-scroll2"></div>';
			tag += '<div class="_replaceFile"></div>'
			tag += '<div class="_bottom_btns">'
			tag += '	<div class="_btn_add_file"><i class="fa fa-plus-circle "></i> 追加</div>'
			tag += '	<div class="_btn_upload"><i class="fa fa-upload "></i> アップロード</div>'
			tag += '</div>'
		view.html(tag);
		
		v.body 	= view.find('._body');
		v.btn_parent 	= view.find('._btn_parent');
		v.btn_add_file 	= view.find('._btn_add_file');
		v.btn_upload 	= view.find('._btn_upload');
		
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		v.btn_parent	.click(function(){ openParent() });
		v.btn_add_file	.click(function(){ addFile() });
		v.btn_upload	.click(function(){ uploadFile() });
		
		initReload();
		initSize();
		initListType();
	}
	
	/* ---------- ---------- ---------- */
	//リロード
	function initReload(){
		v.btn_reload = view.find('._btn_reload');
		v.btn_reload.click(function(){ updateList()});
		v.btn_parent.hide();
	}
	function updateList(){
		currentFileList.update();
	}
	
	function updateParentBtn(){
		if(currentDir == CMS_Path.SITE.REL){
			v.btn_parent.hide();
		} else{
			v.btn_parent.show();
		}
	}
	
	/* ---------- ---------- ---------- */
	//切替
	function initListType(){
		v.normalList = view.find('._normalList');
		v.normalList2 = view.find('._normalList2');
		v.thumbList = view.find('._thumbList');
		v.normalList.click(function(){ selectListNormal()});
		v.normalList2.click(function(){ selectListNormal2()});
		v.thumbList.click(function(){ selectListThumb()});
		updateListType();
	}
	function selectListNormal(){ updateListType("normal") }
	function selectListNormal2(){ updateListType("normal2") }
	function selectListThumb(){ updateListType("thumb") }
	
	window.asset_selectListNormal = selectListNormal;
	window.asset_selectListNormal2 = selectListNormal2;
	window.asset_selectListThumb = selectListThumb;
	
	function updateListType(_s){
		if(!_s) _s = CMS_Asset_FileListState.getListType();
		CMS_Asset_FileListState.setListType(_s);
		
		//btn
		v.normalList.removeClass("_current");
		v.normalList2.removeClass("_current");
		v.thumbList.removeClass("_current");
		if(_s == "normal")	{ v.normalList.addClass("_current"); }
		if(_s == "normal2")	{ v.normalList2.addClass("_current") }
		if(_s == "thumb")	{ v.thumbList.addClass("_current") }
		if(_s == "thumb")	{ 
			v.sizeList.show()
		} else{
			v.sizeList.hide()
		}
		
		v.root.removeClass("_assetList_normal");
		v.root.removeClass("_assetList_normal2");
		v.root.removeClass("_assetList_thumb");
		v.root.addClass("_assetList_"+_s);
		
		// v.sizeList
		// currentFileList.updateListType();
		for (var i = 0; i < dirs.length ; i++) {
			dirs[i].updateListType();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function initSize(){
		v.sizeList = view.find('._sizeList')
		v.brn_S = v.sizeList.find('._brn_S')
		v.brn_M = v.sizeList.find('._brn_M')
		v.brn_L = v.sizeList.find('._brn_L')
		
		v.brn_S.click(function(){ setSize("S")});
		v.brn_M.click(function(){ setSize("M")});
		v.brn_L.click(function(){ setSize("L")});
		updateSize();
	}
	function updateSize(){
		setSize(CMS_Asset_FileListState.getSize());
	}
	
	var currentSize;
	function setSize(_s){
		if(currentSize == _s) return;
		currentSize = _s;
		view.removeClass("_S");
		view.removeClass("_M");
		view.removeClass("_L");
		if(_s == "S")view.addClass("_S");
		if(_s == "M")view.addClass("_M");
		if(_s == "L")view.addClass("_L");
		
		v.brn_S.removeClass("_current");
		v.brn_M.removeClass("_current");
		v.brn_L.removeClass("_current");
		if(_s == "S")v.brn_S.addClass("_current");
		if(_s == "M")v.brn_M.addClass("_current");
		if(_s == "L")v.brn_L.addClass("_current");
		CMS_Asset_FileListState.setSize(_s);
	}
	
	/* ---------- ---------- ---------- */
	
	function openParent(){
		var d = URL_U.getParentDir(currentDir);
		CMS_Asset_DirArea.openFile({dir: d ,id:""});
	}
	function addFile(){
		if(currentFileList) currentFileList.addFile();
	}
	function uploadFile(){
		if(currentFileList) currentFileList.uploadFile();
	}
	
	/* ---------- ---------- ---------- */
	//file
	
	var dirs = [];
	var currentFileList;
	var currentDir;
	function openPath(_param){
		if(isFirst) stageIn();
		if(currentFileList) currentFileList.stageOut();
		//
		var b = true;
		for (var i = 0; i <  dirs.length ; i++) {
			if(dirs[i].targetDir == _param.dir) {
				b = false;
				currentFileList = dirs[i]
			}
		}
		if(b){
			var img = new CMS_Asset_FileListClass(v.body,_param.dir,_param.extra);
			dirs.push(img);
			img.stageIn();
			currentFileList = img;
		}
		currentDir = _param.dir;
		currentFileList.stageIn()
		currentFileList.selectFile(_param);
		//
		updateParentBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function resetSelect(_param){
		//ファイルリスト中のクラスのみ削除
		view.find("tr._current").removeClass("_current");
		view.find("._btn_file._current").removeClass("_current");
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			view.show()
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		// selectDir: selectDir,
		openPath: openPath,
		resetSelect: resetSelect,
		
		selectListNormal: selectListNormal,
		selectListNormal2: selectListNormal2,
		selectListThumb: selectListThumb,
		
		uploadFile: uploadFile,
		
		// addParam: addParam
 }
})();

var CMS_Asset_FileListClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_path,_extra) {
	  this.init(_parent,_path,_extra);
	}
	var p = c.prototype;
	
	/* ---------- ---------- ---------- */

	p.parentView 
	p.view
	p.v
	p.no
	
	p.init = function(_parent,_path,_extra) {
		this.parentView = _parent;
		this.targetDir = _path;
		this.extra = _extra;
		this.v = {}
		this.view = $('<div></div>');
		this.parentView.append(this.view);	
		this.setBtn();
		this.createlayout();
	}
	p.setBtn = function() {
		var self = this;
		
		//リネーム
		this.view.on("click","._btn_dir"	,function(){ self.openFile($(this).data("path_rel"))})
		this.view.on("click","._btn_rename_file"	,function(){ self.renameFile($(this).data("name")); })
		this.view.on("click","._btn_rename_dir"		,function(){ self.renameDir($(this).data("name")); })
		this.view.on("click","._btn_del_file"		,function(){ self.deleteFile($(this).data("path")); })
		this.view.on("click","._btn_del_dir"		,function(){ self.deleteDir($(this).data("path")); })
		this.view.on("mouseover","._btn_file_img_hover"	,function(){ self.hoverImage($(this)); });
	}
		
	p.createlayout = function() {
		var tag = ""
			tag += '<div class="_filelistArea">'
			tag += '	<div class="_files_thumb"></div>'
			tag += '	<div class="_files_list"></div>'
			tag += '</div>';
		this.view.html(tag);
		
		this.v.files_list = this.view.find('._files_list')
		this.v.files_thumb = this.view.find('._files_thumb')
		this.normalList 	= new CMS_Asset_FileListClass_List(this,this.v.files_list,this.targetDir)
		this.thumbList 		= new CMS_Asset_FileListClass_ThumbList(this,this.v.files_thumb,this.targetDir);
		
		this.updateListType();
		this.update();
	}
	/* ---------- ---------- ---------- */

	p.updateListType = function() {
		var _s = CMS_Asset_FileListState.getListType();
		if(_s == "normal"){
			this.normalList.stageIn();
			this.thumbList.stageOut();
		}
		if(_s == "normal2"){
			this.normalList.stageIn();
			this.thumbList.stageOut();
		}
		if(_s == "thumb"){
			this.normalList.stageOut();
			this.thumbList.stageIn();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	p.update = function() {
		var this_ = this;
		var p = "?action=getFileList"
			p += "&dir_name=" +escape_url(this.targetDir);
			// p += "&extentions=png_gif_jpeg_jpg";
			p += "&extentions=";
			p += "&showDir=1";
		var url = CMS_Path.PHP_DIRECTORY + p;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) { this_.loaeded(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		});
		this.v.files_list.addClass("_process")
		this.v.files_thumb.addClass("_process")
	}
	p.currentList 
	p.loaeded = function(data) {
		if(API_StatusCheck.check(data) == false) return;
		
		this.currentList = data;
		var this_ = this
		setTimeout(function(){
			this_.v.files_list.removeClass("_process")
			this_.v.files_thumb.removeClass("_process")
		},100);
		
		var time = new Date()
		this.thumbList.update(data,time);
		this.normalList.update(data,time);
		// this.uploadWapView.updateFileList();
	}
	p.getCurrentFilelist = function() {
		var a = [];
		if(this.currentList){
			var fs = this.currentList.files;
			for (var i = 0; i <  fs.length ; i++) {
				a.push(fs[i].name)
			}
			var fs = this.currentList.nodes.nodes;
			for (var i = 0; i <  fs.length ; i++) {
				a.push(fs[i].name)
			}
		}
		return a;
	}
	
	/* ---------- ---------- ---------- */
	//ファイル追加	
	p.addFile = function() {
		var self = this;
		CMS_Asset_CreateFileView.stageIn(this,function(_type,_s){
			if(_type == "file"){
				CMS_Asset_FileManageAPI.addFile(self.targetDir,_s,function(){
					self.update();
				})
			}
			if(_type == "dir"){
				CMS_Asset_FileManageAPI.addDir(self.targetDir,_s,function(){
					self.update();
					CMS_AssetStage.refresh(self.targetDir);
				})
			}
		})
	}

	//アップロード
	p.uploadFile = function() {
		var self = this;
		CMS_Asset_UploaderView.stageIn(this.targetDir,this,function(){
			self.update();
		})
	}
	
	//大きい画像
	p.hoverImage = function(_v) {
		_v.removeClass("_img_big");
		_v.removeClass("_btn_file_img_hover");
		_v.html('<img src="' + _v.parent().data("path_rel") + '" >');
	}
	
	//ファイル削除
	p.deleteFile = function(_s) {
		if(window.isLocked(true))return;
		var self = this;
		var s = 'ファイルを削除しますか？<br><br><i class="fa fa-fw fa-file-text"></i> '  + _s;
		CMS_ConfirmView.stageIn("削除の確認",s,function(){
			CMS_Asset_FileManageAPI.deleteFile(self.targetDir, _s ,function(){
				self.update();
			})
		},"DELL");
	}
	
	//ファイル名変更
	p.renameFile = function(_s) {
		var self = this;
		CMS_Asset_RenameFileView.stageIn(this,_s,function(_new){
			CMS_Asset_FileManageAPI.rename(self.targetDir,_s,_new,function(){
				self.update();
			})
		})
	}
	
	/* ---------- ---------- ---------- */
	//DIR削除
	p.deleteDir = function(_s) {
		if(window.isLocked(true))return;
		var self = this;
		var s = 'ディレクトリを削除しますか？<br><br><span class="_icon_dir"></span> '  + _s;
		CMS_ConfirmView.stageIn("削除の確認",s,function(){
			CMS_Asset_FileManageAPI.deleteDir(self.targetDir, _s ,function(){
				self.update();
				CMS_AssetStage.refresh(self.targetDir);
			})
		},"DELL");
	}
	
	//DIR名変更
	p.renameDir = function(_s) {
		var self = this;
		
		CMS_Asset_RenameFileView.stageIn(this,_s,function(_new){
			CMS_Asset_FileManageAPI.rename(self.targetDir,_s,_new,function(){
				self.update();
				CMS_AssetStage.refresh(self.targetDir);
			})
		})
	}
		
	/* ---------- ---------- ---------- */
	
	p.openFile = function(_path) {
		CMS_Asset_DirArea.openFile({dir:_path,id:""})
	}
	
	/* ---------- ---------- ---------- */
	
	p.selectFile = function(_param) {
		this.thumbList.selectFile(_param);
		this.normalList.selectFile(_param);
	}
		
	/* ---------- ---------- ---------- */
	
	p.doExtra = function() {
		if(this.extra){
			if(this.extra.when_opened){
				this.extra.when_opened();
				this.extra.when_opened = null;
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	/**/
	p.openFlg = false;
	p.stageInit = function() {
		this.openFlg = false
		this.view.hide()
	}
	p.stageIn = function() {
		if (!this.openFlg) {
			this.openFlg = true;
			this.view.show();
			this.doExtra();
		}
	}
	p.stageOut = function() {
		if (this.openFlg) {
			this.openFlg = false
			this.view.hide()
		}
	}
	return c;
})();

var CMS_Asset_FileListClass_List = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_view,_path) {
	  this.init(_parent,_view,_path);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
		
	p.init = function(_parent,_view,_path) {
		this.parent = _parent;
		this.view = _view;
		this.targetDir = _path;
		this.v = {}
		this.createlayout()
		this.stageInit()
	}
	
	/* ---------- ---------- ---------- */

	p.createlayout=function(){
		var self = this;
		var tag = "";
			tag += '<div class="_replaceArea"></div>'
			// tag += '<div class="_update"></div>'
		this.view.append(tag)
		this.v.replaceArea = this.view.find('._replaceArea');
		this.v.update = this.view.find('._update');
		
		this.view.on("click","._btn_file",function(){
			self.clickFile($(this).data("name"));
		})
		this.view.on("dblclick","._btn_file",function(){
			self.dClickFile($(this).data("name"));
		})
		// this.view.on("click","._btn_add",function(){
		// 	self.addFile2page($(this).data("name"));
		// })
	}
	
	/* ---------- ---------- ---------- */
	
	p.list
	p.updateTime
	p.updateViewTime
	p.update = function(_list,_updateTime) {
		var self = this;
		if(_list == undefined) return;
		this.updateTime = _updateTime;
		
		this.list = _list;
		if (!this.openFlg) return;
		if (!this.updateTime) return;
		
		if(this.updateTime == this.updateViewTime) return;
		this.updateViewTime = this.updateTime;

		this.v.update.html(CMS_Asset_FileListU.getUpdateTime(this.updateTime));
		
		var tag = ""
			tag += '<table class="_filelist">'
		
		if(this.list["nodes"]){
			var dirs = this.list.nodes.nodes;
			dirs.sort(function(a, b){
				return ( a.name > b.name ? 1 : -1);
			});
			for (var i = 0; i <  dirs.length ; i++) {
				var node = dirs[i]
				var cnt = Number(node.dirCount) + Number(node.fileCount);
				var temp = '';
					temp += '<tr class="_row_dir">'
					temp += '	<td><div class="_btn_dir" data-path="{PATH_ABS}" data-path_rel="{PATH}"><span class="{DIR_ICON}"></span> {NAME}{CNT}</div></td>';
					temp += '	<td width="50" class="_hideNarrow _date">{UPDATE}</td>'
					temp += '	<td width="50" class="_hideNarrow _size"></td>'
					temp += ' <td width="100" class="_hideNarrow">';
					temp += ' 	<div class="_btn_rename _btn_rename_dir" data-path="{PATH}" data-name="{NAME}"><i class="fa fa-wrench "></i> リネーム</div>'
					temp += ' 	<div class="_btn_del _btn_del_dir" data-path="{PATH}"><i class="fa fa-trash "></i></div>'
					temp += ' </td>';
					temp += '</tr>'
 					temp = temp.split("{DIR_ICON}").join((Number(node.dirCount)) ? '_icon_dir_has_sub':'_icon_dir_no_sub');
 					temp = temp.split("{CNT}").join( (cnt == 0) ? "" : '<span class="_cnt">'+ cnt+'</span>');
					temp = temp.split("{NAME}").join(node.name);
					temp = temp.split("{PATH}").join(node.path);
					temp = temp.split("{PATH_ABS}").join(node.path.split("../").join(""));
					temp = temp.split("{UPDATE}").join(CMS_SaveDateU.getRelatedDate(node.filemtime));
				tag += temp
			}
		}
		
		if(this.list["files"]){
			var files = this.list.files;
			files.sort(function(a, b){
				return ( a.name > b.name ? 1 : -1);
			});
			if(files.length > 0){
				for (var i = 0; i <  files.length ; i++) {
					var node = files[i];
					var name_ = node.name;
					var ex = CMS_AssetFileU.getExtention(name_);
					var cs = ["_btn_file"] ;
					// var isClickable = CMS_AssetFileU.isExtentionAll(ex);
					// var isEdtable = CMS_AssetFileU.isExtention(ex,"editable");
					// if(isClickable) cs.push("_btn_file");
					
					var temp = '';
						temp += '<tr class="_row_file" id="{ID}">'
						temp += ' <td><div class="{CLASS}" data-name="{NAME}">{ICON} {NAME}</div></td>'
						// temp += ' <td width="50" class="_hideNarrow" ><div class="_btn_add" data-name="{NAME}"><i class="fa fa-arrow-up"></i> 配置</div></td>'
						temp += ' <td width="50" class="_hideNarrow _date">{UPDATE}</td>'
						temp += ' <td width="50" class="_hideNarrow _size">{SIZE}</td>'
						temp += ' <td width="100" class="_hideNarrow">';
						temp += ' 	<div class="_btn_rename _btn_rename_file" data-path="{PATH}" data-name="{NAME}"><i class="fa fa-wrench "></i> リネーム</div>'
						temp += ' 	<div class="_btn_del _btn_del_file" data-path="{PATH}"><i class="fa fa-trash "></i></div>'
						temp += ' </td>';
						temp += '</tr>'
						temp = temp.split("{ID}").join( this.getID( node.name ));
						temp = temp.split("{NAME}").join(node.name);
						temp = temp.split("{PATH}").join(node.path);
						temp = temp.split("{PATH_ABS}").join(node.path.split("../").join(""));
						temp = temp.split("{UPDATE}").join(CMS_SaveDateU.getRelatedDate(node.filemtime));
						temp = temp.split("{SIZE}").join(FileU.formatFilesize(node.filesize));
						temp = temp.split("{CLASS}").join(cs.join(" "));
						temp = temp.split("{ICON}").join(CMS_AssetFileU.getFileIcon(ex));
					tag += temp;
				}
				tag += "</table>"
				tag += '<div class="_note">ダブルクリックすると、ファイルをボタンブロックとして、ページへ配置できます。<br>画像の場合は、画像ブロックとして配置されます。</div>'
			}
		}
		
		this.v.replaceArea.html(tag);
		
		this.isLoaded = this;
		if(this.loadedCallback) {
			this.loadedCallback();
			this.loadedCallback = null;
		}
	}
	/* ---------- ---------- ---------- */

	p.loadedCallback
	p.isLoaded = false;
	p.selectFile = function(_param){
		this.loadedCallback = null
		var self = this;
		if(this.isLoaded){
			self.selectFile_core(_param);
		} else{
			this.loadedCallback = function(){
				self.selectFile_core(_param);
			}
		}
	}
	p.selectFile_core = function(_param){
		var files = this.list.files;
		for (var i = 0; i <  files.length ; i++) {
			if(files[i].path == _param.dir + _param.id ){
				if(_param.extra){
					this.clickFile(files[i].name,_param.extra);
				} else {
					this.clickFile(files[i].name);
				}
			}
		}
	}
	// p.addFile2page = function(_id){
	// 	CMS_AssetStage.addFile2page(this.targetDir + _id);
	// }
	p.clickFile = function(_id,_extra){
		var param = { dir: this.targetDir, id: _id }
		if(_extra) param.extra = _extra;
		CMS_Asset_FileDetailView.stageIn(param);
		CMS_Asset_FileListView.resetSelect(param);
		this.view.find("#" + this.getID(_id)).addClass("_current");
	}
	p.dClickFile = function(_id,_extra){
		CMS_AssetStage.addFile2page(this.targetDir + _id);
	}
	
	/* ---------- ---------- ---------- */
	
	p.getID = function(_id){
		return "_asset_" + CMS_AssetDB.getID( _id,this.targetDir );
	}
	
	/* ---------- ---------- ---------- */

	
	/**/
	p.openFlg = false;
	p.stageInit=function(){
		this.openFlg = false
		this.view.hide()
	}
	p.stageIn=function( )  {
		if (! this.openFlg) { 
			this.openFlg = true;
			this.view.show();
			this.loadedCallback = null;
			this.update(this.list,this.updateTime);
		}
	}
	p.stageOut=function( )  {
		if (this.openFlg) { this.openFlg = false
		this.view.hide()
		}
	}
	return c;
})();

var CMS_Asset_FileListClass_ThumbList = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_view,_path) {
	  this.init(_parent,_view,_path);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_parent,_view,_path) {
		this.parent = _parent;
		this.view = _view;
		this.targetDir = _path;
		this.v = {}
		this.createlayout()
		this.stageInit()
	}
	
	/* ---------- ---------- ---------- */

	p.createlayout=function(){
		var self = this;
		var tag = "";
			tag += '<div class="_replaceArea"></div>'
			// tag += '<div class="_update"></div>'
		this.view.append(tag)
		this.v.replaceArea = this.view.find('._replaceArea');
		// this.v.update = this.view.find('._update');
		
		this.view.on("click","._btn_file",function(){
			self.clickFile($(this).data("name"));
		})
		this.view.on("dblclick","._btn_file",function(){
			self.dClickFile($(this).data("name"));
		})
		// this.view.on("click","._btn_add",function(){
		// 	self.addFile2page($(this).data("name"));
		// })
	}
	
	/* ---------- ---------- ---------- */
	
	p.list
	p.updateTime
	p.updateViewTime
	p.update = function(_list,_updateTime) {
		var self = this;
		if(_list == undefined) return;
		this.updateTime = _updateTime;
		
		this.list = _list;
		if (!this.openFlg) return;
		if (!this.updateTime) return;
		
		if(this.updateTime == this.updateViewTime) return;
		this.updateViewTime = this.updateTime;

		// this.v.update.html(CMS_Asset_FileListU.getUpdateTime(this.updateTime));
		
		var tag = ""
		
			// tag += '<br><br><div>画像リスト</div>'
			tag += '<div class="_imagelist">'
		var imageCount = 0;
		if(this.list["files"]){
			var files = this.list.files;
			files.sort(function(a, b){
				return ( a.name > b.name ? 1 : -1);
			});
			for (var i = 0; i < files.length ; i++) {
				var node = files[i]
				var name_ = node.name
				var ns = name_.split(".");
				if(CMS_Asset_FileManageAPI.isImageFile(ns[ns.length-1])){
					var temp = '<div id="{ID}" class="_btn_file " data-name="{NAME}" data-path="{PATH_ABS}" data-path_rel="{PATH}">'
						temp += CMS_Asset_FileListU.getImagePreviewTag(node.filesize);
						// temp += '	<div class="_btn_add" data-path="{PATH}" data-name="{NAME}"><i class="fa fa-arrow-up"></i> 配置</div>'
						temp += '	<div class="_name">{NAME}</div>'
						temp += '	<div>'
						temp += '		<span class="_date">{DATE}</span>'
						temp += '		<span class="_size">{SIZE}</span>'
						temp += '	</div>';
						temp += '	<div class="_thumb_btns">'
						temp += '		<div class="_cms_btn-nano-icon _btn_rename_file" data-path="{PATH}" data-name="{NAME}"><i class="fa fa-wrench "></i> </div>'
						temp += '		<div class="_cms_btn-nano-icon-red _btn_del_file" data-path="{PATH}"><i class="fa fa-times "></i> </div>'
						temp += '	</div>';
						temp += '</div>';
						temp = temp.split("{ID}").join( this.getID( node.name ));
						temp = temp.split("{SRC}").join(this.targetDir + name_);
						temp = temp.split("{PATH}").join(node.path);
						temp = temp.split("{PATH_ABS}").join(node.path.split("../").join(""));
						temp = temp.split("{NAME}").join(name_);
						temp = temp.split("{DATE}").join(CMS_SaveDateU.getRelatedDate(node.filemtime));
						temp = temp.split("{SIZE}").join(FileU.formatFilesize(node.filesize));
					tag += temp;
					imageCount ++;
				}
			}
		}
		if(imageCount == 0){
			tag += '<div class="_anno">このディレクトリには、画像ファイル(PNG,GIF,JPG,SVG)画像がありません。</div>'
		} else{
			tag += '<div class="_note">ダブルクリックすると、画像ブロックとして、ページへ配置できます。</div>'
		}
		tag += '</div>';
		
		if(this.list["nodes"]){
			tag += '<table class="_filelist">'
			var dirs = this.list.nodes.nodes;
			dirs.sort(function(a, b){
				return ( a.name > b.name ? 1 : -1);
			});
			for (var i = 0; i <  dirs.length ; i++) {
				var node = dirs[i]
				var cnt = Number(node.dirCount) + Number(node.fileCount);
				var temp = '';
					temp += '<tr class="_row_dir">';
					temp += '<td><div class="_btn_dir" data-path="{PATH_ABS}" data-path_rel="{PATH}"><span class="{DIR_ICON}"></span> {NAME}{CNT}</div></td>';
					temp += '</tr>';
 					temp = temp.split("{DIR_ICON}").join((Number(node.dirCount)) ? '_icon_dir_has_sub':'_icon_dir_no_sub');
 					temp = temp.split("{CNT}").join( (cnt == 0) ? "" : '<span class="_cnt">'+ cnt+'</span>');
					temp = temp.split("{NAME}").join(node.name);
					temp = temp.split("{PATH}").join(node.path);
					temp = temp.split("{PATH_ABS}").join(node.path.split("../").join(""));
				tag += temp
			}
			tag += '</table>';
		}
		
		this.v.replaceArea.html(tag);
		
		this.isLoaded = this;
		if(this.loadedCallback) {
			this.loadedCallback();
			this.loadedCallback = null;
		}
	}
	/* ---------- ---------- ---------- */

	p.loadedCallback
	p.isLoaded = false;
	p.selectFile = function(_param){
		this.loadedCallback = null;
		var self = this;
		if(this.isLoaded){
			self.selectFile_core(_param);
		} else{
			this.loadedCallback = function(){
				self.selectFile_core(_param);
			}
		}
	}
	p.selectFile_core = function(_param,_cnt){
		var files = this.list.files;
		var self = this;
		var b = false;
		for (var i = 0; i <  files.length ; i++) {
			if(files[i].path == _param.dir + _param.id ){
				var id = files[i].name;
				if(_param.extra){
					this.clickFile(id,_param.extra);
				} else {
					this.clickFile(id);
				}
				this.updateCurrentPath(id);
				this.scrollCurrentPos(id);
				b = true;
			}
		}
		//該当ファイルがなければ、リトライ
		if(!b){
			if(_cnt == undefined){
				this.parent.update();
				setTimeout(function(){
					self.selectFile_core(_param,1);
				},500);
			}
		}
	}
	p.selectFile_core2 = function(_param){
	}
	// this.view.find("#" + this.getID(_id))
	p.clickFile = function(_id,_extra){
		var param = { dir: this.targetDir, id: _id }
		if(_extra) param.extra = _extra;
		CMS_Asset_FileDetailView.stageIn(param);
		CMS_Asset_FileListView.resetSelect(param);
		
		var tar = this.view.find("#" + this.getID(_id));
			tar.addClass("_current");
	}
	p.dClickFile = function(_id,_extra){
		CMS_AssetStage.addFile2page(this.targetDir + _id);
	}
	//画像URLリロード
	p.updateCurrentPath = function(_id){
		var tar = this.view.find("#" + this.getID(_id)).find("img");
		var rr = DateUtil.getRandamCharas(5);
		var src = tar.attr("src").split("?")[0]+"?"+rr;
		tar.attr("src",src);
	}
	
	//選択中のファイルへスクロール
	p.scrollCurrentPos = function(_id){
		var tar = this.view.find("#" + this.getID(_id));
		var y = tar.offset().top;
		var paY = tar.parent().offset().top;
		tar.closest("._body").scrollTop(y- paY);
	}
	
	/* ---------- ---------- ---------- */
	
	p.getID = function(_id){
		return "_assetThumb_" + CMS_AssetDB.getID( _id , this.targetDir );
	}
	
	/* ---------- ---------- ---------- */

	
	/**/
	p.openFlg = false;
	p.stageInit=function(){
		this.openFlg = false
		this.view.hide()
	}
	p.stageIn=function( )  {
		if (! this.openFlg) { 
			this.openFlg = true;
			this.view.show();
			this.loadedCallback = null;
			this.update(this.list,this.updateTime);
		}
	}
	p.stageOut=function( )  {
		if (this.openFlg) { this.openFlg = false
			this.view.hide()
		}
	}
	return c;
})();

var CMS_Asset_FileListState = (function(){
	// var listType = "thumb";
	var listType = "normal";
	function setListType(_s){
		_s = _s || "normal"
		listType = _s;
	}
	function getListType(){
		return listType
	}
	
	var size = "M";
	function setSize(_s){
		size = _s
	}
	function getSize(){
		return size
	}
	
	return {
		setListType: setListType,
		getListType: getListType,
		setSize: setSize,
		getSize: getSize
	}
})();

var CMS_Asset_FileListU = (function(){

	function getUpdateTime(_time){
		return "ファイルリスト更新時間：<br>"+ DateUtil.getFormattedDate(_time,"YYYY/MM/DD hh:mm:ss");
	}
	//
	function getImagePreviewTag(_size){
		var s = ""
		if(_size > (FILEMANAGER_PREVIEW_LIMIT_MB * 1000 * 1000)){
			s += '	<div class="_img _img_big _btn_file_img_hover"><i class="fa fa-2x fa-hand-o-up "></i><br>';
			s += FILEMANAGER_PREVIEW_LIMIT_MB;
			s += 'MB〜</div>';
		} else{
			s += '	<div class="_img"><img src="{SRC}" class="_cms_bg_trans"></div>';
		}
		return s
	}

	return {
		getUpdateTime: getUpdateTime,
		getImagePreviewTag: getImagePreviewTag
	}
})();



window.registAssetFloatView = function(_callback){
	var vs = [
		"#CMS_Asset_DirArea",
		"#CMS_Asset_FileListView",
		"#CMS_Asset_FileDetailView"
	]
	$(vs.join(",")).on("mousedown",function(){
		_callback();
	})
}

var CMS_Asset_CreateFileView = (function(){
	var view;
	var v = {};
	
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_Asset_CreateFileView');
		
		var tag = ''
			tag += '<div class="_btn_close"><i class="fa fa-lg fa-times-circle "></i> </div>'
			tag += '<div class="_body">'
			tag += '	<div class="_dir_area">'
			tag += '		<div class="_title"><span class="_icon_dir"></span> ディレクトリを追加</div>'
			tag += '		<input type="text" placeholder="ディレクトリ名を入力" value="">'
			tag += '		<div class="_cms_btn _cms_btn_disable _btn_add_dis">追加する</div>'
			tag += '		<div class="_cms_btn _cms_btn_active _btn_add">追加する</div>'
			tag += '		<div class="_atten"></div>'
			tag += '	</div>'
			tag += '	<div class="_file_area">'
			tag += '		<div class="_title"><i class="fa fa-fw fa-file-text"></i> ファイルを追加</div>'
			tag += '		<input type="text" placeholder="ファイル名を入力" value="">'
			tag += '		<div class="_cms_btn _cms_btn_disable _btn_add_dis">追加する</div>'
			tag += '		<div class="_cms_btn _cms_btn_active _btn_add">追加する</div>'
			tag += '		<div class="_atten"></div>'
			tag += '	</div>'
			tag += '</div>'
		view.append(tag);
		
		v.btn_close = view.find('._btn_close');
		
		v.file_input = view.find("._file_area input");
		v.file_input.keyup(function(){ keyup(); })
		v.file_btn_add_dis = view.find("._file_area ._btn_add_dis");
		v.file_btn_add = view.find("._file_area ._btn_add");
		v.file_atten = view.find('._file_area ._atten');
		
		v.dir_input = view.find("._dir_area input");
		v.dir_input.keyup(function(){ keyup(); })
		v.dir_btn_add_dis = view.find("._dir_area ._btn_add_dis");
		v.dir_btn_add = view.find("._dir_area ._btn_add");
		v.dir_atten = view.find('._dir_area ._atten');
		
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
	}
	
	function setBtn(){
		v.btn_close.click(function(){ stageOut() });
		v.file_btn_add.click(function(){ file_add(); });
		v.dir_btn_add.click(function(){ dir_add(); });
		registAssetFloatView(function(){stageOut()});
	}
	
	
	/* ---------- ---------- ---------- */
	//個別処理
	var callback
	function update(_fileListClass,_callback){
		callback = _callback;
		checkFileNameInit(_fileListClass);
		
		v.file_btn_add.hide()
		v.file_btn_add_dis.show()
		v.file_input.val("").keyup();
		v.dir_input.val("").keyup();
	}
	
	function keyup(){
		keyup_file()
		keyup_dir()
	}
	function keyup_file(){
		var s = v.file_input.val();
		var errs = []
		var b = false;
		if(s){
			var e = CMS_Asset_UploadU.checkFileName(s);
			if(e) errs.push(e);
			if(checkFileName(s)){
				errs.push('<i class="fa fa-exclamation "></i> 同名ファイルが存在します。')
			} else{
				b = true;
			}
		}
		if(b){
			v.file_btn_add.show()
			v.file_btn_add_dis.hide()
			v.file_atten.html("");
		} else{
			v.file_btn_add.hide()
			v.file_btn_add_dis.show()
		}
		if(errs.length == 0){
			v.file_atten.html("");
		} else{
			v.file_atten.html(errs.join(""));
		}
	}
	function keyup_dir(){
		var s = v.dir_input.val();
		var errs = []
		var b = false;
		if(s){
			var e = CMS_Asset_UploadU.checkFileName(s);
			if(e) errs.push(e);
			if(checkFileName(s)){
				errs.push('<i class="fa fa-exclamation "></i> 同名ファイルが存在します。')
			} else{
				b = true;
			}
		}
		if(b){
			v.dir_btn_add.show()
			v.dir_btn_add_dis.hide()
			v.dir_atten.html("");
		} else{
			v.dir_btn_add.hide()
			v.dir_btn_add_dis.show()
		}
		if(errs.length == 0){
			v.dir_atten.html("");
		} else{
			v.dir_atten.html(errs.join(""));
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function file_add(){
		if(window.isLocked(true))return;
		var s = v.file_input.val();
		if(s){ callback ("file",s); }
		stageOut();
	}
	function dir_add(){
		if(window.isLocked(true))return;
		var s = v.dir_input.val();
		if(s){ callback ("dir",s); }
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentFilenames;
	function checkFileNameInit(_fileListClass){
		currentFilenames = _fileListClass.getCurrentFilelist();
	}
	function checkFileName(_s){
		for (var i = 0; i <  currentFilenames.length ; i++) {
			if(_s == currentFilenames[i]) return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_fileListClass,_callback){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			update(_fileListClass,_callback);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var CMS_Asset_RenameFileView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_Asset_RenameFileView');
		
		var tag = ''
			tag += '<div class="_btn_close"><i class="fa fa-lg fa-times-circle "></i> </div>'
			tag += '<div class="_body">'
			tag += '	<div class="_title">変更後の名称を入力</div>'
			tag += '	<input type="text" placeholder="ファイル名を入力" value="">'
			tag += '	<div class="_cms_btn _cms_btn_disable _btn_rename_dis">変更する</div>'
			tag += '	<div class="_cms_btn _cms_btn_active _btn_rename">変更する</div>'
			tag += '	<div class="_atten"></div>'
			tag += '</div>'
		view.append(tag);
		
		v.btn_close = view.find('._btn_close');
		
		v.input = view.find(" input");
		v.input.keyup(function(){ keyup(); })
		v.btn_rename_dis = view.find(" ._btn_rename_dis");
		v.btn_rename = view.find(" ._btn_rename");
		v.atten = view.find(' ._atten');
		
		
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
	}
	
	function setBtn(){
		v.btn_close.click(function(){ stageOut() });
		v.btn_rename.click(function(){ rename(); });
		registAssetFloatView(function(){stageOut()});
	}
	
	
	/* ---------- ---------- ---------- */
	//個別処理
	var callback
	var defName = ""
	function update(_fileListClass,_name,_callback,_pos){
		callback = _callback;
		checkFileNameInit(_fileListClass);
		defName = _name;
		v.btn_rename.hide()
		v.btn_rename_dis.show()
		v.input.val(defName).keyup();
		
		if(_pos){
			
		}
	}
	
	function keyup(){
		var s = v.input.val();
		var errs = []
		var b = false;
		
		if(s != defName){
			if(s){
				var e = CMS_Asset_UploadU.checkFileName(s);
				if(e) errs.push(e);
				if(checkFileName(s)){
					errs.push('<i class="fa fa-exclamation "></i> 同名ファイルが存在します。')
				} else{
					b = true;
				}
			}
		}
		if(b){
			v.btn_rename.show()
			v.btn_rename_dis.hide()
			v.atten.html("");
		} else{
			v.btn_rename.hide()
			v.btn_rename_dis.show()
		}
		if(errs.length == 0){
			v.atten.html("");
		} else{
			v.atten.html(errs.join(""));
		}
	}
	/* ---------- ---------- ---------- */
	
	function rename(){
		if(window.isLocked(true))return;
		var s = v.input.val();
		if(s){ callback (s); }
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentFilenames;
	function checkFileNameInit(_fileListClass){
		currentFilenames = _fileListClass.getCurrentFilelist();
	}
	function checkFileName(_s){
		for (var i = 0; i <  currentFilenames.length ; i++) {
			if(_s == currentFilenames[i]) return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_fileListClass,_name,_callback,_pos){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			update(_fileListClass,_name,_callback,_pos);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();





var CMS_Asset_UploaderView 	= (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_Asset_UploaderView');
		stageInit();
	}
	
	function createlayout(){

		var tag = "";
			tag += '<div class="_header">'
			tag += '	<div class="_guide">'+CMS_GuideU.getGuideTag("window/upload","_BASE_")+'</div>'
			tag += '	<div class="_title"><i class="fa fa-upload "></i> ファイルアップロード</div>'
			tag += '	<div class="_btn_close"><i class="fa fa-lg fa-times-circle "></i> </div>'
			tag += '</div>'
			tag += '<div class="_body">';
		if(Env_.isIE9){
			tag += '	<div style="padding:10px;color:red;font-size:18px;">'
			tag += '		ファイルアップロードは、ご利用のブラウザでは利用出来ません。<br>'
			tag += '		GoogleChoromeか、IE10以上を利用してください。'
			tag += '	</div>';
		} else{
			tag += '	<div class="_path"></div>';
			tag += '	<div class="_uploadArea"></div>';
			tag += '	<div class="_alertArea">'
			tag += '		<i class="fa fa-exclamation-triangle "></i> このディレクトリには、書き込み権限が無いため、ファイルをアップロードできません。<BR>'
			tag += '		FTPソフトなどで書き込み権限(707など)のパーミッションを設定してください。<br><br>';
			tag += '		<div class="_cms_btn-mini _btn_check_reload ">再度チェック</div>'
			tag += '	</div>';
		}
			tag += '</div>';
		view.html(tag);
		
		v.btn_check_reload = view.find('._btn_check_reload')
		v.btn_check_reload.click(function(){ 
			v.alertArea.hide()
			setTimeout(function(){ checkDir() },200);
		});

		v.btn_close = view.find('._btn_close');
		v.path = view.find('._path')
		v.alertArea = view.find('._alertArea')
		v.uploadArea = view.find('._uploadArea')
		v.alertArea.hide()
		v.uploadArea.hide();
		
		setBtn();
	}
	
	function setBtn(){
		v.btn_close.click(function(){ stageOut() });
		registAssetFloatView(function(){stageOut()});
	}
	/* ---------- ---------- ---------- */
	
	var dir
	var callback
	var fileListClass
	
	function initUpload(_dir,_fileListClass,_callback){
		if(uploaderView){
			uploaderView.remove();
			uploaderView = null;
		}
		
		var this_ = this;
		dir = _dir;
		fileListClass = _fileListClass;
		callback = _callback;
		var path = dir.split(CMS_Path.SITE.REL).join("");
		v.path.html('アップ先ディレクトリ：<span class="_bold"><span class="_icon_dir_mini"></span>' + path +'</span>');
		
		createMain()
	}
	var uploaderView
	function createMain(){
		checkDir();
	}
	function checkDir(){
		var param = '?action=checkDir';
			param += '&upload_dir=' + escape_url(dir);
		var url = CMS_Path.PHP_UPLOAD + param;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) {
				if(data.status == "1"){
					createMain_uploader();
				} else{
					createMain_error();
				}
			},
			error: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		});
	}
	
	var isWriteable
	function createMain_uploader(){
		isWriteable = true;
		v.alertArea.hide()
		v.uploadArea.show();
		if(uploaderView) return;
		uploaderView = new CMS_Asset_UploaderView2( v.uploadArea , dir , fileListClass , callback );
		
	}
	function createMain_error(){
		isWriteable = false;
		v.alertArea.show()
		v.uploadArea.hide();
	}
	
	/* ---------- ---------- ---------- */
	
	function updateFileList(){
		if(uploaderView) uploaderView.updateFileList()
	}
	
	/* ---------- ---------- ---------- */
	
	var uploadWapView
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback = true;
	// var currentPath = "";
	function stageInit(){
		view.hide();
	}
	function stageIn(_dir,_fileListClass,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			
			if(isFirst){ createlayout(); }
			isFirst = false;
			
			initUpload(_dir,_fileListClass,_callback);
			view.show();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	return {
		init: init,
		// updateFileList: updateFileList,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();

var CMS_Asset_UploaderView2 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_dir,_fileListClass,_callback) {
	  this.init(_view,_dir,_fileListClass,_callback);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.callback;
	p.v;
	
	p.init = function(_view,_dir,_fileListClass,_callback) {
		
		CMS_Asset_UploaderState.init();
	
		var this_ = this;
		this.view = _view;
		this.dir = _dir;
		this.callback = _callback;
		this.fileListClass = _fileListClass;
		this.v = {}
		this.createView();
		
	}
	p.createView= function(_view) {
		var this_ = this;
		var tag = "";
			tag += '<div class="_list"></div>';
			tag += '<div class="_list_btns ">';
			tag += '	<div class="_upload_btn_uploads _cms_btn _cms_btn_active"><i class="fa fa-upload "></i> まとめてアップロード</div>';
			tag += '	<div class="_upload_btn_deletes _cms_btn "><i class="fa fa-minus-circle " style="color:red"></i> クリア</div>';
			tag += '</div>';
			tag += '<div class="_dragStage"><i class="fa fa-sign-in "></i> ここにファイルをドラッグ＆ドロップしてください。</div>';
			tag += '<div class="_notes" style="margin:10px 0">'
			tag += '	※ファイル名は、半角英数字小文字でアップロードする必要があります。<br>'
			tag += '	 - 大文字は小文字に自動変換されます<br>'
			tag += '	 - 全角文字の場合は、リネームしてください<br>'
			tag += '	※画像ファイルの場合は、最大寸法を超える場合は、収まるようにリサイズされます。<br>'
			tag += '	　最大寸法は、/_cms/setting/setting.jsで設定できます。'
			tag += '</div>';

		this.view.html(tag);
		
		this.v.dragStage  = this.view.find("._dragStage");
		this.v.list 	 = this.view.find("._list");
		this.v.list_btns  = this.view.find("._list_btns");
		
		this.v.upload_btn_uploads  = this.view.find("._upload_btn_uploads");
		this.v.upload_btn_uploads.click(function(){ 
			if(window.isLocked(true))return;
			this_.uploads();
		});
		
		this.v.upload_btn_deletes  = this.view.find("._upload_btn_deletes");
		this.v.upload_btn_deletes.click(function(){ this_.clearAll(); });
		
		this.setEvent()
		this.checkServer();
	}
	p.setEvent = function() {
		var this_ = this;
		var dragStage = this.v.dragStage;
		dragStage.on('dragenter', function(e) {
			e.stopPropagation();
			e.preventDefault();
			$(this).css('border', '1px solid #0B85A1');
			CMS_Asset_UploaderState.setCurrentDragStage($(this))
		});
		dragStage.on('dragover', function(e) {
			e.stopPropagation();
			e.preventDefault();
		});
		dragStage.on('drop', function(e) {
			$(this).css('border', '1px dashed #0B85A1');
			e.preventDefault();
			this_.dragFileCheck(e.originalEvent.dataTransfer.files);
		});
	}
	p.checkServer = function() {
		CMS_Asset_UploaderState.checkServer(function(){});
	}
	p.removeFile = function(_id) {
		var a = []
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			if(this.CMS_Asset_UploadClass[i].id != _id) a.push(this.CMS_Asset_UploadClass[i])
		}
		this.CMS_Asset_UploadClass = a;
		this.updateList();
	}
	
	p.CMS_Asset_UploadClass
	p.reset = function() {
		this.CMS_Asset_UploadClass = []
	}
		
	p.dragFileCheck = function(files) {
		if(this.CMS_Asset_UploadClass ==undefined) this.reset();
		for (var i = 0; i < files.length; i++) {
			if(isLog) console.log(files[i]);
			if (CMS_Asset_UploadU.checkUploadableFile(files[i].type)) {
				if(this.checkSameFile(files[i].name) ==false){
					var uid = "_upload" + DateUtil.getRandamCharas(10);
					this.CMS_Asset_UploadClass.push(new CMS_Asset_UploadClass(this,files[i],this.dir,uid));
				}
			}
		}
		this.initStart();
	}
	p.initStart = function() {
		var this_ = this;
		var initedCount = 0
		var leng = this.CMS_Asset_UploadClass.length
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			this.CMS_Asset_UploadClass[i].initStart(function(){
				initedCount ++
				if(leng == initedCount){
					this_.updateList();
				}
			})
		}
	}
	p.checkSameFile = function(_s) {
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			if(this.CMS_Asset_UploadClass[i].name == _s)return;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */

	p.currentFilenames 
	p.checkFileNameInit = function() {
		this.currentFilenames = this.fileListClass.getCurrentFilelist();
	}
	p.checkFileName = function(_s) {
		for (var i = 0; i <  this.currentFilenames.length ; i++) {
			if(_s == this.currentFilenames[i])return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	//ファイルリストが更新された時にコールされる
	p.updateFileList = function() {
		if(this.CMS_Asset_UploadClass==undefined) return;
		this.checkFileNameInit()
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			this.CMS_Asset_UploadClass[i].updateFileList();
		}
	}
	
	/* ---------- ---------- ---------- */

	p.updateList = function(files) {
		this.checkFileNameInit();
		
		var a = []
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			if(this.CMS_Asset_UploadClass[i].state != "comp") a.push(this.CMS_Asset_UploadClass[i])
		}
		this.CMS_Asset_UploadClass = a;
		
		if(this.CMS_Asset_UploadClass.length == 0){
			this.v.list_btns.hide();
			this.v.list.html("");
			return;
		} else{
			this.v.list_btns.show();
		}
		
		var tag = "";
		tag += '<table class="_dragList">'
			tag += '<tr>'
			tag += '<th width="80" style="">サムネイル</th>'
			tag += '<th>ファイル名</th>'
			tag += '<th width="70" style="">画像<br>リサイズ</th>'
			tag += '<th width="70" style="">リネーム</th>'
			tag += '<th width="100" style="text-align:center;">更新日時<br>ファイル種類</th>'
			tag += '<th width="80" style="text-align:right;">ファイルサイズ</th>'
			tag += '<th width="90" style="text-align:center;">状態</th>'
			tag += '<th width="25" style="text-align:center;"></th>'
			tag += '</tr>'
		for (var i = 0; i < this.CMS_Asset_UploadClass.length; i++) {
			var info = this.CMS_Asset_UploadClass[i];
			tag += '<tr id="'+info.id+'">'
			tag += '<td class="_thumb"></td>'
			tag += '<td class="_names">'
			tag += '	<div class="_name_org"></div>'
			tag += '	<div class="_name_up"></div>'
			tag += '	<div class="_name_e _atten"></div>'
			tag += '	<div class="_size_wh_messe "></div>'
			tag += '</td>'
			tag += '<td class="_resize"><div class="_cms_btn-nano _upload_btn_resize">リサイズ</div></td>'
			tag += '<td class="_rename"><div class="_cms_btn-nano _upload_btn_rename">リネーム</div></td>'
			tag += '<td class="_date">'
			tag += '	' + CMS_SaveDateU.getRelatedDate(new Date(info.raw.lastModifiedDate)) + '<br>'
			tag += '	' + info.raw.type
			tag += '</td>'
			tag += '<td class="_size">'
			tag += '	' +FileU.formatFilesize(info.filesize)
			tag += '	<div class="_size_e _atten fs10"></div>'
			tag += '</td>'
			tag += '<td class="_controllArea">'
			tag += '	<div class="_progressArea">'
			tag += '		<div class="_progressText"></div>'
			tag += '		<div class="_progressBar"><div class="_bar"></div><div class="_bar_comp"></div></div>'
			tag += '	</div>'
			tag += '	<div class="_stateBtns">'
			tag += '		<div class="_upload_btn_upload"><i class="fa fa-upload "></i> </div>'
			tag += '		<div class="_upload_btn_cancel"><i class="fa fa-pause "></i> </div>'
			tag += '		<div class="_mark_error"><i class="fa fa-exclamation "></i> </div>'
			tag += '		<div class="_mark_done"><i class="fa fa-check "></i> </div>'
			tag += '	</div>'
			tag += '</td>'
			tag += '<td class="_delete"><div class="_upload_btn_delete"><i class="fa fa-minus-circle "></i> </div></td>'
			tag += '</tr>'
		}
		tag += "</table>"
		this.v.list.html(tag);
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			this.CMS_Asset_UploadClass[i].setView(this.v.list);
		}
	}
	p.clearAll = function() {
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			this.CMS_Asset_UploadClass[i].clear_()
		}
		this.CMS_Asset_UploadClass = [];
		this.updateList()
	}
	p.uploads = function() {
		for (var i = 0; i <  this.CMS_Asset_UploadClass.length ; i++) {
			this.CMS_Asset_UploadClass[i].upload()
		}
	}
	p.updateTID
	p.uploaded = function() {
		var this_ = this;
		if(this.updateTID)clearTimeout(this.updateTID);
		this.updateTID = setTimeout(function(){
			this_.uploaded_laater()
		},500);
	}
	p.uploaded_laater = function() {
		if(this.callback) this.callback();
		// this.updateList();
		CMS_Asset_UploaderView.stageOut();
	}
	p.remove = function() {
		this.view.empty();
	}
	
	return c;
})();

var CMS_Asset_UploadClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_raw,_dir,_id) {
	  this.init(_parent,_raw,_dir,_id);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	p.state
	p.parent
	p.raw 
	p.name 
	p.formData 
	p.img_url 
	p.id
	
	p.init = function(_parent,_raw,_dir,_id) {
		var this_ = this;
		this.state = ""
		this.v = {}
		this.parent  = _parent;
		this.raw 	 = _raw;
		this.type 	 = _raw.type;
		this.dir 	 = _dir;
		this.name 	 = _raw.name;
		this.nemeID  = FileU.getFileName(this.name);
		this.extention  = FileU.getExtention(this.name);
		this.name_up  = this.nemeID + "." + this.extention;
		this.isImage  = FileU.isImageFile(this.name);
		this.id 	 = _id;
	}
	
	/* ---------- ---------- ---------- */
	
	p.initStart = function(_callback) {
		this.initCallback = _callback;
		var this_ = this;
		if(this.isImage){
			CMS_Asset_UploadU.resize(this.raw, function(_w1,_w2,_file){
				this_.initStartImage(_w1,_w2,_file);
			});
		}else{
			this.formData = new FormData();
			this.formData.append('upfile',this.raw);
			this.filesize = this.raw.size;
			if(this.initCallback) this.initCallback();
		}
	}
	p.initStartImage = function(_wh_org,_wh_re,_file){
		this.wh_org = _wh_org;
		this.wh_re = _wh_re;
		//
		if(_file == undefined) _file = this.raw;
		this.img_url = window.URL.createObjectURL(_file);
		this.filesize = _file.size;
		this.formData = new FormData();
		this.formData.append('upfile',_file);
		if(this.initCallback) this.initCallback();
	}
	
	/* ---------- ---------- ---------- */
	
	p.resize = function() {
		var this_ = this;
		this.initCallback = null;
		var _U = CMS_Asset_UploadU;
		var ss = prompt("最大幅・高さを入力してください",_U.getMaxW() +"," +_U.getMaxH());
		var a = ss.split(",");
		if(a.length!=2){ return; }
		var rect = { w:a[0] , h:a[1] };
		CMS_Asset_UploadU.resize(this.raw, function(_w1,_w2,_file){
			this_.initStartImage(_w1,_w2,_file);
			this_.updateCheckWHSize()
			this_.updateCheckFileSize()
			this_.updateImage()
		},rect);
	}
	
	/* ---------- ---------- ---------- */

	p.setView = function(_parentView) {
		var this_ = this;
		this.view = _parentView.find("#"+this.id)
		this.v.state = this.view.find("._state")
		this.initCheckWHSize()
		this.initCheckFileSize()
		this.initCheckName()
		
		this.initBtns();
		this.initProgressBar();
		this.updateState();
		
	}
	
	/* ---------- ---------- ---------- */

	p.initCheckWHSize = function() {
		this.v.size_wh_messe = this.view.find("._size_wh_messe");
		this.updateCheckWHSize();
	}
	p.updateCheckWHSize = function() {
		if(this.wh_org == undefined ) return;
		if(this.wh_org.w != this.wh_re.w){
			if(this.wh_org.h != this.wh_re.h){
				var s = "";
					s += '<i class="fa fa-exclamation "></i> 画像寸法(幅x高)を変更します。<br>';
					s += this.wh_org.w + " x " + this.wh_org.h + 'px <i class="fa fa-long-arrow-right "></i>';
					s += "<b>" + this.wh_re.w + " x " + this.wh_re.h + "px</b>";
				this.v.size_wh_messe.html(s);
				this.v.size_wh_messe.show();
			}
		}
	}
	
	/* ---------- ---------- ---------- */

	p.isValidFileSize = false;
	p.initCheckFileSize = function() {
		this.v.size = this.view.find("._size")
		this.v.size_e = this.view.find("._size_e")
		this.updateCheckFileSize();
	}
	p.updateCheckFileSize = function() {
		this.isValidFileSize = CMS_Asset_UploaderState.checkFileSize(this.filesize);
		if(this.isValidFileSize == false){
			this.v.size.addClass("_overSize")
			this.v.size_e.html('<i class="fa fa-exclamation "></i> サイズオーバー<br>( '+CMS_Asset_UploaderState.getMaxSizeMB()+'MBまで )')
		}
	}
	
	/* ---------- ---------- ---------- */

	p.initCheckName = function() {
		var this_ = this;
		this.v.upload_btn_rename = this.view.find("._upload_btn_rename")
		this.v.upload_btn_rename.click(function(){ this_.rename();});
		this.v.upload_btn_resize = this.view.find("._upload_btn_resize")
		this.v.upload_btn_resize.click(function(){ this_.resize();});
		if(! this.isImage) this.v.upload_btn_resize.hide();
		
		this.v.name_org = this.view.find("._name_org");
		this.v.name_up = this.view.find("._name_up");
		this.v.name_e = this.view.find("._name_e");
		this.v._thumb = this.view.find("._thumb")
		this.updateImage();
		this.updateName();
	}
	p.updateImage = function() {
		if(this.img_url) this.v._thumb.html('<img src="'+this.img_url+'">')
	}
	p.updateName = function() {
		this.checkName();
		var this_ = this;
		this.v.name_org.html('<i class="fa fa-file-o "></i> ' + this.name +'<br>　　<i class="fa fa-long-arrow-down "></i> ');
		this.v.name_up.html('<i class="fa fa-file "></i> ' + this.name_up);
		if(this.name == this.name_up) this.v.name_org.html("")
	}
	p.isValidFilename = false;
	p.isSameFilename = false;
	p.checkName = function() {
		var this_ = this;
		this.isValidFilename = true;
		this.isSameFilename = false;
		if(this.parent.checkFileName(this.name_up) ){
			this.isSameFilename = true;
			this.v.name_e.show();
			this.v.name_e.html('<i class="fa fa-exclamation "></i> ' + "同名ファイルを上書します。");
		} else{
			var s = CMS_Asset_UploadU.checkFileName(this.name_up);
			if(s == ""){
				this.v.name_e.hide();
			} else{
				this.v.name_e.show();
				this.v.name_e.html('<i class="fa fa-exclamation "></i> ' + s);
				this.isValidFilename = false;
			}
		}
	}
	p.rename = function() {
		var this_ = this;
		var nn = FileU.getFileName(this.name_up)
		var s = prompt("リネームを行います。ファイル名を入力してください",nn)
		if(s){
			this.name_up = s + "." + this.extention;
			this.updateName();
		}
		this.updateState();
	}
	/* ---------- ---------- ---------- */
	//ファイルリストが更新された時にコールされる
	p.updateFileList = function() {
		this.updateName();
		this.updateState();
	}
	
	/* ---------- ---------- ---------- */

	p.initBtns = function() {
		var this_ = this;
		this.v.upload_btn_delete = this.view.find("._upload_btn_delete");
		this.v.upload_btn_cancel = this.view.find("._upload_btn_cancel");
		this.v.upload_btn_upload = this.view.find("._upload_btn_upload");
		
		this.v.upload_btn_delete.click(function(){ this_.parent.removeFile(this_.id);});
		this.v.upload_btn_cancel.click(function(){ this_.uploadAbort();});
		this.v.upload_btn_upload.click(function(){ 
			if(window.isLocked(true))return;
			this_.upload();
		});
		
		this.v.mark_done = this.view.find("._mark_done")
		this.v.mark_error = this.view.find("._mark_error")
	}
	
	p.initProgressBar = function() {
		this.v.progressText = this.view.find("._progressText");
		this.v.progressBar = this.view.find("._progressBar");
		this.v.progressBar_bar = this.view.find("._progressBar ._bar");
		this.v.progressBar_bar_comp = this.view.find("._progressBar ._bar_comp");
	}
	
	/* ---------- ---------- ---------- */

	p.updateState = function() {
		if(this.isValidFileSize == false){
			this.overSize();
			return;
		}
		if(this.state =="")			this.uploadPre();
		if(this.state =="wait")		this.uploadPre();
		if(this.state =="uploading")this.uploadProggress();
		if(this.state =="error")	this.errorUpload();
		if(this.state =="comp")		this.successUpload();
	}

	p.isValid = function() {
		var b = true;
		if(this.isValidFilename == false) b = false;
		return b
	}
	p.upload = function() {
		if (this.isValid() == false) return;
		if (this.state != "wait") return;
		this.uploadStart();
		
		var param = '?action=upload';
			param += '&upload_dir=' + escape_url(this.dir);
			param += '&fileName='+ this.name_up;
			
		var this_ = this;
		this.jqXHR = $.ajax({
			xhr: function() {
				var xhrobj = $.ajaxSettings.xhr();
				if (xhrobj.upload) {
					xhrobj.upload.addEventListener('progress', function(event) {
						var percent = 0;
						var position = event.loaded || event.position;
						var total = event.total;
						if (event.lengthComputable) {
							percent = Math.ceil(position / total * 100);
						}
						this_.uploadProggress(percent);
					}, false);
				}
				return xhrobj;
			},
			url: CMS_Path.PHP_UPLOAD + param,
			type: "POST",
			contentType: false,
			processData: false,
			cache: false,
			data: this.formData,
			success: function(data) {
				if (data.status == "1") this_.successUpload();
				if (data.status == "0") this_.errorUpload();
			},
			error: function(data) {
				this_.errorUpload();
			}
		});
	}
	
	//待機
	p.uploadPre = function() {
		this.resetState()
		this.state = "wait"
		this.v.state.html('<i class="fa fa-upload "></i> ')
		this.v.upload_btn_delete.show();
		this.v.upload_btn_rename.show();
		if(this.isValid()){
			this.v.upload_btn_upload.show()
		}
	}
	p.overSize = function() {
		this.resetState()
		this.state = "over";
		
	}
	//キャンセル
	p.uploadAbort = function() {
		this.resetState()
		this.state = "abort"
		this.jqXHR.abort();
		this.uploadPre();
	}
	//アップスタート
	p.uploadStart = function() {
		this.resetState()
		this.state = "start"
		this.v.upload_btn_cancel.show()
	}
	//アップ中
	p.uploadProggress = function(_s) {
		this.resetState()
		this.state = "uploading"
		this.v.upload_btn_cancel.show();
		this.view.addClass("_" + this.state)
		this.v.progressBar_bar.show()
		this.v.progressBar_bar.css("width",_s/2)
	}
	//エラー
	p.errorUpload = function() {
		this.resetState()
		this.state = "error"
		this.v.mark_error.show()
		this.v.progressText.html('エラー')
		this.view.addClass("_" + this.state)
		this.v.upload_btn_delete.show()
	}
	//完了
	p.successUpload = function() {
		this.resetState()
		this.state = "comp"
		this.v.mark_done.show()
		this.view.addClass("_" + this.state)
		this.v.progressBar_bar_comp.show();
		this.parent.uploaded();
	}
	//
	p.resetState = function() {
		this.v.progressBar_bar.hide()
		this.v.progressBar_bar_comp.hide()
		this.v.progressText.html('');
		this.v.upload_btn_upload.hide();
		this.v.upload_btn_cancel.hide();
		this.v.mark_done.hide();
		this.v.mark_error.hide();
		this.v.upload_btn_delete.hide();//
		this.v.upload_btn_rename.hide();
		this.view.removeClass("_" + "uploading")
		this.view.removeClass("_" + "error")
		this.view.removeClass("_" + "comp")
	}
	//
	p.clear_ = function() {
		this.raw = null;
		this.formData = null;
		this.jqXHR = null;
	}
	return c;
})();

var CMS_Asset_UploaderState = (function(){
	
	var isInited = false
	function init(){
		if(isInited == false){
			setEvent();
		}
		isInited = true;
	}
	
	/* ---------- ---------- ---------- */
	
	var isChecked = false
	function checkServer(_callback){
		if(isChecked)return;
		isChecked = true;
		
		var url = CMS_Path.PHP_UPLOAD + "?action=check";
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) { checkServer_comp(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		})
	}
	var maxSize = -1;
	function getMaxSize(){return maxSize}
	function getMaxSizeMB(){return maxMB}
	function getN(_s){
		var n = parseInt(_s.split("M").join(""));
		if(isNaN(n)) {
			return defMAX;
		} else{
			return n;
		}
	}
	var defMAX = 32;
	//var defMAX = 1;
	var maxMB = -1
	function checkServer_comp(json){
		var m1 = getN(json.post_max_size)
		var m2 = getN(json.upload_max_filesize)
		var m3 = getN(json.memory_limit)
		maxMB = Math.min(Math.min(defMAX,m1),Math.min(m2,m3));
		maxSize = maxMB * 1024*1024;
	}
	function checkFileSize(_s){
		if(_s < maxSize) return true;
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	function setEvent(){
		$(document).on('dragenter', function(e) {
			e.stopPropagation();
			e.preventDefault();
		});
		$(document).on('dragover', function(e) {
			e.stopPropagation();
			e.preventDefault();
			if(currentDragStage){
				currentDragStage.css('border', '1px dashed #0B85A1');
			}
		});
		$(document).on('drop', function(e) {
			e.stopPropagation();
			e.preventDefault();
		});
	}
	
	var currentDragStage
	
	function setCurrentDragStage(_d){
		currentDragStage = _d;
	}
	/* ---------- ---------- ---------- */
	
	return {
		init: init,
		checkServer: checkServer,
		getMaxSize: getMaxSize,
		getMaxSizeMB: getMaxSizeMB,
		checkFileSize: checkFileSize,
		setCurrentDragStage: setCurrentDragStage
	}})();

var CMS_Asset_UploadU = (function(){
	
	var maxW = 800;
	var maxH = 600;
	var isInited = false;
	function init(){
		if(isInited == false){
			if (window["UPLOAD_IMAGE_MAX_W"] ) {
				maxW = window["UPLOAD_IMAGE_MAX_W"];
			}
			if (window["UPLOAD_IMAGE_MAX_H"] ) {
				maxH = window["UPLOAD_IMAGE_MAX_H"];
			}
			isInited = true;
		}
	}
	var tempW;
	function getMaxW(){
		if(tempW) return tempW;
		return maxW;
	}
	var tempH;
	function getMaxH(){
		if(tempH) return tempH;
		return maxH;
	}
	
	/* ---------- ---------- ---------- */

	function isOverSize(_w,_h){
		init();
		var w = _w;
		var h = _h;
		if(w > h) {
			if(getMaxW() < w) return true;
		} else{
			if(getMaxH() < h) return true;
		}
		return false;
	}
	function getWH(_w,_h){
		init();
		var w = _w;
		var h = _h;
		var rate = _w / _h
		
		if(_w > getMaxW()){
			w = getMaxW();
			h = w / rate;
		}
		
		if(h > getMaxH()){
			h = getMaxH();
			w = h * rate;
		}
		return { 
			w : Math.round(w),
			h: Math.round(h)
		}
		/*
		function getMaxW(){ return 1000}
		function getMaxH(){ return 500}
		var f = getWH;
		deepEqual(f(1400,600),{w:1000,h:429})
		deepEqual(f(2000,1000),{w:1000,h:500})
		deepEqual(f(1200,1000),{w:600,h:500})
	
		deepEqual(f(700,1000),{w:350,h:500})
	
		deepEqual(f(1000,2000),{w:250,h:500})
		deepEqual(f(1000,500),{w:1000,h:500})
		deepEqual(f(100,50),{w:100,h:50})
		*/
	}
	
	/* ---------- ---------- ---------- */

	function resize(_raw,_callback,_rect){
		if(_rect){
			tempW = _rect.w;
			tempH = _rect.h;
		} else{
			tempW = null;
			tempH = null;
		}
		var reader = new FileReader();
			reader.onload = function(event) {
				var img = new Image();
					img.onload = function(){
						var wh_org = {w:img.width , h:img.height};
						var wh_re = getWH(img.width , img.height);
						if(isOverSize(img.width , img.height)){
							var cv = document.createElement( "canvas" );
								cv.width = wh_re.w;
								cv.height = wh_re.h;
								cv.getContext("2d").drawImage( img, 0, 0, wh_re.w, wh_re.h );
							var tt = (_raw.type.indexOf("png") != -1) ? "image/png" : "image/jpeg";
							var bin = atob(cv.toDataURL(tt).replace(/^.*,/, ''));
							var buffer = new Uint8Array(bin.length);
							for (var i = 0; i < bin.length; i++) {
								buffer[i] = bin.charCodeAt(i);
							}
							var o = {
								size: bin.length,
								type: _raw.type,
								lastModified:_raw.lastModified,
								lastModifiedDate:_raw.lastModifiedDate
							}
							_callback(wh_org,wh_re,new Blob( [buffer.buffer], o));
						} else{
							_callback(wh_org,wh_re);
						}
					};
					img.src = event.target.result;
			}
			reader.readAsDataURL(_raw);
	}
	
	function checkFileName(_s) {
		if(_s.match(/[^0-9a-zA-Z_.-]+/) != null ) return "半角英字数字にリネームしてください。";
		if(_s.charAt(0) == "." ) return ".(ドット)ではじまるファイルはアップできません";
		return "";
	}

	function checkUploadableFile(_s) {
		//.xleファイルの型が取得できんかったので、とりあえずスルー
		// if (_s == "") return false;
		return true;
	}
	return {
		resize: resize,
		getMaxW: getMaxW,
		getMaxH: getMaxH,
		isOverSize: isOverSize,
		checkFileName: checkFileName,
		checkUploadableFile: checkUploadableFile
	}
})();

var CMS_Asset_FileDetailView 		 = (function(){

	var view;
	var v = {};

	function init(){
		view = $('#CMS_Asset_FileDetailView');
		view.append($('<div id="CMS_Asset_FileEditorView"></div>'));
		view.append($('<div id="CMS_Asset_FilePreviewView"></div>'));
		
		CMS_Asset_FileEditorView.init();
		CMS_Asset_FilePreviewView.init();
		
	}
	/* ---------- ---------- ---------- */
	
	function save (){ 
		CMS_Asset_FileEditorView.save();
	}
	
	/* ---------- ---------- ---------- */
	
	var _ps = [];
	var _current;
	function openPage (_param){
		var ex = CMS_AssetFileU.getExtention(_param.id);
		var isClickable = CMS_AssetFileU.isExtentionAll(ex);
		var isEdtable = CMS_AssetFileU.isExtention(ex,"editable");
		
		if(isEdtable){
			CMS_Asset_FileEditorView.stageIn(_param);
			CMS_Asset_FilePreviewView.stageOut();
		} else {
			CMS_Asset_FileEditorView.stageOut();
			CMS_Asset_FilePreviewView.stageIn(_param);
		}
		CMS_AssetStage.openedDetailPage(_param);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_param){
		// if(! isOpen){ isOpen = true;
			view.show();
			if(_param) openPage(_param);
		// }
	}
	function stageOut(){
		// if(isOpen){ isOpen = false;
			view.hide();
		// }
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		save: save
	}
})();

var CMS_Asset_FileEditorView 		 = (function(){

	var view;
	var v = {};

	function init(){
		view = $('#CMS_Asset_FileEditorView');
	}
	
	/* ---------- ---------- ---------- */
	
	function _getID 		(_id,_dir){ return CMS_AssetDB.getID(_id,_dir) }
 	function _has 			(){ 		return CMS_AssetDB.hasCurrent(); }
 	function _getCurrent 	(){ 		return CMS_AssetDB.getCurrentPage(); }
 	
	function _has_ps (_id,_dir){
		for (var i = 0; i < _ps.length ; i++) {
			var id1 = _getID(_id,_dir);
			var id2 = _getID(_ps[i].id,_ps[i].dir);
			if(id1 == id2)return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	function save (){ 
		if(isOpen){
			if(_has()) _getCurrent().saveData();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var _ps = [];
	var _current;
	
	function openPage (_param){
		if(_param == undefined) {
			if(_current == undefined)return;
			_param = _current;
		}
		
		//ページ作成
		if(_has_ps(_param.id,_param.dir) == false){
			_ps.push(new CMS_Asset_FileEditorClass( view , _param));
		}
		_current = _param;
		
		//前のページは非表示にして、現在のページを表示
		if(_has()) _getCurrent().stageOut();
		for (var i = 0; i < _ps.length ; i++) {
			var id1 = _getID(_param.id,_param.dir)
			var id2 = _getID(_ps[i].id,_ps[i].dir)
			if(id1 == id2) _ps[i].stageIn(_param.extra);//extra
		}
		
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_param){
		// if(! isOpen){ 
			isOpen = true;
			view.show();
			openPage(_param);
		// }
	}
	function stageOut(){
		// if(isOpen){ 
			isOpen = false;
			view.hide();
		// }
	}
	/* ---------- ---------- ---------- */
	
	function getH(){
		return view.height();
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		save: save,
		getH: getH
	}
})();

var CMS_Asset_FileEditorClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_pageModel) {
	  this.init(_view,_pageModel);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view,_pageModel) {
		var self 		= this;
		this.parentView = _view;
		this.pageModel 	= _pageModel;
		this.id = this.pageModel.id;
		this.dir = this.pageModel.dir;
		
		this.storageClass = new Storage.SimpleIO( this.id , this.dir );
		this.storageClass.load(function() {
			self.loadData();
		});
	}
	
	p.loadData = function() {
		var self = this;
		var dir = this.pageModel.dir;
		var id = this.pageModel.id;
		
		this.pageView = new EditableView.TextPageView (
			this.pageModel,
			this.storageClass,
			this.parentView,
			CMS_AssetStage
		);
		this.stageIn(this.pageModel.extra);
	}
	
	/* ---------- ---------- ---------- */
	//そのままリレー
	
	p.saveData =function () { if(this.pageView) this.pageView.saveData() }
	
	/* ---------- ---------- ---------- */

	p.stageInit = function() {}
	
	p.stageIn = function(_extra) {
		if(this.pageView){
			this.pageView.stageIn(_extra);
			CMS_AssetDB.setCurrent(this);
		}
	}
	p.stageOut = function() {
		if(this.pageView){
			this.pageView.stageOut();
		}
	}
	p.remove = function() {
		if(this.pageView){
			this.isShow = false;
			this.pageView.remove();
		}
	}
	return c;
})();

var CMS_Asset_FilePreviewView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#CMS_Asset_FilePreviewView');
		createlayout();
	}
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_header">'
			tag += '	<div class="_header_inner">'
			tag += '		<div class="_title"></div>'
			tag += '	</div>'
			tag += '</div>'
			tag += '<div class="_body _asset-scroll">'
			tag += '</div>';
			view.html(tag);
		
		v.header = view.find("._header");
		v.title = view.find("._header ._title");
		v.body = view.find("._body");
	}
	
	function openPage(_param){
		
		var _t = CMS_Path.ASSET.getAbsPath_deco_file(_param.id , _param.dir);
		v.title.html('<div class="_fs12 _filePath_wh _cms_btn_alpha">' + _t +'</div>');
		
		var path = _param.dir + _param.id;
		var tag = "";
		var b = false;
		var ex = CMS_AssetFileU.getExtention(_param.id);
		if(CMS_AssetFileU.isExtention(ex,"img")){
			b = true;
			tag += '<div class="_body_core"><img src="{URL}" class="_cms_bg_trans"></div>';
		}
		if(CMS_AssetFileU.isExtention(ex,"mov")){
			b = true;
			tag += '<div class="_body_core"><video controls src="{URL}"></div>';
		}
		if(CMS_AssetFileU.isExtention(ex,"pdf")){
			b = true;
			tag += '<iframe class="_preview" src ="{URL}" ></iframe>';
		}
		if(b){
			tag = tag.split("{URL}").join(path);
		} else{
			tag += '<div class="_body_core"><div class="_anno">このファイルは、プレビューできません</div></div>';
		}
		
		v.body.html(tag);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_param){
		// if(! isOpen){ 
			isOpen = true;
			view.show();
			openPage(_param);
		// }
	}
	function stageOut(){
		// if(isOpen){ 
			isOpen = false;
			view.hide();
		// }
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
	}
})();

var CMS_AssetDB 		 = (function(){
	
	var pages = [];
	
	//ページ追加
	function addPage(_pageModel){
		if(hasPages(_pageModel) == false){
			pages.push(_pageModel);
		}
	}
	//ページにDBに存在するか
	function hasPages (_pageModel){
		for (var i = 0; i < pages.length ; i++) {
			if(pages[i].id == _pageModel.id) {
				if(pages[i].dir == _pageModel.dir) {
					return true;
				}
			}
		}
		return false;
	}

	function setCurrent(_page){
		addPage(_page.pageModel);
		currentPage = _page;
	}
	var currentPage;
	
	//現在のページを取得
	function getCurrentPage()		{ return currentPage; }
	
	function hasCurrent()	{
		if(currentPage == undefined) return false;
		return true;
	}
	
	function getID(_id,_dir){
		if(_dir == undefined) _dir = "";
		if(_id == undefined) _id = "";
		if(typeof _dir == "number") _dir = String(_dir);
		if(typeof _id == "number") _id = String(_id);
		var dir = _dir.split("/").join("__SP__")
		var dir = dir.split(".").join("")
		var id = _id.split(".").join("")
		
		return dir + "_" + id;
	}
	
	/* ---------- ---------- ---------- */
	
	return {
		addPage : addPage,
		hasPages : hasPages,
		setCurrent : setCurrent,
		getCurrentPage : getCurrentPage,
		hasCurrent : hasCurrent,
		getID : getID
	}
})();

var CMS_AssetFileU = (function(){
	function treadExtention(_s){
		var exs = [".jpg",".jpeg",".png",".gif",".bmp",".svg"];
		for (var i = 0; i < exs.length ; i++) {
			var ex = exs[i]
			var cc = ex.length;
			if(_s.substr(_s.length - cc , cc) == ex){
				return _s.substr(0 , _s.length - cc)
			}
		}
		return _s;
	}	

	function checkIsImage (_s) {
		var b = false;
		var ex = _s.toLowerCase();
		if (ex.indexOf(".png") != -1) b = true;
		if (ex.indexOf(".jpeg") != -1) b = true;
		if (ex.indexOf(".jpg") != -1) b = true;
		if (ex.indexOf(".gif") != -1) b = true;
		if (ex.indexOf(".svg") != -1) b = true;
		if (ex.indexOf(".bmp") != -1) b = true;
		return b;
	}
	
	var exs = {
		editable:["html","htm","text","txt","xml","json","js","css","php","rb","as","md"],
		html:["html","htm"],
		img:["gif","png","jpg","jpeg","bmp","svg"],
		text:["text","txt","xml","json","js","css","rb","as","md"],
		mov:["mp3","mp4","mov"],
		pdf:["pdf"]
	}
	function isExtention(_ex ,_type){
		var _a = exs[_type]
		for (var i = 0; i <  _a.length ; i++) {
			if(_ex.toLowerCase() == _a[i]) return true;
		}
		return false;
	}
	function isExtentionAll(_ex){
		for (var n in exs) {
			var _a = exs[n]
			for (var i = 0; i <  _a.length ; i++) {
				if(_ex.toLowerCase() == _a[i]) return true;
			}
		}
		return false;
	}
	function getExtention(_s){
		return URL_U.getExtention(_s);
	}
	function isHeavyImage(_n){
		if(_n > 10*1000)return true;
		return false;
	}

	/* ---------- ---------- ---------- */

	function getFileIcon(_ex){
		var icon = '<i class="fa fa-fw fa-file-o "></i>';
			if(isExtention(_ex ,"editable")) icon = '<i class="fa fa-fw fa-file-text-o"></i>';
			if(isExtention(_ex ,"html")) icon = '<i class="fa fa-fw fa-file-text"></i>';
			// if(isExtention(ex ,"text")) icon = '<i class="fa fa-fw fa-file-text-o "></i>';
			if(isExtention(_ex ,"img")) icon = '<i class="fa fa-fw fa-picture-o "></i>';
			if(isExtention(_ex ,"mov")) icon = '<i class="fa fa-fw fa-file-movie-o"></i>';
			if(isExtention(_ex ,"pdf")) icon = '<i class="fa fa-fw fa-file-pdf-o"></i> ';
		return icon;	
	}
	
	return {
		treadExtention: treadExtention,
		checkIsImage: checkIsImage,
		isExtention: isExtention,
		isExtentionAll: isExtentionAll,
		getExtention: getExtention,
		isHeavyImage:isHeavyImage,
		getFileIcon:getFileIcon
	}
})();

var CMS_Asset_FileManageAPI = (function(){

	function isImageFile(_s){
		var ex = _s.toLowerCase();
		var b = false;
		if(_s == "gif") return true;
		if(_s == "jpg") return true;
		if(_s == "jpeg") return true;
		if(_s == "svg") return true;
		if(_s == "png") return true;
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	function upload(_targetDir,_view,_callback){
	    var fd = new FormData(_view);
	    // var fd = new FormData($('#uploadFile').get(0));
	    var u = "?action=upload&upload_dir=" + escape_url(_targetDir);
		var url = CMS_Path.PHP_FILEPATH + u;
	    $.ajax({
	        url: url,
	        type: "POST",
	        data: fd,
	        processData		: false,
	        contentType		: false,
			dataType		: 'json',
			success			: function(data) { _callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
	    });
	    
	}
	
	/* ---------- ---------- ---------- */
	
	function addFile(_targetDir,_s,_callback){
		var this_ = this;
		var param = {}
			param.action 	 = "write";
			param.file_name  = _s;
			param.dir_name  = escape_url(_targetDir);
			param.text  = "";
		
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
	
	/* ---------- ---------- ---------- */
	
	function deleteFile(_targetDir,_s,_callback){
		var this_ = this;
		var param ={}
			param.action 	 = "delete";
			param.deleteFile  = escape_url(_s);
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
	
	/* ---------- ---------- ---------- */
	
	function rename(_targetDir,_s1,_s2,_callback){
		// var newName = (function(){ 
		// 	// var ex = URL_U.getExtention(_s);
		// 	// var nn = URL_U.getFileID(_s);
		// 	var s = prompt("ファイル名を入力してください",_s);
		// 	if(s == null) return "";
		// 	if(s.match(/[^0-9a-zA-Z_./-]+/) != null ){
		// 		alert("半角英数字 ( 0-9 a-z A-Z _ . )で入力してください。");
		// 		return "";
		// 	}
		// 	if(s){
		// 		return s;
		// 	} else{
		// 		return "";
		// 	}
		// })();
		// if(newName == "") return;
		// if(newName == _s) return;
		
		var this_ = this;
		var param ={}
			param.action 	 = "rename";
			param.rename_old  = escape_url(_targetDir) + _s1;
			param.rename_new  = escape_url(_targetDir) + _s2;
			
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
	
	/* ---------- ---------- ---------- */
	
	function addDir(_targetDir,_s,_callback){
		var this_ = this;
		var param ={}
			param.action 	 = "createDir";
			param.dir_name  = escape_url(_targetDir) + _s;
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
	
	function renameDir(_targetDir,_s1,_s2,_callback){
		// var newName = (function(){ 
		// 	var s = prompt("ディレクトリ名を入力してください",_s);
		// 	if(s == null) return "";
		// 	if(s.match(/[^0-9a-zA-Z_/-]+/) != null ){
		// 		alert("半角英数字で入力してください。");
		// 		return "";
		// 	}
		// 	if(s){
		// 		return s;
		// 	} else{
		// 		return ""
		// 	}
		// })();
		
		// if(newName == "") return;
		// if(newName == _s) return;
		var this_ = this;
		var param ={}
			param.action 	 = "renameDir";
			param.dir_name  = escape_url(_targetDir) + _s1;
			param.dir_rename  = escape_url(_targetDir) + _s2;
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}

	function deleteDir(_targetDir,_s,_callback){
		var this_ = this;
		var param ={}
			param.action 	= "deleteDir";
			param.dir_name  = escape_url(_s);
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: param,
			dataType		: 'json',
			success			: function(data) {_callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
// 	action:write
// file_name:aa.txt
// dir_name:../_____html/
// text:
// CMS_Asset_FileManageAPI.createDir("../_____html/","_01",function(){alert(1)})

	/* ---------- ---------- ---------- */
	
	
	return { 
		isImageFile:isImageFile,
		upload:upload,
		addFile:addFile,
		deleteFile:deleteFile,
		rename:rename,
		
		addDir:addDir,
		renameDir:renameDir,
		deleteDir:deleteDir
	}
})();

/**
 * JSONをHTMLにコンバートするサービス
 * コンバートには、設定JSONや、テンプレHTMLなども必要
 */

var HTMLService = (function(){

	var pageData;
	var param;
	var callback;
	
	/* ---------- ---------- ---------- */
	
	function generateHTML(_pageData,_param,_callback){
		param = _param;
		pageData = _pageData;
		callback = _callback;
		loadTemplate();
	}
	
	var templateFileName = "";
	
	//テンプレHTMLロード
	function loadTemplate(){
		//JSONにされてるテンプレHTMLファイルが入る
		if(!pageData.meta) pageData.meta = {}
		var _id = CMS_Data.Template.treatTemplateName(pageData.meta);
		CMS_Data.Template.load(_id,function (_s,_id){
			_s = setUniqueCSSFile(_s);
			templateFileName = _id;
			convert(_s);
		});
	}
	
	//テンプレHTML内の、CSSパスにランダムパラメータをつける
	//キャッシュしないように
	function setUniqueCSSFile(_s) {
		_s = CMS_Data.AssetFile.overridePath(_s)
		return _s;
	}
	
	/* ---------- ---------- ---------- */
	//メインのコンバート処理
	
	function convert(_s){
		
		//現在の書き出しページ情報をセット
		HTML_ExportState.setCurrent(param);
		
		//フリーレイアウト部分の初期データセット
		_setInitData();
		
		//現在のページのMyタグリストをセット
		CMS_Data.MyTagReplace.startPublish(pageData);
		
		//メインのjson > html 変換処理
		var html = _convert_main(_s);
		
		//{{FILE:sample.txt}}置換え
		CMS_Data.FreeFile.replace(html,function (_s){
			convert_done(_s);
		});
	}
	
	function convert_done(_s){
		callback( HTMLServiceU.getReplacedHTML(_s,param) );
		CMS_Data.MyTagReplace.endPublish();
	}
	
	/* ---------- ---------- ---------- */
	
	function _setInitData(){
		if(pageData["body"] == undefined){
			if(window["FREEPAGE_DEF_DATA"]){
				var list = JSON.parse(JSON.stringify(FREEPAGE_DEF_DATA));
				pageData = {
					meta: {},
					head: {},
					body: { free: [ { type: "layout.div", attr: {}, data: list }] }
				}
			}
		}
	}
	
	//JSON > HTML変換処理
	var tag = "";
	function _convert_main(_s){
		tag = "";
		for (var n in pageData.body) {
			if(n.indexOf("free")!= -1){
				tag += "\n"
				tag += PageElement_HTMLService.getTag(pageData.body[n][0],"",0,true);
				tag += "\n"
			}
		}
		tag = tag.split(" ").join(" ");
		_s = _s.split("{{PAGE_CONTENTS}}")	.join(tag);
		return _s;
	}
	
	return {
		generateHTML:generateHTML
	}
})();




var HTMLServiceU = (function(){
	
	/**
	 * テンプレート置換えタグ 
	 * _param ... {id:"" , dir:"" , siteRoot:""}
	*/
	
	function getReplacedHTML(_temp,_param,_type,_isPub){
		_isPub = (_isPub == undefined) ? true:_isPub;
		
		//置き換えタグチェック
		if(_temp.indexOf("{{") == -1) { return _temp; }
		
		//Myタグ定義ブロック関連はスルー
		if(PageElement_Util.isReplaceTag(_type)) return _temp;
		
		//現在の書き出しページ情報をセット
		HTML_ExportState.setCurrent(_param);
		
		//サイト置換えタグと、個別ページ置換えタグをマージして置換え
		var _temp = CMS_Data.MyTagReplace.replaceHTML(_temp);
			_temp = CMS_Data.MyTagReplace.replaceHTML(_temp);//置換えの置換え
		//ページ情報タグを書き換えて、返す
		return _replacedCMSTag( _temp,_isPub );
	}
	
	/* ---------- ---------- ---------- */
	//ページ情報タグで書き換える
	
	function _replacedCMSTag(_temp,_isPub){
		if(_temp.indexOf("{{") == -1) { return _temp; }
		var _split = CMS_U.getSplitTextAt;
		var __ = getCurrentReplaceTags();
		
		_temp = _temp.split("{{PAGE_BREADLIST}}")	.join(_replaceBredList());
		_temp = _temp.split("{{PAGE_DIR}}")			.join(__.PAGE_DIR);
		_temp = _temp.split("{{PAGE_ID}}")			.join(__.PAGE_ID);
		_temp = _temp.split("{{PAGE_NAME}}")		.join(__.PAGE_NAME);
		_temp = _temp.split("{{PAGE_NAME.TAG}}")	.join(__.PAGE_NAME_TAG);
		_temp = _temp.split("{{PAGE_NAME[0]}}")		.join(_split(__.PAGE_NAME,0));
		_temp = _temp.split("{{PAGE_NAME[1]}}")		.join(_split(__.PAGE_NAME,1));
		_temp = _temp.split("{{PAGE_NAME[2]}}")		.join(_split(__.PAGE_NAME,2));
		_temp = _temp.split("{{PAGE_NAME[3]}}")		.join(_split(__.PAGE_NAME,3));
		_temp = _temp.split("{{PAGE_NAME[4]}}")		.join(_split(__.PAGE_NAME,4));
		_temp = _temp.split("{{PAGE_TAG}}")			.join(__.PAGE_TAG);
		_temp = _temp.split("{{PAGE_DATE}}")		.join(__.PAGE_DATE);
		_temp = _temp.split("{{PAGE_READ}}")		.join(__.PAGE_READ);
		_temp = _temp.split("{{PAGE_GROUP_IDS}}")	.join(__.PAGE_GROUP_IDS);
		_temp = _temp.split("{{PAGE_GROUP_IDS[0]}}").join(_split(__.PAGE_GROUP_IDS,0," "));
		_temp = _temp.split("{{PAGE_GROUP_IDS[1]}}").join(_split(__.PAGE_GROUP_IDS,1," "));
		_temp = _temp.split("{{PAGE_GROUP_IDS[2]}}").join(_split(__.PAGE_GROUP_IDS,2," "));
		_temp = _temp.split("{{PAGE_GROUP_NAMES}}")	.join(__.PAGE_GROUP_NAMES);
		_temp = _temp.split("{{PAGE_PUB_DATE}}")	.join(__.PAGE_PUB_DATE);
		_temp = _temp.split('{{DEF_DIR}}')			.join(__.DEF_DIR);
		_temp = _temp.split('{{ASSET_DIR}}')		.join(__.ASSET_DIR);
		_temp = _temp.split(CONST.SITE_DIR)			.join((_isPub) ? __.SITE_DIR : CMS_Path.SITE.REL );
		
		//使ってないキーを削除
		_temp = _temp.replace(/{{.*?}}/g,"");
		
		return _temp;
	}
	
	/* ---------- ---------- ---------- */
	
	//ぱんくず
	function _replaceBredList( _fileID, _dir) {
		var htmlAbs = CMS_Path.PAGE.ABS;
		var tree = CMS_Data.Sitemap.getData();
		var tag = TreeAPI.getBreadListTag(htmlAbs, tree ,HTML_ExportState.getCurrent() );
			tag = tag.split(TreeAPI_SITE_DIR).join(CONST.SITE_DIR);
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	//現在ページのページ情報タグのリストを返す
	function getCurrentReplaceTags(){
		
		var pageParam = HTML_ExportState.getCurrent();
		var _id 		= pageParam.id;
		var _dir 		= pageParam.dir;
		var _siteRoot 	= pageParam.siteRoot;
		if(_siteRoot == "") _siteRoot = CMS_Path.SITE.getTopRelPath_from_html(_dir);
		
		var groupIDs = CMS_Data.Sitemap.getGloupPath_by_id(_id,_dir).split("/").join(" ");
		var groupNAMEs = CMS_Data.Sitemap.getGloupName_by_id(_id,_dir).split("/").join(" ");
		
		var pageName = "";
		var tagName = "";
		var dateName = "";
		var readName = "";
		
		var current = CMS_Data.Sitemap.getData_by_id(_id,_dir);
		if(current != null) {
			pageName  = current.name || "";
			tagName	 = current.tag || "";
			dateName = current.date || "";
			readName = current.read || "";
		}
		var pageName_noTag = CMS_TagU.treatTag(pageName);
		
		var o = {}
			o.PAGE_DIR 			= CMS_Path.PAGE.getAbsDirPath(_dir);
			o.PAGE_ID 			= _id;
			o.PAGE_NAME 		= pageName_noTag;
			o.PAGE_NAME_TAG 	= pageName;
			o.PAGE_TAG 			= tagName;
			o.PAGE_DATE 		= dateName;
			o.PAGE_READ 		= readName;
			o.PAGE_GROUP_IDS 	= groupIDs;
			o.PAGE_GROUP_NAMES 	= groupNAMEs;
			o.PAGE_PUB_DATE 	= CMS_SaveDateU.getDate();
			o.DEF_DIR 			= CMS_Path.PAGE.ABS2;
			o.ASSET_DIR 		= CMS_Path.ASSET.ABS2;
			o.SITE_DIR 			= _siteRoot;
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	//ブロック書き出しで使用。{{SITE_DIR}}を書き換える
	function setSiteRoot(_s,_path){
		function _core (_path){
			var s = "";
			if(_path.substr(0,2) =="./"){
				_path = _path.substr(2,_path.length-1);
			}
			var dir = URL_U.getBaseDir(_path);
			if(	dir == "")  return s;
			//
			var a = dir.split("/");
			var path = "";
			for (var i = 0; i < a.length ; i++) {
				if(a[i] != "") path+="../";
			}
			//2017-07-27 調整
			if(dir.substr(0,3) == "../"){
				if(path.substr(path.length-3,3) =="../"){
					path = path.substr(0,path.length-3) + CMS_Path.SITE.DIR + "/";
				}
			}
			return path;
		}
		return _s.split(CONST.SITE_DIR).join(_core(_path));
	}
	
	/* ---------- ---------- ---------- */

	
	return {
		getReplacedHTML: getReplacedHTML,
		getCurrentReplaceTags: getCurrentReplaceTags,
		setSiteRoot:setSiteRoot
	}
})();

//書きだそうとしてるページの情報を保持する
//ブロックや機能によっては、現在のページ情報が必要なため
var HTML_ExportState = (function(){
	
	var id = "";
	var dir = "";
	var siteRoot = "";
	
	function setCurrent(_param){
		if(!_param) _param = {}
		id = (_param.id) ? _param.id : "";
		dir = (_param.dir) ? _param.dir : "";
		siteRoot = (_param.siteRoot) ? _param.siteRoot : "";
	}
	
	function getCurrent(){
		return {
			id : id,
			dir : dir,
			siteRoot : siteRoot
		};
	}

	return {
		setCurrent:setCurrent,
		getCurrent:getCurrent
	}

})();



/**
 * FreeLayoutと、ファイルリストでドラッグ管理
 */

var DragController 			 = (function(){
	var isNew = false;
	var newParam = {};
	var currentClass;
	var currentNo;
	var targetClass;
	var targetNo;
	var this_;
	
	function getFileDropTag(_i){
		return '<div class="_dropArea _fileDropArea" data-no="'+_i+'"></div>';
	}
	function getDropTag(_i){
		return '<div class="_dropArea" data-no="'+_i+'"></div>';
	}
	function setDrag(this_,view,_dropableclass){
		view.addClass(_dropableclass)
		view.draggable({
			opacity : 0.5, cursor : 'move', revert : true ,
		    start:function(){
				isNew = false;
				draged(Number($(this).attr("data-no")),this_);
		    }
		});
	}
	function setDrop(this_,view,_dropableclass){
		view.droppable({
			accept : "."+_dropableclass,
		    activeClass : "drop-active",  
		    hoverClass 	: "drop-hover",  
		    tolerance	: "pointer",
		    drop : function(ev, ui) {
				dropped(Number($(this).attr("data-no")),this_);
		    }
		})
	}
	function draged(_no,_tar){
		currentNo 	 = _no;
		currentClass   = _tar;
	}
	
	var isDroping = false;
	function dropped(_no,_tar){
		
		//二重ドラッグスルー処理
		if(isDroping) return;
		isDroping = true;
		setTimeout(function(){
			isDroping = false;
		},200);
		//
		targetNo =  _no;
		targetClass  = _tar;
		
		if(isNew){
			dropped_new()
		} else{
			dropped_move()
		}
	}
	function dropped_move(){
		var b = true;
		if(currentClass == targetClass){
			if(currentNo < targetNo) targetNo = targetNo - 1;
			if(currentNo == targetNo) b = false;
		}
		if(b){
			var data = clone(currentClass.getDataAt(currentNo));
			if(currentClass == targetClass){
				currentClass 	.removeData(currentNo);
				targetClass 	.addDataAt(data,targetNo);
			} else{
				targetClass 	.addDataAt(data,targetNo);
				currentClass 	.removeData(currentNo);
			}
			currentClass 	.update();
			targetClass 	.update();
			InspectView.stageOut();
		}
	}
	function dropped_new(){
		var o = PageElement_Util.getInitData(newParam.type,newParam.param);
		targetClass 	.addDataAt(o,targetNo);
		targetClass 	.update();
	}
	
	return { 
		getFileDropTag:getFileDropTag,
		getDropTag:getDropTag,
		setDrop:setDrop,
		setDrag:setDrag,
		draged:draged,
		dropped:dropped
	}
})();
var DragControllerFileList	 = (function(){
	var isNew = false;
	var newParam = {};
	var currentClass;
	var currentNo;
	var targetClass;
	var targetNo;
	var this_;
	
	function getFileDropTag(_i){
		return '<div class="_dropArea _fileDropArea" data-no="'+_i+'"></div>';
	}
	function getDropTag(_i){
		return '<div class="_dropArea" data-no="'+_i+'"></div>';
	}
	function setDrag(this_,view,_dropableclass){
		view.addClass(_dropableclass)
		view.draggable({
			opacity : 0.5, 
			cursor : 'move', 
			axis:"y",
			revert : true ,
			distance : 5 ,
		    start:function(){
				isNew = false;
				draged(Number($(this).attr("data-no")),this_);
				startDraging();
		    },
		    stop:function(){
				stopDraging();
		    }
		});
	}
	var _isDraging = false
	function draged(_no,_tar){
		currentNo 	 = _no;
		currentClass   = _tar;
	}
	
	function setDrop(this_,view,_dropableclass){
		view.droppable({
			accept : "."+_dropableclass,
		    activeClass : "drop-active",  
		    hoverClass 	: "drop-hover",  
		    tolerance	: "pointer",
		    drop : function(ev, ui) {
				dropped(Number($(this).attr("data-no")),this_);
		    }
		})
	}
	function dropped(_no,_tar){
		if(window.isLocked(true))return;
		targetNo =  _no;
		targetClass  = _tar;
		stopDraging();
		
		if(isNew){
			dropped_new()
		} else{
			dropped_move()
		}
	}
	function dropped_move(){
		var b = true;
		if(currentClass == targetClass){
			if(currentNo < targetNo) targetNo = targetNo - 1;
			if(currentNo == targetNo) b = false;
		}
		if(b){
			//var data = currentClass.getDataAt(currentNo);
			var data = clone(currentClass.getDataAt(currentNo));
			if(currentClass == targetClass){
				currentClass 	.removeData(currentNo);
				targetClass 	.addDataAt(data,targetNo);
			} else{
				targetClass 	.addDataAt(data,targetNo);
				currentClass 	.removeData(currentNo);
			}
			currentClass 	.update();
			targetClass 	.update();
			InspectView.stageOut();
		}
	}
	function dropped_new(){
		var o = PageElement_Util.getInitData(newParam.type,newParam.param);
		targetClass 	.addDataAt(o,targetNo);
		targetClass 	.update();
	}
	
	/* ---------- ---------- ---------- */

	function startDraging(){
		_isDraging = true;
	}
	var tID;
	function stopDraging(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			_isDraging = false;
		},100);
	}
	function isDraging(){
		return _isDraging;
	}
	
	return { 
		getFileDropTag:getFileDropTag,
		getDropTag:getDropTag,
		setDrop:setDrop,
		setDrag:setDrag,
		draged:draged,
		dropped:dropped,
		isDraging:isDraging
	}
})();
DragController.FREE_DROP  = "dragClassKey_free";
DragController.FILE_DROP  = "dragClassKey_file";

var FormCandidates = (function(){
	var view;
	var v = {};
	var isInited = false;
	function init(){
		isInited = true;
		view = $('#FormCandidates');
		
		var tag = ''
			tag += '<div class="_templateList"></div>'
			tag += '<div class="_sitemapList"></div>'
			tag += '<div class="_sitemapList_html"></div>'
			tag += '<div class="_tagList"></div>'
			
		view.append(tag)
		v.templateList = view.find('._templateList');
		v.sitemapList = view.find('._sitemapList');
		v.sitemapList_html = view.find('._sitemapList_html');
		v.tagList = view.find('._tagList');
	}

	function setTemplateList(_a){
		if(!isInited)return;
		var  list = _a;
		var tag = "";
			tag += '<datalist id="templateDatalist">'
		for (var i = 0; i < list.length ; i++) {
			tag += '<option value="' + list[i][1] +'"></option>'
		}
		tag += '</datalist>';
		if(v.templateList){
			v.templateList.html(tag);
		}
	}
	function setSitemapList(list,listGloups){
		if(!isInited)return;
		//ページIDリスト
		var tag = ""
			tag += '<datalist id="sitemapDatalist">'
		for (var i = 0; i < list.length ; i++) {
			tag += '<option value="' + list[i].id +'"></option>'
		}
			tag += '</datalist>';
			
		//グループIDリスト
			tag += '<datalist id="sitemapDatalistGloups">'
		for (var i = 0; i < listGloups.length ; i++) {
			tag += '<option value="' + listGloups[i].id +'"></option>'
		}
			tag += '</datalist>';
			
		v.sitemapList.html(tag);
		
		var tag = ""
			tag += '<datalist id="sitemapDatalist_html">'
		for (var i = 0; i < list.length ; i++) {
			tag += '<option value="' + list[i].id +'.html"></option>'
		}
			tag += '</datalist>';
		v.sitemapList_html.html(tag);
		
		setTagList();
	}	

	function setTagList(){
		if(!isInited)return;
		var tags = TreeAPI.getAllTag(CMS_Data.Sitemap.getData());
		var tag = "";
			tag += '<datalist id="tagDatalist">'
		for (var i = 0; i < tags.length ; i++) {
			tag += '<option value="' + tags[i] +'"></option>'
		}
			tag += '</datalist>';
		v.tagList.html(tag);
	}
	return {
		init:init ,
		setTemplateList:setTemplateList,
		setSitemapList:setSitemapList
	}
})();
var CMS_Data = {}

CMS_Data.init = function(){
	CMS_Data.MyTag.init();
	CMS_Data.Template.init();
	CMS_Data.Sitemap.init();
}

//アセットファイル保存時にコールされる
CMS_Data.update = function(_id,_dir){
	CMS_Data.Template	.update(_id);
	CMS_Data.AssetFile	.update(_dir,_id);
}

//設定ファイルロード
 CMS_Data.Loader  = (function(){
	
	var callback 
	function start(_callback){
		callback = _callback
		load();
	}
	//設定JSONロード
	//設定ファイル中にプレビュー幅サイズがあるので、登録しておくCMS_SizeManagerに登録しておく
	function load(){
		CMS_Data.MyTag.loadList(function (){ loaded(); });
		CMS_Data.CodeDic.load(function(){ loaded(); });
		CMS_Data.Template.loadList(function(){ loaded(); });
		CMS_Data.InspectCSS.load(function(){ loaded(); });
	}
	var max = 4;
	var cnt = 0;
	function loaded(){
		cnt++;
		if(max == cnt)callback();
	}
	return { start:start }
})();

//PHPコードなど、テンプレコードを管理
CMS_Data.CodeDic = (function(){

	var callback
	function load(_callback){
		callback = _callback;
		var rSeed = "?r=" + DateUtil.getFormattedDate(new Date(), "YYYYMMDD_hhmm");

		var path =  "js/codes.xml" + rSeed;
		new CMS_Data.TextLoader("XML", path, function(data) {
			setData(data);
			_callback();
		});
	}
	
	var dic = [];
	function setData(_xml){
		var items = $($.parseXML(_xml)).find('item');
		items.each(function(i, dom) {
			var id = $(this).find('id').text();
			var val = $(this).find('code').text();
				// val = U.trimFirstLastBR(val);
			dic.push([id,val]);
		});
	}
	
	function getCode(_id){
		for (var i = 0; i <  dic.length ; i++) {
			if(_id == dic[i][0]){
				return dic[i][1]
			}
		}
		return "--";
	}
	
	return { 
		load : load,
		getCode : getCode
	}
})();
//テンプレート用の置換えキー登録
//一回だけでなく、設定ファイルを編集した場合は、何度かロードされる

CMS_Data.MyTag = (function(){
	
	function init(){
		
	}
	var tmp = {}
	
	function getURL(ss){
		var r = "?r=" + DateUtil.getFormattedDate(new Date(), "YYYYMMDD_hhmmss");
		return CMS_Path.ASSET.REL + ss.dir + "/" + ss.id + ".json" + r;
	}

	/* ---------- ---------- ---------- */
	
	//利用できるMyタグファイル一覧を取得
	function loadList(_callback) {
		
		var files = MYTAG_PAGE_LIST;
		
		Dic.MyTagList = (function(_list){ 
			var dir = Dic.DirName.MYTAG;
			var o = []
			if(_list.length == 0){
				o.push(Dic.MyTagListDef);
			} else{
				for (var i = 0; i < _list.length ; i++) {
					o.push({
						dir: dir,
						id: _list[i].id,
						type: Dic.PageType.CMS_MYTAG,
						name: _list[i].name
					});
				}
			}
			return o;
		})(files);
		load(_callback);
	}
	function _isFile(_s) {
		if(_s.indexOf(".") != -1) {
			return FileU.isEditableFile(_s);
 		} else{
 			return false;
 		}
	}
	
	/* ---------- ---------- ---------- */
	
	function getParam_by_ID(_id) {
		var ls = Dic.MyTagList;
		for (var i = 0; i < ls.length ; i++) {
			if(ls[i].id == _id){
				return ls[i];
			}
		}
		return null;
	}
	
	/* ---------- ---------- ---------- */
	//Myタグファイルをロードする
	
	function load(_callback) {
		var kyes = Dic.MyTagList;
		loadCount = 0;
		loadSum = kyes.length;
		for (var i = 0; i < kyes.length ; i++) {
			var ts = new CMS_Data.TextLoader("JSON", 
				getURL(kyes[i]),
				function(_json) {
					setInitData(_json,this.myid);
					loaded(_callback);
				}, function() {
					setInitData({},this.myid);
					loaded(_callback);
				}
			);
			ts.myid = kyes[i].id;
		}
	}
	
	var loadCount;
	var loadSum;
	function loaded(_callback) {
		loadCount++;
		if(loadCount == loadSum){
			if(_callback) _callback();
		}
	}
	
	//データ登録
	function setInitData(_json,_myid) {
		if (!tmp) tmp = {};
		var name = "";
		if(!_json.meta)_json.meta = {};
		if(!_json.meta.name)_json.meta.name = "";
		setName(_json.meta.name,_myid);
		tmp[_myid] = _parseData(_json);
	}
	
	//JSONファイルから、meta.nameを取得し、名称にセットする
	function setName(_name,_myid) {
		var kyes = Dic.MyTagList;
		for (var i = 0; i < kyes.length ; i++) {
			if(kyes[i].id == _myid){
				if(_name){
					kyes[i].name = _name;
				}
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	//ファイル保存したときに、リロードする
	
	function loadAt(_id) {
		var pr = {
			id : _id,
			dir : Dic.DirName.MYTAG
		}
		var ts = new CMS_Data.TextLoader("JSON", 
			getURL(pr),
			function(_json) {
				setInitData(_json,this.myid);
			}, function() {
				setInitData({},this.myid);
			}
		);
		ts.myid = _id;
	}
	
	/* ---------- ---------- ---------- */
	
	function _parseData(_json) {
		return CMS_Data.MyTagU.parseData(_json);
	}
	
	if(window["_cms"] ==undefined) window._cms = {};
	window._cms.showsMyTags = function(){
		console.log(tmp);
	}
	
	/* ---------- ---------- ---------- */
	
	//各ページ保存時にコールされ、keyだったら、データをリロードする
	function savedPage(_id,_dir){
		var ss = Dic.MyTagList;
		var id = "";
		for (var i = 0; i < ss.length ; i++) {
			if(ss[i].id == _id){
				if(ss[i].dir == _dir){
					id = ss[i].id;
				}
			}
		}
		if(id){
			update(id);
			loadAt(_id);
		}
	}
	function update(_id){
		tmp[_id] = null;
	}
	function getData() {
		return tmp;
	}
	
	//フラットなリストを返す
	function getDataFlat() {
		var a = [];
		for (var n in tmp){
			a = a.concat(tmp[n]);
		}
		return a;
	}
	return {
		init:init,
		loadList:loadList,
		
		getParam_by_ID:getParam_by_ID,
		savedPage:savedPage,
		getData:getData,
		getDataFlat:getDataFlat
	}
})();

CMS_Data.MyTagReplace = (function(){
	
	/* ---------- ---------- ---------- */
	//テキスト置き換え
	
	function replaceHTML(_temp){
		if(_temp.indexOf("{{") == -1) { return _temp; }
		
		//外部の置換リストとマージ
		var repKeys = (function(_a1,_a2){ 
			if(!_a2) return _a1;
			if(_a2.length == 0) return _a1;
			return CMS_U.meargeGrid(_a1, _a2);
		})( CMS_Data.MyTag.getDataFlat() , getLocalMyTagList() );
		
		//置換え実行
		return CMS_Data.MyTagU.getReplaceTag(_temp, repKeys);
	}
	
	/* ---------- ---------- ---------- */
	//雛形ブロック処理
	
	//ひな形ブロック置換え処理
	function replaceHinagata(_id,_list){
		//MyタグIDから値を取得
		
		var _data = getMyTagData(_id);
		if(!_data) return "-----";
		
		//tag.js処理用に一時的に保持
		CMS_Data.HinagataSearvice.setState(_list);
		
		//Myタグ値のノードごとに処理
		var s = "";
		
		if(_data.type == "text"){
			s += replaceHinagata_one(_data.val);
			
		} else if(_data.type == "image"){
			s += "※ Myタグリスト / イメージでは、ひな形は利用できません。";
			
		} else if(_data.type == "link"){
			s += "※ Myタグリスト / リンクでは、ひな形は利用できません。";
			
		} else{
			var vals = _data.val;
			for (var n = 0; n < vals.length ; n++) {
				s += replaceHinagata_one(vals[n]);
			}
		}
		CMS_Data.HinagataSearvice.reset();
		return s;
	}
	
	function replaceHinagata_one(_val){
		//リスト系のブロックに最大件数を追加
		_val = JSON.parse(JSON.stringify(_val));
		for (var n in _val.data) {
			if(_val.data[n]){
				if(_val.data[n].texts){
					var ts = _val.data[n].texts;
					for (var g in ts) {
						ts[g] = CMS_Data.HinagataSearvice.replace(ts[g]);
					}
				}
			}
		}
		var s = PageElement_HTMLService.getTag(_val);
			s = CMS_Data.HinagataSearvice.replace(s);
		return s;
	}
	
	function getMyTagData(_id){
		//グローバルMyタグリストから探す
		var _tmp = CMS_Data.MyTag.getData()
		for (var n in _tmp){
			var ls = _tmp[n];
			for (var i = 0; i < ls.length ; i++) {
				if(_isMatch(_id,ls[i].id)) {
					return ls[i];
				}
			}
		}
		
		//ローカルMyタグリストから探す
		var ls = getLocalMyTagList();
		if(ls){
			for (var i = 0; i < ls.length ; i++) {
				if(_isMatch(_id,ls[i].id)) {
					return ls[i];
				}
			}
		}
		return null;
	}
	function _isMatch(_id,_key){
		return (_id == "{{" + _key + '}}');
	}

	/* ---------- ---------- ---------- */
	
	//ローカルでMyタグ+ひな形ブロックを使うための前処理
	//ページ公開時にセットされる
	
	var _localMyTagList;
	
	function getLocalMyTagList(){
		updateLocalMyTagList();
		return _localMyTagList;
	}
	function updateLocalMyTagList(){
		if(isPublising) return;
		//
		_localMyTagList = null;
		var currentData = CMS_PageDB.getCurrentPageStoreData();
		if(currentData){
			_localMyTagList = _parseData(currentData);
		}
	}
	
	//ページ公開時（バッチ公開時に必要な処理）
	var isPublising = false;
	function startPublish(_pageData){
		_localMyTagList = null;
		if(_pageData){
			_localMyTagList = _parseData(_pageData);
		}
		isPublising = true;
	}
	function endPublish(){
		isPublising = false;
	}
	
	/* ---------- ---------- ---------- */
	
	function _parseData(_json){
		return CMS_Data.MyTagU.parseData(_json);
	}
	
	/* ---------- ---------- ---------- */

	return { 
		replaceHTML:replaceHTML,
		
		replaceHinagata:replaceHinagata,
		
		getLocalMyTagList:getLocalMyTagList,
		startPublish:startPublish,
		endPublish:endPublish
	}
})();

CMS_Data.MyTagU = (function(){
	//Myタグ定義のJSONから、Myタグ定義リストを作成する。
	//グローバル、ローカル共に、コールされる
	function parseData(_json) {
		var a = [];
		if(_json["body"] == undefined) return a;
		if(_json.body["free"] == undefined) return a;
		var ls = _json.body.free[0].data;
		
		for (var i = 0; i <  ls.length ; i++) {
			if(ls[i].type == "replace.div"){
				var id = ls[i].attr.replaceID;
				var label = ls[i].attr.replaceTitle;
				var o = {
					type:"tag",
					id:id,
					label:label,
					val:ls[i].data
				}
				a.push(o);
			}
			if(ls[i].type == "object.replaceTexts"){
				//テキストリスト
				if(ls[i].data.texts){
					var trs = ls[i].data.texts.grid;
					for (var ii = 0; ii < trs.length ; ii++) {
						if(trs[ii].publicData){
							var s = CMS_TagU.convertCellBR( trs[ii]["val"] );
							var o = {
								type : "text",
								id : trs[ii]["id"],
								label : trs[ii]["val"],
								val : s
							}
							a.push(o);
						}
					}
				}
				//画像リスト
				if(ls[i].data.images){
					var trs = ls[i].data.images.grid;
					for (var ii = 0; ii < trs.length ; ii++) {
						if(trs[ii].publicData){
							var o = {
								type : "image",
								id : trs[ii]["id"],
								label : "",
								val : trs[ii]["val"],
								extra : { isTag:trs[ii].isTag }
							}
							o.label = _getImageTag(o,false);
							a.push(o);
						}
					}
				}
				//リンクリスト
				if(ls[i].data.links){
					var trs = ls[i].data.links.grid;
					for (var ii = 0; ii < trs.length ; ii++) {
						if(trs[ii].publicData){
							var o = {
								type : "link",
								id : trs[ii]["id"],
								label : "",
								val : trs[ii]["val"],
								extra : { isTag:trs[ii].isTag }
							}
							o.label = _getAnchorTag(o,false);
							a.push(o);
						}
					}
				}
			}
		}
		return a;
	}
	
	//置換え処理メイン
	function getReplaceTag(_temp, _keys){
		if(!_keys) return _temp;
		for (var i = 0; i < _keys.length ; i++) {
			var key = "{{" + _keys[i].id + "}}";
			if(_temp.indexOf(key) != -1){
				var type = _keys[i].type
				var vals = _keys[i].val;
				
				var _s = "";
				if( type == "text"){
					_s = vals;
				} else if(type == "image"){
					_s = _getImageTag(_keys[i],true);
					
				} else if(type == "link"){
					_s = _getAnchorTag(_keys[i],true);
					
				} else if(type == "tag"){
					//myタグ-コンテナ
					for (var n = 0; n < vals.length ; n++) {
						_s += PageElement_HTMLService.getTag(vals[n]);
					}
				}
				_temp = _temp.split(key).join(_s);
			}
		}
		return _temp;
	}
	
	function _getImageTag(_param,_isPub){
		var tag = "";
		if(_param.extra.isTag == "path"){
			if(_param.val.mode == "simple"){
				tag = CMS_Path.MEDIA.getImagePath(_param.val.path , _isPub );
			}
		} else{
			var w = _isPub ? _param.val.width : "50px";
			tag = CMS_ImgBlockU.getImageTag({
				path	: _param.val.path,
				isPub	: _isPub,
				width	: w,
				ratio	: _param.val.ratio,
				alt		: "",
				attr	: ""
			});
		}
		tag = tag.split("\n").join("");
		return tag;
	}
	
	function _getAnchorTag(_param,_isPub){
		var tag = "";
		if(_param.extra.isTag == "path"){
			tag = CMS_Path.MEDIA.getAnchorPath( _param.val.href , _isPub );
		} else if(_param.extra.isTag == "attr"){
			tag = getAnchorAttr(_param.val,_isPub);
		} else {
			tag = CMS_AnchorU.getAnchorTag( _param.val,"",_isPub);
		}
		return tag;
	}
	
	function getAnchorAttr(_link,_isPub){
		var tag = ""
		var href = CMS_Path.MEDIA.getAnchorPath( _link.href , _isPub );
		tag += 'href="'+href+'" ';
		var tar = _link.target;
		if(tar) tag += 'target="'+tar+'" ';
		return tag;
	}
	
	return {
		parseData:parseData,
		getReplaceTag:getReplaceTag,
		getAnchorAttr:getAnchorAttr
	}
})();


//ひな形ブロックの置換え処理で、一時的に状態の管理を行う
CMS_Data.HinagataSearvice = (function(){
	
	var list;
	function setState(_list){ list = _list; }
	function reset(){ list = null; }
	function trace(){ console.log(list); }
	
	function getJSParam(){ 
		var o = [];
		if(list){
			for (var i = 0; i < list.length ; i++) {
				o[list[i].id] = list[i].val;
			}
		}
		var pageTags = HTMLServiceU.getCurrentReplaceTags();
		for (var n  in pageTags) {
			o[n] = pageTags[n];
		}
		return o;
	}
	
	//tag.jsからもコールされる
	function replace(_s,_type){
		if(!list) return _s;
		if(typeof _s === "string"){
			for (var i = 0; i < list.length ; i++) { 
				var id = list[i].id.split(" ").join("");
				var val = list[i].val;
				_s = _s.split(id).join( CMS_TagU.t_2_tag(val) );
			}
		}
		return _s;
	}
	return{
		setState: setState,
		getJSParam:getJSParam,
		reset: reset,
		trace:trace,
		replace:replace,
	}
})();

CMS_Data.PageTag = (function(){
	
	var list = [
		{
			label:"編集内容",
			items:[
				 { id:"PAGE_CONTENTS",text:"公開ページで確認してください", label:"HTMLページの編集内容をHTMLに変換した値	", }
			]
		},
		{
			label:"ディレクトリ情報",
			items:[
				 { id:"SITE_DIR", text:"../",label:"HTMLページから見た、サイトルートのパス<br>リンクや画像を直書きするときに、パスの抽象化を行えます。" },
				 { id:"ASSET_DIR", text:"html/",label:"HTMLページから見た、アセットファイルのパス" },
				 { id:"DEF_DIR", text:"html/",label:"HTMLページから見た、サイトディレクトリのパス" }
			]
		},
		{
			label:"ページ関連",
			items:[
				 { id:"PAGE_DIR", text:"/html/",label:"サイトルートから見た、HTMLページのディレクトリのパス" },
				 { id:"PAGE_ID", text:"company_outline",label:"HTMLページのページID" },
				 { id:"PAGE_NAME", text:"会社概要",label:"HTMLページのページ名" },
				 { id:"PAGE_GROUP_IDS", text:"company company_sub",label:"HTMLページが所属しているグループのID(複数)" },
				 { id:"PAGE_GROUP_IDS[0]", text:"company"		,label:"PAGE_GROUP_IDSの1つめの値" },
				 { id:"PAGE_GROUP_IDS[1]", text:"company_sub"	,label:"PAGE_GROUP_IDSの2つめの値" },
				 { id:"PAGE_GROUP_IDS[2]", text:""				,label:"PAGE_GROUP_IDSの3つめの値" },
				 { id:"PAGE_GROUP_NAMES", text:"会社について,our company",label:"HTMLページが所属しているグループの名称(複数)" },
				 { id:"PAGE_BREADLIST", text:"公開ページで確認してください",label:"パンくずリスト" }
			]
		},
		{
			label:"ブログ関連",
			items:[
				 { id:"PAGE_TAG", text:"",label:"ページに登録されている分類用タグ名" },
				 { id:"PAGE_READ", text:"",label:"ページに登録されているページ説明" },
				 { id:"PAGE_DATE", text:"",label:"ページに登録されている日付" }
			]
		},		
		{
			label:"その他",
			items:[
				 { id:"PAGE_PUB_DATE", text:"2016/07/15 23:37:46",label:"HTMLが公開された日付" }
				 //{ id:"PAGE_TEMPLATE", text:"default.html",label:"HTMLのテンプレートファイルのパス" }
			]
		}	
	]
	function getData() {
		return list;
	}
	return { 
		getData:getData
	}
})();



/**
 * サイトマップデータ管理
 */

CMS_Data.Sitemap = (function(){
	
	function init(){
		createIgnoreList();
	}
	
	/* ---------- ---------- ---------- */
	//初期ロード
	
	var callback;
	function load(_callback){
		var param = Dic.SettingList;
		callback = _callback
		storage = new Storage.Online(Dic.PageType.SYSTEM,param.id,param.dir,{})
		storage.load(function() {
			load_comp();
		});
	}
	var storage;
	function load_comp(){
		var d = storage.getData();
		if(d.list == undefined){
			storage.setData({list:[]});
		}
		sitemap = storage.getData();
		update();
		callback();
	}

	/* ---------- ---------- ---------- */
	
	//更新のたびにコールされる
	
	var sitemap;
	var tID;
	function update(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			setTreat();
			setGloupPath();
			toFlat();
		},50);
	}
	
	/* ---------- ---------- ---------- */
	//サイトマップデータを奇麗にする
	
	//ディレクトリにUIDが無い場合、セット。
	function setDirUID(_dir){
		if(! _dir.uid){
			_dir.uid = "dir_" + DateUtil.getFormattedDate(new Date(),"YYYYMMDD_RRR");
		}
	}
	function setTreat(){
		setDirUID(sitemap);
		setTreat_loop(sitemap.list);
	}
	function setTreat_loop(_list){
		if(_list == undefined)return;
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i]){
				if(_list[i].type == Dic.ListType.DIR){
					setDirUID(_list[i]);
					setTreat_loop(_list[i].list)
				} else if(_list[i].type == Dic.PageType.PAGE) {
					if(_list[i].dir == undefined) _list[i].dir = "" 
				}
			}
		}
	}
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	function getGloup_by_uid(_uid){
		var ls = sitemapFlatGloups;
		for (var i = 0; i < ls.length ; i++) {
			if(ls[i].uid == _uid){
				return ls[i];
			}
		}
		return null;
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	//グループパスDICを作成
	var gloupPathDIC = [];
	function setGloupPath(){
		gloupPathDIC = [];
		setGloupPath_loop(sitemap.list ,"","")
		
	}
	function setGloupPath_loop(_list,_gid,_gname){
		if(_list == undefined)return;
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i]){
				if(_list[i].type == Dic.ListType.DIR){
					var id = _gid + "/" + _list[i].id
					var na = _gname + "/" + _list[i].name
					setGloupPath_loop(_list[i].list,id,na);
				} else if(_list[i].type == Dic.PageType.PAGE) {
					gloupPathDIC.push([_list[i].id,_list[i].dir, _gid, _gname]);
				}
			}
		}
	}
	function getGloup_by_id(_id,_dir){
		for (var i = 0; i <  gloupPathDIC.length ; i++) {
			if(gloupPathDIC[i][0] == _id){
				if(gloupPathDIC[i][1] == _dir){
					return gloupPathDIC[i];
				}
			}
		}
		return null
	}
	function getGloupPath_by_id(_id,_dir){
		var param = getGloup_by_id(_id,_dir);
		if(param == null)return "";
		return param[2];
	}
	function getGloupName_by_id(_id,_dir){
		var param = getGloup_by_id(_id,_dir);
		if(param == null)return "";
		return param[3];
	}
	
	//PageViewのヘッダで使用
	function getGloupState_by_id(_currnet){
		var s = "";
			s +='<span class="_cms_wide _cms_hide_preview">現在のテンプレ：</span><b><span data-id="{TEMPLATE}">{TEMPLATE}</b> <i class="fa fa-caret-down fa-lg"></i>'
		var sels = CMS_Data.Template.getSelectList();
			s += '<div class="_templatesFloat">';
			s += '<div class="_read">ページで使用するテンプレートを選択してください。</div>';
		for (var i = 0; i <  sels.length ; i++) {
			var icon = (function(_cu,_name){ 
				if(_name == "")_name = Dic.DEFAULT_TEMPLATE;
			    var _s = '<i class="fa fa-square-o"></i> ';
				if(_cu == _name){ _s = '<i class="fa fa-check-square "></i> '}
				return _s;
			})(_currnet,sels[i][0]);
			
			var id = CMS_Data.Template.getTemplateName(sels[i][0]);
			s += '<div class="_item" data-id="' + id + '">'
			// s += '<span class="_btn_edit_tempalte" data-id="'+ id +'"><i class="fa fa-pencil "></i> 編集</span>'
			s += icon + sels[i][1];
			s += '</div>';
		}
			s += '</div>';
			s = s.split("{TEMPLATE}").join(_currnet);
		return s;
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	//ファイルID入力フォームの候補表示用
	
	var sitemapFlat = [];//ファイルID
	var sitemapFlatGloups = [];//グループID
	
	function toFlat(){
		sitemapFlat = [];
		sitemapFlatGloups = [];
		sitemapFlatGloups.push(sitemap);
		toFlatLoop(sitemap.list);
		
		if(window["FormCandidates"]){
			FormCandidates.setSitemapList(sitemapFlat,sitemapFlatGloups);
		}
	}
	function toFlatLoop(_list){
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i]){
				if(_list[i].type==Dic.ListType.DIR){
					sitemapFlatGloups.push(_list[i])
				} 
				if(_list[i].list){
					toFlatLoop(_list[i].list)
				} else{
					if(_list[i].type==Dic.PageType.PAGE){
						sitemapFlat.push(_list[i])
					} 
				}
			}
		}
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	//NGファイルリスト検索
	
	var ignoreList = [];
	function createIgnoreList(){
		ignoreList = [];
		for (var n in Dic.SettingList) {
			if($.isArray(Dic.SettingList[n])){
				for (var i = 0; i < Dic.SettingList[n].length ; i++) {
					ignoreList.push(Dic.SettingList[n][i]);
				}
			} else{
				ignoreList.push(Dic.SettingList[n])
			}
		}
	}
	
	var match;
	function find(_id,_dir){
		
		if(_dir == undefined) _dir = "";
		match = null;
		var b = false;
		for (var i = 0; i < ignoreList.length ; i++) {
			if(_id == ignoreList[i].id){
				if(_dir == ignoreList[i].dir){
					b = true;
				}
			}
		}
		if(b)return;
		
		find_loop(_id,_dir,sitemap.list,0);
	}
	function find_loop(_id,_dir,_list,_deep){
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i]){
				if(_list[i].id == _id){ 
					if(_list[i].dir == _dir){ 
						match = _list[i];
					}
				}
				if(_list[i].list) { find_loop(_id,_dir,_list[i].list,_deep+1) }
			}
		}
	}
	
	function getData_by_id(_id,_dir){
		find(_id,_dir);
		return match;
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	//#IO
	
	//IDに該当するファイルの更新日を最新にして、保存する
	var tID_later_save;
	function saveDateLater(_id,_dir){ saveDate(_id,_dir,1) }
	function saveDate(_id,_dir,_delayTime){
		if(_id == "_sitemap") return;
		find(_id,_dir);
		if(! match)return;
		match.saveDate = CMS_SaveDateU.getDate();
		
		//連続書き込みをさけるため、ディレイ処理
		if(tID_later_save) clearTimeout(tID_later_save);
		if(_delayTime == undefined){
			save();
		} else{
			tID_later_save = setTimeout(function(){
				save();
			},_delayTime*1000);
		}
	}
	
	//IDに該当するファイルの公開日を最新にして、保存する
	
	//20161202追加
	function publicDateInit(_id,_dir){
		if(_dir == "_sitemap") return;
		find(_id,_dir);
		if(! match) return;
		if(match.publicDate == "-"){
			match.publicDate = CMS_SaveDateU.getDate();
		}
	}
	
	var tID_later_public;
	function publicDateLater(_id,_dir){ publicDate(_id,_dir,1) }
	function publicDate(_id,_dir,_delayTime){
		if(_dir == "_sitemap") return;
		find(_id,_dir);
		if(! match) return;
		match.publicDate = CMS_SaveDateU.getDate();
		
		//連続書き込みをさけるため、ディレイ処理
		if(tID_later_public) clearTimeout(tID_later_public);
		if(_delayTime == undefined){
			save();
		} else{
			tID_later_public = setTimeout(function(){
				save();
			},_delayTime*1000);
		}
	}
	function unPublicDateLater(_id,_dir){ unPublicDate(_id,_dir,1) }
	function unPublicDate(_id,_dir,_delayTime){
		if(_dir == "_sitemap") return;
		find(_id,_dir);
		if(! match)return;
		match.publicDate = "";
		save();
	}
	
	//save
	var tID_save;
	function save(){
		//サイトマップを更新すると、同時にリクエストがくるので、1つにしぼる
		if(tID_save) clearTimeout(tID_save);
		tID_save = setTimeout(function(){
			storage.setData(getData());
			storage.save_sitemap(function(){
				if(isLog)console.log("list saved.")
			});
		},500);
	}
	
	
	/* ! ----------  ---------- ---------- ---------- ---------- */

	//保存した日付をかえす
	function getSaveDate(_id,_dir){
		
		find(_id,_dir);
		if(! match)return "";
		return match.saveDate;
	}
	//公開した日付をかえす
	function getPublishDate(_id,_dir){
		find(_id,_dir);
		if(! match)return "";
		return match.publicDate;
	}
	
	function getData(){ return sitemap; }
	 function getFilelist() {
	 	if(sitemap == undefined) return []
		return sitemap.list;
	}
	/* ! ----------  ---------- ---------- ---------- ---------- */

	//リビジョンを返す
	function getRevision(_id,_dir){
		find(_id,_dir);
		if(! match) return [];
		if(match["revision"]) {
			return match["revision"];
		} else{
			return [];
		}
	}
	function addRevision(_id,_dir,_date){
		find(_id,_dir);
		if(! match) return [];
		if(match["revision"] == undefined) match.revision = [];
		match.revision.unshift(_date);
		save();
	}
	function removeRevision(_id,_dir,_date){
		find(_id,_dir);
		if(! match) return [];
		if(match["revision"] == undefined) match.revision = [];
		var a = [];
		var b = false;
		for (var i = 0; i < match.revision.length ; i++) {
			if(_date != match.revision[i]){
				a.push(match.revision[i]);
				b = true;
			}
		}
		if(match.revision.length != a.length ) match.revision = a;
		save();
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	return { 
		init:init,
		load:load,
		update:update,
	
		getData:getData,
		getFilelist:getFilelist,
		
		save:save,
		saveDate:saveDate,
		publicDate:publicDate,
		publicDateInit:publicDateInit,
		
		saveDateLater:saveDateLater,
		publicDateLater:publicDateLater,
		unPublicDateLater:unPublicDateLater,
		
		getSaveDate:getSaveDate,
		getPublishDate:getPublishDate,
		
		getData_by_id:getData_by_id,
		getGloupPath_by_id:getGloupPath_by_id,
		getGloupName_by_id:getGloupName_by_id,
		getGloupState_by_id:getGloupState_by_id,
		
		getGloup_by_uid : getGloup_by_uid,
		
		getRevision:getRevision,
		addRevision:addRevision,
		removeRevision:removeRevision
		
	 }
})();

	
	

/**
 * テンプレートHTMLの管理
*/

CMS_Data.Template = (function(){
	/* ---------- ---------- ---------- */
	//テンプレートHTMLロード
	
	function init(){}
	
	
	/* ---------- ---------- ---------- */
	
	var tmp = {}
	//HTML生成時に、都度コールされる
	function load(_id, _callback) {
		
		id = Dic.DEFAULT_TEMPLATE;
		if (_id != "") {
			id = _id;
			id = id.split(" ").join("");
			id = id.split("	").join("");
		}
		var url = CMS_Path.ASSET.REL + Dic.DirName.TEMPLATE +"/"+ id;
		var urlR = url + "?" + new Date().getTime();
		if (!tmp[id]) {
			new CMS_Data.TextLoader("TEXT", urlR, function(_text) {
				tmp[id] = _text;
				_callback(tmp[id],url);
			},function(_text){
				alert("テンプレートHTMLが見つかりません。URL : " + url);
				_callback("",url);
			});
		} else {
			_callback(tmp[id],url);
		}
	}
	
	/* ---------- ---------- ---------- */

	//テンプレートファイル修正時にコールされる。
	function update(_id){
		if(tmp[_id]){
			tmp[_id] = null;
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//利用できるテンプレート一覧を取得
	function loadList(_callback) {
		var p = "?action=getFileList&dir_name=" + escape_url(CMS_Path.ASSET.REL) + Dic.DirName.TEMPLATE + "/";
		var url = CMS_Path.PHP_DIRECTORY + p;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) { _loadList_comp(data,_callback)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		})
	}
	function _loadList_comp(json,_callback) {
		if(API_StatusCheck.check(json) == false) return;
		
		var files = json.files;
		var a = [];
		for (var i = 0; i <  files.length ; i++) {
			var node = files[i];
			if(_isFile(node.name)){
				// var o = {
				// 	dir:this.dirName,
				// 	name:node.name
				// }
				a.push([this.dirName , node.name ])
			}
		}
		setTemplateList(a);
		if(_callback ) _callback();
	}
	function _isFile(_s) {
		if(_s.indexOf(".") != -1) {
			return FileU.isEditableFile(_s);
 		} else{
 			return false;
 		}
	}
	
	//ロードしたリストをセット
	
	var templateList = []
	function setTemplateList(_a){
		templateList = _a;
		FormCandidates.setTemplateList(_a);
	}
	function getList(){
		return templateList;
	}
	function getSelectList(){
		var a = []
		a.push(["",Dic.DEFAULT_TEMPLATE+" (デフォルト)",""])
		for (var i = 0; i <  templateList.length ; i++) {
			if(templateList[i][1] != Dic.DEFAULT_TEMPLATE){
				var ss = templateList[i][1];
				a.push([ss,ss,ss])
			}
		}
		return a
	}

	/* ---------- ---------- ---------- */
	
	function treatTemplateName(_o){
		var _id = ""
		try{
		 _id = _o.template;
		}catch( e ){}
		if(_id ==undefined) _id = "";
		_id = _id.split(" ").join("")
		
		if(_id == ""){
			_id = Dic.DEFAULT_TEMPLATE
		}
		
		return _id
	}
	/* ---------- ---------- ---------- */
	
	function getTemplateName(_id){
		_id = _id.split(" ").join("");
		if(_id == undefined) _id = "";
		_id = _id.split(" ").join("");
		if(_id == ""){
			_id = Dic.DEFAULT_TEMPLATE
		}
		return _id;
	}
	
	/* ---------- ---------- ---------- */
	
	//ページビューで、テンプレを選択した場合にコールされる
	function setTemplateName(_o,_tempalte){
		if(_o["template"] == undefined){
			_o["template"] = ""
		}
		_o.template = _tempalte;
	}
	
	/* ---------- ---------- ---------- */

	function openTemplate(_data){
		if(!_data.meta) _data.meta = {}
		if(!_data.meta.template) _data.meta.template = Dic.DEFAULT_TEMPLATE;
		CMS_MainController.openTemplateHTMLFile(_data.meta.template);
	}
	
	/* ---------- ---------- ---------- */
	return { 
		init:init,
		loadList:loadList,
		load:load,
		update:update,
		getList:getList,
		getSelectList:getSelectList,
		treatTemplateName:treatTemplateName,
		getTemplateName:getTemplateName,
		setTemplateName:setTemplateName,
		openTemplate:openTemplate
	}
})();


//インスペクトビューのCSSプリセット管理
CMS_Data.InspectCSS = (function(){
	
	var css = ""
	var url = ""
	var _hasData = false;
	
	function load(_callback) {
		url = ASSET_CSS_DIRS[0];
		var urlR = url + "?" +  new Date().getTime();
		new CMS_Data.TextLoader(
			"TEXT",
			urlR,
			function(_text) {
				_hasData = true;
				css = parse(_text);
				if(_callback)_callback(url);
			},function(_text){
				css = parse("");
				if(_callback)_callback(url);
			}
		);
	}
	
	var listCommon;
	var listTag;
	
	function hasData() {
		return _hasData;
	}
	
	function parse(_text) {
		listCommon = [];
		listTag = [];
		// var re = new RegExp('\\/\\*.*{.*?}.*\\*\\/' ,"ig");
		var re = new RegExp('\\/\\*.*\\[.*?\\].*\\*\\/' ,"ig");
		var ss = _text.match(re);
		if(!ss ) return {};
		listTag = [];
		for (var i = 0; i < ss.length ; i++) {
			var _vs = getPresetVal(ss[i]).split(",");
			if(_vs.length>1){
				var selc = _vs[0]
				var label = _vs[1]
				if(selc.charAt(0) == "." && selc.split(".").length == 2){
					if(isOwnPreset(listCommon,selc) == false){
						listCommon.push({ selector:selc, label:label });
					}
				}
				if(selc.split(".").length > 1){
					if(isOwnPreset(listTag,selc) == false){
						listTag.push({ selector:selc, label:label });
					}
				}
			}
		}
		listCommon	= _cluc(listCommon);
		listTag		= _cluc(listTag);
		// console.log(listCommon);
		// console.log(listTag);
	}
	
	function _cluc (_defs){
		var _list = [];
		for (var i = 0; i < _defs.length ; i++) {
			var l = _defs[i].label;
			var sel = _defs[i].selector;
			if(l.indexOf("/") != -1){
				var gp = l.split("/")[0];
				if(! _hasItem(_list,gp)){
					_list.push({label:gp,selector:sel,subs:[]});
				} 
				_addSubItem(_list,gp,l,sel);
			} else{
				_list.push({label:l,selector:sel,subs:[]});
			}
		}
		return _list;
	}
	function _hasItem(_list,_g){
		var b = false;
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i].label == _g){ b = true; }
		}
		return b;
	}
	function _addSubItem(_list,_g,_s,_sel){
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i].label == _g){
				var s = _s.split(_g+"/")[1];
				_list[i].subs.push({label:s,selector:_sel});
			}
		}
	}
	
	/* ---------- ---------- ---------- */

	function getPresetVal(_s) {
		_s = _s.split(" ").join("");
		_s = _s.split("	").join("");
		_s = _s.split("/*").join("");
		_s = _s.split("*/").join("");
		_s = _s.split("[").join("");
		_s = _s.split("]").join("");
		return _s;
	}
	function isOwnPreset(_list,_s) {
		var b = false;
		if(_s.indexOf("---") != -1) return false;
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i].selector == _s) b = true;
		}
		return b;
	}
	
	function getList(_base,_type){
		var ls = [];
		if(_type == "common"){
			var _list = listCommon;
			for (var i = 0; i < _list.length ; i++) {
				_list[i].class = _list[i].selector.split(".").join("");
				for (var ii = 0; ii < _list[i].subs.length ; ii++) {
					_list[i].subs[ii].class = _list[i].subs[ii].selector.split(".").join("");
				}
				ls.push(_list[i]);
			}
		} else{
			var _list = listTag;
			for (var i = 0; i < _list.length ; i++) {
				var sel = getFirstSel(_list[i].selector);
				if(sel == _base){
					_list[i].class = _list[i].selector.split(_base + ".").join("");
					for (var ii = 0; ii < _list[i].subs.length ; ii++) {
						_list[i].subs[ii].class = _list[i].subs[ii].selector.split(_base + ".").join("");
					}
					ls.push(_list[i]);
				}
			}
		}
		return ls;
	}

	/* ---------- ---------- ---------- */
	
	//セレクタの先頭のノードを返す
	function getFirstSel(_s){
		if(_s.charAt(0) == "."){
			var s = _s.split(".");
			return "." + s[1];
		} else{
			var s = _s.split(".");
			return s[0];
		}
	}
	/*
	equal(_f(".clearfix"),".clearfix");
	equal(_f(".w100p"),".w100p");
	equal(_f(".fs36"),".fs36");
	equal(_f(".cms-layout.default"),".cms-layout");
	equal(_f(".cms-layout.designA"),".cms-layout");
	equal(_f(".cms-layout.designB"),".cms-layout");
	equal(_f(".cms-markdown.default"),".cms-markdown");
	equal(_f("h1.default"),"h1");
	equal(_f(".cms-layout.free"),".cms-layout");
	equal(_f(".cms-layout-table.free"),".cms-layout-table");
	*/
	
	/* ---------- ---------- ---------- */
	
	var updateCallback = null;
	function registUpdateCallback(_cb){
		updateCallback = _cb;
	}
	
	/* ---------- ---------- ---------- */
	
	function reload(_s){
		if(url.indexOf(_s)!= -1){
			load(function(){
				if(updateCallback){
					updateCallback();
				}
			});
		}
	}
	
	return { 
		load:load,
		hasData:hasData,
		getList:getList,
		reload:reload,
		registUpdateCallback:registUpdateCallback
	}
})();




//ファイルインクルード
//{{FILE:index.html}}

CMS_Data.FreeFile = (function(){
	/* ---------- ---------- ---------- */
	
	function init(){}
	
	/* ---------- ---------- ---------- */
	
	var tmp = {}
	var callback;
	var replaceText;
	function replace(_s, _callback) {
		replaceText = _s;
		callback = _callback;
		loadedCnt = 0;
		var files = _s.match(/{{FILE.*?}}/g);
		if(files){
			fileCnt = files.length;
			for (var i = 0; i <  files.length ; i++) {
				load(files[i],loaded);
			}
		} else{
			callback(_s);
		}
	}
	
	var loadedCnt = 0;
	var fileCnt = 0;
	function loaded(_string,_file) {
		loadedCnt ++;
		if(loadedCnt == fileCnt){
			loadedAll();
		}
	}
	function loadedAll() {
		for (var n in tmp) {
			replaceText = replaceText.split(n).join(tmp[n]);
		}
		callback(replaceText);
	}
	
	/* ---------- ---------- ---------- */
	
	function load(id, _callback) {
		var url = id;
			url = url.split("{{FILE:").join("");
			url = url.split("}}").join("");
		
		var path = ""
		if(url.charAt(0) == "/"){
			path = CMS_Path.SITE.REL + url;
		} else {
			path = CMS_Path.PAGE.REL + Dic.DirName.TEMPLATE + "/" + url;
		}
		
		var pathR = path + "?" +  Math.round(Math.random() * 10000);
		
		if (tmp[id] == undefined){
			new CMS_Data.TextLoader("TEXT", pathR, function(_text) {
				tmp[id] = _text;
				_callback(tmp[id],id);
			},function(_text){
				tmp[id] = "";
				_callback("",id);
			});
		} else {
			_callback(tmp[id],id);
		}
	}
	
	/* ---------- ---------- ---------- */
	return { 
		init:init,
		replace:replace
	}
})();



//サイト設定のアセットCSSやJSなどの管理を行う

CMS_Data.AssetFile = (function(){
	/* ---------- ---------- ---------- */
	//テンプレートHTMLロード
	
	function init(){}
	
	/* ---------- ---------- ---------- */
	
	//アセットファイルのリストをつくる
	var files = [];
	function addFile(_dir,_file) {
		files.push({
			dir : _dir,
			file: _file,
			edit: false,
			r:"",
		})
	}
	
	/* ---------- ---------- ---------- */

	//アセットファイルが保存された場合にコールされる。
	//更新時間を記録しておく
	function update(_dir,_file){
		for (var i = 0; i <  files.length ; i++) {
			var d = files[i];
			if(d.dir == _dir){
				if(d.file == _file){
					d.edit = true;
					d.r = "?"+ new Date().getTime();
					_reload(_file);
				}
			}
		}
	}
	
	function _reload(_file){
		//CSSリロード
		CMS_Data.InspectCSS.reload(_file);
		CMS_Data.AssetCSSManager.reload(_file);
	}
	
	/* ---------- ---------- ---------- */
	
	//CSSパスを、ユニークに書き換え、プレビュー時にCSSをキャッシュからロードしないように
	
	function overridePath(_s){
		for (var i = 0; i <  files.length ; i++) {
			var d = files[i];
			if(d.dir =="css"){
				if(d.edit ){
					var ss = d.dir + "/" + d.file + '"';
					var rr = d.dir + "/" + d.file + d.r + '"';
					_s = _s.split(ss).join(rr);
				}
			}
		}
		return _s; 
	}

	return {
		init: init,
		addFile: addFile,
		update: update,
		overridePath: overridePath
	}
})();

//20160415
//指定したCSSをリロードする
CMS_Data.AssetCSSManager = (function(){
	/* ---------- ---------- ---------- */
	//初期化
	var eles = [];
	var isFirst = true;
	function init(){
		// <link rel="stylesheet" class="asset" となってるCSSのみ、リロード候補に入れる
		var a = document.getElementsByTagName( 'link' );
		for (var i = 0; i <  a.length ; i++) {
			try{
				if(a[i].getAttribute('class') == "asset"){
					eles.push(a[i]);
				}
			}catch( e ){}
		}
	}
	
	function reload(_s){
		if(isFirst){
			init();
		}
		for (var i = 0; i <  eles.length ; i++) {
			var href = eles[i].getAttribute('href').split('?')[0];
			var a = href.split("/");
			var name = a[a.length-1];
			if(_s.indexOf(name) != -1){
				eles[i].setAttribute( 'href', href  + "?r="+ new Date().getTime() );
			}
		}
		
	}
	return { reload:reload }
})();


CMS_Data.TextLoader = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_type,_url,_callback,_callback_e) {
	  this.init(_type,_url,_callback,_callback_e);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_type,_url,_callback,_callback_e) {
		this.type 	 = _type;
		this.url 	 = _url;
		this.callback  = _callback;
		this.callback_e  = _callback_e;
		this.data;
		this.load();
	}

	p.load = function() { 
		var this_ = this;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: this.url,
			dataType		: 'text',
			success			: function(data) { this_.load_comp(data); },
			error			: function(data) {
				if(this_.callback_e){
					this_.callback_e({});
				}
			}
		})
		
	}
	p.load_comp = function(_data) {
		if(isLog) console.log("HTMLService.loadTemplate : "+this.url);
		if(this.type == "TEXT"){ this.data = _data; }
		if(this.type == "JSON"){ 
			try{
				this.data = JSON.parse(_data);
			}catch( e ){
				this.data = {}
			}
		}
		if(this.type == "XML"){ this.data = _data}
		this.callback(this.data);
	}
	return c;
})();


var Storage = {}
	
Storage.Util 	 = (function(){
	
	/* ---------- ---------- ---------- */
	//rename
	
	function renameAll(_a){
		var a = [];
		var b = [];
		for (var i = 0; i <  _a.length ; i++) {
			var _old = _a[i].old_;
			var _new = _a[i].new_;
			//JSON
			a.push(CMS_Path.JSON.getRelPath(_old.id,_old.dir));
			b.push(CMS_Path.JSON.getRelPath(_new.id,_new.dir));
			//JSON ヒストリ sitemapは更新されてるので、_oldではなく_newから取得
			var revs = CMS_Data.Sitemap.getRevision( _new.id , _new.dir );
			for (var nn = 0; nn <  revs.length ; nn++) {
				var _date = getFormattedID(revs[nn]);
				a.push(CMS_Path.JSON_REV.getRelPath(_old.id , _old.dir , _date));
				b.push(CMS_Path.JSON_REV.getRelPath(_new.id , _new.dir , _date));
			}
			//HTML
			a.push(CMS_Path.PAGE.getRelPath(_old.id,_old.dir));
			b.push(CMS_Path.PAGE.getRelPath(_new.id,_new.dir));
		}
		
		var param = {}
			param.action 	 = "renameAll";
			param.rename_olds  = escape_url(a.join(","));
			param.rename_news  = escape_url(b.join(","));
		if(isLog)console.log(["Storage.All" , param]);
		ajax(param);
	}
	
	function rename(_param1,_param2){
		var list = [{
			old_:{ id:_param1.id, dir:_param1.dir },
			new_:{ id:_param2.id, dir:_param2.dir }
		}]
		renameAll(list);
	}
	
	/* ---------- ---------- ---------- */
	//delete
	
	function delete_(_param){
		var list = [];
		list.push(CMS_Path.JSON.getRelPath(_param.id,_param.dir));
		
		var revs = CMS_Data.Sitemap.getRevision( _param.id , _param.dir );
		for (var nn = 0; nn <  revs.length ; nn++) {
			var _date = getFormattedID(revs[nn]);
			list.push(CMS_Path.JSON_REV.getRelPath(_param.id , _param.dir , _date));
		}
		list.push(CMS_Path.PAGE.getRelPath(_param.id,_param.dir));
		
		var param ={}
			param.action = "deleteFiles";
			param.file_names = escape_url(list.join(","));
		ajax(param);
	}
	
	/* ---------- ---------- ---------- */
	//まとめて削除
	
	var deleteList =[]
	function deleteSubFiles(_a){
		
		deleteList = []
		if(_a.list){
			_deleteSubFiles_loop(_a.list);
		}
		if(deleteList){
			var param ={}
				param.action = "deleteFiles";
				param.file_names = escape_url(deleteList.join(","));
			ajax(param);
		}
	}
	function _deleteSubFiles_loop(_a){
		for (var i = 0; i < _a.length ; i++) {
			if(_a[i].list){
				_deleteSubFiles_loop(_a[i].list)
			} else{
				//JSON
				deleteList.push(CMS_Path.JSON.getRelPath(_a[i].id,_a[i].dir))
				//JOSN rev
				var revs = CMS_Data.Sitemap.getRevision( _a[i].id , _a[i].dir );
				for (var nn = 0; nn <  revs.length ; nn++) {
					var _date = getFormattedID(revs[nn]);
					deleteList.push(CMS_Path.JSON_REV.getRelPath(_a[i].id , _a[i].dir , _date));
				}
				//HTML
				deleteList.push(CMS_Path.PAGE.getRelPath(_a[i].id,_a[i].dir))
			}
		}
	}
	
	
	/* ---------- ---------- ---------- */

	function ajax(param){
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {
				if(API_StatusCheck.check(data) == false) return;
				if(isLog)console.log(["_____ comp" , data])
			},
			error: function(data) {
				// if(isLog) console.log(data);
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		})
	}
	
	/* ---------- ---------- ---------- */
		
	function escape_(_param){
		if(window.IS_ESCAPE_WAF){
			//パス処理 ../ >> __DIR__
			if(_param.dir_name){ _param.dir_name = escape_url(_param.dir_name);}
			if(_param.dir_rename){ _param.dir_rename = escape_url(_param.dir_rename);}
			//
			//本文処理 ~~
			var b = false;
			if(_param.action == "waf") b = true;
			if(_param.action == "write") b = true;
			if(_param.action == "writeToTemp") b = true;
			if(_param.action == "writeAll") b = true;
			//
			if(b){
				if(_param["text"]){
					var _s = _param.text;
						_s = _s.split("~").join("__TILDE__");				
					var s = "";
					for (var i = 0; i < _s.length ; i++) {
						s += _s[i] + "~";
					}
					_param.waf_escape = "1";
					_param.text = s;
				}
			}
		}
		return _param;
	}
	
	

	/* ---------- ---------- ---------- */
	
	function getFormattedID(_s) {
		if(!_s)return ""
		_s = _s.split("/").join("");
		_s = _s.split(" ").join("_");
		_s = _s.split(":").join("");
		return _s;
	}
	
	return { 
		renameAll			: renameAll,
		rename				: rename,
		delete_				: delete_,
		escape_				: escape_,
		deleteSubFiles:deleteSubFiles
	 }
})();



Storage.Embed 	 = (function(){
	
	/* ---------- ---------- ---------- */
	
	function checkDirExist(_path,_callback){
		var param = {}
			param.action = "checkDir";
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);
		//
		checkCommon(param,_callback)
	}
	function checkFileExist(_path,_callback){
		var param = {}
			param.action = "checkFile";
			param.file_name = URL_U.getFileName(_path);
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);
		//
		checkCommon(param,_callback)
	}
	function checkCommon(param,_callback){
		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) { 
				if(API_StatusCheck.checkWeak(data) == false) {
					_callback(data.message);
				} else {
					_callback("");
				}
			},
			error			: function(data) { 
				_callback(false);
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function loadFile(_path,_callback){
		var param = {}
			param.action = "read";
			param.file_name = URL_U.getFileName(_path);
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);
		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'text',
			success			: function(data) { 
				if(API_StatusCheck.checkWeak(data) == false) {
					_callback(false);
				} else {
					_callback(true,data);
				}
			},
			error			: function(data) { 
				_callback(false);
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function writeFile(_path,_text,_callback){
		if(_text.length > 1000*10){
			writeFile_temp(_path,_text,_callback);
			return;
		}
		var param = {}
			param.action = "write";
			param.file_name = URL_U.getFileName(_path);
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);
			param.text  = _text;
		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {
				writeFile_comp(_callback,data);
			},
			error			: function(data) { 
				_callback(false);
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		});
	}
	
	function writeFile_temp(_path,_text,_callback){
		var param = {}
			param.action = "writeToTemp";
			param.file_name = URL_U.getFileName(_path);
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);
			param.text = _text;
			
		var afterParam = {}
			afterParam.action = "renameTemp";
			afterParam.file_name = param.file_name;
			afterParam.dir_name = param.dir_name;
			
		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) { writeFile_rename(_callback,data,afterParam)},
			error			: function(data) { 
				CMS_ErrorView.stageIn("NET",url,param,data);
				_callback(false);
			}
		});
	}
	function writeFile_rename (_callback,data,param){
		var this_ = this;
		if(API_StatusCheck.checkWeak(data) == false) {
			_callback(false);
			return;
		}
		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {writeFile_comp(_callback,data)},
			error			: function(data) { 
				CMS_ErrorView.stageIn("NET",url,param,data);
				_callback(false)
			}
		})
	}
	function writeFile_comp (_callback,data){
		if(API_StatusCheck.checkWeak(data) == false) {
			_callback(false);
		} else{
			_callback(true);
		}
	}
	
	/* ---------- ---------- ---------- */
	//削除
	function deleteFile(_path,_callback){
		var param = {}
			param.action = "delete";
			param.file_name = URL_U.getFileName(_path);
			param.dir_name = CMS_Path.SITE.REL + URL_U.getBaseDir(_path);

		var url = CMS_Path.PHP_EMBED;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {
				if(API_StatusCheck.checkWeak(data) == false) {
					_callback(false);
				} else {
					_callback(true);
				}
			},
			error			: function(data) { 
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		});
	}
	return { 
		checkDirExist	: checkDirExist,
		checkFileExist	: checkFileExist,
		loadFile		: loadFile,
		writeFile		: writeFile,
		deleteFile		: deleteFile
	 }
})();


/**
 * ページツリーの開閉リストの記憶などで仕様
 */

Storage.Local = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_id,_initData) {
	  this.init(_id,_initData);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_id,_initData) {
		this.id 	 = _id;
		this.initData = _initData;
		this.storeData  = {};
		this.callback;
		this.callbackSave;
	}

	p.load = function(_callback) { 
		this.callback = _callback;
		var s;
		if(!localStorage.hasOwnProperty(this.id)){
			s = JSON.stringify(this.initData);
			localStorage[this.id] = s;
		} else{
			s = localStorage[this.id];
		}
		this.storeData = JSON.parse(s);
		this.save(function(){});
		this.loaded();
	}
	p.loaded = function(){
		this.callback();
	}
	p.setData = function(_data){
		this.storeData = _data;
	}
	p.save = function (_callback){
		this.callbackSave = _callback;
		localStorage[this.id] = JSON.stringify(this.storeData);
	}
	p.saved = function (data){
		this.callbackSave();
	}
	p.getData = function (){ 
		return this.storeData;
	}
	p.reset = function (){ 
		delete localStorage[this.id];
	}
	p.exportJSON = function (){ 
		return JSON.stringify(this.storeData, null, "	");
	}
	p.importJSON = function (_s){
		try{
		 this.storeData = JSON.parse(_s);
		 this.save(function(){});
		}catch( e ){
			alert("入力データが正しくありません。");
		}
	}
	return c;
})();



//バッチ用
Storage.OnlineBatch = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_pages) {
	  this.init(_pages);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_pages) {
		this.type 	 = "page";
		this.pages 	 = _pages;
		this.leng = this.pages.length;
		this.sep = "__" + new Date().getTime() + "__";
	}
	var SEP = "__SEP__"
	p.start = function(_callback){
		this.callback = _callback;
		this.pageClasses = [];
		
		var self = this;
		var files = []
		for (var i = 0; i <  this.leng ; i++) {
			var model = this.pages[i];
			var f = "";
				f += CMS_Path.JSON.getRelDirPath(this.type,model.dir);
				f += CMS_Path.JSON.getFileName(this.type,model.id,model.dir);
			files.push(f);
		}
		
		var this_ = this;
		
		var url = "";
			url += CMS_Path.PHP_FILEPATH;
			url += "?action=readAll";
			url += "&outType=text";
			url += "&sep=" + this.sep;
			url += "&paths=" + escape_url(files.join(SEP));
		
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'text',
			success			: function(data) { 
				this_.loaded(data);
			},
			error			: function(data) { CMS_ErrorView.stageIn("NET",url,null,data); }
		});
	}
	
	/* ---------- ---------- ---------- */

	p.outs = "";
	p.htmls ;
	p.count = 0;
	p.loaded = function (data){
		this.storeDatas = data.split(this.sep);
		this.htmls = [];
		this.genHTML();	
	}
	
	p.genHTML = function (){
		var self = this;
		var cnt = this.count;
		this.count++;
		
		var model = this.pages[cnt];
		var data = {}
		try{
			if(!this.storeDatas[cnt]){
				 this.storeDatas[cnt] = "{}"
			}
  			data = JSON.parse(this.storeDatas[cnt]);
		}catch( e ){
			this.genHTML_next();
			return;
		}
		
		HTMLService.generateHTML(
			data,
			{
				id:model.id,
				dir:model.dir
			},
			function(_s){
				self.htmls.push(_s);
				self.genHTML_next();
			}
		);
	}
	p.genHTML_next = function (){
		if(this.leng == this.count){
			this.public();
		} else{
			this.genHTML();	
		}
	}
	p.public = function (){
		var self = this;
		var files = []
		for (var i = 0; i <  this.pages.length ; i++) {
			var model = this.pages[i];
			 files.push(CMS_Path.PAGE.getRelDirPath(model.dir) + model.id + ".html");
		}
		var param = {}
			param.action = "writeAll";
			param.sep 		= this.sep;
			param.paths 	= escape_url(files.join(SEP));
			param.text		= this.htmls.join(this.sep);
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {self.published(data)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.published = function (data){
		this.callback();
	}
	
	return c;
})();


/**
 * JOSNデータのIOを管理する。JSONファイルごとにインスタンスを作成する
 */
Storage.Online = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_type,_id,_dir,_initData) {
	  this.init(_type,_id,_dir,_initData);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_type,_id,_dir,_initData) {
		this.type 	 = _type;
		this.dir 	 = _dir;
		this.id 	 = _id;
		this.initData = _initData;
		this.storeData  = {};
		this.restoreJsonData;
		
		if(this.id == undefined) {
			alert("Errot at Storage.Online : IDが設定されていません。ブラウザをリロードしてください。")
		}
		if(window["TEST_DIR"] != undefined){
			D = window.TEST_DIR
		}
	}
	
	var D = "";

	p.load = function(_callback){
		/*
			JSONロードする。
			.jsonを直接ロードしてもいいが、ファイルが無いと404エラーが出てるので、
			いったん、PHPをかましてロードする
		*/
		
		var this_ = this
		var param ={}
			param.dir_name = CMS_Path.JSON.getRelDirPath(this.type,this.dir);
			param.file_name = CMS_Path.JSON.getFileName(this.type,this.id,this.dir);
			param = Storage.Util.escape_(param);
		var url = CMS_Path.PHP_FILEPATH + '?action=read&path=' + param.dir_name +"/"+ param.file_name
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'text',
			success			: function(data) {
				this_.loaded(_callback,data)
			},
			error			: function(data) { 
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		});
		if(isLog)console.log(["Storage load" , param.file_name , param ]);
	}
	p.loaded = function(_callback,data){
		if(data == "") data = "{}";
		try{
			this.storeData = JSON.parse(data);
			if(API_StatusCheck.check(this.storeData) == false) return;
			this.restoreJsonData = this.exportJSON();
			if(isLog) console.log(["_____ Loaded json ",this.storeData]);
		}catch( e ){
			console.log("Error at Storage.Online : JSONパースエラーが発生しました。");
			this.storeData = {};
		}
		_callback(this);
	}
	
	/* ---------- ---------- ---------- */
	//save
	
	p.setData = function(_data){
		this.storeData = _data;
	}
	p.save = function (_callback){
		var this_ = this;
		var param = {}
			param.action 	= "write";
			param.dir_name 	= CMS_Path.JSON.getRelDirPath(this.type,this.dir);
			param.file_name = CMS_Path.JSON.getFileName(this.type,this.id,this.dir);
			param.text 		= JSON.stringify(this.storeData, null, "	");
		var flow = {}
			flow.wtiteInStages = true;
			flow.updateSitemapSave = true;
			flow.updateSitemapPub = false;
		this.save_core(_callback,param,flow);
	}
	p.save_sitemap = function (_callback){
		var this_ = this;
		var param = {}
			param.action 	= "write";
			param.dir_name 	= CMS_Path.JSON.getRelDirPath(this.type,this.dir);
			param.file_name = CMS_Path.JSON.getFileName(this.type,this.id,this.dir);
			param.text 		= JSON.stringify(this.storeData, null, "	");
		var flow = {}
			flow.wtiteInStages = true;
			flow.updateSitemapSave = false;
			flow.updateSitemapPub = false;
		this.save_core(_callback,param,flow);
	}
	/* ---------- ---------- ---------- */
	//書き込みメイン
	//
	p.tID_save;
	p.save_core = function (_callback,param,flow){
		var this_ = this;
		if(this.tID_save) clearTimeout(this.tID_save);
		this.tID_save = setTimeout(function(){
			this_.save_core_delay(_callback,param,flow)
		},100);
	}
	p.save_core_delay = function (_callback,param,flow){
		
		if(flow.wtiteInStages){
			//JSONの保存は、書き込みミスが怖いので、段階的書き込みにする
			//JSONだと、だいたい1000文字で1Kになる(英語、日本語含みで)
			//10K超える場合は、段階的書き込みにする
			if(param.text.length > 1000*10){
				this.save_stage1(_callback,param,flow);
				return;
			}
		}
		var this_ = this;
		if(isLog)console.log(["Storage save ",CMS_Path.PHP_FILEPATH ,param.file_name,param])
		var url = CMS_Path.PHP_FILEPATH+"?_save_"+param.file_name;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.saved(_callback,data,flow)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.saved = function (_callback,data,flow){
		if(API_StatusCheck.check(data) == false) return;
		this.saved_callback(_callback,flow)
	}
	p.saved_callback = function (_callback,flow){
		if(isLog)console.log(["_____ saved json or html"]);
		if(flow.updateSitemapSave) CMS_Data.Sitemap.saveDateLater(this.id,this.dir);
		if(flow.updateSitemapPub) CMS_Data.Sitemap.publicDateLater(this.id,this.dir);
		_callback(this);
	}
	/* ---------- ---------- ---------- */
	//サイズが大きいファイルのばあいは、いったんテンポラリファイルに書き込みしてから、
	//コールバック後、さらに、テンポラリを正しい名前にリネームさせる、段階的処理。
	
	p.save_stage1 = function (_callback,param,flow){
		var this_ = this;
		if(isLog)console.log(["Storage save ",CMS_Path.PHP_FILEPATH ,param.file_name,param])

		param.action = "writeToTemp";
		var afterParam = {}
			afterParam.action = "renameTemp";
			afterParam.dir_name = param.dir_name;
			afterParam.file_name = param.file_name;
		var url = CMS_Path.PHP_FILEPATH+"?_writeToTemp_"+afterParam.file_name;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.saved_temp(_callback,data,afterParam,flow)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.saved_temp = function (_callback,data,param,flow){
		var this_ = this;
		if(API_StatusCheck.check(data) == false) return;
		var url = CMS_Path.PHP_FILEPATH+"?_renameTemp_"+param.file_name;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.saved_temp_done(_callback,data,flow)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.saved_temp_done = function (_callback,data,flow){
		if(API_StatusCheck.check(data) == false) return;
		this.saved_callback(_callback,flow)
	}
		
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//公開
	
	p.publicData = function (_callback){
		
		//20161202 初期保存時用
		CMS_Data.Sitemap.publicDateInit(this.id,this.dir);
		
		var this_ = this;
		var param = {}
			param.action 	 = "write";
			param.dir_name 	 = CMS_Path.PAGE.getRelDirPath(this.dir);
			param.file_name  = this.id + ".html";

		var flow = {}
			flow.wtiteInStages = false;
			flow.updateSitemapSave = false;
			flow.updateSitemapPub = true;
			
			HTMLService.generateHTML(
				this.storeData,
				{
					id:this.id,
					dir:this.dir
				},
				function(_s){
					param.text = _s;
					this_.public_core(_callback,param,flow);
			})
	}
	p.unPublicData = function (_callback){
		CMS_Data.Sitemap.unPublicDateLater(this.id,this.dir);
		
		var this_ = this;
		var param ={}
			param.action 	 = "delete";
			param.deleteFile  = 	CMS_Path.PAGE.getRelPath(this.id,this.dir);
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {_callback(this)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	
	p.tID_pub;
	p.public_core = function (_callback,param,flow){
		var this_ = this;
		if(this.tID_pub) clearTimeout(this.tID_pub);
		this.tID_pub = setTimeout(function(){
			this_.public_core_delay(_callback,param,flow)
		},30);
	}
	p.public_core_delay = function (_callback,param,flow){
		var this_ = this;

		var url = CMS_Path.PHP_FILEPATH+"?_public_"+param.file_name
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.published(_callback,data,flow)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.published = function (_callback,data,flow){
		if(API_StatusCheck.check(data) == false) return;
		this.saved_callback(_callback,flow);
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//プレビュー公開
	
	p.previewData = function (_callback){
		var this_ = this;
		var param = {}
			param.action = "write";
			param.dir_name = CMS_Path.ASSET.REL;
			param.file_name = CMS_Path.PREVIEW_HTML;
			
		var flow = {}
			flow.wtiteInStages = false;
			flow.updateSitemapSave = false;
			flow.updateSitemapPub = false;
			
			var d = this.storeData;
			if(this.id.indexOf("_cms_")!= -1){
				d = JSON.parse(PageElement_JText.templatePreviewPageData);
			}
			HTMLService.generateHTML(
				d,
				{
					id:this.id,
					dir:this.dir,
					siteRoot:"../"
				},
				function(_s){
					param.text = _s;
					this_.preview_core(_callback,param,flow);
			})
	}
		
	p.tID_pre;
	p.preview_core = function (_callback,param,flow){
		var this_ = this;
		if(this.tID_pre) clearTimeout(this.tID_pre);
		this.tID_pre = setTimeout(function(){
			this_.preview_core_delay(_callback,param,flow)
		},30);
	}
	p.preview_core_delay = function (_callback,param,flow){
		var this_ = this;

		var url = CMS_Path.PHP_FILEPATH+"?_public_"+param.file_name
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.previewed(_callback,data,flow)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.previewed = function (_callback,data,flow){
		if(API_StatusCheck.check(data) == false) return;
		_callback(this);
	}
		
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//リビジョン用 20160429

	p.loaadedRevs
	p.loadRevision = function (_date,_callback){
		var this_ = this;
		var u = "?action=read"
			u += "&path=" + CMS_Path.JSON_REV.getRelPath(this.id,this.dir,_date);
		
		//ロード済みのファイルは、スルー
		if(this.loaadedRevs == undefined) this.loaadedRevs = [];
		for (var i = 0; i <  this.loaadedRevs.length ; i++) {
			if(this.loaadedRevs[i].id == _date){
				_callback(this.loaadedRevs[i].data);
				return;
			}
		}
		
		var url = CMS_Path.PHP_FILEPATH + u;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url ,
			dataType		: 'text',
			success			: function(data) {
				this_.loaadedRevs.push({id:_date,data:data})
				_callback(data);
			},
			error			: function(data) { CMS_ErrorView.stageIn("NET",url,param,data);}
		});
	}
	p.addRevision = function (_date,_id,_callback,_extra){
		var this_ = this;
		var param = {}
			param.action 	= "write";
			param.dir_name 	= CMS_Path.JSON_REV.getRelDirPath(this.type,this.dir);
			param.file_name = CMS_Path.JSON_REV.getFileName(this.type,this.id,this.dir,_id);
		if(! _extra){
			param.text 		= JSON.stringify(this.storeData, null, "	");
		} else if(_extra == "pre"){
			param.text 		= this.restoreJsonData
		}
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {this_.addRevision_comp(_date,_id,_callback)},
			error			: function(data) {CMS_ErrorView.stageIn("NET",url,param,data);}
		})
	}
	p.addRevision_comp = function (_date,_id,_callback){
		CMS_Data.Sitemap.addRevision( this.id , this.dir , _date );
		if(_callback)_callback();
	}
	p.removeRevision = function (_date,_id,_callback){
		CMS_Data.Sitemap.removeRevision(this.id , this.dir , _date );
		
		var this_ = this;
		var param = {}
			param.action 	 = "delete";
			param.deleteFile  = CMS_Path.JSON_REV.getRelPath(this.id,this.dir,_id);
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {if(_callback)_callback(this)},
			error			: function(data) {CMS_ErrorView.stageIn("",url,param,data);}
		})
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	
	p.getData = function (){ 
		return this.storeData;
	}
	p.reset = function (){ 
		//
	}
	p.exportJSON = function (){ 
		return JSON.stringify(this.storeData, null, "	");
	}
	p.exportJSON_flat = function (){ 
		return JSON.stringify(this.storeData);
	}
	p.importJSON = function (_s){
		try{
		 this.storeData = JSON.parse(_s);
		 //this.save(function(){});
		}catch( e ){
			alert("入力データが正しくありません。");
		}
	}
	return c;
})();


/**
 * LocalStorageを使用したメモ。状態の永続化で使用する
 * 
 */
Storage.Memo 	 = (function(){
	
	/* ---------- ---------- ---------- */
	//最後に見たページパラメータを記録
	
	var LASTVIEW_PARAM = "JS_CMS_LASTVIEW_PARAM";
	
	function getPageParam(){
		if(localStorage[LASTVIEW_PARAM]){
			return JSON.parse(localStorage[LASTVIEW_PARAM]);
		} else{
			return null;
		}
	}
	function setPageParam(_param){
		localStorage[LASTVIEW_PARAM] = JSON.stringify(_param);
	}
	
	/* ---------- ---------- ---------- */
	
	var IS_PREVIEW_NO = "JS_CMS_IS_PREVIEW_NO_";
	function getIsPreviewScNO(){
		if(localStorage[IS_PREVIEW_NO]){
			return localStorage[IS_PREVIEW_NO];
		} else{
			return 2;
		}
	}
	function setIsPreviewScNO(_n){
		localStorage[IS_PREVIEW_NO] = _n;
	}
	
	/* ---------- ---------- ---------- */

	var ZOOM_VAL = "JS_CMS_ZOOM_VAL_";
	function getZoomVal(){
		if(localStorage[ZOOM_VAL]){
			return localStorage[ZOOM_VAL];
		} else{
			return "1";
		}
	}
	function setZoomVal(_n){
		localStorage[ZOOM_VAL] = _n;
	}
	/* ---------- ---------- ---------- */
	
	var SIDEMENU_Y = "JS_CMS_SIDEMENU_Y";
	function getSideMenuY(){
		if(localStorage[SIDEMENU_Y]){
			return localStorage[SIDEMENU_Y];
		} else{
			return "0";
		}
	}
	var tID;
	function setSideMenuY(_n){
		if(tID)clearTimeout();
		tID = setTimeout(function(){
			localStorage[SIDEMENU_Y] = _n;
		}, 100);
	}
	
	/* ---------- ---------- ---------- */
	
	
	var PREVIEW_VISIBLE = "JS_CMS_PREVIEW_VISIBLE";
	function getPreviewVisible(){
		if(localStorage[PREVIEW_VISIBLE]){
			return localStorage[PREVIEW_VISIBLE];
		} else{
			return "0";
		}
	}
	
	function setPreviewVisible(_n){
		localStorage[PREVIEW_VISIBLE] = _n;
	}
	/* ---------- ---------- ---------- */
	
	var PREVIEW_STATE = "JS_CMS_PREVIEW_STATE";
	function getPreviewState(){
		if(localStorage[PREVIEW_STATE]){
			return localStorage[PREVIEW_STATE].split("_");
		} else{
			return ["33","1000"];
		}
	}
	function setPreviewState(_n){
		localStorage[PREVIEW_STATE] = _n.join("_");
	}
	/* ---------- ---------- ---------- */
	
	var LIST_PREVIEW_FULL = "JS_LIST_PREVIEW_FULL";
	function getListPreviewFull(){
		var s = "0";
		if(localStorage[LIST_PREVIEW_FULL]){
			s = localStorage[LIST_PREVIEW_FULL];
		} 
		return (s == "1") ? true:false;
	}
	function setListPreviewFull(_b){
		var s = (_b) ? "1" : "0";
		localStorage[LIST_PREVIEW_FULL] = s;
	}
	
	var LIST_PREVIEW_STATE = "JS_LIST_PREVIEW_STATE";
	function getListPreviewState(){
		if(localStorage[LIST_PREVIEW_STATE]){
			return localStorage[LIST_PREVIEW_STATE].split("_");
		} else{
			return ["33","1000"];
		}
	}
	function setListPreviewState(_n){
		localStorage[LIST_PREVIEW_STATE] = _n.join("_");
	}
	/* ---------- ---------- ---------- */
	
	//
	/*
	var PREVIEW_IS_LIVE = "JS_CMS_PREVIEW_IS_LIVE";
	function getSideViewIsOpen(){
		if(localStorage[PREVIEW_IS_LIVE]){
			return localStorage[PREVIEW_IS_LIVE];
		} else{
			return "1";
		}
	}
	function setSideViewIsOpen(_n){
		localStorage[PREVIEW_IS_LIVE] = _n;
	}
	*/
	
	/* ---------- ---------- ---------- */
	
	//サイドビューの表示・非表示
	var SIDEVIEW_IS_OPEN = "JS_CMS_SIDEVIEW_IS_OPEN";
	function getPreviewisLiveTab(){
		if(localStorage[SIDEVIEW_IS_OPEN]){
			return localStorage[SIDEVIEW_IS_OPEN];
		} else{
			return "0";
		}
	}
	function setPreviewisLiveTab(_n){
		localStorage[SIDEVIEW_IS_OPEN] = _n;
	}
	
	//サイドビューの表示・非表示
	var SIDEVIEW_IS_CHECK = "JS_CMS_SIDEVIEW_IS_CHECK";
	function getPreviewisLiveCheck(){
		if(localStorage[SIDEVIEW_IS_CHECK]){
			return localStorage[SIDEVIEW_IS_CHECK];
		} else{
			return "1";
		}
	}
	function setPreviewisLiveCheck(_n){
		localStorage[SIDEVIEW_IS_CHECK] = _n;
	}
	/* ---------- ---------- ---------- */
	
	//サイドビューの、開閉記録
	var SIDEVIEW_OPEN_LIST = "SIDEVIEW_OPEN_LIST";

	function getSideViewOpenList(){
		if(localStorage[SIDEVIEW_OPEN_LIST]){
			return JSON.parse(localStorage[SIDEVIEW_OPEN_LIST]);
		} else{
			return [false,true];
		}
	}
	function setSideViewOpenList(_param){
		localStorage[SIDEVIEW_OPEN_LIST] = JSON.stringify(_param);
	}
	
	/* ---------- ---------- ---------- */
	
	var CUSTOM_BG = ""
	function initCustomBG(){
		if(CUSTOM_BG == ""){
			CUSTOM_BG = "CUSTOM_BG_" + CMS_Path.SITE.ABS_PATH
		}
	}
	function getCustomBG(){
		initCustomBG();
		if(localStorage[CUSTOM_BG]){
			return localStorage[CUSTOM_BG];
		} else{
			return "";
		}
	}
	function setCustomBG(_n){
		initCustomBG();
		localStorage[CUSTOM_BG] = _n;
	}
	
	/* ---------- ---------- ---------- */
	
	var BACKUP_LIST = "BACKUP_LIST";

	function getBK(){
		if(localStorage[BACKUP_LIST]){
			return localStorage[BACKUP_LIST];
		} else{
			return "";
		}
	}
	function setBK(_param){
		localStorage[BACKUP_LIST] = _param;
	}
	
	/* ---------- ---------- ---------- */
	//編集幅指定(width:720px)
	// var EIDT_WIDE = "EIDT_WIDE";

	// function getEditWide(){
	// 	if(localStorage[EIDT_WIDE]){
	// 		return JSON.parse(localStorage[EIDT_WIDE]);
	// 	} else{
	// 		return "720";
	// 	}
	// }
	// function setEditWide(_param){
	// 	localStorage[EIDT_WIDE] = JSON.stringify(_param);
	// }
	/* ---------- ---------- ---------- */
	
	return { 
		getPageParam:getPageParam,
		setPageParam:setPageParam,
		
		getIsPreviewScNO:getIsPreviewScNO,
		setIsPreviewScNO:setIsPreviewScNO,
		
		getZoomVal:getZoomVal,
		setZoomVal:setZoomVal,
		
		getSideMenuY:getSideMenuY,
		setSideMenuY:setSideMenuY,
		
		getPreviewVisible:getPreviewVisible,
		setPreviewVisible:setPreviewVisible,
		
		getPreviewState:getPreviewState,
		setPreviewState:setPreviewState,
		
		getListPreviewFull:getListPreviewFull,
		setListPreviewFull:setListPreviewFull,
		getListPreviewState:getListPreviewState,
		setListPreviewState:setListPreviewState,
		
		getPreviewisLiveTab:getPreviewisLiveTab,
		setPreviewisLiveTab:setPreviewisLiveTab,
		getPreviewisLiveCheck:getPreviewisLiveCheck,
		setPreviewisLiveCheck:setPreviewisLiveCheck,
		
		getSideViewOpenList:getSideViewOpenList,
		setSideViewOpenList:setSideViewOpenList,
		
		getCustomBG:getCustomBG,
		setCustomBG:setCustomBG,
		
		getBK:getBK,
		setBK:setBK
		
		// getEditWide:getEditWide,
		// setEditWide:setEditWide
	}
})();
/**
 * TemplateFileEdi..で使用するIOクラス
 */

Storage.SimpleIO 	 = (function(_filename,_dir) {

	/* ---------- ---------- ---------- */
	var c = function(_filename,_dir) {
	 this.init(_filename,_dir);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.filename;
	p.text;
	
	p.init = function(_filename,_dir) {
		this.dir 	 = _dir;
		// if(this.dir.indexOf("/") == -1) this.dir = this.dir+  "/";
		this.filename  = _filename;
		this.text 	 = "";
	}
	p.reload = function(_callback) { 
		this.load(_callback);
	}
	p.load = function(_callback) { 
		var this_ = this;
		var path = this.dir+"/"+ this.filename;
		var url = CMS_Path.PHP_FILEPATH + '?action=read&path=' + path;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'text',
			success			: function(data) {this_.text = data;_callback(data)},
			error			: function(data) { 
				CMS_ErrorView.stageIn("NET",url,null,data);
				// alert("ファイルのロードに失敗しました。");
			}
		});
		if(isLog)console.log( ["Storage.SimpleIO.load ", path]);
	}
	p.preview = function(_callback) { }
	p.save = function(_t,_callback) { 
		
		var param ={}
			param.action  = "write";
			param.dir_name  = this.dir;
			param.file_name = this.filename;
			param.text 	 = _t;
		var url = CMS_Path.PHP_FILEPATH;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: url,
			data			: Storage.Util.escape_(param),
			dataType		: 'json',
			success			: function(data) {
				if(API_StatusCheck.check(data) == false) return;
				_callback(data)
			},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,param,data);
			}
		});
		if(isLog)console.log( ["Storage.SimpleIO.save ", param.file_name , param]);
	}
	return c;
})();




var API_StatusCheck = (function(){
	var view;
	var v = {};
	
	function openAlert(_s){
		if(CMS_AlertView){
			CMS_AlertView.stageIn("エラー",_s);
		} else{
			alert(_s);
		}
	}
	
	function check(data){
		if(data["status"] != undefined){
			if(data.status == -1) {
				openAlert("ログインしていません。再度、ログインしてください。");
				window.location.reload();
				return false;
			}
			if(data.status == 0){
				var b = true
				if(data["level"] != undefined){
					if(data.level == "0") b = false;
				}
				if(b){
					var mm = data.message
					if(data.message == CMS_E.DIR_ERROR) {
						mm = "";
						if(data["extra"] != undefined) mm += data.extra
						mm += "ディレクトリが存在しないか、書き込み権限がありません。"
					}
					openAlert("処理が正常に終了しませんでした。\n"+mm)
					return false;
				} else{
					return true;
				}
			}
			if(data.status == 1){
				return true;
			}
		}
		return true;
	}
	
	function checkWeak(data){
		if(data["status"] != undefined){
			if(data.status == -1) {
				openAlert("ログインしていません。再度、ログインしてください。");
				window.location.reload();
				return false;
			}
			if(data.status == 0){
				return false;
			}
			if(data.status == 1){
				return true;
			}
		}
		return true;
	}
	
	/**
	 * ファイル名のリネームや、削除時のチェック
	 * ファイルが存在しない場合があるので,0の場合もtrue
	*/
	/*
	function checkRename(data){
		if(data["status"] != undefined){
			if(data.status == -1) {
				openAlert("ログインしていません。再度、ログインしてください。");
				window.location.reload();
				return false;
			}
			if(data.status == 0){
				return true;
			}
			if(data.status == 1){
				return true;
			}
		}
		return true;
	}
	*/
	
	return {
		check: check,
		checkWeak: checkWeak
	}})();


var CMS_U = (function(){
	
	function defaultVal(_v,_def){
		var s = (_def != undefined) ? _def:"";
		if(_v != undefined){
			if(_v != ""){
				s = _v ;
			}
		}
		return s
	}
	window.defaultVal = defaultVal;
	
	function clone(obj) { 
	    if (null == obj || "object" != typeof obj) return obj;
	    var copy = obj.constructor(); 
	    for (var attr in obj) { 
	        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr]; 
	    } 
	    return copy; 
	}  
	window.clone = clone;
	
	function isFilledText(_s){
		var b = true;
		if(_s == "") b = false;
		if(_s == undefined) b = false;
		if(_s == null) b = false;
		if(_s == "<br>") b = false;
		if(_s == "</br>") b = false;
		return b;
	}
	window.isFilledText = isFilledText;
	
	/* ---------- ---------- ---------- */
	
	function getPublicList(_a){
		var a = [];
		if(_a){
			for (var i = 0; i < _a.length ; i++) {
				if(_a[i]["publicData"] == "1"){
					a.push(_a[i]);
				}
			}
		}
		return a;
	}
	function addString(_sp,_s){
		var b = true;
		if(_s === "") b = false;
		if(_s === undefined) b = false;
		if(_s === "undefined") b = false;
		if(_s === null) b = false;
		if(b){
			return _sp + _s;
		} else{
			return "";
		}
	}
	
	function roundText(_s ,_n) {
		_n = _n || 15;
		if(_s.length > _n) _s = _s.substr(0,_n) + "..."
		return _s;
	}
	
	/* ---------- ---------- ---------- */

	function getSplitTextAt(_s,_n,_split){
		if(!_split) _split = ",";
		if(!_s)return "";
		if(_s.charAt(0) == " ") _s = _s.substr(1,_s.length);
		if(_s.charAt(0) == " ") _s = _s.substr(1,_s.length);
		if(_s.charAt(0) == " ") _s = _s.substr(1,_s.length);
		if(_n == undefined )return _s;
		if(_s.indexOf(",") == 0) return _s;
		var a = _s.split(_split);
		if(a.length > _n){
			return a[_n]
		} else{
			return "";
		}
	}
	
	/* ---------- ---------- ---------- */
	//CMS_U.openURL_blank();
	function openURL_blank(_u,_t){
		var t = (_t) ? _t : _u ;
			t = t.split("/").join("");
			t = t.split(".").join("");
		if(t == "") t = "_index";
		window.open(_u,t);
	}
	
	/* ---------- ---------- ---------- */
	
	/**
	 * {id:"",val:""}の形式の配列２つをマージする
	 * */
	function meargeGrid(_g1,_g2){
		var g1 = JSON.parse(JSON.stringify(_g1));
		var g2 = JSON.parse(JSON.stringify(_g2));
		var g3 = []
		for (var i = 0; i <  g1.length ; i++) {
			if(g1[i].id != undefined){
				//
				var id_1 = g1[i].id.split(" ").join("")
				for (var ii = 0; ii < g2.length ; ii++) {
					if(g2[ii].id != undefined){
						var id_2 = g2[ii].id.split(" ").join("")
						if(id_1 == id_2){
							if(g2[ii].val != "") {
								g1[i].val = g2[ii].val;
							}
							g2[ii] = "";
						}
					}
				}
			}
		}
		for (var i = 0; i < g2.length ; i++) {
			if(g2[i] != ""){
				g1.push(g2[i])
			}
		}	
		return g1;
	}
	
	/* ---------- ---------- ---------- */

	return { 
		defaultVal:defaultVal,
		clone:clone,
		isFilledText:isFilledText,
		
		getPublicList:getPublicList,
		addString:addString,
		roundText:roundText,
		getSplitTextAt:getSplitTextAt,
		
		openURL_blank:openURL_blank,
		
		meargeGrid:meargeGrid
	 }
})();


var CMS_FormU 			 = (function(){
	var view;
	var v = {};

	function init(){
		$(function(){
			//入力フォームの拡大ボタンに対して、クリック処理をアサインする
				
			$(document).on('click','._input-with-btns ._edit',function(){
				var tar = $(this).parent().parent().find("textarea").eq(0);
				MiniEditer.stageIn(
					tar.val(),
					function(_s){
						tar.val(_s).keyup()
					},
					$(this).data("type")
				);
			});
			$(document).on('click','._input-with-btns ._edit_single',function(){
				var tar = $(this).parent().parent().find("input").eq(0);
				MiniEditer.stageIn(
					tar.val(),
					function(_s){
						tar.val(_s).keyup()
					},
					$(this).data("type")
				);
			});
		});
	}

	function createCheckBox(_v,_m,_ts,_n,_callback){
		
		var tag = "";
			tag += '<div class="_checkboxs">'
			tag += '<span class="_m" >'+_m+'</span>';
			tag += '<div class="_checkboxs_inner">'
			for (var i = 0; i < _ts.length ; i++) {
				tag += 	'<span class="_checkbox " data-no="'+i+'">'+_ts[i]+'</span>';
			}
			tag += '</div>';
			tag += '</div>';
		_v.append(tag);
		_v.find("._checkbox").click(function(){ 
			var n = $(this).data("no");
			_v.find("._checkbox").removeClass("_active");
			_v.find("._checkbox").eq(n).addClass("_active");
			_callback(n)
		});
		_v.find("._checkbox").eq(_n).addClass("_active");
	}

	function classSelect(_v,_n,_cs){
		for (var i = 0; i < _cs.length ; i++) {
			if(_cs[i] != ""){
				_v.removeClass(_cs[i])
			}
		}
		_v.addClass(_cs[_n])
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	function getCSS_Class(_type){
		var s = "";
		if(_type == "text") 	s = "";
		if(_type == "style") 	s = "_color-style";
		if(_type == "js") 		s = "_color-js";
		if(_type == "html") 	s = "_color-html";
		return s;
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */

	function getTextarea(_val,_type,_extra){
		if(!_type ) _type = "multi"
		var extra = (_extra) ? _extra : "";
		var tag = ""
			tag += '<div class="_input-with-btns _input-textarea">'
			tag += '	<textarea class="_textarea-scroll _color-'+_type+'"></textarea><br>'
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-pos="'+extra+'" data-type="textarea:'+_type+'">'+Dic.I.Edit+' 編集</span> '
			tag += '	</div>'
			tag += '</div>'
		var node = $(tag);
		if(_val) node.find("textarea").val(_val);
		return node;
	}
	return {
		init: init,
		createCheckBox: createCheckBox,
		classSelect: classSelect,
		getCSS_Class: getCSS_Class,
		getTextarea: getTextarea
	}
})();




var CMS_BlockAttrU = (function(){
	var view;
	var v = {};
	
	function getHTMLArrs(_attr) {
		var attr = clone(_attr);
		var s = " ";
		attr["class"] = defaultVal(attr["class"], " ");
		if (attr["style"]) {
			attr["style"] = attr["style"].split("\n").join(" ")
		}
		for (var n in attr) {
			var b = true;
			if (n == "link") b = false;
			if (n == "narrow") b = false;
			if (n == "hidePC") b = false;
			if (n == "hideMO") b = false;
			if (n == "css") b = false;
			if (n == "pubFileName") b = false;
			if (n == "embedName") b = false;
			if (n == "embedID") b = false;
			if (n == "attr") b = false;
			if (!attr[n]) b = false;
			if (b) s += n + '="' + attr[n] + '" ';
		}
		if (attr.hidePC == true) s = s.split('class="').join('class="cms-sp ');
		if (attr.hideMO == true) s = s.split('class="').join('class="cms-pc ');
		if (attr.attr) s += attr.attr;
		return s;
	}
	
	/* ---------- ---------- ---------- */

	function setAttr(_attr,_s,_v){
		_attr[_s] 	 = _v;
		_attr["class"] = clucuCss(_attr);
	}
	
	/* ---------- ---------- ---------- */

	function getStyle(_attr){
		var s = defaultVal(_attr["style"]);
		return s;
	}
	
	function getClass(_attr){
		var s = defaultVal(_attr["css"]);
		if( defaultVal(_attr["hide"] )) s+=" _hide-element";
		if( defaultVal(_attr["narrow"] )) s+=" _narrow-element";
		return s;
	}
	
	function clucuCss(_attr){
		var s  =""
		if(_attr["css"]) s += _attr["css"];
		if(_attr["hide"]) s += " _hide-element";
		if(_attr["narrow"]) s += " _narrow-element";
		return s;
	}
	
	/* ---------- ---------- ---------- */

	function isMarkAttr(_s){
		if(_s == "id") return true;
		if(_s == "pubFileName") return true;
		if(_s == "embedName") return true;
		if(_s == "embedID") return true;
		if(_s == "hide") return true;
		if(_s == "hidePC") return true;
		if(_s == "hideMO") return true;
		if(_s == "replaceID") return true;
		if(_s == "replaceTitle") return true;
		return false;
	}
	function getMarkTag(_attr,isInit){
		var _id  	= get_id(_attr);
		var _pub  	= get_pubFileName(_attr);
		var _embed1 = get_embedName(_attr);
		var _embed2 = get_embedID(_attr);
		
		var _hide 	= get_hide(_attr);
		var _hidePC = get_hidePC(_attr);
		var _hideMO = get_hideMO(_attr);
		
		var _replaceID = get_replaceID(_attr);
		var _replaceTitle = get_replacTitle(_attr);
		
		var s = "";
		if(_id) s += '<div class="_id">#'+_id+'</div>'
		if(_hide) s += '<div class="_pub">非公開</div>';
		if(_hidePC) s += '<div class="_pub">PC非表示</div>';
		if(_hideMO) s += '<div class="_pub">スマホ非表示</div>';
		
		if(_pub) {
			var u = CMS_Path.SITE.REL +_pub;
			s += '<div class="_pub">'
			s += '	ブロックを';
			s += '	<span class="_icon_dir_mini"></span>'
			s += '	<span class="_btn _btn_link" data-command="export_link" data-extra="'+u+'">' + _pub +" "+Dic.I.External +'</span>';
			s += '	として ... ';
			//inspect_export
			s += '	<span class="_btn _btn_fill" data-command="export">書出す <i class="fa fa-angle-right "></i> <i class="fa fa-file-text"></i></span>';
			s += '</div>'
		}
		if(_embed1 && _embed2) {
			var u = CMS_Path.SITE.REL +_embed1;
			s += '<div class="_embed">'
			s += '	ブロックを埋込み先 ';
			s += '	<span class="_icon_dir_mini"></span>'
			s += '	<span class="_btn _btn_link" data-command="export_link" data-extra="'+u+'">' + _embed1 +' '+Dic.I.External+' <small>&lt;'+ _embed2 + '&gt;</small></span>';
			s += '	へ ... ';
			//inspect_embed
			s += '	<span class="_btn _btn_fill" data-command="embed">埋込む <i class="fa fa-sign-in"></i></span>';
			s += '</div>'
		}
		//
		var tag = '';
			tag += '<div class="_left_area">' + s + '</div>'
		if(_replaceID){
			tag += '<div class="_right_area">'
			tag += '	<div class="_replace_area">'
			tag += '		<div class="_replace_id">{{'+_replaceID+'}}</div>'
			tag += '		<div class="_replace_title">'+_replaceTitle+'</div>'
			tag += '	</div>'
			tag += '</div>'
		}
		
		if(isInit) {
			tag = '<div class="_block_info">' + tag + '</div>'
		}
		return tag;
	}
	
	function getCommandTag(_type){
		if(_type == "tag.margin")return "";
		if(_type == "tag.anchor")return "";
		
		var icon = (function(_type){ 
		   var s = Dic.I.Edit;
			if(_type == "tag.img") s=  Dic.I.Grid;
			if(_type.indexOf("object.") == 0) s= Dic.I.Grid;
			return s;
		})(_type);
		
		var s = ""
			s += '<div class="_block_command">'
			// s += '	<div class="_text">操作ヒント &gt; 編集：Ctrl-Enter or ダブルクリック , 選択変更：[↑][↓] , 移動：ドラッグ</div>'
			s += '	<div class="_text">ヒント：ダブルクリックでも編集できます。右クリックでコンテクストメニューを表示します。</div>'
			s += '	<div class="_btn" data-command="openDetail"><span><span>'+icon+' 編集</span></span></div>'
			s += '</div>'
		return s;
	}

	/* ---------- ---------- ---------- */

	function get_style		(_attr)	{ return defaultVal(_attr["style"],""); }
	function get_css		(_attr)	{ return defaultVal(_attr["css"],""); }
	function get_class		(_attr)	{ return defaultVal(_attr["class"],""); }
	function get_id			(_attr)	{ return defaultVal(_attr["id"],""); }
	function get_attr		(_attr)	{ return defaultVal(_attr["attr"],""); }
	function get_preview	(_attr)	{ return defaultVal(_attr["preview"],""); }
	
	function get_narrow		(_attr)	{ return defaultVal(_attr["narrow"],false); }
	function get_hide		(_attr)	{ return defaultVal(_attr["hide"],false); }
	function get_hidePC		(_attr)	{ return defaultVal(_attr["hidePC"],false); }
	function get_hideMO		(_attr)	{ return defaultVal(_attr["hideMO"],false); }
	
	function get_pubFileName(_attr) { return defaultVal(_attr["pubFileName"] , "" ) }
	function get_embedName	(_attr) { return defaultVal(_attr["embedName"], "" ) }
	function get_embedID	(_attr) { return defaultVal(_attr["embedID"] , "" ) }
	function get_replaceID	(_attr) { return defaultVal(_attr["replaceID"] , "" ) }
	function get_replacTitle	(_attr) { return defaultVal(_attr["replaceTitle"] , "" ) }
		
	 return {
		getHTMLArrs: getHTMLArrs,
		setAttr:setAttr,
		getStyle:getStyle,
		getClass:getClass,
		clucuCss: clucuCss,
		isMarkAttr: isMarkAttr,
		getMarkTag: getMarkTag,
		getCommandTag: getCommandTag,
		//
		get_style		: get_style,
		get_css			: get_css,
		get_class		: get_class,
		get_id			: get_id,
		get_attr		: get_attr,
		get_preview		: get_preview,
		get_narrow		: get_narrow,
		get_hide		: get_hide,
		get_hidePC		: get_hidePC,
		get_hideMO		: get_hideMO,
		get_pubFileName	: get_pubFileName,
		get_embedName	: get_embedName,
		get_embedID		: get_embedID,
		get_replaceID	: get_replaceID,
		get_replacTitle	: get_replacTitle
		
	 }
})();

var CMS_AnchorU = (function(){

	function getInitData(){
		var o = {}
			o.href = '',
			o.target = '',
			o.text = 'ボタン名',
			o.class_ = 'cms-btn-text-box  cms-btn-size-m',
			o.image = '';
		return o;
	}
	function getInitData_Blank(){
		var o = {}
			o.href = '',
			o.target = '',
			o.text = '',
			o.class_ = '',
			o.image = '';
		return o;
	}
	function getInitDataS(){
		var o = {}
			o.href = '',
			o.target = ''
		return o;
	}

	function getViewTag(val,_isPub){
		if(_isPub == undefined) _isPub = true;
		var tag = '<b>未リンク</b>';
		if(val == "") return tag;
		if(val == undefined) return tag;
		if(val.href){
			tag = CMS_AnchorU.getAnchorTag(val,"",_isPub);
		}
		return tag;
	}
	/**
	 * htmlコード取得
	*/
	function getAnchorTag(_o,_attr,_isPub,_isSingleBtn){
		if(!_o)return "";
		if(_attr == undefined) _attr = "";
		if(_isPub == undefined) _isPub = true;
		if(_isSingleBtn == undefined) _isSingleBtn = false;
		var tag = ""
			var _url  = defaultVal(_o.href);
			var _tar  = defaultVal(_o.target);
			var _attrAll  = defaultVal(_o.attr);
			var _label = defaultVal(_o.text);
			var _class  = defaultVal(_o.class_);
			var _image  = defaultVal(_o.image);
			_image
			if(_url){
				if(_image.length > 0){
					tag = '<a href="{URL}" target="{TARGET}" class="{C}" {ATTR}><img src="{L}"></a>';
					tag = tag.split("{C}").join(_class);
					tag = tag.split("{URL}").join( CMS_Path.MEDIA.getAnchorPath(_url,_isPub));
					tag = tag.split("{TARGET}").join(_tar);
					tag = tag.split("{L}").join(CMS_Path.MEDIA.getImagePath(_image,_isPub));
					tag = tag.split("{ATTR}").join(_attr + " " + _attrAll);
				} else{
					if(! _label)_label = _url;
					tag = '<a href="{URL}" target="{TARGET}" class="{C}" {ATTR}>{L}</a>';
					tag = tag.split("{C}").join(_class);
					tag = tag.split("{URL}").join( CMS_Path.MEDIA.getAnchorPath(_url,_isPub));
					tag = tag.split("{TARGET}").join(_tar);
					tag = tag.split("{L}").join(_label);
					tag = tag.split("{ATTR}").join(_attr + " " + _attrAll);
				}
				tag = tag.split(' target=""').join("");
				tag = tag.split(' class=""').join("");
			} else{
				if(_isSingleBtn){
					tag = '<a href="#" class="cms-btn-text-box  cms-btn-size-m">リンク未設定</a>'
				} else{
					tag = ""
				}
			}
		return tag;
	}

	/**
	 * 画像にリンクが設定されてる場合
	 */
	function getWapperTag(_o,viewTag,_isPub){
		if(viewTag == undefined) viewTag = "";
		if(_isPub == undefined) _isPub = true;
		var tag = ""
		if(!_o) return viewTag;
			var _url  = defaultVal(_o.href);
			var _tar  = defaultVal(_o.target);
			var _attr  = defaultVal(_o.attr);
			if(_url){
				tag = '<a href="{URL}" target="{TARGET}" {ATTR}>{L}</a>';
				tag = tag.split("{URL}").join( CMS_Path.MEDIA.getAnchorPath(_url,_isPub));
				tag = tag.split("{TARGET}").join(_tar);
				tag = tag.split("{ATTR}").join(_attr);
				tag = tag.split("{L}").join(viewTag);
				tag = tag.split(' target=""').join("");
			} else{
				tag = viewTag
			}
		return tag;
	}
	/*
	画像ズームにチェックの場合
	*/
	function getZoomLink (_link,_img,_zoom){
		var o = { href:"",target:""}
		if(_link){
			o.href = (_link["href"]) ? _link["href"] :"";
			o.target = (_link["target"]) ? _link["target"] :"";
			o.attr = (_link["attr"]) ? _link["attr"] :"";
		}
		if(_zoom){
			if(DummyImageService.isMock(_img)){
			} else {
        if(typeof _img == "string"){
          o.href = _img;
        } else{
          if(_img.path) o.href = _img.path;
        }
				o.target = "innerWindow({})";
				o.attr = "";
			}
		}
		return o;
	}

	function defaultVal(_v,_def){
		var s = (_def != undefined) ? _def:"";
		if(_v != undefined){
			if(_v != ""){
				s = _v ;
			}
		}
		return s
	}

	return {
		getInitData:getInitData,
		getInitData_Blank:getInitData_Blank,
		getInitDataS:getInitDataS,

		getViewTag:getViewTag,
		getAnchorTag:getAnchorTag,
		getWapperTag:getWapperTag,
		getZoomLink:getZoomLink
	}
})();



var CMS_AnchorListU = (function(){

	function getViewTag(val,_isPub){
		if(_isPub == undefined) _isPub = true;
		var tag = '<b>リンク未設定</b>';
		if(val == "") return tag;
		if(val == undefined) return tag;
		if(val["list"] == undefined) return tag;
		
		var list = CMS_U.getPublicList(val.list.grid);
		var tag = "";
		if(list.length == 0) {
			tag += '<span class="_no-input-data">リストデータを入力...</span>'
		} else{
			tag += '<ul>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '<li>' +CMS_AnchorU.getAnchorTag(list[i].anchor,"",_isPub) + '</li>\n'
			}
			tag += '</ul>\n'
		}
		return tag;
	}

	return { 
		getViewTag:getViewTag
	}
})();

var CMS_SaveDateU 		 = (function(){
	function getDate(){
		return DateUtil.getFormattedDate(new Date(),"YYYY/MM/DD hh:mm:ss");
	}
	function getRelatedDate(_s,_current){
		if(!_s) return "--";
		if(_s == "-") return "--";
		var d = new Date(_s);
		
		var c = new Date();
		if(_current != undefined)c = _current;
		var sec = (c.getTime()- d.getTime()) / (1000);
		var min = sec/60;
		var hour = min/60;
		var day = hour/24;
		var ss = "";
		if(sec < 20){
			ss = '<span class="_time-sec10">' + Math.floor(sec) +"秒前" + '</span>';
		} else if(sec < 60){
			ss = '<span class="_time-sec">' +Math.floor(sec) +"秒前" + '</span>'
		} else if(min < 60){
			ss = '<span class="_time-min">' +Math.floor(min) +"分前" + '</span>';
		} else if(hour < 24){
			ss = '<span class="_time-hour">' +Math.floor(hour) +"時間前" + '</span>';
		} else if(hour < 24*7){
			ss = '<span class="_time-day7">' +Math.floor(day) +"日前" + '</span>';
		} else if(hour < 24*30){
			ss = '<span class="_time-day30">' +Math.floor(day) +"日前" + '</span>';
		} else{
			ss = '<span class="_time-day">' +Math.floor(day) +"日前" + '</span>';
		}
		return ss;
	}
	
	return { 
		getDate:getDate,
		getRelatedDate:getRelatedDate
	}
})();


var CMS_PateStateU 		 = (function(){
	var def = "0,0,0";
	function getState(_s){
		if(_s == undefined) _s = def;
		if(_s == "") _s = def;
		return _s.split(",");
	}
	function getPubClass(_s){
		if(_s == undefined) _s = def;
		if(_s == "") _s = def;
		var ss = _s.split(",");
		return (ss[0] != "1") ? "" : '_isHide';
	}
	function getStateText(_s){
		if(_s == undefined) _s = def;
		if(_s == "") _s = def;
		var ss = _s.split(",");
		var t = "";
			t +=(ss[0] != "1") ? "" : '<b style="color:#999">(非公開)</b>';
			t += (ss[1] != "1") ? "" : '<b style="color:#999">(メニュ非表示)</b>';
			t += (ss[2] != "1") ? "" : '<b style="color:#999">(工事中)</b>';
		return t;
	}
	function createState(_a){
		return _a.join(",")
	}
	
	var defCMS = "0,0,0";
	function getCMSClass(_s){
		if(_s == undefined) _s = defCMS;
		if(_s == "") _s = defCMS;
		var ss = _s.split(",");
		var c = ""
			c += (ss[0] != "1") ? "" : '_fileEM ';
		return c;
	}
	
	return { 
		getState:getState,
		getPubClass:getPubClass,
		getStateText:getStateText,
		createState:createState,
		getCMSClass:getCMSClass
	}
})();

var CMS_TemplateU = (function(){
	
	function getTemplateHTML(_s){
		if(!_s)return ["","",""]
		var a = _s.split("{REPEAT_START}")
		if (a.length == 1) return ["", "", ""];
		var b = a[1].split("{REPEAT_END}")
		if (b.length == 1) return ["", "", ""];
		return [a[0], b[0], b[1]];
	}
	
	/* ---------- ---------- ---------- */

	function doTemplate(_param){
		var list = _param.list;
		var leng = _param.leng;
		var isPub = _param.isPub;
		var isEdit = _param.isEdit;
		
		var id,htmls,css;
		try{
			id = _param.id;
			htmls = CMS_TemplateU.getTemplateHTML(_param.htmls.split("{ID}").join(id) );
			css = _param.css.split("{ID}").join(id);
		}catch( e ){}
	
		var tag = "";
		
		//CSS
		if(isEdit){
			tag += getDefCSSTag();
		}
			tag += getStyleTag(css);
		
		//HTML or JS
		if(isJS(_param.htmls)){
			//JS
			try{
				tag += eval(_param.htmls)(list,id,isPub);
			}catch( e ){
				return "JavaScriptの構文エラーです。"
			}
		} else {
			//HTML
			
			tag += htmls[0]+"\n"
			for (var i = 0; i < leng ; i++) {
				var tempText = htmls[1];
				for (var ii = 0; ii < 10 ; ii++) {
					var data = CMS_TagU.t_2_tag(list[i]["a"+ii]);
					if(!data) data = "";
					tempText = tempText.split("{"+ii+"}").join(data);
				}
				if(isEdit){
					tempText = tempText.split(CONST.SITE_DIR).join("");
				}
				if(list[i]["anchor"]){
					tempText = replaceLinkTag(list[i].anchor,tempText);
				}
				tempText = removeLinkTag(tempText);
				var img = list[i]["image"];
				var imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: isPub,
					// width	: "100%",
					width	: img.width,//20161220
					ratio	: img.ratio,
					alt		: "",
					attr	: ""
				});
				tempText = tempText.split("{IMG}").join(imgTag);
				tag += tempText;
			}
			tag += htmls[2]+"\n";
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	function getDefCSSTag(){
		var tag = ""
		for (var i = 0; i <  ASSET_CSS_DIRS.length ; i++) {
			tag +=('<link rel="stylesheet" class="asset" type="text/css" href="'+ ASSET_CSS_DIRS[i]+'" />\n');
		}
		return tag;
	}
	function getStyleTag(_css){
		var tag = "";
		if(_css != ""){
			tag += '<style type="text/css">\n'
			tag += _css + "\n";
			tag += '</style>\n\n';
		}
		return tag;
	}
	
	function replaceLinkTag(anchor,s){
		if(anchor){
			if(isFilledText(anchor)){
				s = s.split("{LINK}").join(CMS_TagU.getLinkTag_data(anchor));
				//
				if(isFilledText(anchor.href)){
					s = s.split("{LINK.href}").join(CMS_Path.MEDIA.getAnchorPath(anchor.href))
				}
				if(isFilledText(anchor.target)){
					s = s.split("{LINK.target}").join(anchor.target)
				} 
			}
		}
		return s;
	}
	function removeLinkTag(s){
		s = s.split("{LINK}").join("");
		s = s.split("{LINK.href}").join("");
		s = s.split("{LINK.target}").join("");
		return s;
	}

	function isJS(_s){
		if(_s.indexOf("(function") == 0){
			return true;
		} else{
			return false;
		}
		// if(_param.htmls.indexOf("(function") == 0){
	}
	return {
		getTemplateHTML:getTemplateHTML,
		doTemplate:doTemplate,
		isJS:isJS
	}
})();

if(window._cms == undefined) window._cms = {}
window._cms.getImageTag = function(_data,_isPub){
	var img = _data.image
	return CMS_ImgBlockU.getImageTag({
		path	: img.path,
		isPub	: _isPub,
		width	: "100%",
		ratio	: img.ratio,
		alt		: "",
		attr	: ""
	});
}



var CMS_TagU = (function(){
		
	function hasLink(_o){
		if(_o == undefined) return false;
		if(isFilledText(_o.href)){
			return true;
		} else{
			return false;
		}
	}
	
	/**
	 * リンクテキスト変換
	 */
	function getLinkTag(_o){
		if(_o == undefined) return "";
		var tag = ""
			tag += ' href="'+CMS_Path.MEDIA.getAnchorPath(_o.href)+'" ';
			if(isFilledText(_o.target)){
			tag += ' target="'+_o.target+'" ';
			}
		return tag;
	}
	
	/**
	 * リンクテキスト変換（繰り返しオブジェクト用）
	 */
	function getLinkTag_data(o){
		if(!o)return "";
		var href  = o.href
		var target  = o.target
		var tag = "";
		if(isFilledText(href)){
			tag += '<a'
			tag += ' href="'+ CMS_Path.MEDIA.getAnchorPath(href)+'" ';
			if(isFilledText(target)){
				tag += ' target="'+target+'" ';
			}
			tag += '>詳細へ</a>'
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	/**
	 * 繰り返しオブジェクトでつかってる
	 */
	function convertUniqueCSS(_css,id){
		if (_css == undefined) return ""; 
		_css = _css.split("\n").join("");
		_css = _css.split("	").join(" ");
		var a = _css.split("}");
		var baseC = (id == null || id == "") ? "	" : "	." + id;
		for (var i = 0; i < a.length -1; i++) {
			a[i] = baseC + " " + a[i]+ "}"
		}
		return a.join("\n");
	}
	
	/**
	* object.tableで、[[colspan=2]]みたいにする
	*/
	function getCellAttr(_s){
		if (_s == undefined) return ""; 
		var ms = _s.match(/\[\[.*\]\]/g);
		var att = "";
		if(ms){
			 att = ms[0];
			 att = att.split('[[').join('');
			 att = att.split(']]').join('');
		}
		return att;
	}
	function deleteCellAttr(_s){
		if (_s == undefined) return ""; 
		return _s.replace(/\[\[.*\]\]/g,'');
	}
	
	window.NOT_BR = '{_NOT_BR_}';
	function convertCellBR(_s){
		if (_s == undefined) return "";
		_s = String(_s);
		if(_s.indexOf(NOT_BR) != -1) {
			_s = _s.split("\n").join("");
		} else{
			_s = _s.split("\n").join("<br>")
		}
		_s = deleteCellBR(_s);
		return _s;
	}
	function deleteCellBR(_s){
		if (_s == undefined) return ""; 
		return _s.split(NOT_BR).join("");
	}
	function hasCellBR(_s){
		if(_s.indexOf(NOT_BR) != -1) {
			return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */

	function treatTag(_s){
	 	return _s.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'');
	}
	function t_2_tag(_s){
		if (_s == undefined) return ""; 
		if (_s == "") return ""; 
		if( typeof(_s) != "string" ) return _s;
		
		var t = _s;
		// t = t.split("&amp;").join("&");
		// t = t.split("&lt;").join("<");
		// t = t.split("&gt;").join(">");
		t = convertCellBR(t);
		return t;
	}

	function tag_2_t(_s){
		if (_s == undefined) return ""; 
		var t = _s;
		t = t.split("&").join("&amp;");
		t = t.split("<").join("&lt;");
		t = t.split(">").join("&gt;");
		return t;
	}
			
	
	return {
		getLinkTag: getLinkTag,
		getLinkTag_data: getLinkTag_data,
		hasLink: hasLink,
		
		t_2_tag: t_2_tag,
		tag_2_t: tag_2_t,
		convertUniqueCSS: convertUniqueCSS,
		getCellAttr: getCellAttr,
		deleteCellAttr: deleteCellAttr,
		
		convertCellBR: convertCellBR,
		deleteCellBR: deleteCellBR,
		hasCellBR: hasCellBR,
		
		treatTag: treatTag
	}
})();

var CMS_ImgBlockU = (function(){
	
	function attrInit(_arrt){
		if(_arrt ==undefined) _arrt = "";
		if(_arrt.indexOf('class="') == -1) _arrt += ' class=""'
		if(_arrt.indexOf('style="') == -1) _arrt += ' style=""'
		return _arrt;
	}
	function getCaption(_s){
		var s = ""
		if ( _s){
			s = '<div class="caption">' + _s + '</div>\n';
		}
		return s;
	}

	/* ---------- ---------- ---------- */
	//コンテナブロックのみで利用。dataには入れれないんので、extraに入れる
	
	function getBgStyle(_extra,_isPub){
		if(!_extra) _extra = {}
		if(!_extra.bg) _extra.bg = {};
		if(!_extra.bg.img) _extra.bg.img = "";
		if(!_extra.bg.color) _extra.bg.color = "";
		if(!_extra.bg.use) _extra.bg.use = false;
		if(_extra.bg.img && _extra.bg.use){
			var p = {
				path: _extra.bg.img,
				isPub: _isPub
			}
			return getBgStyleCore(p);
		}
		return "";
	}
	function getBgStyleCore(_param){
	    var defaults={ path:"", isPub:false }
	    var param = $.extend(defaults, _param);
		var imgPath = CMS_Path.MEDIA.getImagePath( param.path , param.isPub );
		var sts = []
			sts.push("background-image: url("+imgPath+");");
			sts.push("background-position: center center;");
			sts.push("background-size:cover;");
		return sts.join("");
	}

	/* ---------- ---------- ---------- */

	function getSimpleImageTag(_param){
		var image = _param.image;
		var isPub = _param.isPub;
		var width = _param.width;
		if(! image )return "";
		return CMS_ImgBlockU.getImageTag({
			path	: image.path,
			isPub	: isPub,
			width	: (width) ? "100%" : image.width ,
			ratio	: image.ratio
		});
	}
	
	/* ---------- ---------- ---------- */

	function getImageTag(_param){
	    var defaults={
	        attr:'',
			path:"",
			isPub:false,
			width:"",
			ratio:"",
			alt:""
	    }
	    var param = $.extend(defaults, _param);
	    var attr = param.attr;
	    	if(attr.indexOf('class="') == -1) attr += ' class=""'
	    	if(attr.indexOf('style="') == -1) attr += ' style=""'
	    	if(attr.indexOf('alt="') == -1)  attr += ' alt=""'
	    param.attr = attr;
	    
	    var tag =""
		if(typeof param.path == "string"){
			tag += _getImageTag2_simple(param);
		} else{
			tag += _getImageTag2_layout(param);
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	function _getImageTag2_simple(param){
	    if(param.alt){
	    	param.attr = param.attr.split('alt="').join('alt="' + param.alt);	
	    }
		if(DummyImageService.isMock(param.path)){
			if(param.isPub){
				param.attr = param.attr.split('class="').join('class="cms_mock_image ')
				param.attr += ' data-src="'+param.path+'"'
			}
		}
		if(param.ratio){
			if(! param.width) param.width = "100%";
		}
		if(param.width){
			param.attr = param.attr.split('style="').join('style="width:' + param.width + ';');
		}
		var tag = "";
		var imgPath = CMS_Path.MEDIA.getImagePath( param.path , param.isPub );
		
		if(param.ratio){
			//背景画像
			var isPubMock = false;
			if(param.isPub){
				if(DummyImageService.isMock(param.path)){
					imgPath = DummyImageService.getImage(param.path);
					isPubMock = true;
				}
			}
			if(isPubMock){
				param.attr = param.attr.split('style="').join('data-src="'+param.path+'" style="');
			} else {
				param.attr = param.attr.split('style="').join('style="background:url(' + imgPath + ') center center;background-size: cover;');
			}
			tag += '<div ' + param.attr + '>\n';
			tag += '	<div style="padding-top:'+ getRatio(param.ratio) + '%"></div>\n';
			tag += '</div>\n';
		} else {
			//IMGタグ
			tag += '<img src="' + imgPath + '" ' + param.attr + ' >';
		}
		return  tag;
	}
	
	var trans = '-ms-transform:translate(0,-50%);-webkit-transform:translate(0,-50%);transform:translate(0,-50%);'
	
	/* ---------- ---------- ---------- */

	function _getImageTag2_layout(param){
		param.path = ImageMapExport.treatParam(param.path);
		param.attr = param.attr.split('alt=""').join('');
	    
		var tag = "";
		if(param.path.list.length == 0){
			var rect = param.path.canvas;
			var cs = ""
				cs += "width:"+ ((rect.width) ? rect.width+'px': '300px') +';';
				cs += "height:"+ ((rect.height) ? rect.height+'px'  : '200') +';';
				cs += "background:"+ ((rect.background) ? rect.background : "")+';';
			tag += '<div style="border:solid 1px #eee;"><div style="'+cs+'">'
			tag += '</div></div>'
		} else{
			if(param.ratio){
		    	tag += '<div style="position:relative;overflow:hidden;width:'+param.width+'">\n';
				tag += '	<div style="padding-top:'+ getRatio(param.ratio) + '%"></div>\n';
				tag += '	<div style="position:absolute;top:50%;left:0;width:100%;height:100%;">\n';
				tag += '		<div style="'+trans+'">\n';
				tag += 			ImageMapExport.getHTML( param.path , param.width,param.isPub );
				tag += '		</div>\n';
				tag += '	</div>\n';
				tag += '</div>\n';
			} else{
				tag = ImageMapExport.getHTML( param.path , param.width,param.isPub );
			}
		}
		return  tag;
	}
	
	/* ---------- ---------- ---------- */

	function getRatio(_r){
		var ratio;
		if(_r){
			if(_r.indexOf(":") != -1){
				var a = _r.split(":");
				ratio = a[1]/a[0] *100;
				ratio = treat(ratio);
			}
		}
		return ratio;
	}
	function treat(_n) {
		return Math.round(_n * 100) / 100;
	}
	
	return { 
		attrInit : attrInit,
		getCaption : getCaption,
		getBgStyle : getBgStyle,
		getSimpleImageTag : getSimpleImageTag,
		getImageTag : getImageTag
	}
})();




var CodeMirrorU = (function(){
	//
	function getColorType(_ex){
	    if(_ex == "js")  return "_editor-js";
	    if(_ex == "json")  return "_editor-js";
	    if(_ex == "css")  return "_editor-style";
	    if(_ex == "class")  return "_editor-style";
	    if(_ex == "style")  return "_editor-style";
	    if(_ex == "single-class")  return "_editor-style";
	    if(_ex == "html")  return "_editor-html";
	    if(_ex == "htm")  return "_editor-html";
	    return "_editor-text";
	}
	function getMode(_ex){
	    if(_ex == "js")  return "javascript";
	    if(_ex == "style")  return "css";
	    if(_ex == "css")  return "css";
	    if(_ex == "class")  return "css";
	    // if(_ex == "html")  return "htmlmixed";
	    // if(_ex == "htm")  return "htmlmixed";
	    // if(_ex == "p")  return "htmlmixed";
	    if(_ex == "markdown") s = "markdown";
	    if(_ex == "php")  return "php";
	    return "htmlmixed";
	}
	
	/* ---------- ---------- ---------- */

	function _getEditor(_textarea,_ex,_wap){
		var e = CodeMirror.fromTextArea(_textarea, {
		    mode: getMode(_ex),
			lineNumbers: true,
			lineWrapping: _wap,
			foldGutter: true,
			gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
			highlightSelectionMatches: {showToken: /\w/},
			autoCloseBrackets: true,
			indentWithTabs: true
		});
		e.foldCode(CodeMirror.Pos(0,0));
		return e;
	}
	function createSettingEditor(_textarea,_ex,_wap){
		var e = _getEditor(_textarea,_ex,_wap);
			e.setOption("theme", "zenburn");
		return e;
	}
	function createEditor(_textarea,_ex,_wap){
		var e = _getEditor(_textarea,_ex,_wap);
		// var theme = (function(_ex){
		//     if(_ex == "js")  return "zenburn";
		//     if(_ex == "json")  return "zenburn";
		//     return "";
		// })(_ex);
		return e;
		
	}
 return {
	getColorType:getColorType, 
	createSettingEditor:createSettingEditor, 
	createEditor:createEditor 
}
})();



var FileU = (function() {

	function formatFilesize(_s) {
		var s = "";
		var nn =1000
		var sizeKB = _s / nn;
		if (parseInt(sizeKB) > nn) {
			var sizeMB = sizeKB / nn;
			s = "<b>" + sizeMB.toFixed(1) + " MB</b>" ;
		} else {
			s = sizeKB.toFixed(1) + " KB";
		}
		return s;
	}
	
	function getFileName(_s){
		if(_s.indexOf(".") == -1)return _s;
		var ss = _s.split(".")
			ss.pop()
		return ss.join(".")
	}
	function getExtention(_s){
		if(_s == null) return "";
		var ss = _s.split(".");
		if(ss.length == 1)return "";
		var ex = ss[ss.length-1];
		return ex.toLowerCase();
	}

	function isImageFile(_s){
		var ex = getExtention(_s.toLowerCase());
		if(ex == "gif") return true;
		if(ex == "jpg") return true;
		if(ex == "jpeg") return true;
		if(ex == "png") return true;
		if(ex == "svg") return true;
		return false;
	}
	//
	function isEditableFile(_s){
		var ex = getExtention(_s.toLowerCase());
		if(ex == "html") return true;
		if(ex == "htm") return true;
		if(ex == "js") return true;
		if(ex == "json") return true;
		if(ex == "css") return true;
		if(ex == "txt") return true;
		if(ex == "md") return true;
		if(ex == "php") return true;
		
		if(ex == "shtml") return true;
		if(ex == "xhtml") return true;
		if(ex == "xml") return true;
		if(ex == "rss") return true;
		
		if(ex == "pl") return true;
		if(ex == "asp") return true;
		if(ex == "cgi") return true;
		if(ex == "log") return true;
		return false;
	}
	function isPreviewableFile(_s){
		var ex = getExtention(_s.toLowerCase());
		if(ex == "html") return true;
		if(ex == "htm") return true;
		if(ex == "pdf") return true;
		if(ex == "txt") return true;
		if(ex == "js") return true;
		if(ex == "css") return true;
		return false;
	}
	return {
		formatFilesize: formatFilesize,
		getFileName:getFileName,
		getExtention:getExtention,
		isImageFile:isImageFile,
		isEditableFile:isEditableFile,
		isPreviewableFile:isPreviewableFile
	}
})();


var URL_U = (function(){
	
	function trimSS(_u){
		if(!_u)return "";
		_u = _u.split("///////").join("/");
		_u = _u.split("/////").join("/");
		_u = _u.split("///").join("/");
		_u = _u.split("//").join("/");
		return _u
	}
	function treatURL(_u){
		if(isMailTo(_u))return _u;
		if(isFullPath(_u)){
			var sep = "://"
			var s = _u.split(sep);
			_u = s[0] + sep + trimSS(s[1])
		} else{
			_u = trimSS(_u);
		}
		return _u;
	}
	
	function treatDirName(_dir){
		if(_dir == undefined) return ""
		if(_dir == "") return ""
		if(_dir == "/") return "/";
		if(_dir.indexOf("//") != -1){
			_dir = trimSS(_dir);
		}
		if(_dir.indexOf("../") == 0 ){
			//
		} else{
			if(_dir.charAt(0) != "/") _dir = "/" + _dir
		}
		if(_dir.charAt(_dir.length-1) != "/") _dir = _dir + "/"
		return _dir;
	}
	
	function isMailTo (_u){
		if(_u.indexOf("mailto:") == 0) return true;
		return false;
	}
	function isFullPath (_u){
		if(_u.indexOf("http://") == 0) return true;
		if(_u.indexOf("https://") == 0) return true;
		if(_u.indexOf("mailto:") == 0) return true;
		if(_u.indexOf("javascript:") == 0) return true;
		return false;
	}
	function isTextFile(_s){
		if(_s == null) return false;
		var b = false;
		var ext = getExtention(_s)
		if(ext == "") b = true;
		if(ext == "html") b = true;
		if(ext == "htm") b = true;
		if(ext == "css") b = true;
		if(ext == "js") b = true;
		if(ext == "json") b = true;
		if(ext == "xml") b = true;
		if(ext == "csv") b = true;
		if(ext == "tsv") b = true;
		if(ext == "as") b = true;
		if(ext == "php") b = true;
		return b;
	}
	function getCurrentDir(_s,_deep){
		if(_deep == undefined) _deep = 1;
		if(_deep == 0) return "/"
		_s = _s.split("#")[0];
		var ss = _s.split("/");
		
		var a = []
		for (var i = 0; i < _deep ; i++) {
			a.push( ss[ss.length - (2 + i)])
		}
		return "/" + a.reverse().join("/")
	}
	function getFileID(_s){
		var s = getFileName(_s)
		return s.split(".")[0]
	}
	function getFileName(_s){
		var ss = _s.split("/")
		var fn = ss[ss.length-1]
			fn = fn.split("#")[0]
			fn = fn.split("?")[0]
		return fn
		
		//http://192.168.1.23:1000/release/_cms/index.html
	}
	function getExtention(_s){
		if(_s == null)return "";
		if(typeof _s == "number") _s = String(_s);
		var p1 = _s.split("#")[0];
		var p2 = p1.split("?")[0];
		var ss = p2.split(".");
		if(ss.length == 1)return "";
		var ex = ss[ss.length-1];
		if(ex.indexOf("/") != -1) return "";
		return ex.toLowerCase();
	}
	function getURLParam(_s){
		if(_s ==null)return {};
		var url = _s;
		var p1 = url.split("#")[0];
		var p2 = p1.split("?")[1];
		if(p2.length == 0) return;
		var ps = p2.split("&");
		var o = {}
		for (var i = 0; i < ps.length ; i++) {
			var s = ps[i].split("=")
			o[s[0]] = s[1]
		}
		return o
	}
	function getBaseDir(_s){
		_s = _s.split("?")[0];
		var a = _s.split("/");
		var u = "";
		for (var i = 0; i < a.length -1 ; i++) {
			u += a[i] + "/"
		}
		return u
	}
	
	var protcolList = ["http://","https://","//"];
	//現在のHTMLの絶対パス、相対パスのCSSなどのファイルから、
	//絶対パスを生成する。
	function getDomain(_s){
		if(_s ==null)return "";
		var out = ""
		if(_s ==null) return out;
		for (var i = 0; i < protcolList.length ; i++) {
			var ss = protcolList[i]
			if(_s.substr(0, ss.length) == ss){
				var a = _s.split(ss);
				var a = a[1].split("/");
				out += ss + a[0] + "/";
			}
		}
		return out;
	}
	function getDomain_and_dir(_s){
		if(_s ==null)return "";
		var out = "";
		_s = _s.split("?")[0]
		var a = _s.split("/");
		if(a.length < 4) return _s;
		for (var i = 0; i < a.length-1 ; i++) {
			out += a[i] + "/"
		}
		return out;
	}
	function isSameDomain(_s,_s2){
		if(_s ==null)return false;
		if(_s2 ==null)return false;
		var s = getDomain(_s);
		var s2 = getDomain(_s2);
		return (s == s2);
	}
	function isDomain(_s){
		if(_s == null) return false;
		var b = false;
		_s = _s.split(" ").join("")
		_s = _s.split("	").join("")
		if(_s == "") return false;
		if(_s.substr(0, 5) == "http:") b = true;
		if(_s.substr(0, 6) == "https:") b = true;
		if(_s.substr(0, 2) == "//") b = true;
		return b
	}
	//
	function joinURL(_s,_s2){
		if(_s ==null)return "";
		if(_s2 ==null)return "";
		if(! isDomain(_s)) return _s2;
		if(isDomain(_s2)) return _s2;
	
		var a = _s2.split("../");
		
		var ss =_s.split("/");
		var u = ""
		var leng = ss.length - a.length
		for (var i = 0; i < leng ; i++) {
			u += ss[i] + "/"
		}
		var g = _s2.split("../").join("");
			g = g.split("./").join("");
		return treatURL(u + g);
	}
	function trimDomain(_s){
		if(_s ==null)return "";
		var d = getDomain(_s);
		return _s.split(d).join("")
	}
	function getRelativePath(_s,_s2){
		if(_s == null)return "";
		if(_s2 == null)return "";
		var out = "";
		if(! isSameDomain(_s,_s2)) return "";
		_s = trimDomain(_s);
		_s2 = trimDomain(_s2);
		var g = _s.split("?")[0].split("/");
		var ps = "";
		for (var i = 0; i < g.length-1 ; i++) {
			if(g[i] != ""){
				ps += "../";
			}
		}
		return ps + _s2;
	}
	//
	function getHash(){
		var path = window.location.hash;
			path = path.split("#").join("");
			path = path.split("*").join("");
		return path;
	}
	//URL_U.getParentDir
	function getParentDir(_dir){
		if(_dir.charAt(_dir.length-1) != "/"){
			_dir = _dir + "/";
		}
		var a = _dir.split("/");
		var s = []
		for (var i = 0; i < a.length - 2; i++) {
			s.push(a[i])
		}
		return s.join("/") + "/";
	}
	/*
	equal(getParentDir("/aa"),"/");
	equal(getParentDir("/aa/bb"),"/aa/");
	equal(getParentDir("/aa/"),"/");
	equal(getParentDir("/aa/bb/"),"/aa/");
	equal(getParentDir("../"),"/");
	equal(getParentDir("../aa/"),"../");
	equal(getParentDir("../aa/bb/"),"../aa/");
	*/
	
	function getPageObject(_s){
		var o = {}
		o.dir = getBaseDir(_s);
		o.id = getFileName(_s);
		return o;
	}


	return { 
		trimSS:trimSS,
		treatURL:treatURL,
		isMailTo:isMailTo,
		isFullPath:isFullPath ,
		treatDirName:treatDirName ,
		
		isTextFile:isTextFile,
		getCurrentDir:getCurrentDir,
		getFileID:getFileID,
		getFileName:getFileName,
		getExtention:getExtention,
		getURLParam:getURLParam,
		getDomain:getDomain,
		getDomain_and_dir:getDomain_and_dir,
		isSameDomain:isSameDomain,
		getBaseDir:getBaseDir,
		joinURL:joinURL,
		getRelativePath:getRelativePath,
		getHash:getHash,
		getParentDir:getParentDir,
		getPageObject:getPageObject
	 }
})();



var Treatment = (function() {
	function toValue(_n, _s) {
		if (_n == undefined) return _s;
		if (_n == "") return _s;
		return _n;
	}
	return {
		toValue: toValue
	}
})();
var DateUtil 			 = (function(){
	/*
		DateUtil.getFormattedDate(new Date(),"YYYYMMDD_hhmmss");
	*/
	var lang = 1;
	var week = [
		["日","月","火","水","木","金","土"],
		["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
		["Sun.","Mon.","Tue.","Wed.","Thu.","Fri.","Sat."]
	]
	var month = [
		["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月",],
		["January","February","March","April","May","June","July","August","September","October","November","December"],
		["Jan.","Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.","Sep.","Oct.","Nov.","Dec."]
	]
	//var charas = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	var charas = "0123456789abcdefghijklmnopqrstuvwxyz"

	function getFormattedDate(_d,_format){
		var t = _format;
		var d = _d;
		//
		t = t.split("YYYY").join(d.getFullYear())
		t = t.split("MM").join(formatDigit(d.getMonth()+1,2));
		t = t.split("DD").join(formatDigit(d.getDate(),2));
		//
		t = t.split("hh").join(formatDigit(d.getHours(),2));
		t = t.split("mm").join(formatDigit(d.getMinutes(),2));
		t = t.split("ss").join(formatDigit(d.getSeconds(),2));
		t = t.split("ms").join(formatDigit(d.getMilliseconds(),3));
		t = t.split("month").join(month[lang][d.getMonth()]);
		t = t.split("week").join(week[lang][d.getDay()]);
		//
		t = t.split("RRRRR").join(getRandamCharas(5));
		t = t.split("RRRR").join(getRandamCharas(4));
		t = t.split("RRR").join(getRandamCharas(3));
		t = t.split("RR").join(getRandamCharas(2));
		t = t.split("R").join(getRandamCharas(1));
		return t;
	}
	
	function getRandamCharas(_n){
		var rr = "";
		for (var i = 0; i < _n ; i++) {
			rr += charas[Math.floor(Math.random()*charas.length)];
		}
		return rr;
	}
	function getTimeCharas(_distance){
		if(!_distance) _distance = 3000;
		var d = new Date();
		return Math.floor(d.getTime()/_distance);
	}
	
	function formatDigit(_n,_s){
		var s = String(_n);
		if(s.length<_s){
			for (var i = 0; i < _s ; i++) {
				if(s.length <= i)s ="0" + s;
			}
		}
		return s;
	}
	
	return { 
		getFormattedDate:getFormattedDate,
		getRandamCharas:getRandamCharas,
		getTimeCharas:getTimeCharas
	}
})();
var StringU 			 = (function(){

	function z2h(s){
		return s.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {
			return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
		});
	}

	function h2z(s){
		return s.replace(/[A-Za-z0-9]/g, function(s) {
			return String.fromCharCode(s.charCodeAt(0) + 0xFEE0);
		});
	}
	
	function zen2han(s){
		s = z2h(s)
		return s;
	}
	
	function han2zen(s){
		s = h2z(s);
		var res = (s.match(/<("[^"]*"|'[^']*'|[^'">])*>/g));
		
		if(res){
		for (var i = 0; i < res.length ; i++) {
			s = s.split(res[i]).join(z2h(res[i]));
		}
		}
		return s;
	}
	function deleteTag(s){
		return s.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'')
	}
	
	return { 
		zen2han:zen2han,
		han2zen:han2zen,
		deleteTag:deleteTag
	 }
})();

var NumberU 			 = (function(){
	//NumberU.defaultNumber
	function defaultNumber(_n,_def){
		_def = ( isNaN(_def) ) ? 0 : _def;
		var n = Number(_n);
		if(isNaN(n)){
			return _def
		} 
		return n
	}
	return { 
		defaultNumber:defaultNumber
	 }
})();



var AnimU = (function(){
	
	var func_;
	function attention(_param){
		var v = _param.v;
		var d = (_param.d) ? _param.d/1000:0;
		
		if(func_)func_.remove();
		func_ = new serial_([
			d , function () {
				v.addClass("_current");
			}
			,0.15, function () {
				v.removeClass("_current");
			}
		]);
		func_.start();
	}
	
	var serial_ = (function() {
		var c = function(_args) {
			this.args = _args;
			this.currentNo = 0;
			this.playingFlg = false;
			this.isPause = false;
		}
		var p = c.prototype;
		p.start = function( ) {
			if(! this.playingFlg){
				this.playingFlg = true;
				this.execute_core();
			}
		}
		p.execute_core = function ( ) {
			if (this.playingFlg) {
				if (this.currentNo < this.args.length) {
					var command = this.args[this.currentNo];
					if (typeof(command) != "number") {
						command();
						this.execute_next();
					}else {
						var this_ = this;
						setTimeout(function(){
							this_.execute_next()
						},command * 1000);
					}
				} else {
					this.funish();
				}
			}
		}
		p.execute_next = function  ( ) {
			if(this.isPause) return;
			if(this.playingFlg){
				this.currentNo++;
				this.execute_core();
			}
		}
		p.funish = function  ( ) {
			this.playingFlg = false;
			this.init();
		}
		p.pause = function  ( ) {
			this.isPause = true;
		}
		p.restart = function  ( ) {
			this.isPause = false;
			this.execute_next();
		}
		p.jump = function  ( _n) {
			this.currentNo = _n-1;
		}
		p.init = function  ( ) {
			this.playingFlg = false;
			this.currentNo = 0;
		}
		p.remove = function  ( ) {
			this.currentNo = 0;
			this.playingFlg = false;
		}
		return c;
	})();
	
	return {
		attention: attention,
		serial_: serial_
	}})();


var EditableView = {}
	EditableView.currentGrid = null;

EditableView.PageView 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_pageModel,_data,_parentView) {
	  this.init(_pageModel,_data,_parentView);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init 	 = function(_pageModel,_data,_parentView) {
		this.v = {};
		
		this.v.parentView = _parentView;
		this.id 		= _pageModel.id;
		this.dir 		= _pageModel.dir;
		this.gloupPath  = _pageModel.gloupPath;
		this.name 		= _pageModel.name;
		this.type 		= _pageModel.type;
		
		this.storage = _data;
		this.restoreJsonData = this.storage.exportJSON();
	}

	/* ---------- ---------- ---------- */
	
	p.createView 	 =function(){
		var this_ = this;
		//メインビュー
		var param = { id : this.id, dir : this.dir, name : this.name ,type:this.type};
		
		this.view = EditableView.PageView_U.getMainView(param);
		this.v.parentView.append(this.view);
		this.v.replaceArea = this.view.find('> ._page_inner ._replaceRootArea');
		
		this.v.pageStateArea = this.view.find('._page_state');
		
		this.v.footerF1 = this.view.find('._page_footer ._f1');
		this.v.footerF2 = this.view.find('._page_footer ._f2');
		
		this.v._page_zooms = this.view.find('._page_zooms');
		this.v._page_zooms.show();
		
		if(this.type == Dic.PageType.PRESET){
			CMS_PresetView_ZoomManager.setView(this.v._page_zooms);
		} else{
			CMS_PagesView_ZoomManager.setView(this.v._page_zooms);
		}
		//データ・セット
		this.freeLayout = new EditableView.FreeLayout();
		this.freeLayout.registParent(this, this.v.replaceArea, param, 0);
		
		this.stageInit();
		this.setBtn();
		
		this.initData();
	}
	
	/* ---------- ---------- ---------- */
	
	p.setBtn 		 =function (){
		var this_ = this;
		
		this.v.page_header 		= this.view.find('._page_header');
		this.v.saveDate		 	= this.view.find('._page_header ._saveDate span');
		this.v.publicDate	 	= this.view.find('._page_header ._publicDate span');
		this.v.f_saveDate	 	= this.view.find('._page_footer ._saveDate span');
		this.v.f_publicDate	 	= this.view.find('._page_footer ._publicDate span');
		
		this.v.btn_preview		= this.view.find('._btn_preview');
		this.v.btn_preview_more	= this.view.find('._btn_preview_more');
		this.v.btn_previewing	= this.view.find('._btn_previewing');
		this.v.btn_save		 	= this.view.find('._btn_save');
		this.v.btn_save_pre	 	= this.view.find('._btn_save_pre');
		this.v.btn_saveing	 	= this.view.find('._btn_saveing');
		this.v.btn_public	 	= this.view.find('._btn_public');
		this.v.btn_publishing 	= this.view.find('._btn_publishing');
		this.v.btn_public_more 	= this.view.find('._btn_public_more');
		
		this.v.btn_preview		.click(function(){ this_.previewDataEx(); });
		this.v.btn_preview_more	.click(function(){ this_.windowOpenPreview(); });
		this.v.btn_save			.click(function(){ this_.saveData(); });
		this.v.btn_save_pre		.click(function(){ this_.saveData(); });
		this.v.btn_public 		.click(function(){ this_.publicData(); });
		this.v.btn_public_more 	.click(function(){ this_.openURL()});
		this.v.btn_save_pre.hide();
		
		this.v.btn_template_edit = this.view.find('._btn_template_edit');
		this.v.btn_template_edit.click(function(){ 
			CMS_Data.Template.openTemplate(this_.storage.getData());
		});
		
		this.v.btn_import = this.view.find('._btn_import');
		this.v.btn_import.click(function(){ this_.importJSON()});
		
		this.v.btn_tagAll = this.view.find('._btn_tagAll');
		this.v.btn_tagAll.click(function(){ 
			HTMLService.generateHTML(
				this_.storage.getData(), 
				{
					id		: this_.id,
					dir		: this_.dir,
					gloupPath: this_.gloupPath
				},
				function(_s){
					Editer_TAGView.stageIn(_s),
					function(){}
				})
		});
		this.v.btn_tag = this.view.find('._btn_tag');
		this.v.btn_tag.click(function(){ 
			var s = this_.storage.getData().body.free[0];
			if(s.data.length == 0 ){
				alert("要素が見当たりません");
				return;	
			}
			Editer_TAGView.stageIn(
				PageElement_HTMLService.getTag(s,"",0),
				function(_s){}
			)
		});
		
		//ホバーサブメニュー
		new CMS_UtilClass.HoverMenu(this.view.find('._page_header ._page_state'),"._templatesFloat");
		new CMS_UtilClass.HoverMenu(this.view.find('._page_header ._float_item'),"._float_fuki");
		//new CMS_UtilClass.HoverMenu(this.view.find('._page_header ._save_wapper'),"._float_fuki");
		new CMS_UtilClass.HoverMenu(this.view.find('._page_header ._float_pub'),"._float_fuki");
		//
		
		//コンテナ開閉
		this.v.btn_open_all 	= this.view.find('._btn_open_all');
		this.v.btn_open_all.click(function(){
			this_.view.find("._block_toggle_close").click();
		});
		this.v.btn_close_all 	= this.view.find('._btn_close_all');
		this.v.btn_close_all.click(function(){
			this_.view.find("._block_toggle:not(._block_toggle_close)").click();
		});
		
		this.v.pageSideBtnsArea = this.view.find('._page_side_btns');
		
		//extra menu
		this.initRevision();
		this.pageResetInit();
		this.pageCopyInit();
	}
	
	/* ---------- ---------- ---------- */
	
	p.openURL =function (_type){
		if(_type == undefined) _type = "";
		var u = CMS_Path.PAGE.getRelPath(this.id,this.dir,_type);
		CMS_U.openURL_blank(u);
	}
	
	/* ---------- ---------- ---------- */
	//#データ
	
	p.initData 		 =function (){
		this.v.replaceArea.html("");//IO用にリセット
		
		this.rootData = this.storage.getData();
		if(this.rootData.head == undefined){
			this.rootData = { meta:{} , head:{} , body:{} }
		}
		this.headData = this.rootData.head;
		this.gridsData = this.rootData.body;

		var list;
		if(! this.gridsData["free"]){
			list = JSON.parse(JSON.stringify(PageTypeList.page.grids[0].gridInfo.def));
			// try{
			// 	list[0].data[0].data.main.text = this.name;
			// }catch( e ){}
		} else{
			list = this.gridsData["free"];
		}
		this.freeLayout.initData(list[0],0);

		this.isInited = true;
		this.updateMetaView();
		this.updateDateView();
		this.initSaveBtn();
		this.initPubingBtn();
		this.historyInit();
	}
	
	/* ---------- ---------- ---------- */
	
	p.updateMetaView	 =function (){
		var self = this;
		if(!this.rootData.meta) this.rootData.meta = {}
		var _current = CMS_Data.Template.treatTemplateName(this.rootData.meta);
		var _tag = CMS_Data.Sitemap.getGloupState_by_id(_current);
		
		if(_tag != this.currentStateTag){
			this.v.pageStateArea.html(_tag);
			this.currentStateTag = _tag;
			this.v.pageStateArea.find("._item").click(function(){
				CMS_Data.Template.setTemplateName(self.rootData.meta,$(this).data("id"));
				self.updateMetaView();
				self.activeSaveBtn();
			});
		}
	}
	
	p.currentSaveDateText = "";
	p.currentPubDateText = "";
	p.currentStateTag = "";
	p.updateDateView	 =function (_isAutoUpdate){
		var sd = CMS_Data.Sitemap
		
		var _save = sd.getSaveDate(this.id,this.dir);
		var _saveS = CMS_SaveDateU.getRelatedDate(_save)
		if(this.currentSaveDateText != _saveS){
			this.v.saveDate		.html(_saveS);
			this.v.f_saveDate	.html(_save);
			this.currentSaveDateText = _saveS
		}
		
		var _pub = sd.getPublishDate(this.id,this.dir);
		var _pubS = CMS_SaveDateU.getRelatedDate(_pub)
		if(this.currentPubDateText != _pubS){
			this.v.publicDate	.html(_pubS);
			this.v.f_publicDate	.html(_pub);
			this.currentPubDateText = _pubS
		}
		
		if(!_isAutoUpdate){
			if(!this.rootData.meta)this.rootData.meta = {}
			var _template = CMS_Data.Template.treatTemplateName(this.rootData.meta);
			var o = {
				save	: _save,
				pub		: _pub,
				dir		: this.dir,
				id		: this.id,
				template: _template
			}
			this.v.footerF1.html(EditableView.PageView_U.updateFooterTag1(o));
			this.v.footerF2.html(EditableView.PageView_U.updateFooterTag2(o));
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//リビジョン
	p.initRevision	 =function (){
		var self = this;
		this.revision = new EditableView.PageView_Revision(
			this.storage,
			this.view.find('._page_header ._save_wapper')
		);
		this.revision.registEvent("selectCurrent"	, function(_d){ self.selectRevision(_d); });
		this.revision.registEvent("selectCurrentPre", function(  ){ self.selectCurrentPreRev(); });
		this.revision.registEvent("selectHistory"	, function(_d){ self.selectRevision(_d); });
	}
	p.selectCurrentPreRev = function (){
		this.v.replaceArea.hide().fadeIn(200);
		this.restoreJSON();
	}
	p.selectRevision = function (_s){
		this.v.replaceArea.hide().fadeIn(200);
		this.setJSONData(_s);
	}
	p.saved_revision = function (){
		this.revision.saved();
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//#Save Preview
	p.isSaveingProccess = false;
	p.saveData 		 =function (_isPreview){
		if(window.isLocked(true))return;
		//
		if(this.isSaveingProccess)return;
		this.isSaveingProccess = true;
		//
		this.activeSaveingBtn();
		this.updateRootData();
		var this_ = this;
		this.storage.setData(this.rootData);
		this.storage.save(function(){
			this_.saveData_comp()
		});
	}
	p.saveData_comp = function (){
		this.updateDateView();
		this.disableSaveBtn();
		CMS_MainController.savedPage(this.id,this.dir);
		//
		this.saved_revision();
	}
	/**/
	p.isPublicProccess = false;
	p.publishData 	 =function (){
		this.publicData();
	}
	p.publicData 	 =function (){
		if(window.isLocked(true))return;
		//
		if(this.isPublicProccess)return;
		this.isPublicProccess = true;
		//
		this.activePubingBtn();
		var this_ = this;
		this.storage.publicData(function(){
			this_.publicData_comp()
		});
	}
	p.publicData_comp = function (){
		this.updateDateView();
		this.disablePubingBtn();
		//this.pageModel.published();
		CMS_MainController.publishedPage(this.id,this.dir);
	}
	p.unPublicData =function (){
		if(window.isLocked(true))return;
		var this_ = this;
		this.storage.unPublicData(function(){
			CMS_MainController.unPublishedPage(this.id,this.dir);
		});
		this.updateDateView();
	}
	
	p.updateRootData=function (){
		this.rootData.body.free = [{ 
			type: "layout.div", 
			attr: {},
			data: this.freeLayout.getData()
		}]
	}
	
	/* ---------- ---------- ---------- */
	//#livePreview
	//なにかしらビューを操作したらコールされる
	
	p.tID
	p.isPreviewed
	p.previewData 	 =function (_callback){
		var this_ = this
		this.previeCallback = _callback
		this.updateRootData();
		this.storage.setData(this.rootData);
		this.storage.previewData(function(){
			this_.previeCallback();
		});
	}
	p.isPreviewProccess = false;
	p.previewDataEx 	 =function (){
		if(this.isPreviewProccess)return;
		var this_ = this;
		this.isPreviewProccess = true;
		this_.v.btn_previewing.show();
		this.previewData(function(){
			this_.previewDataEx_comp();
		})
	}
	p.previewDataEx_comp 	 =function (){
		var this_ = this;
		setTimeout(function(){
			this_.isPreviewProccess = false;
			this_.v.btn_previewing.hide();
			this_.v.btn_preview_more.addClass("_hilight");
			setTimeout(function(){
				this_.v.btn_preview_more.removeClass("_hilight");
			},200);
			
		},200);
	}
	p.windowOpenPreview 	 =function (){
		var url = CMS_Path.PAGE.getRelPath(this.storage.id,this.storage.dir);
		var f = CMS_Path.ASSET.REL + CMS_Path.PREVIEW_HTML;
		var p = ""
			p += "?p=" + DateUtil.getRandamCharas(10);
			p += "&url=" + url;
		CMS_U.openURL_blank(f + p,f);
	}
	
	/* ---------- ---------- ---------- */
	//#JSON
	
	p.pageResetInit 		 =function (){
		var this_ = this
		this.v.btn_undo		 = this.view.find('._btn_undo');
		this.v.btn_reset	 = this.view.find('._btn_reset');
		this.v.btn_restore	 = this.view.find('._btn_restore');
		// this.v.btn_restore_ng = this.view.find('._btn_restore_ng');
		
		this.v.btn_undo.click(function(){ this_.historyBack()});
		this.v.btn_reset.click(function(){ this_.resetJSON()});
		this.v.btn_restore.click(function(){ this_.restoreJSON()});
		// this.v.btn_restore.hide();
	}
	
	p.setJSON 	 =function (_s){
		var s = _s;
		try{
			JSON.parse(_s);
		}catch( e ){
			alert("データ形式が正しくありません。")
			s = PageElement_JText.resetJSON
		};
		this.storage.importJSON(s);
		this.refreshAllData();
		this.disableSaveBtn();
		
		// this.v.btn_restore.hide()
		// this.v.btn_restore_ng.show()
	}
	p.restoreJSON 	 =function (){
		var s = this.restoreJsonData;
		this.setJSON(s)
	}
	p.resetJSON 	 =function (){
		var o = JSON.parse(PageElement_JText.resetJSON);
		try{
			o.meta = this.rootData.meta;
			o.head = this.rootData.head;
		}catch( e ){}
		this.storage.importJSON(JSON.stringify(o));
		this.refreshAllData();
		this.activeSaveBtn();
	}
	p.importJSON 	 =function (){
		var this_ = this;
		Editer_JSONView.stageIn(
			this.getJSONData(),
			function(_s){ this_.setJSONData(_s) }
		);
	}
	p.getJSONData =function (){
		return this.storage.exportJSON()
	}
	p.getJSONDataFlat =function (){
		return this.storage.exportJSON_flat()
	}
	p.setJSONData 	 =function (_s){
		try{
			var d = JSON.parse(_s);
		}catch( e ){
			alert("データ形式が正しくありません。")
			return false;
		};
		if(_s != null){
			this.storage.importJSON(_s);
			this.refreshAllData();
			this.activeSaveBtn();
			return true;
		}
	}
	
	/* ---------- ---------- ---------- */

	p.refreshAllData  =function (){
		this.initData();
	}
	p.updateSubData  =function(){
		if(this.isInited == undefined)return;
		if(this.isInited == false)return;
		this.activeSaveBtn();
		
		CMS_MainController.editedPage(this.id,this.dir);
		
		this.setHistory();
		// this.v.btn_restore.show()
		// this.v.btn_restore_ng.hide()
	}
	
	/* ---------- ---------- ---------- */
	
	//ショートカットキー用
	p.current = "";
	p.history = "";
	p.historyInit  =function(){
		var s =  this.getJSONDataFlat();
		this.current = s;
		this.history = s;
	}
	p.historyTID
	p.setHistory  =function(){
		var self = this;
		if(this.historyTID) clearTimeout(this.historyTID);
		this.historyTID = setTimeout(function(){
			self.setHistory_core();
		},400);
	}
	p.setHistory_core  =function(){
		var s =  this.getJSONDataFlat();
		if(this.current != s){
			this.history = this.current;
			this.current = s;
		}
	}
	p.historyBack  =function(){
		this.setJSONData(this.history);
	}

	/* ---------- ---------- ---------- */
	//#保存ボタン表示
	
	p.initSaveBtn  =function(){
		this.disableSaveBtn(true)
	}
	p.activeSaveBtn  =function(){
		this.v.btn_save.hide();
		this.v.btn_save_pre.show();
		this.v.btn_saveing.hide();
	}
	p.activeSaveingBtn  =function(){
		this.v.btn_saveing.show();
		// this.v.btn_saveingF.show();
	}
	p.disableSaveBtn  =function(_b){
		var this_ = this;
		if(_b){
			this.disableSaveBtn_core()
		} else{
			setTimeout(function(){
				this_.disableSaveBtn_core()
			},500);
		}
	}
	p.disableSaveBtn_core  =function(){
		this.isSaveingProccess = false;
		this.v.btn_save.show();
		this.v.btn_save_pre.hide();
		this.v.btn_saveing.hide();
	}
	
	//pub
	p.initPubingBtn  =function(){
		this.disablePubingBtn(true)
	}
	p.activePubingBtn  =function(){
		this.v.btn_publishing.show()
	}
	p.disablePubingBtn  =function(_b){
		var this_ = this;
		if(_b){
			this_.disablePubingBtn_core(false);
		} else{
			setTimeout(function(){
				this_.disablePubingBtn_core(true);
			},500);
		}
	}
	p.disablePubingBtn_core  =function(_b){
		var this_ = this;
		this.isPublicProccess = false;
		this.v.btn_publishing.hide();
	
		if(_b){
			this_.v.btn_public_more.addClass("_hilight");
			setTimeout(function(){
				this_.v.btn_public_more.removeClass("_hilight");
			},200);
		}
	}
	
	/* ---------- ---------- ---------- */
	//ページコピペ
	
	p.pageCopyTID
	p.pageCopyInit =function (){
		var this_ = this
		this.v.btn_pageUnPub		 = this.view.find('._btn_pageUnPub');
		this.v.btn_pageCopy			 = this.view.find('._btn_pageCopy');
		this.v.btn_pagePaste		 = this.view.find('._btn_pagePaste');
		this.v.btn_pageCopy_message	 = this.view.find('._btn_pageCopy_message');
		this.v.btn_pagePaste_message = this.view.find('._btn_pagePaste_message');
		
		this.v.btn_pageUnPub.click(function(){ this_.unPublicData()});
		this.v.btn_pageCopy.click(function(){ this_.pageCopy()});
		this.v.btn_pagePaste.click(function(){ this_.pagePaste()});
	}
	p.pageCopy =function (){
		var this_ = this
		CMS_Status.clipBordPage = this.getJSONData();
		//
		$("body").addClass("_copyPage");
		// this.v.btn_pageCopy_message.html("コピーしました")
		// this.v.btn_pageCopy_message.show()
		if(this.pageCopyTID) clearTimeout(this.pageCopyTID)
		this.pageCopyTID = setTimeout(function(){
				this_.hideMenuMessage()
				$("body").removeClass("_copyPage");
		},200);
	}
	p.pagePaste =function (){
		var this_ = this
		if(CMS_Status.clipBordPage == ""){
			this.v.btn_pagePaste_message.html("データがありません")
			this.v.btn_pagePaste_message.show();
		}
		if(this.setJSONData(CMS_Status.clipBordPage)){
			this.v.btn_pagePaste_message.html("ペーストしました")
			this.v.btn_pagePaste_message.show()
			this.pageCopyTID = setTimeout(function(){
				this_.hideMenuMessage()
			},2000);
		}
	}
	p.hideMenuMessage =function (){
		this.v.btn_pageCopy_message.html("")
		this.v.btn_pageCopy_message.hide()
		this.v.btn_pagePaste_message.html("")
		this.v.btn_pagePaste_message.hide()
	}
	
	/* ---------- ---------- ---------- */
	
	/* ---------- ---------- ---------- */
	
	//ADDボタンのターゲットを保持するため、ルートフリーレイアウトを保持しておく
	p.rootFreeLayout
	p.setFreeLayout =function (_rootFreeLayout){
		this.rootFreeLayout = _rootFreeLayout;
	}
	
	/* ---------- ---------- ---------- */
	//#Stage
	
	p.isOpen = false;
	p.isFirst = true;
	
	p.stageInit 	 = function (){
		this.view.hide();
	}
	p.tID
	p.stageIn 		 = function (){
		if(! this.isOpen){ this.isOpen = true;
			if(this.isFirst){ this.createView() }
			this.isFirst = false;
			//
			AddElements.setVisible(true);
			InspectView.stageOut();
			
			this.view.show();
			
			//追加ブロックの配置先を、このフリーレイアウトに
			if(this.rootFreeLayout) {
				AddElementsManager.setData( this.rootFreeLayout , 0);
			}
			
			var this_ = this;
			this.tID = setInterval(function(){this_.updateDateView(true)}, 1000*10);
			
			EditableView.PageViewState.setCurretPage(this);
			this.selectCurrent();
		}
	}
	p.stageOut = function (){
		if(this.isOpen){ this.isOpen = false;
			this.view.hide();
			if(this.tID){ clearInterval(this.tID)}
		}
	}
	p.remove 		 = function (){
		this.view.remove();
		this.currentSelect = null;
	}
	
	//現在の選択ノード保持用
	p.currentSelect;
	p.setCurrentSelect 		 = function (_node){
		this.currentSelect = _node;
	}
	p.selectCurrent 		 = function (){
		if(this.currentSelect){
			this.currentSelect.trigger("click");
			InspectView.updateScrollPos(false);
		}
	}
	
	return c;
})();



EditableView.PageViewState = (function(){
	
	//プリセットビューのときは、OFFにして、記録しないように
	var isOn = true;
	function setOn() {
		isOn = true;
		if(currentPage)currentPage.stageIn();
	}

	function setOff() {
		isOn = false;
		if(currentPage)currentPage.stageOut();
	}
	
	//
	var currentPage;
	function setCurretPage (_page){
		if(isOn){
			currentPage = _page;
		}
	}
	//EditableView.PageViewState.getCurretPage();
	function getCurretPage (){
		return currentPage;
	}
	function setCurretSelect(_node){
		if(isOn){
			currentPage.setCurrentSelect(_node);
		}
	}
	
	return {
		setOn: setOn,
		setOff: setOff,
		setCurretPage: setCurretPage,
		getCurretPage: getCurretPage,
		setCurretSelect: setCurretSelect
	}
})();


EditableView.PageView_U = (function(){
	
	/* ---------- ---------- ---------- */

	function getMainView(_o){
		var tag = "";
			if(_o.type == Dic.PageType.PAGE){
				tag += '<div class="_cms_page">';
				tag += '	<div class="_page_header">';
				tag += '		<div class="_row1">{ROW1}</div>';
				tag += '		<div class="_row2">{MENUS}</div>';
				tag += '		{ZOOM_BTNS}';
				tag += '		{PUB_BTNS}';
				tag += '		{ICON_BTNS}';
				tag += '	</div>';
				tag += '	<div class="_page_inner">';
				tag += '		<div class="_page_inner_zoom _mainArea-scroll">';
				tag += '			<div class="_page_body _replaceRootArea __cms_edit_area__ {PAGE_CLASS}" id="{PAGE_ID}"></div>';
				tag += '			<div class="_page_footer">';
				tag += '				{WIDE}';
				tag += '				{FOOTER}';
				tag += '				{EDIT_CSS_CLASS}';
				tag += '			</div>';
				tag += '		</div>';
				tag += '	</div>';
				tag += '</div>';
			} else if(_o.type == Dic.PageType.CMS_MYTAG){
				tag += '<div class="_cms_page _cms_page_setting">';
				tag += '	<div class="_page_header">';
				tag += '		<div class="_row1">{ROW1}</div>';
				tag += '		<div class="_row2">{MENUS}</div>';
				tag += '		{ZOOM_BTNS}';
				tag += '		{ICON_BTNS}';
				tag += '		{PUB_BTNS_SETTTING}';
				tag += '	</div>';
				tag += '	<div class="_page_inner">';
				tag += '		<div class="_page_inner_zoom _mainArea-scroll">';
				tag += '			<div class="_page_body _replaceRootArea"></div>';
				tag += '			<div class="_page_footer">';
				tag += '				{WIDE}';
				tag += '			</div>';
				tag += '		</div>';
				tag += '	</div>';
				tag += '</div>';
			} else if(_o.type == Dic.PageType.PRESET){
				tag += '<div class="_cms_page">';
				tag += '	<div class="_page_header">';
				tag += '		<div class="_row1">{ROW1}</div>';
				tag += '		{ZOOM_BTNS}';
				tag += '		{ICON_BTNS}';
				tag += '		{PUB_BTNS_PRESET}';
				tag += '	</div>';
				tag += '	<div class="_page_inner">';
				tag += '		<div class="_page_inner_zoom _mainArea-scroll">';
				tag += '			<div class="_page_body _replaceRootArea"></div>';
				// tag += '			<div class="_page_footer">';
				// tag += '				{WIDE}';
				// tag += '			</div>';
				tag += '		</div>';
				tag += '	</div>';
				tag += '</div>';
			}

		var row1 = '';
		if(_o.type == Dic.PageType.CMS_MYTAG){
			row1 += '<span class="_page_title">{{Myタグ設定}} <span class="_rep">' + _o.name + '</span></span>'
		} else {
			row1 += '<span class="_page_title">' + CMS_U.roundText(_o.name,20) + '</span>';
		}
		
		var memus = '';
		if(_o.type == Dic.PageType.CMS_MYTAG){
			//
		} else {
			memus += ' <span class="_filePath _cms_btn_alpha">' + CMS_Path.PAGE.getAbsPath_deco(_o.id, _o.dir) + '</span>';
			memus += '<div class="_page_state"></div>';
			memus += '<div class="_page_menus">';
			memus += '	<div class="_item _float_item _btn_template_edit">';
			memus += '		<div><i class="fa fa-pencil "></i> 編集</div>';
			memus += '		<div class="_float_fuki">';
			memus += '			<div class="_fuki_title">テンプレ編集</div>';
			memus += '			<div class="_fuki_read">このページで使用されているテンプレHTMLを編集します。</div>';
			memus += '		</div>';
			memus += '	</div>';
			memus += '</div>';
			memus += '<div class="_page_menus_left _cms_wide">';
			memus += '	<div class="_item _float_item _btn_import">';
			memus += '		<div>JSON編集</div>';
			memus += '		<div class="_float_fuki">';
			memus += '			<div class="_fuki_title">JSON直接編集</div>';
			memus += '			<div class="_fuki_read">直接、生データ(JSON)を編集できます。このデータをPCにテキストファイルに保存しておけば、簡易なバックアップになります。</div>';
			memus += '		</div>';
			memus += '	</div>';
			memus += '	<div class="_item _float_item  _btn_tagAll">';
			memus += '		<div>HTML確認</div>';
			memus += '		<div class="_float_fuki">';
			memus += '			<div class="_fuki_title">HTML確認</div>';
			memus += '			<div class="_fuki_read">公開時に生成されるHTMLファイルを確認出来ます。</div>';
			memus += '		</div>';
			memus += '	</div>';
			memus += '</div>';
		}
			
		var pubBtns = '';
			pubBtns += '	<div class="_page_btns_pre">';
			pubBtns += '		<div class="_cms_btn_alpha _btn_preview">プレビュ生成</div>';
			pubBtns += '		<div class="_cms_btn_alpha _btn_preview_more"><i class="fa fa-external-link-square "></i></div>';
			pubBtns += '		<div class="_btn_previewing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns += '	</div>';

			pubBtns += '	<div class="_page_btns_pub">';
			pubBtns += '		<div class="_save_wapper">';
			pubBtns += '			<div class="_saveDate_wapper _float_save">';
			pubBtns += '				<div class="_icon_bar"><i class="fa fa-bars"></i></div>';
			pubBtns += '				<div class="_saveDate"><i class="fa fa-clock-o"></i> <span></span></div>';
			pubBtns += '				<div class="_float_fuki">';
			pubBtns += '					<div class="_page_revision"></div>';
			pubBtns += '				</div>';
			pubBtns += '			</div>';
			pubBtns += '			<div class="_btn_save_wapper ">';
			pubBtns += '				<div class="_cms_btn_alpha _btn_save" '+TIP("#+S")+'><i class="fa fa-check "></i> 保存済み</div>';
			pubBtns += '				<div class="_cms_btn_alpha _btn_save_pre" '+TIP("#+S")+'><i class="fa fa-pencil "></i> 保存する</div>';
			pubBtns += '				<div class="_btn_saveing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns += '			</div>';
			pubBtns += '		</div>';
			
			pubBtns += '		<div class="_public_wapper">';
			pubBtns += '			<div class="_publicDate_wapper _float_pub">';
			pubBtns += '				<div class="_publicDate"><i class="fa fa-clock-o"></i> <span></span></div>';
			pubBtns += '				<div class="_float_fuki">';
			pubBtns += '					<div class="_float_btn _btn_pageUnPub"><i class="fa fa-trash "></i> 公開取消し</div>';
			pubBtns += '				</div>';
			pubBtns += '			</div>';
			pubBtns += '			<div class=" _btn_public_wapper ">';
			pubBtns += '				<div class="_cms_btn_alpha _btn_public" '+TIP("#+P")+'><i class="fa fa-globe "></i> 公開する</div>';
			pubBtns += '				<div class="_btn_publishing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns += '			</div>';
			pubBtns += '		</div>';
			pubBtns += '		<div class="_cms_btn_alpha _btn_public_more" '+TIP("#+O")+'><i class="fa fa-external-link-square "></i></div>';
			pubBtns += '	</div>';

		var pubBtns_seti = '';
			pubBtns_seti += '	<div class="_page_btns_pub">';
			pubBtns_seti += '		<div class="_btn_save_wapper ">';
			pubBtns_seti += '			<div class="_cms_btn_alpha _btn_save" '+TIP("#+S")+'><i class="fa fa-check "></i> 保存済み</div>';
			pubBtns_seti += '			<div class="_cms_btn_alpha _btn_save_pre" '+TIP("#+S")+'><i class="fa fa-pencil "></i> 保存する</div>';
			pubBtns_seti += '			<div class="_btn_saveing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns_seti += '		</div>';
			pubBtns_seti += '	</div>';
			
			
		var pubBtns_pre = '';
			pubBtns_pre += '	<div class="_page_btns_pre">';
			pubBtns_pre += '		<div class="_cms_btn_alpha _btn_preview">プレビュ生成</div>';
			pubBtns_pre += '		<div class="_cms_btn_alpha _btn_preview_more"><i class="fa fa-external-link-square "></i></div>';
			pubBtns_pre += '		<div class="_btn_previewing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns_pre += '	</div>';
			pubBtns_pre += '	<div class="_page_btns_pub">';
			pubBtns_pre += '		<div class="_btn_save_wapper ">';
			pubBtns_pre += '			<div class="_cms_btn_alpha _btn_save" '+TIP("#+S")+'><i class="fa fa-check "></i> 保存済み</div>';
			pubBtns_pre += '			<div class="_cms_btn_alpha _btn_save_pre" '+TIP("#+S")+'><i class="fa fa-pencil "></i> 保存する</div>';
			pubBtns_pre += '			<div class="_btn_saveing"><i class="fa fa-cog fa-spin"></i></div>';
			pubBtns_pre += '		</div>';
			pubBtns_pre += '	</div>';
			
		var zoomBtns = ''
			zoomBtns += '	<div class="_page_side_opener">';
			zoomBtns += '		<span>編集用CSS設定</span>';
			zoomBtns += '	</div>';
			zoomBtns += '	<div class="_page_side_opener">';
			zoomBtns += '		<span>コンテナ：</span>';
			zoomBtns += '		<span class="_cms_btn_alpha _btn_open_all"><span>+</span> 開く</span>';
			zoomBtns += '		<span class="_cms_btn_alpha _btn_close_all"><span>-</span> 閉じる</span>';
			zoomBtns += '	</div>';
			zoomBtns += '	<div class="_page_side_zoom">';
			zoomBtns += '		<div class="_page_zooms ">';
			zoomBtns += '			<span class="_cms_btn_alpha _btn_zoomIn" '+TIP("#+→")+'><i class="fa fa-fw fa-plus-circle "></i> </span>';
			zoomBtns += '			<span class="_cms_btn_alpha _btn_zoom">100%</span>';
			zoomBtns += '			<span class="_cms_btn_alpha _btn_zoomOut" '+TIP("#+←")+'><i class="fa fa-fw fa-minus-circle "></i> </span>';
			zoomBtns += '		</div>';
			zoomBtns += '	</div>';
			
		var iconBtns = ''
			iconBtns += '	<div class="_page_icon_btns">';
			// iconBtns += '		<div class="_item _float_item">';
			// iconBtns += '			<div class=" _side_btn _btn_restore"><i class="fa fa-fw fa-reply-all"></i></div>';
			// iconBtns += '			<div class=" _side_btn _btn_restore_ng" style="opacity:0.5;"><i class="fa fa-fw fa-reply-all"></i></div>';
			// iconBtns += '			<div class="_float_fuki">';
			// iconBtns += '				<div class="_fuki_title">編集前に復帰</div>';
			// iconBtns += '				<div class="_fuki_read">ページを編集前に復帰します。</div>';
			// iconBtns += '			</div>';
			// iconBtns += '		</div>';
			
			// iconBtns += '				<div class="_float_btn "><i class="fa fa-fw fa-reply-all"></i></div>';

			iconBtns += '		<div class="_item _float_item">';
			iconBtns += '			<div class=" _side_btn _btn_reset"><i class="fa fa-file-o "></i></div>';
			iconBtns += '			<div class="_float_fuki">';
			iconBtns += '				<div class="_fuki_title">ページリセット</div>';
			iconBtns += '				<div class="_fuki_read">コンテンツをリセットします</div>';
			iconBtns += '			</div>';
			iconBtns += '		</div>';
			iconBtns += '		<div class="_item _float_item">';
			iconBtns += '			<div class=" _side_btn _btn_restore"><i class="fa fa-fw fa-fast-backward"></i></div>';
			iconBtns += '			<div class="_float_fuki">';
			iconBtns += '				<div class="_fuki_title">編集前に復帰</div>';
			iconBtns += '				<div class="_fuki_read">初期状態に復帰します。</div>';
			iconBtns += '			</div>';
			iconBtns += '		</div>';
			iconBtns += '		<div class="_item _float_item">';
			iconBtns += '			<div class=" _side_btn _btn_undo"><i class="fa fa-fw fa-step-backward"></i></div>';
			iconBtns += '			<div class="_float_fuki">';
			iconBtns += '				<div class="_fuki_title">取り消す(ひとつ前に) '+TIP2("#+Z")+'</div>';
			iconBtns += '				<div class="_fuki_read">ひとつ前のブロックの操作を、取り消します。</div>';
			iconBtns += '			</div>';
			iconBtns += '		</div>';
			iconBtns += '		<div class="_item _float_item">';
			iconBtns += '			<div class=" _side_btn _btn_pageCopy"><i class="fa fa-caret-right "></i><i class="fa fa-fw fa-clipboard"></i></div>';
			iconBtns += '			<div class="_float_fuki">';
			iconBtns += '				<div class="_fuki_title">ページコピー</div>';
			iconBtns += '				<div class="_fuki_read">現在のページをコピーします。その後、ページを移動し、ページをペーストします。</div>';
			// iconBtns += '				<div class="_messa _btn_pageCopy_message"></div>';
			iconBtns += '			</div>';
			iconBtns += '		</div>';
			iconBtns += '		<div class="_item _float_item">';
			iconBtns += '			<div class=" _side_btn _btn_pagePaste"><i class="fa fa-fw fa-clipboard"></i><i class="fa fa-caret-right "></i></div>';
			iconBtns += '			<div class="_float_fuki">';
			iconBtns += '				<div class="_fuki_title">ページペースト</div>';
			iconBtns += '				<div class="_fuki_read">コピーしたページをペーストします</div>';
			// iconBtns += '				<div class="_messa _btn_pagePaste_message"></div>';
			iconBtns += '			</div>';
			iconBtns += '		</div>';
			iconBtns += '	</div>';

		var wide = ''
			wide += '			<div class="_memori_area">';
			wide += 				CMS_SizeManager.getTag_FreePageBar();
			wide += '			</div>';

		var footer = ''
			footer += '			<div class=" _toggle-wap">';
			footer += '				<div class="_toggle-head _m" data-isopen="1"><span><i class="fa fa-minus "></i></span> ファイル情報</div>';
			footer += '				<div class="_f1 _toggle-inner" style="display:block;"></div>';
			footer += '			</div>';
			footer += '			<div class=" _toggle-wap">';
			footer += '				<div class="_toggle-head _m" data-isopen=""><span><i class="fa fa-plus-square "></i></span> ページタグ</div>';
			footer += '				<div class="_f2 _toggle-inner"></div>';
			footer += '			</div>';
			
		tag = tag.split("{ROW1}").join(row1);
		tag = tag.split("{MENUS}").join(memus);
		tag = tag.split("{PUB_BTNS}").join(pubBtns);
		tag = tag.split("{PUB_BTNS_PRESET}").join(pubBtns_pre);
		tag = tag.split("{PUB_BTNS_SETTTING}").join(pubBtns_seti);
		tag = tag.split("{ICON_BTNS}").join(iconBtns);
		tag = tag.split("{ZOOM_BTNS}").join(zoomBtns);
		tag = tag.split("{WIDE}").join(wide);
		tag = tag.split("{FOOTER}").join(footer);
		
		/* ---------- ---------- ---------- */
		//編集時のCSS設定用クラス
		var dir = _o.dir;
		var id = _o.id;
		var g_ids  = CMS_Data.Sitemap.getGloupPath_by_id(id,dir).split("/").join(" ");
		var editCSS_ID = "__CMS_EDIT_AREA__" + id
		var editCSS_CS = (function(_s){ 
			var css = [];
			for (var i = 0; i < 3 ; i++) {
				var s = CMS_U.getSplitTextAt(g_ids,i," ");
				if(s) css.push("__cms_edit_area__" + s);
			}
			return css.join(" ")
		})(g_ids);
		var editcss = "";
			editcss += '<div class="_editclass">';
			editcss += '● CMS編集画面用CSS (html/css/cms.cssや、free.cssなどに設定)<br>'
			editcss += '　サイト全体のセレクタ : <b>.__cms_edit_area__{ background:#ccc; }</b><br>'
			editcss += '　現在のグループのセレクタ : '
			editcss +=  (function(_s){ 
				var a = _s.split(" ")
				var css = [];
				for (var i = 0; i < a.length ; i++) {
					if(a[i]){
						css.push('.' + a[i] + "{ background:#ccc; }")
					}
				}
				if(css.length == 0) return '<br>'
				return  "<b>" + css.join(" , ") + "</b><br>"
			})(editCSS_CS);
			editcss += '　現在のページのセレクタ : <b>#' + editCSS_ID + '{ background:#ccc; }</b><br>'
			editcss += '</div>';
			
			tag = tag.split("{PAGE_ID}").join(editCSS_ID );
			tag = tag.split("{PAGE_CLASS}").join(editCSS_CS);
			tag = tag.split("{EDIT_CSS_CLASS}").join(editcss);
		
		return $(tag);
	}
	
	/* ---------- ---------- ---------- */

	var isToggleInited = false
	function toggleInit(){
		if(isToggleInited)return;
		isToggleInited = true;
		$("body").on("click","._toggle-wap ._toggle-head",function(){
			if($(this).data("isopen") == "1"){
				$(this).parent().find("._toggle-inner").slideUp();
				$(this).find("span").html('<i class="fa fa-plus-square "></i>')
				$(this).data("isopen","")
			} else{
				$(this).parent().find("._toggle-inner").slideDown();
				$(this).find("span").html('<i class="fa fa-minus "></i>')
				$(this).data("isopen","1")
			}
		})
	}
	function updateFooterTag1(_o){
		toggleInit();
		var dir = _o.dir;
		var id = _o.id;
		var _s = ""
			_s += '<table>';
			_s += '<tr><th>保存データ</th>	<td><a href="{JSON_URL}" target="_blank">{JSON_URL} {IC}</a></td></tr>';
			_s += '<tr><th></th>			<td class="_saveDate"><i class="fa fa-clock-o"></i> 保存日時 : <span>{JSON_DATE}</span></td></tr>';
			_s += '<tr><th>公開HTML</th>	<td><a href="{HTML_URL}" target="_blank">{HTML_URL} {IC}</a></td></tr>';
			_s += '<tr><th></th>			<td class="_publicDate"><i class="fa fa-clock-o"></i> 公開日時 : <span>{HTML_DATE}</span></td></tr>';
			_s += '</table>';
			
			_s = _s.split("{JSON_URL}").join(CMS_Path.JSON.getURL(id,dir));
			_s = _s.split("{HTML_URL}").join(CMS_Path.PAGE.getURL(id,dir));
			_s = _s.split("{JSON_DATE}").join(_o.save);
			_s = _s.split("{HTML_DATE}").join(_o.pub);
			_s = _s.split("{IC}").join(Dic.I.External);
			
		return _s;
	}
	function updateFooterTag2(_o){
		
		var dir = _o.dir;
		var id = _o.id;
		var _s = ""
			_s += '	<p>ページ公開時に、置き換えられる置き換えタグの一覧です。</p>';
			_s += '	<table>';
			_s += '		<tr>				<th></th><th>ページタグ</th>			<th></th><th>書き出される値</th></tr>';
			_s += '		<tr class="_hr">	<th>編集内容</th><th><span class="_cms_btn_copy_page_id">**PAGE_CONTENTS**</span></th>					<th>_AR_</th><td>HTMLページの編集内容がはいります</td></tr>';
			_s += '		<tr class="_hr">	<th>ディレクトリ情報</th><th><span class="_cms_btn_copy_page_id">**SITE_DIR**</span></th>		<th>_AR_</th><td><em>{SITE_DIR}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**ASSET_DIR**</span></th>							<th>_AR_</th><td><em>{ASSET_DIR}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**DEF_DIR**</span></th>							<th>_AR_</th><td><em>{DEF_DIR}</em></td></tr>';
			_s += '		<tr class="_hr">	<th>ページ関連	</th><th><span class="_cms_btn_copy_page_id">**PAGE_DIR**</span></th>			<th>_AR_</th><td><em>{PAGE_DIR}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_ID**</span></th>							<th>_AR_</th><td><em>{PAGE_ID}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_NAME**</span></th>							<th>_AR_</th><td><em>{PAGE_NAME}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_GROUP_IDS**</span></th>					<th>_AR_</th><td><em>{PAGE_GROUP_IDS}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_GROUP_IDS[0]**</span></th>					<th>_AR_</th><td><em>{PAGE_GROUP_IDS[0]}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_GROUP_IDS[1]**</span></th>					<th>_AR_</th><td><em>{PAGE_GROUP_IDS[1]}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_GROUP_IDS[2]**</span></th>					<th>_AR_</th><td><em>{PAGE_GROUP_IDS[2]}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_GROUP_NAMES**</span></th>					<th>_AR_</th><td><em>{PAGE_GROUP_NAMES}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_BREADLIST**</span></th>					<th>_AR_</th><td>公開ページで確認してください</td></tr>';
			_s += '		<tr class="_hr">	<th>ブログ関連	</th><th><span class="_cms_btn_copy_page_id">**PAGE_TAG**</span></th>			<th>_AR_</th><td><em>{PAGE_TAG}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_READ**</span></th>							<th>_AR_</th><td><em>{PAGE_READ}</em></td></tr>';
			_s += '		<tr><th>			</th><th><span class="_cms_btn_copy_page_id">**PAGE_DATE**</span></th>							<th>_AR_</th><td><em>{PAGE_DATE}</em></td></tr>';
			_s += '		<tr class="_hr">	<th>その他		</th><th><span class="_cms_btn_copy_page_id">**PAGE_PUB_DATE**</span></th>		<th>_AR_</th><td><em>{PAGE_PUB_DATE}</em></td></tr>';
			// _s += '		<tr><th>		</th><th><span>**PAGE_TEMPLATE**</span></th>						<th>_AR_</th><td><em>{PAGE_TEMPLATE}</em></td></tr>';
			_s += '	</table>';

		var site_dir = CMS_Path.SITE.getTopRelPath_from_html(dir);
		var g_ids  = CMS_Data.Sitemap.getGloupPath_by_id(id,dir).split("/").join(" ");
		var g_names  = CMS_Data.Sitemap.getGloupName_by_id(id,dir).split("/").join(" ");
		
		var pageName = "";
		var tagName = "";
		var dateName= "";
		var readName= "";
		
		var current = CMS_Data.Sitemap.getData_by_id(id,dir);
		if(current != null) {
			pageName  = current.name || "";
			tagName	 = current.tag || "";
			dateName = current.date || "";
			readName = current.read || "";
		}
			_s = _s.split("{SITE_DIR}").join(site_dir);
			_s = _s.split("{ASSET_DIR}").join(CMS_Path.ASSET.ABS2);
			_s = _s.split("{DEF_DIR}").join(CMS_Path.PAGE.ABS2);
			
			_s = _s.split("{PAGE_DIR}").join(CMS_Path.PAGE.getAbsDirPath(dir));
			_s = _s.split("{PAGE_ID}").join(id);
			_s = _s.split("{PAGE_NAME}").join(pageName);
			
			var _split = CMS_U.getSplitTextAt;
			_s = _s.split("{PAGE_GROUP_IDS}").join(g_ids);
			_s = _s.split("{PAGE_GROUP_IDS[0]}").join(_split(g_ids,0," "));
			_s = _s.split("{PAGE_GROUP_IDS[1]}").join(_split(g_ids,1," "));
			_s = _s.split("{PAGE_GROUP_IDS[2]}").join(_split(g_ids,2," "));
			_s = _s.split("{PAGE_GROUP_NAMES}").join(g_names);
			
			_s = _s.split("{PAGE_TAG}").join(tagName);
			_s = _s.split("{PAGE_READ}").join(readName);
			_s = _s.split("{PAGE_DATE}").join(dateName);
			
			_s = _s.split("{PAGE_PUB_DATE}").join(_o.pub);
			// _s = _s.split("{PAGE_TEMPLATE}").join(_o.template);
			_s = _s.split(">**").join(">{{");
			_s = _s.split("**<").join("}}<");
			_s = _s.split("_AR_").join('<i class="fa fa-long-arrow-right "></i> ');
			
			return _s;
	}
	return {
		getMainView: getMainView,
		updateFooterTag1: updateFooterTag1,
		updateFooterTag2: updateFooterTag2
	}})();


EditableView.PageView_Revision	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_storage,_wapper) {
	  this.init(_storage,_wapper);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init 	 = function(_storage,_wapper) {
		var self = this;
		this.stageInit();
		this.storage = _storage;
		this.id = this.storage.id;
		this.dir = this.storage.dir;
		this.wapper = _wapper;
		this.view = this.wapper.find('._page_revision');
		this.fuki = this.wapper.find('._float_fuki');
		this.wapper.hover(
			 function() { self.stageIn() } ,
			 function() { self.stageOut() }
		)
	}
	
	p.registEvent = function(_id,_callback) {
		if(this.cbs == undefined)this.cbs = {}
		this.cbs[_id] = _callback;
	}
	
	/* ---------- ---------- ---------- */
	
	p.isCreatedPre = false;
	p.createPre = function() {
		if(this.isCreatedPre) return;
		this.isCreatedPre = true;
		var self = this;
		
		var tag = "";
			tag += '<div class="_rev_close"><i class="fa fa-angle-down "></i> ページバックアップ</div>';
			tag += '<div class="_rev_open"></div>';
		this.view.html(tag);
		this.rev_open = this.view.find('._rev_open');
		this.rev_close = this.view.find('._rev_close');
		this.rev_close.hover(
			function() { self.stageIn_core2() },
			function(){}
		);
	}
	
	/* ---------- ---------- ---------- */
	
	p.isCreatedMain = false;
	p.create_main = function() {
		if(this.isCreatedMain) return;
		this.isCreatedMain = true;
		var self = this;
		var revs = CMS_Data.Sitemap.getRevision(this.id,this.dir);
		this.currentDate = "";
		
		var tag = "";
			tag += '	<div class="_rev_title">';
			tag += '		<i class="fa fa-3x fa-clock-o"></i>';
			tag += '		<div class="_r">※ページバックアップは自動では作成されません。まとまった編集を行う前は、自分でページバックアップを追加してください。</div>';
			tag += '	</div>';
			tag += '	<div class="_rev_timeline">';
			tag += '		<div class="_revision_item">';
			tag += '			<div class="_btn_revision_item _btn_revision-currnet" data-id="">'
			tag += '				<span class="_rev_name">現在の状態</span>';
			tag += '			</div>';
			tag += '			<span class="_cms_btn_alpha _btn_revision_add _btn_revision_add-now"><span class="_t">バックアップ</span> <i class="fa fa-plus-circle "></i></span> ';
			tag += '		</div>';
			tag += '		<div class="_revision_item" style="margin-top:10px;">';
			tag += '			<div class="_btn_revision_item _btn_revision-pre" data-id="pre">'
			//tag += '				<span class="_rev_name">最後に保存した状態</span>';
			tag += '				<span class="_rev_name">編集前の状態</span>';
			tag += '			</div>';
			tag += '			<span class="_cms_btn_alpha _btn_revision_add _btn_revision_add-pre"><i class="fa fa-plus-circle "></i></span> ';
			tag += '		</div>';
			tag += '		<div class="_t_kako">ページバックアップ一覧</div>';
			tag += '		<div class="_rev_add_wapper">';
			tag += '			<div class="_rev_add"></div>';
			tag += '		</div>';
			tag += '		<div class="_revisionArea">';
			for (var i = 0; i < revs.length ; i++) { tag += this.getItem(revs[i]) }
			tag += '		</div>';
			tag += '		<div class="_r">※ページバックアップから、過去の編集データを復帰できます。復帰後はページを保存・公開してください。</div>';
			tag += '	</div>';
			tag += '	<div class="_rev_btn_restore">';
			tag += '		<div class="">閉じる</div>';
			tag += '	</div>';
		this.rev_open.html(tag);
		
		this.rev_add = this.view.find('._btn_revision_add');
		this.rev_add_arrow = this.view.find('._rev_add');
		this.revisionArea = this.view.find('._revisionArea');
		
		this.rev_add.hover(
			function(){ self.rev_add_arrow.show() },
			function(){ self.rev_add_arrow.hide() }
		);
		this.view.find('._btn_revision_add-now').click(function(){ self.addRevision(""); });
		this.view.find('._btn_revision_add-pre').click(function(){ self.addRevision("pre"); });
		
		this.btn_restore = this.view.find('._rev_btn_restore');
		this.btn_restore.click(function(){ self.clickRestore(); });
		//
		//
		this.view.on('click','._btn_revision_item',function(){
			self.selectRevision( ($(this).data("id")) );
		});
		this.view.on('click','._btn_revision_remove',function(event){ 
			self.removeRevision( $(this).data("id") );
		});
	
		this.currentNode = this.view.find("._btn_revision-currnet")
		this.currentNodePre = this.view.find("._btn_revision-pre")
		this.currentNode.addClass("_current");
	}
	
	/* ---------- ---------- ---------- */

	p.getItem = function(_date) {	
		var date = this.getFormattedName(_date);
		//var cur = CMS_SaveDateU.getDate()
		//var sa = new Date(cur).getTime() - new Date(date).getTime();
		// var cs = (sa/1000 < 2) ? " _rev_now" : "";
		
		var a = date.split(" ");
		var tag = "";	
			tag += '<div class="_revision_item">';
			tag += '	<div class=" _btn_revision_item" data-id="'+date+'">'
			tag += '		<span class="_rev_name">';
			tag += '			<span class="_rev_date">' +a[0]+ '</span>';
			tag += '			<span class="_rev_time">' +a[1]+ '</span>';
			tag += '		</span>';
			tag += '	</div> ';
			tag += '	<div class="_btn_revision_remove" data-id="'+date+'" style="padding:0 0 0 20px;"><i class="fa fa-times-circle "></i> </div> ';
			tag += '</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	//select
	//リビジョン選択
	
	p.isSelect = false;
	p.currentDate = "";
	p.selectRevision = function(_date) {
		var id = this.getFormattedID(_date);
		var self = this;
		var b = false;
		if(id == ""){
			this.selectCurrent();
		} else if(id == "pre"){
			this.selectCurrentPre();
			b = true;
		} else{
			self.storage.loadRevision( id,function(_data){
				self.selectHistory(_data);
			});
			b = true;
		}
		if(b){
			this.btn_restore.addClass("_active")//.hide().fadeIn(200);
			this.currentDate = _date;
			this.isSelect = true;
		} else{
			this.btn_restore.removeClass("_active");
			this.currentDate = "";
			this.isSelect = false;
		}
		this.updateSelect();
	}
	p.selectCurrent = function() {
		this.cbs["selectCurrent"](this.latestData);
	}
	p.selectCurrentPre = function() {
		this.cbs["selectCurrentPre"]();
	}
	p.selectHistory = function(_data) {
		this.cbs["selectHistory"](_data);
	}
	p.saved = function() {	
		this.currentDate = "";
		this.updateSelect();
	}
		
	/* ---------- ---------- ---------- */
	//add 
	p.tID_add;
	p.addingTimer;
	p.addRevision = function(_extra) {
		var self = this;
		if(this.tID_add) clearTimeout(this.tID_add);
		this.addRevisionCore(_extra);
		this.rev_add.css("opacity",0.5);
		this.addingTimer = true;
		this.tID_add = setTimeout(function(){
			self.addingTimer = false;
			self.rev_add.css("opacity",1)
		},1000);
	}
	p.addRevisionCore = function(_extra) {
		if(this.addingTimer) return;
		if(window.isLocked(true))return;
		var self = this;
		var date = CMS_SaveDateU.getDate();
		var id = this.getFormattedID(date);
		this.storage.addRevision(date,id,function(){
			self.addRevisionCore_update( $(self.getItem(date)) );
		},_extra);
	}
	p.addRevisionCore_update = function(_v) {
		this.revisionArea.prepend( _v );
		_v.hide().delay(500).fadeIn(200)
	}
	
	//remove 
	p.removeRevision = function(_id) {
		if(window.isLocked(true))return;
		var self = this;
		var id = this.getFormattedID(_id);
		this.items = this.view.find('._btn_revision_item');
		for (var i = 0; i < this.items.length ; i++) {
			if(this.items.eq(i).data("id") == _id) {
				this.items.eq(i).parent().slideUp();
			}
		}
		this.storage.removeRevision(_id,id);
		this.selectRevision();
	}
	
	/* ---------- ---------- ---------- */
	
	p.updateSelect = function() {
		if(this.currentNode){
			this.currentNode.removeClass("_current");
		}
		this.items = this.view.find('._btn_revision_item');
		for (var i = 0; i < this.items.length ; i++) {
			if(this.items.eq(i).data("id") == this.currentDate) {
				this.currentNode = this.items.eq(i);
				this.currentNode.addClass("_current");
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	
	p.getFormattedID = function(_s) {
		if(!_s)return ""
		_s = _s.split("/").join("");
		_s = _s.split(" ").join("_");
		_s = _s.split(":").join("");
		return _s;
	}
	p.getFormattedName = function(_s) {
		if(!_s)return ""
		// _s = _s.split(" ")[0];
		return _s;
	}
	/* ---------- ---------- ---------- */
	
	p.isFirst = true;
	p.openFlg = false;
	p.latestData
	
	p.stageInit=function(){
		this.openFlg = false
	}
	p.tID_stage;
	p.stageIn = function()  {
		var self = this;
		if(this.tID_stage) clearTimeout(this.tID_stage);
		this.tID_stage = setTimeout(function(){
			self.stageIn_core()
		},200);
	}
	p.stageIn_core = function( )  {
		if (! this.openFlg) { this.openFlg = true;
			this.isFirst = false;
			this.isSelect = false;
			this.fuki.fadeIn(50);
			this.createPre();
		}
	}
	p.stageIn_core2 = function( )  {
		var self = this;
		if(this.tID_stage) clearTimeout(this.tID_stage);
		this.tID_stage = setTimeout(function(){
			self.stageIn_core2_delay()
		},200);
	}
	p.stageIn_core2_delay = function( )  {
		this.create_main()
		this.rev_open.fadeIn(200)
		this.currentDate = "";
		this.latestData = this.storage.exportJSON();
		this.updateSelect()
		CMS_MainController.closeInspectView();
	}
	/**/
	p.tID_stage;
	p.stageOut = function( )  {
		if(this.isSelect)return;
		var self = this;
		if(this.tID_stage) clearTimeout(this.tID_stage);
		this.tID_stage = setTimeout(function(){
			self.stageOut_core()
		},200);
	}
	p.stageOut_core = function( )  {
		if (this.openFlg) { 
			this.openFlg = false;
			this.fuki.hide()
			if(this.rev_open){
				this.rev_open.hide()
			}
		}
	}
	p.clickRestore = function( )  {
		this.stageOut_core();
	}
	return c;
})();





EditableView.SubPageView  = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	  this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.editCheckData = ""
	
	p.init  	 = function () {
		this.subs = [];
		this.v = {};
	}
	p.setObjectType = function (_objectType){
		this.type  = _objectType;
	}
	p.className = ""
	p.setStyle = function (_s){
		this.className = _s;
	}
	p.registParent  = function (_parent){
		var this_ = this;
		this.parent 	 = _parent;
		this.parentView  = $('#SubPageView');
		this.subs = [];
		
		//分岐
		var grids = this.type.grids;
		for (var i = 0; i < grids.length ; i++) {
			switch(grids[i].gridType){
				case Dic.GridType.BASE: 	this.subs.push(new EditableView.BaseBlock(grids[i])); break;
				case Dic.GridType.M_GRID:	this.subs.push(new EditableView.M_Grid(grids[i])); break;
				case Dic.GridType.TEMPLATE:	this.subs.push(new EditableView.CustomList(grids[i])); break;
			}
		}
		var tag = (function(_param,_class){ 
			var s = "";
				s += '<div class="_modalBox ' + _class + '">'
				s += '	<div class="_header">'
				s += '		<div style="float:right;">' + _param.getGuideTag() + '</div>'
				s += '		<div class="_title">' + _param.name + '</div>'
				s += '	</div>'
				s += '	<div class="_body _simple-scroll"><div class="_replaceArea"></div></div>'
				s += '	<div class="_footer">'
				s += '		<div class="_cms_btn _btn_close">キャンセル</div>'
				s += '		<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 編集完了</div>'
				s += '	</div>'
				s += '</div>'
			return s;
		})(this.type.pageInfo,this.className);		
		this.v.bg = $('<div class="_bg"></div>');
		this.view = $(tag);
		
		this.parentView.empty();
		this.parentView.append(this.v.bg);
		this.parentView.append(this.view);
		this.v.replaceArea = this.view.find('._replaceArea:first');
		
		this.stageInit();
		this.setBtn();
		
		this.v.bg						.click(function(){ this_.stageOut() });
		this.view.find('._btn_close')	.click(function(){ this_.stageOut() });
		this.view.find('._btn_do')		.click(function(){ this_.compliteEdit(); });
	}
	
	p.compliteEdit = function(){
		var this_ = this;
		UpdateDelay.delay(function(){
			var b = (JSON.stringify(this_.getData()) != this_.editCheckData);
			this_.parent.hideInlineGridEditor(b);
		});
		this_.stageOut();
	}
	
	p.createView = function(){
		var this_ = this;
		for (var i = 0; i < this.subs.length ; i++) {
			this.subs[i].registParent(this_,this_.v.replaceArea);
		}
	}
	p.setBtn = function (){
		var this_ = this;
	}
	
	/* ---------- ---------- ---------- */
	//#データ
	p.initData 	 = function (_data,_no){
		this.v.replaceArea.html("");
		this.editCheckData = JSON.stringify(_data);
		this.gridsData = JSON.parse(this.editCheckData);
		if(this.gridsData == undefined) this.gridsData = {}
		for (var i = 0; i < this.subs.length ; i++) {
			var list = this.gridsData[this.subs[i].gridInfo.id];
			this.subs[i].initData(list);
		}		
	}
	p.getData 	 = function (){
		var o = {};
		for (var i = 0; i < this.subs.length ; i++) {
			o[this.subs[i].gridInfo.id] = this.subs[i].getData()
		}
		this.gridsData = o;
		return this.gridsData;
	}
	p.updateSubData = function (){}
	
	/* ---------- ---------- ---------- */
	//#Stage
	
	p.isOpen = false;
	p.isFirst = true;
	p.stageInit  = function (){
		this.view.hide();
	}
	p.stageIn 	 = function (){
		if(! this.isOpen){ this.isOpen = true;
			showModalView(this);
			this.view.show();
			this.parentView.delay(50).show();
			CMS_ScreenManager.setSubView(this);
			this.resize();
		}
	}
	p.stageOut 	 = function (){
		if(this.isOpen){ this.isOpen = false;
			hideModalView();
			this.view.hide();
			this.parentView.hide();
		}
	}
	p.resize 	 = function (){}	
	return c;
})();

EditableView.TextPageView 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_pageModel,_data,_parentView,_wapper) {
	  this.init(_pageModel,_data,_parentView,_wapper);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init 			 = function(_pageModel,_data,_parentView,_wapper) {
		this.v = {};
		this.v.parentView = _parentView;
		this.wapperClass = _wapper;
		this.model  = _pageModel;
		this.type 	 = _pageModel.type;
		this.name 	 = _pageModel.id;
		this.dir 	 = _pageModel.dir
		this.extention = FileU.getExtention(this.name);

		this.storage = _data;
	}
	
	/* ---------- ---------- ---------- */

	p.createView  =function (){
		var self = this;
		
		var tag = (function(_name,_dir){ 
			var s = "";
				s += '<div class="_editableSetting">';
				s += '	<div class="_header">';
				s += '		<div class="_header_inner">';
				s += '			<div class="_title"> {TITLE}</div>';
				s += '		</div>';
				s += '	</div>';
				s += '	<div class="_body _asset-scroll">'
				s += '		{EDITOR}';
				s += '	</div>';
				s += '	<div class="_footer">';
				s += '		<div class="_btns">'
				s += '			<div class="_btn _btn_search"><i class="fa fa-search "></i> 検索</div>'
				s += '			<div class="_btn _btn_reload"><i class="fa fa-repeat"></i> リロード</div>'
				s += '			<div class="_btn _btn_back"><i class="fa fa- "></i> <i class="fa fa-reply "></i> 編集前に戻す</div>'
				s += '		</div>'
				s += '		<div class="_page_pubs">';
				s += '			<div class="_cms_btn_alpha _btn_save" '+TIP("#+S")+'><i class="fa fa-check "></i> 保存済み</div>';
				s += '			<div class="_cms_btn_alpha _btn_save_pre" '+TIP("#+S")+'><i class="fa fa-pencil "></i> 保存する</div>';
				s += '			<div class="_btn_saveing"><i class="fa fa-cog fa-spin"></i></div>';
				s += '		</div>';
				s += '	</div>';
				s += '	<div class="_addText">';
				s += '		<div class="_btn_close"><i class="fa fa-lg fa-times-circle "></i></div>';
				s += '		<div class="_label"></div>';
				s += '		<textarea></textarea><br>';
				s += '		<div class="_cms_btn _cms_btn_active _btn_embed"><i class="fa fa-level-down fa-rotate-180 "></i> テキストを埋め込む</div>';
				s += '	</div>';
				s += '</div>';
				
			var _t = CMS_Path.ASSET.getAbsPath_deco_file(_name , _dir);
			var read_ = (function(_s){ 
				if(_s == Dic.DirName.TEMPLATE) { return "テンプレートHTMLの編集を行えます。" + CMS_GuideU.getGuideTag("setting/template","テンプレートHTMLについて") }
				return "アセットファイルの編集を行えます。" + CMS_GuideU.getGuideTag("setting/asset","アセットについて") 
			})(this.name, this.dir);
			
			var editor = (function(_s){ 
				var ss = ""
				var extra = self.getExtraTag();
				if(extra){
					ss += '	<div class="_main">'
					ss += '		<div class="_text-editor">'
					ss += '			<textarea class="codemirror"></textarea>'
					ss += '		</div>';
					ss += '	</div>';
					ss += '	<div class="_sub">' + self.getExtraTag() + '</div>';
				} else{
					ss += '	<div class="_text-editor">'
					ss += '		<textarea class="codemirror"></textarea>'
					ss += '	</div>';
				}
				return ss;
			})();
			
			s = s.split("{TITLE}").join('<div class="_fs12 _filePath_wh _cms_btn_alpha">' + _t +'</div>');
			s = s.split("{EDITOR}").join(editor);
			s = s.split("{READ}").join(read_);
			return s;
		})(this.name,this.dir);
		
		this.view = $(tag);
		this.v.parentView.append(this.view);
		this.v._editText = this.view.find('textarea');
		this.v.textEditor = this.view.find('._text-editor');
		
		this.setBtn();
		
		this.initAddText();
		this.initExtra();
		this.initEditor();
		this.initData();
		// this.initFindCSS();
		
		this.initResize();
		// this.stageInit();
	}
	
	/* ---------- ---------- ---------- */

	p.getExtraTag 		 =function (){
		var tag = '';
		return tag;
	}
	p.initExtra 		 =function (){
		var self = this;
		// this.v.cssState = this.view.find("._cssState");
		// this.view.find("._btn_designCss").click(function(){ 
		// 	var u = CSS_DESIGN_URL
		// 	var s = self.v.cssState.val();
		// 	if(s) u += "?class=" + s;
		// 	window.open(u ,"css_design");
		// });
		// this.initFindCSS();
	}
	
	/* ---------- ---------- ---------- */

	p.setBtn 		 =function (){
		var self = this;
		
		this.v.btn_save		= this.view.find('._btn_save');
		this.v.btn_save_pre	= this.view.find('._btn_save_pre');
		this.v.btn_saveing	= this.view.find('._btn_saveing');
		this.v.btn_search 	= this.view.find('._btn_search');
		this.v.btn_reload 	= this.view.find('._btn_reload');
		this.v.btn_back 	= this.view.find('._btn_back');
		
		this.v.btn_save		.click(function(){ self.saveData(); });
		this.v.btn_save_pre	.click(function(){ self.saveData(); });
		this.v.btn_search	.click(function(){ self.search() });
		this.v.btn_reload	.click(function(){ self.reload() });
		this.v.btn_back		.click(function(){ self.restoreText() });
		
	}
	
	/* ---------- ---------- ---------- */

	p.codeminerEditor
	p.codeminerView
	p.initEditor = function(){
		var self = this;
		// this.v.textEditor.addClass(CodeMirrorU.getColorType(this.extention));
		
		var changeFirst = true
		this.codeminerEditor = CodeMirrorU.createSettingEditor(this.v._editText.get(0),this.extention,false);
		this.codeminerEditor.foldCode(CodeMirror.Pos(0,0));
		this.codeminerEditor.on("change",function(){
			if(changeFirst) {
				changeFirst = false
				return;
			}
			self.activeSaveBtn();
		})
		this.codeminerView = this.view.find(".CodeMirror");
	}
	
	/* ---------- ---------- ---------- */
	//テキスト追加
	
	p.initAddText = function(){
		var self = this;
		this.v.addText 				= this.view.find('._addText');
		this.v.btn_close 			= this.view.find('._addText ._btn_close');
		this.v.addText_label 		= this.view.find('._addText ._label');
		this.v.addText_btn_embed 	= this.view.find('._addText ._btn_embed');
		this.v.addText_textarea 	= this.view.find('._addText textarea');
		this.v.addText.hide();
		
		this.v.btn_close.click(function(){
			self.v.addText.hide();
		})
		this.v.addText_btn_embed.click(function(){
			self.appendText(self.v.addText_textarea.val());
			self.v.addText.hide();
		})
	}
	p.openAddTextWin = function(_key){
		this.v.addText.show();
		this.v.addText_label.html(_key.label)
		this.v.addText_textarea.val(_key.data)
	}
	
	p.appendText = function(_s){
		this.codeminerEditor.replaceSelection(_s,"around");
		this.codeminerEditor.focus();
	}
	
	
	/* ---------- ---------- ---------- */
	//CSS検索
	
	// p.initFindCSS = function(){
	// 	var self = this;
	// 	this.v.cssState.keyup(function(){
	// 		self.find($(this).val());
	// 	});
	// }
	p.findCSS = function(_key){
		// this.v.cssState.val(_key).keyup();
		this.find(_key);
	}
	p.tID_delay;
	p.find = function(_key){
		if(!_key)return;
		
		var l = this._findRow(this.codeminerEditor.getValue().split("\n"),_key);
		if(l != false){
			this.codeminerEditor.scrollIntoView({line:0,ch:0});
		    this.codeminerEditor.setSelection(
		    	{line:l[0],ch:l[1]},
		    	{line:l[0],ch:l[1] + _key.length }
		    );
		    this.codeminerEditor.scrollIntoView({line:l[0]+5,ch:0},true);
			// CodeMirror.commands.find(this.codeminerEditor);
		}
	}
	p._findRow = function(_a,_s){
		for (var i = 0; i <  _a.length ; i++) {
			if(_a[i].indexOf(_s) != -1){
				 return [ i , _a[i].indexOf(_s) ];
			}
		}
		return false;
	}
	p.search 	 =function(){
		CodeMirror.commands.find(this.codeminerEditor);
	}
	p.reload 	 =function(){
		var self = this;
		this.storage.reload(function(){
			self.initData();
		});
		
	}
	p.restoreText 	 =function(){
		this.codeminerEditor.setValue(this.initDataText)
	}
		
	/* ---------- ---------- ---------- */
	//#データ
	
	p.initDataText = "";
	p.initData = function (){
		this.initDataText = this.storage.text
		this.codeminerEditor.setValue(this.storage.text);
		
		this.initSaveBtn();
		
		//上えコール
		if(this.wapperClass){
			if(this.wapperClass.openedTextPage){
				this.wapperClass.openedTextPage(this.model);
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	//#Save Preview
	
	p.initSaveBtn  =function(){
		this.disableSaveBtn(true);
	}
	p.saveData = function (_isPreview){
		if(window.isLocked(true))return;
		var this_ = this;
		var s = this.codeminerEditor.getValue();
		this.storage.save(s,function(){
			this_.saveData_comp();
		});
		this.activeSaveingBtn();
	}
	p.saveData_comp = function (){
		this.disableSaveBtn();
		
		//上えコール
		if(this.wapperClass){
			if(this.wapperClass.savedTextPage){
				this.wapperClass.savedTextPage(this.model);
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	//#保存ボタン表示
	
	p.activeSaveBtn  =function(){
		this.v.btn_save.hide();
		this.v.btn_save_pre.show();
	}
	p.activeSaveingBtn  =function(){
		this.v.btn_saveing.show();
	}
	p.disableSaveBtn  =function(_b){
		var this_ = this;
		if(_b){
			this.disableSaveBtn_core()
		} else{
			setTimeout(function(){
				this_.disableSaveBtn_core()
			},500);
		}
	}
	p.disableSaveBtn_core  =function(){
		this.v.btn_save.show();
		this.v.btn_save_pre.hide();
		this.v.btn_saveing.hide();
	}
	/* ---------- ---------- ---------- */
	
	p.previewData =function (_callback){}
	
	/* ---------- ---------- ---------- */
	//#Stage
	
	p.isOpen = false;
	p.isFirst = true;
	p.stageInit 	 = function (){
		this.view.hide();
	}
	p.tID
	p.stageIn = function (_extra){
		if(! this.isOpen){ this.isOpen = true;
			var self = this;
			if(this.isFirst){
				this.createView()
				this.resize();
			}
			this.isFirst = false;
			this.view.show();
			if(_extra) {
				if(_extra["find"]){
					setTimeout(function(){
						self.find(_extra.find);
					},200);
				}
				if(_extra["findCss"]){
					setTimeout(function(){
						self.findCSS(_extra.findCss);
					},200);
				}
				if(_extra["addText"]){
					setTimeout(function(){
						self.openAddTextWin(_extra.addText);
					},200);
				}
			}
		}
	}
	p.stageOut = function (){
		if(this.isOpen){ this.isOpen = false;
			this.view.hide();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	p.remove 		 = function (){
	}	
	
	/* ---------- ---------- ---------- */
	
	p.initResize 		 = function (){
		var self = this;
		if(this.wapperClass["registResize"]){
			this.wapperClass.registResize(function(){
				self.resize();
			});
		}
	}	
	p.resize 		 = function (){
		if(this.isOpen){
			if(this.wapperClass["getH"]){
				this.codeminerView.height(this.wapperClass.getH() -80);
			}
		}
	}	
	return c;
})();


EditableView.GridClass  = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	 this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	this.grid = [];
	p.init 			 = function () {
		this.grid = [];
	}
	p.initRecords 	 = function (_grid){
			this.grid = _grid;
			if(this.grid ==undefined)this.grid = [];
		},
	p.addRecord 	 = function (_item){
			this.grid.push(_item);
		},
	p.addRecordAt 	 = function (_item,_index){
			this.grid.splice(_index,0,_item);
		},
	p.moveRecord 	 = function (_indexFrom,_indexTo){
		this.swapRecord(_indexFrom,_indexTo);
		return;
		},
	p.moveRecordToFirst 	 = function (_indexFrom){
		var n = this.grid[_indexFrom];
		this.grid.splice(_indexFrom,1);
		this.grid.unshift(n);
		return 0;
	},
	p.moveRecordToLast 	 = function (_indexFrom){
		var n = this.grid[_indexFrom];
		this.grid.splice(_indexFrom,1);
		this.grid.push(n);
		return this.grid.length -1;
	},
	p.swapRecord 	 = function (_indexFrom,_indexTo){
			if(! this.isValidArge(_indexFrom,_indexTo))return false;
			//
			var from_ 	 = this.grid[_indexFrom];
			var to_ 	 = this.grid[_indexTo];
			this.grid[_indexTo]  = from_;
			this.grid[_indexFrom]  = to_;
		},
	p.isValidArge	  = function (_indexFrom,_indexTo){
			if(_indexFrom < 0)return false;
			if(_indexFrom > this.grid.length-1)return false;
			if(_indexTo < 0)return false;
			if(_indexTo > this.grid.length-1)return false;
			return true;
		},
	p.overrideRecordAt  = function (_item,_index){
			this.grid[_index] = _item;
		},
	p.removeRecordAt  = function (_index){
			this.grid.splice(_index,1);
		},
	p.removeRecordLast  = function (){
			var n = this.grid.length-1
			this.grid.splice(n,1);
		},
	p.duplicateAt 	 = function (_index){
			var c = JSON.parse(JSON.stringify(this.grid[_index]))
			this.addRecordAt(c,_index);
		},
	p.reset 		 = function (){
			this.grid = [];
		},
	p.getRecords 	 = function (){
			return this.grid
		},
	p.getRecordAt 	 = function (_index){
			return this.grid[_index]
		}
	p.getRecordLeng = function (_index){
			return this.grid.length
		}
	return c;
})();
EditableView.M_Grid 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_gridType) {
	  this.init(_gridType);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.gridType  
	p.view;
	p.v 
	p.parent;
	p.gridData;
	p.detailView;
	p.detailNo;
	p.subGrids
	
	p.init 			 = function(_gridType) {
		this.gridType = _gridType;
		//
		this.v = {}
		this.subGrids = [] 
		this.setParam();
	}
	p.setParam 		 = function (){
		this.gridInfo = this.gridType.gridInfo;
		this.repeat	 = this.gridType.multiGridRepeat;
	}
	p.registParent 	 = function (_parent){
		this.parent = _parent;
	}
	p.openTab 		 = function (_n){
		for (var i = 0; i < this.subGrids.length ; i++) {
			this.subGrids[i].mGrid_stopEditMode()
		}
		this.subGrids[_n].mGrid_startEditMode();
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	p.initData 		 = function (_array){
		this.subGrids = [];
	
		var tag = "";
			tag += '<div class="_editableBlock">';
			tag += 		this.gridInfo.getHeadTag();
			tag += '	<div class="_replaceArea_MGRID"></div>';
			tag += '</div>';
		this.view = $(tag);
		this.parent.v.replaceArea.append(this.view);
		this.v.replaceArea = this.view.find('._replaceArea_MGRID');
		
		if(_array == null){
			_array = [];
			for (var i = 0; i < this.repeat ; i++) { 
				_array.push(null);
			}
		}
		
		for (var i = 0; i < _array.length ; i++) {
			this.addData(_array[i],i);
		}
		this.openTab(0);
	}
	p.getData 		 = function (){
		var a = [];
		for (var i = 0; i < this.subGrids.length ; i++) {
			a.push(this.subGrids[i].getData())
		}
		return a;
	}
	p.addData 		 = function (_o,_n){
		var o = _o;
		var g = new EditableView.BaseBlock(this.gridType,1,_n);
			g.registParent(this);
			g.initData(o);
			
		this.subGrids.push(g);
		this.parent.updateSubData();
	}
	/* ---------- ---------- ---------- */
	//#update
	p.updateSubData  = function (){
		this.parent.updateSubData();
	}
	return c;
})();
/**
 * PageViewとSupPabeViewで使用されるビュー
 * 
 * 	PageView...設定ページとパーツ・ひながたページにて使用
 * 	SupPabeView...フリーレイアウト時のオブジェクト編集画面や、META情報編集
 * 
 * 具体的に、BaseTEXTとBaseGridを同時に扱うビュー
 * 上に、M_GRIDがくる場合がある（現状は、カード検索のみ）
 * 
 */

EditableView.BaseBlock 		 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_gridType,_mGrid_deep,_no) {
	  this.init(_gridType,_mGrid_deep,_no);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.hasTextData = false;
	p.hasGridData = false;
	p.isActive_as_SubPage = false;
	
	p.init 			 = function(_gridType,_mGrid_deep,_mGrid_no) {
		this.gridType = _gridType;
		
		//M_GRID
		this.mGrid_deep = (_mGrid_deep != undefined) ? _mGrid_deep : 0;
		this.mGrid_no = (_mGrid_no != undefined) ? _mGrid_no : 0;
		
		this.v = {}
		this.parent;
		this.setParam()
	}
	p.setParam 		 = function (){
		this.gridInfo	 = this.gridType.gridInfo;
		
		if(this.gridType.textData !=null) this.hasTextData = true;
		if(this.gridType.gridData !=null) this.hasGridData = true;
		
		if(this.hasTextData) this.textView = new EditableView.BaseTexts(this.gridType);
		if(this.hasGridData) this.gridView = new EditableView.BaseGrid(this.gridType);
	}
	
	/* ---------- ---------- ---------- */
	//#registParent
	
	p.registParent 	 = function (_parent){
		this.parent = _parent;
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	
	p.initData 		 = function (_array){
		var this_ = this;
		var className = "_editableBlock";
		if(this.mGrid_deep > 0 ) className = "_editableBlock_in_MGRID";
		var tag = '';
			tag += '<div class="'+className+'">';
			tag += 		this.gridInfo.getHeadTag();
			tag += '	<div class="_replaceAreaTexts"></div>';
			tag += '	<div class="_replaceAreaGrid"></div>';
			tag += '	<div class="_replaceAreaOutput"></div>';
			tag += 		this.gridInfo.getFootTag();
			tag += '</div>';
		this.view = $(tag)
		this.parent.v.replaceArea.append(this.view);
		this.v.replaceAreaTexts = this.view.find('._replaceAreaTexts');
		this.v.replaceAreaGrid = this.view.find('._replaceAreaGrid');
		this.v.replaceAreaOutput= this.view.find('._replaceAreaOutput');
		
		if(this.hasTextData) this.textView.registParent(this);
		if(this.hasGridData) this.gridView.registParent(this);
		
		//M_GRID
		if(this.mGrid_deep > 0 ) {
			this.view.click(function(){
				if(!this_.isActive_as_SubPage){
				this_.parent.openTab(this_.mGrid_no)
				}
			})
		}
		if(_array == null){
			if(this.gridType.gridInfo.def != undefined){
				_array = JSON.parse(JSON.stringify(this.gridType.gridInfo.def));
			} else{
				_array = {}
				_array.texts = null
				_array.grid = null;
			}
		}
		
		if(this.hasTextData) this.textView.initData(_array.texts)
		if(this.hasGridData) {
			this.gridView.initState(_array._state)
			this.gridView.initData(_array.grid)
		}
		this.updateOutput();
	}
	
	p.getData 		 = function (){
		var o = {
			texts:{},
			grid:[]
		}
		if(this.hasTextData) o.texts = this.textView.getData();
		if(this.hasGridData){
			o.grid = this.gridView.getData();
			var state = this.gridView.getState()
			if(state != null) o._state = state;
		} 
		return o;
	}
	
	/* ---------- ---------- ---------- */
	//#update
	
	p.updateSubData  = function(){
		this.parent.updateSubData();
		this.updateOutput();
	}
	p.updateOutput  = function(){
		var s = this.gridInfo.update(this.getData());
		if(s){
			this.v.replaceAreaOutput.html(s);
		}
	}
	
	/* ---------- ---------- ---------- */
	//#M_GRID時に、タブを開いたときにコールされる
	
	p.mGrid_startEditMode  = function(){
		this.isActive_as_SubPage = true;
		this.view.addClass("_active");
		if(this.hasTextData) this.textView.mGrid_startEditMode();
		if(this.hasGridData) this.gridView.mGrid_startEditMode();
	}
	p.mGrid_stopEditMode 	 = function(){
		this.isActive_as_SubPage = false;
		this.view.removeClass("_active");
		if(this.hasTextData) this.textView.mGrid_stopEditMode();
		if(this.hasGridData) this.gridView.mGrid_stopEditMode();
	}
	return c;
})();
/**
 * フォーム入力のリスト
 * 設定画面や、オブジェクト編集にて、使用される
 * 
 * EditableView.BaseBlockでのみ使用される
 * 
 */
EditableView.BaseTexts 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_gridType) {
	  this.init(_gridType);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	this.gridType
	this.param;
	//
	this.view;
	this.v
	this.parent;
	this.gridParam;
	
	p.init 			 = function(_gridType) {
		this.gridType = _gridType;
		this.v = {}
		this.setParam();
	}
	p.setParam 		 = function (){
		this.gridParam = this.gridType.textData;
	}
	
	/* ---------- ---------- ---------- */
	//#registParent
	
	p.registParent 	 = function (_parent){
		this.parent = _parent;
		var tag = '';
			tag += '<div class="clearfix">';
			tag += 		this.gridParam.info.getHeadTag();
			tag += '	<table style="width:100%;"><tr><td width="100%">';
			tag += '		<div class="_replaceArea"></div>';
			tag += '		<div class="_replaceAreaSummary"></div>';
			tag += 			this.gridParam.info.getFootTag();
			tag += '	</td>';
			tag += '	<td>' + this.gridParam.info.getGuideImageTag()+ '</td></tr></table>';
			tag += '</div>';
		this.view = $(tag);
		this.parent.v.replaceAreaTexts.append(this.view);
		this.v.head		 = this.view.find('._head');
		this.v.replaceArea = this.view.find('._replaceArea');
		this.v.replaceAreaSummary = this.view.find('._replaceAreaSummary');
		this.v.replaceAreaSummary.hide();
		
		//イベントアサイン
		EditableView.InputEvent.assign(this.view,this);
		
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	
	p.initData = function(_array) {
		this.gridData = new EditableView.GridClass();
		if (_array == undefined) {
			this.gridData.initRecords([]);
			this.addData();
		} else {
			this.gridData.initRecords([_array]);
		}
		this.update();
	}
	p.getData = function() {
		return this.gridData.getRecords()[0];
	}
	p.addData = function() {
		var o = EditableView.InputU.addData(this.gridParam.cells);
		this.gridData.addRecord(o);
		this.update();
		this.parent.updateSubData();
	}
	p.changeData = function(data, no) {
		this.gridData.overrideRecordAt(data, no);
		this.parent.updateSubData();
	}
	p.removeData = function(no) {
		//
	}
	p.moveData = function(targetNo, _move) {
		//
	}
	/* ---------- ---------- ---------- */
	//#update
	
	p.update = function (){
		var list = this.gridData.getRecords();
		this.v.replaceArea.empty().append(EditableView.BaseTextsU.getTextsTag(this.gridParam,list));
	}
	
	/* ---------- ---------- ---------- */
	//#M_GRID時に、タブを開いたときにコールされる
	
	p.mGrid_startEditMode = function() {
		this.v.head.show();
		this.v.replaceArea.show();
		this.v.replaceAreaSummary.hide();
	}
	p.mGrid_stopEditMode = function() {
		this.v.head.hide();
		this.v.replaceArea.hide();
		this.v.replaceAreaSummary.show();
		//
		var list = this.gridData.getRecords();
		this.v.replaceAreaSummary.html(EditableView.BaseTextsU.getTextsTagSum(this.gridParam, list));
	}
	return c;
})();



EditableView.BaseTextsU 	 = (function() {
	
	function getTextsTag (_gridParam,_list){
		var nodes = [];
		for (var i = 0; i < 1 ; i++) {
			for (var ii = 0; ii < _gridParam.cells.length ; ii++) {
				var cell = _gridParam.cells[ii];
				var val = Treatment.toValue(_list[i][cell.id] ,"");
				nodes.push({
					name:cell.name,
					node:EditableView.InputFormProvider[cell.type](i,val,cell)
				});
			}
		}
		//
    	var fragment = document.createDocumentFragment();

        var table = document.createElement('table');
			table.setAttribute('class', '_layoutTable');
		fragment.appendChild(table);
			
		for (var i = 0; i < nodes.length; i++) {
	        var tr = document.createElement('tr');
	        var th = document.createElement('th');
	        	th.setAttribute('class', '_cellTitle');
				th.innerHTML = nodes[i].name;
			
	        var td = document.createElement('td');
	        if(nodes[i].node){
	        	td.appendChild(nodes[i].node)
	        }
				tr.appendChild(th);
				tr.appendChild(td);
			table.appendChild(tr);
		}
		return fragment;
	}
	
	//マルチグリッドで使用してる
	//カード検索オブジェクトの、検索条件サマリー表示
	function getTextsTagSum(_gridParam,_list){
		var tag = '<div class="_editableTextsSum">';
		for (var i = 0; i < _list.length ; i++) {
			for (var ii = 0; ii < _gridParam.cells.length ; ii++) {
				var cell = _gridParam.cells[ii];
				var val = Treatment.toValue(_list[i][cell.id] ,"");
				if(cell.view == "one") tag += val + '<br>';
			}
		}
		tag += "</div>";
		return tag;
	}
	return {
		getTextsTag:getTextsTag,
		getTextsTagSum:getTextsTagSum
	}
	
})();

/**
 * グリッド編集
 * 設定画面や、オブジェクト編集にて、使用される
 * 
 * EditableView.BaseBlockでのみ使用される
 */


EditableView.BaseGrid 	 = (function() {
	
	/* ---------- ---------- ---------- */
	
	var c = function(_gridType) {
	  this.init(_gridType);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */

	p.gridType
	p.view;
	p.v
	p.parent;
	p.gridData;

	p.init = function(_gridType) {
		EditableView.currentGrid = this;
		this.gridType = _gridType;
		this.v = {}
		this.setParam();
	}
	p.setParam = function() {
		this.gridParam = this.gridType.gridData;
	}
	
	/* ---------- ---------- ---------- */
	//#registParent
	
	p.registParent 	 = function (_parent){
		this.parent = _parent;
		var tag = "";
			tag += '<div class="clearfix">'
			tag += 		this.gridParam.info.getHeadTag();
			tag += '	<div style="width:100%;">'
			tag += '		<table class="_editableTableBtns">';
			tag += '			<tr>';
			tag += '			<td style="padding-left:20px;"><i class="fa fa-level-up fa-rotate-180"></i> ';
			tag += '				<span class="_cms_btn-mini _cms_btn_active _btn_add">＋</span>';
			tag += '				<span class="_cms_btn-mini _cms_btn_red _btn_remove">ー</span>';
			tag += '				<span class="_cms_btn-mini _cms_btn_edited _btn_stateReset"><i class="fa fa-refresh "></i> <span class="_edited">編集跡</span>リセット</span>';
			tag += '			</td>';
			tag += '			<td style="text-align:right">';
			tag += '				<span class="_cms_btn_alpha _btn_wide_fit_ng"><i class="fa fa-square-o "></i> 画面フィット</span>';
			tag += '				<span class="_cms_btn_alpha _btn_wide_fit"><i class="fa fa-check-square "></i> 画面フィット</span>';
			tag += '				<span class="_cms_btn-mini _cms_btn_active _btn_restore"><i class="fa fa-reply "></i> 編集前に復帰</span>';
			tag += '				<span class="_cms_btn-mini _cms_btn_excel _btn_csv_im"><i class="fa fa-pencil"></i> 表計算ソフトで編集</span>';
			tag += '			</td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '		<div class="_tableWapper">';
			tag += '			<div class="_replaceArea _tableWapperSc"></div>';
			tag += '		</div>';
			tag += '		<div class="_replaceAreaSummary"></div>';
			tag += '		<table class="_editableTableBtns">';
			tag += '			<tr>';
			tag += '			<td style="padding-left:20px;"><i class="fa fa-level-down fa-rotate-180"></i>';
			tag += '				<span class="_cms_btn-mini _cms_btn_active _btn_add2">＋</span>';
			tag += '				<span class="_cms_btn-mini _cms_btn_red _btn_remove2">ー</span>';
			tag += '			</td>';
			tag += '			<td style="text-align:right;padding:3px 5px 0 0;">';
			tag += CMS_GuideU.getGuideTag("misk/grid","グリッド編集について");
			tag += '			</td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += 			this.gridParam.info.getFootTag();
			tag += '	</div>';
			tag += '</div>'

		this.view = $(tag);
		this.parent.v.replaceAreaGrid.append(this.view);
		this.v.head				 = this.view.find('._head');
		this.v.replaceArea		 = this.view.find('._replaceArea');
		this.v.replaceAreaSummary = this.view.find('._replaceAreaSummary');
		this.v.tableWapper		 = this.view.find('._tableWapper');
		this.v.btns				 = this.view.find('._editableTableBtns');
		
		if(this.gridType.isNarrow){
			this.view.find("._btn_wide_fit_ng").html("")
			this.view.find("._btn_wide_fit").html("")
			this.view.find("._btn_restore").html("").hide()
			this.view.find("._btn_csv_im").html("").hide()
		}
		
		//イベントアサイン
		var this_ = this;
		var U = EditableView.InputU;
		
		//グリッド編集アサイン
		this.view.find('._btn_add')			.click(function(){ this_.addDataFirst(); });
		this.view.find('._btn_add2')		.click(function(){ this_.addData(); });
		this.view.find('._btn_remove')		.click(function(){ this_.removeAnimTop(); });
		this.view.find('._btn_remove2')		.click(function(){ this_.removeAnimLast(); });
		this.view.find('._btn_restore')		.click(function(){ this_.restreData(); });
		this.view.find('._btn_stateReset')	.click(function(){ this_.resetState(); });
		this.view.find('._btn_csv_im')		.click(function(){ this_.importCSV(); });
		
		this.view.on("click","._btn_move_up"	,function(){this_.moveData(U.getNo(this),-1);})
		this.view.on("click","._btn_move_down"	,function(){this_.moveData(U.getNo(this),1);})
		this.view.on("click","._btn_dup"		,function(){this_.duplicateData(U.getNo(this));})
		this.view.on("click","._btn_cell_show"	,function(){this_.hideCol(this)})
		this.view.on('click',"._btn_wide_fit",function(){this_.setWideFit(false)})
		this.view.on('click',"._btn_wide_fit_ng",function(){this_.setWideFit(true)})
		
		//ページ遷移
		this.view.on('click',"._gridPager span",function(){ this_.openPage(U.getNo(this)) })
		
		//公開
		this.view.on("click","[data-id='publicData']"	,function(){ this_.pubDate(U.getNo(this)) });
		
		//hover時のイベントアサイン
		this.setBtn_hover()
		
		//イベントアサイン
		EditableView.InputEvent.assign(this.view,this);
		
		//CSV編集ボタン非表示
		if(this.gridParam.hideGridEdit){
			this.view.find('._btn_csv_im').css("visibility","hidden")
		}
		
		//テーブルセル イベントアサイン
		this.view.on("click","td",function(){ 
			var no = $(this).data("no")
			if(no != undefined){
				var id = $(this).data("id")
				this_.showCurrentRowClick(no,id)
			}
		});
	}
	/* ---------- ---------- ---------- */
	
	p.openPage = function (_n){
		this.state.setCurrentPage (_n)
		this.update();
	}
	
	p.pubDate = function (_n){
		var r = this.state.getRowAtPage(_n);
		var tar = this.v.trs.eq(r)
		if(tar.hasClass("_tr-hide")){
			tar.removeClass("_tr-hide");
		} else{
			tar.addClass("_tr-hide");
		}
	}
	
	/* ---------- ---------- ---------- */
	//#State 現在編集中のセルや、表示列を保持する
	//initDataよりも先にコールすること
	
	p.state;
	p.initState 		 = function (_state){
		this.state = new EditableView.BaseGridState()
		this.state.setData(_state)
	}
	p.getState = function (){
		return this.state.getData();
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	
	p.initDataS =""
	p.initData 		 = function (_array,_isInit){
		if(this.state == undefined) this.initState();
		
		_isInit =  (_isInit == undefined) ? true : _isInit;
		if(_isInit) this.initDataS = JSON.stringify(_array)
		this.gridData = new EditableView.GridClass();
		if(_array == null){
			this.gridData.initRecords([]);
		} else{
			this.gridData.initRecords(_array);
		}
		
		this.update();
	}
	p.getData 		 = function (){
		return this.gridData.getRecords();
	}
	p.addDataFirst 	 = function (){
		var o = EditableView.InputU.addData(this.gridParam.cells)
		this.gridData.addRecordAt(o,0);
		this.state.setCurrentPage(0);
		this.update();
		this.parent.updateSubData();
	}
	p.addData 		 = function (){
		var o = EditableView.InputU.addData(this.gridParam.cells)
		this.gridData.addRecord(o);
		this.state.setCurrentPage(this.getLastPage());
		this.update();
		this.parent.updateSubData();
	}
	p.importCSV 	 = function (){
		this.startDirectArea();
	}
	
	p.changeData 	 = function (data,no){
		this.gridData.overrideRecordAt(data,no);
		this.parent.updateSubData();
	}
	p.removeData 	 = function (no){
		this.gridData.removeRecordAt(no);
		this.state.setCurrentRow(-1);
		this.update();
		this.parent.updateSubData();
	}
	p.removeDataLast  = function (){
		this.gridData.removeRecordLast();
		this.update();
		this.parent.updateSubData();
	}
	p.moveData 		 = function (targetNo,_move){
		this.gridData.moveRecord(targetNo,targetNo+_move);
		this.state.setCurrentRow(targetNo + _move);
		this.update();
		this.parent.updateSubData();
	}
	p.duplicateData 		 = function (targetNo){
		this.gridData.duplicateAt(targetNo);
		this.state.setCurrentRow (targetNo +1);
		this.update();
		this.parent.updateSubData();
	}
	p.restreData 		 = function (){
		this.initData(JSON.parse(this.initDataS));
	}
	p.resetState 		 = function (){
		var list = this.gridData.getRecords();
		for (var i = 0; i <  list.length ; i++) { list[i]._state = []; }
		this.update();
		this.parent.updateSubData();
	}
	
	p.getLastPage = function() {
		return Math.floor((this.gridData.getRecordLeng() - 1) / this.state.maxRow);
	}
	
	p.getLastRowNo = function() {
		return this.gridData.getRecordLeng() - 1;
	}
	
	/* ---------- ---------- ---------- */
	//#update
	//グリッドを再描画する
	
	p.update = function (){
		var _param  = this.gridParam;
		var _list  = this.gridData.getRecords();
		
		//ページ調整
		this.state.adjustPage(_list.length);
 		
 		//var t = new Date()
 		
 		//グリッドタグ取得
 		var h = this.v.replaceArea.height();
 		this.v.replaceArea.css("height",h);
		this.v.replaceArea.empty();
		
		var tag = EditableView.BaseGridU.getGridTag(_param, _list, this.state);
		try{
			this.v.replaceArea.append(tag);
		}catch( e ){
			this.v.replaceArea.append(CMS_E.PARSE_ERROR);
		}
		this.v.replaceArea.css("height","auto");
 		// console.log("Grid " , new Date().getTime() - t.getTime());
 		
		this.v.trs = this.v.replaceArea.find("tr")
		
		this.showCurrentRow(this.state.currentRow);
		this.setWideFit(this.state.fitWide);
		
		// Float_SimpleInputView.stageOut()
	}
	
	/* ---------- ---------- ---------- */
	
	//行移動、複製ボタンhover処理
	p.setBtn_hover = function (){
		var this_ = this;
		var U = EditableView.InputU;
		this.view.on('click',"._btn_delete",function(){this_.removeAnim(U.getNo(this))})
		this.view.on('mouseenter',"._btn_delete",function(){this_.removeAnimHover(U.getNo(this),true) })
		this.view.on('mouseleave',"._btn_delete",function(){this_.removeAnimHover(U.getNo(this),false) })
		this.view.on('mouseenter',"._btn_move_up",function(){this_.actionAnimUPHover(U.getNo(this),true) })
		this.view.on('mouseleave',"._btn_move_up",function(){this_.actionAnimUPHover(U.getNo(this),false) })
		this.view.on('mouseenter',"._btn_move_down",function(){this_.actionAnimDownHover(U.getNo(this),true) })
		this.view.on('mouseleave',"._btn_move_down",function(){this_.actionAnimDownHover(U.getNo(this),false) })
		this.view.on('mouseenter',"._btn_dup",function(){this_.actionAnimDup(U.getNo(this),true) })
		this.view.on('mouseleave',"._btn_dup",function(){this_.actionAnimDup(U.getNo(this),false) })
		
	}
	
 	p.actionAnimUPHover  = function(_n, _b) { this.switchClass(_b ,_n ,"_willActionUPHover")}
 	p.actionAnimDownHover  = function(_n, _b) { this.switchClass(_b ,_n ,"_willActionDownHover")}
 	p.actionAnimDup 	 = function(_n, _b) { this.switchClass(_b ,_n ,"_willActionDup")}
 	p.removeAnimHover 	 = function(_n, _b) { this.switchClass(_b ,_n ,"_willRemoveHover")}
 	
 	p.getRowTar = function(_n) { return this.v.trs.eq(this.state.getRowAtPage(_n)) }
 	p.switchClass = function(_b,_n,_id) {
		var tar = this.getRowTar(_n);
		(_b) ? tar.addClass(_id): tar.removeClass(_id);
 	}
 	
	//行削除アニメーション
	p.removeAnim = function (_n){
		var this_ = this;
		var tar = this.v.trs.eq( this.state.getRowAtPage(_n) )
		tar.addClass("_willRemove");
		setTimeout(function(){ this_.removeData(_n); },100);
	}
	//先頭の行削除アニメーション
	p.removeAnimTop = function (){
		this.state.setCurrentPage(0);
		this.update();
		this.removeAnim(0);
	}
	//最後の行削除アニメーション
	p.removeAnimLast = function (){
		this.state.setCurrentPage(this.getLastPage());
		this.update();
		this.removeAnim(this.getLastRowNo());
	}
	
	/* ---------- ---------- ---------- */
	
	//行選択の強調表示
	p.showCurrentRowClick = function (_n,_id){
		this.showCurrentRow(_n,_id)
	}
	
	// p.currentPage = 0;
	// p.currentRow = -1;
	p.currenID = ""
	p.showCurrentRow = function (_row,_id){
		//remove mark
		if(this.state.isCurrentPage()){
			var r = this.state.getRowAtPage();
			if(this.state.currentRow != -1) 	this.v.trs.eq(r).removeClass("_currentRow")
			if(this.currenID != "") 	this.v.trs.eq(r).find("td").removeClass("_currentTD")
		}
		
		this.state.setCurrentRow (_row);
		this.currenID = _id;
		
		//mark current row
		if(this.state.isCurrentPage()){
			var r = this.state.getRowAtPage();
			this.v.trs.eq(r).addClass("_currentRow");
			this.v.trs.eq(r).find("td[data-id='"+this.currenID+"']").addClass("_currentTD");
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//セルの列の表示・非表示きりかえ
	p.setWideFit = function (_b){
		if(_b){
			this.state.setFitWide(true)
			this.view.find('._btn_wide_fit').show()
			this.view.find('._btn_wide_fit_ng').hide()
			this.v.tableWapper.removeClass("_wide")
		} else{
			this.state.setFitWide(false)
			this.view.find('._btn_wide_fit').hide()
			this.view.find('._btn_wide_fit_ng').show()
			this.v.tableWapper.addClass("_wide")
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//セルの列の表示・非表示きりかえ 編集ステートに保持する
	
	p.hideCol = function (_this){
		var no = $(_this).data("no");
		var s = EditableView.BaseGridU.strintState(this.state.hideCols,no);
		this.state.setHideCols(s);
		this.update();
	}
	
	/* ---------- ---------- ---------- */
	//直接編集(表計算と連携)
	
	p.startDirectArea 	 = function (){
		var self = this;
		// Float_SimpleInputView.stageOut();
		var list = this.gridData.getRecords();
		var cells = this.gridParam.cells;
		var s = EditableView.BaseGridU.arrayToText(list,cells);
		
		Editer_ExcelView.stageIn(s,function(_s){
			setTimeout(function(){
				self.initData(EditableView.BaseGridU.textToArray(_s, cells), false);
				self.parent.updateSubData();
			},200);
		});
	}
	
	/* ---------- ---------- ---------- */
	//#M_GRID時に、タブを開いたときにコールされる
	
	p.mGrid_startEditMode  = function (){
		this.v.head.show();
		this.v.replaceArea.show();
		this.v.replaceAreaSummary.hide();
		this.v.btns.show()
	}
	p.mGrid_stopEditMode 	 = function (){
		this.v.head.hide();
		this.v.replaceArea.hide();
		this.v.replaceAreaSummary.show();
		this.v.btns.hide();
		
		var list = this.gridData.getRecords();
		this.v.replaceAreaSummary.html(EditableView.BaseGridU.getGridTagSum(this.gridParam,list));
	}
	return c;
})();



EditableView.BaseGridState = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	  this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function() {
	}
	
	p.maxRow = (window["GRID_EDIT_MAX_ROW"]) ? GRID_EDIT_MAX_ROW :50;
	
	p.currentRow = -1
	p.currentPage = 0
	p.fitWide = true
	p.hideCols = ""
	
	p.setData = function(_state) {
		var o = _state;
		if(o == undefined) o = {}
		if(o["currentRow"]  === undefined ) o.currentRow = -1;
		if(o["currentPage"] === undefined ) o.currentPage = 0;
		if(o["fitWide"]  === undefined ) o.fitWide = true;
		if(o["hideCols"]  === undefined ) o.hideCols = "";
		this.currentRow  = o.currentRow;
		this.currentPage  = o.currentPage;
		this.fitWide 	 = o.fitWide;
		this.hideCols 	 = o.hideCols;
	}
	p.getData = function() {
		return {
			currentRow: this.currentRow,
			currentPage: this.currentPage,
			fitWide: this.fitWide,
			hideCols: this.hideCols
		};
	}
	
	//setter
 	p.setCurrentPage = function(_n) { this.currentPage = _n; }
 	p.setCurrentRow = function(_n) { this.currentRow = _n; }
 	p.setFitWide = function(_n) { this.fitWide = _n; }
 	p.setHideCols = function(_n) { this.hideCols = _n; }
	
	//ページにおける現在の行を取得
	p.getRowAtPage = function(_r) {
		if(_r === undefined) _r = this.currentRow
		var s = this.currentPage * this.maxRow;
		var r = (_r - s) + 1;
		return r;
	}
	
	//指定行は、現在の表示ページに含まれるか
	p.isCurrentPage = function(_r) {
		if(_r == undefined) _r = this.currentRow
		var s = this.currentPage * this.maxRow;
		var e = s + this.maxRow;
		if(s <= _r){
			if(e > _r) return true;
		}
		return false;
	}
	
	//ページ調整
	p.adjustPage = function(_pageLeng) {
 		if (_pageLeng <= this.maxRow * this.currentPage) {
 			this.currentPage  = Math.floor(_pageLeng / this.maxRow) - 1;
 		}
 		//-1などになる場合は、0にまるめる
 		if(this.currentPage < 0) this.currentPage = 0;
	}
	
	return c;
})();

EditableView.BaseGridU 	 = (function() {
		
	function getGridTag(_gridParam,_list,_state){
		if(_state == undefined)_state = { hideCols:""}
		var _startPage = _state.currentPage;
		var _hideCols = _state.hideCols.split(",");
		
		var maxRow = _state.maxRow;
		var listLeng = _list.length;
		
		//テーブル作成
    	var fragment = document.createDocumentFragment();

        var table = document.createElement('table');
			table.setAttribute('class', '_editableGridTable');
			table.appendChild(_getHeadNode(_gridParam.cells, _hideCols));
		
			fragment.appendChild(_createPager(listLeng,maxRow,_startPage));
			fragment.appendChild(table);
			fragment.appendChild(_createPager(listLeng,maxRow,_startPage));
		
		//データ0の場合
		if(listLeng == 0){
			table.appendChild(_getEmptyNode());
			return fragment;
		}
		
		// var t = new Date();
		//各行追加
		for (var g = 0; g < maxRow ; g++) {
			var i = (_startPage * maxRow) + g;
			if(i >= listLeng) break;
			table.appendChild( _getGridTagRow(_gridParam,i,_list,_hideCols));
		}
	 		
		return fragment;
	}
	
	function _getGridTagRow(_gridParam,i,_list,_hides){
			
        var tr = document.createElement('tr');
			tr.setAttribute('data-no', i);
			tr.setAttribute('class',  (_list[i].publicData != "1") ? "_tr-hide" : "");
			
        var td = document.createElement('td');
			td.setAttribute('class', "_no");
			td.appendChild(document.createTextNode(i+1));
			tr.appendChild(td);
			
		var _state = _initEditState(_list[i]);
		
		for (var ii = 0; ii < _gridParam.cells.length ; ii++) {
			var cell = _gridParam.cells[ii];
			var val = Treatment.toValue(_list[i][cell.id] ,"");
			
			var node;
			var prov = EditableView.InputFormProviderGrid;
			var state = _getEditState(_state, cell.id);
			if(_isVisible(_hides,ii)){
				node = prov[cell.type](i, val, cell,state);
			} else{
				node = prov.edited(i, val, cell,state);
			};
			if(node) tr.appendChild(node);
		}
		
		var editNode1 = (function(){ 
			var s = ""
				s += '<span class="_btn_visi _cms_btn_alpha _btn_move_up" data-no="'+i+'"><i class="fa fa-arrow-up"></i> </span><br>';
				s += '<span class="_btn_visi _cms_btn_alpha _btn_move_down" data-no="'+i+'"><i class="fa fa-arrow-down"></i> </span>'
	        var td = document.createElement('td');
				td.setAttribute('class', "_edit");
				td.innerHTML = s;
				return td;
		})();
		var editNode2 = (function(){ 
			var s = ""
				s += '<span class="_btn_visi _cms_btn_alpha _btn_dup" data-no="'+i+'"><i class="fa fa-files-o"></i> </span><br>'
				s += '<span class="_btn_delete" data-no="'+i+'"></span>';
	        var td = document.createElement('td');
				td.setAttribute('class', "_edit");
				td.innerHTML = s;
				return td;
		})();
		tr.appendChild(editNode1);
		tr.appendChild(editNode2);
		
		return tr;
	}
	
	function _createPager(_leng, _maxRow, _start) {
        var div = document.createElement('div');
		if (_leng <= _maxRow) return div;
		var pages = Math.ceil(_leng / _maxRow);
        var div = document.createElement('div');
			div.setAttribute('class', '_gridPager');
		var s = ""
		for (var i = 0; i < pages; i++) {
			var cs = ""
			if (_start == i) cs += "_current"
			s += '<span class="' + cs + '" data-no="' + i + '">' + (i + 1) + '</span> '
		}
			div.innerHTML = s;
		return div;
	}
	
	function _getHeadNode(_cells,_hides){
        var tr = document.createElement('tr');
        
		var th = document.createElement('th');
			th.innerHTML = "no";
			tr.appendChild(th);
			
		for (var i = 0; i < _cells.length ; i++) {
			var cell = _cells[i];
			var th = document.createElement('th');
			if(i == 0){
				th.innerHTML = cell.name;
				tr.appendChild(th);
			} else{
				if(cell.type != CELL_TYPE.STATE){
					if(_isVisible(_hides,i)){
						th.innerHTML = '<i class="fa fa-caret-down "></i>' + cell.name;
						th.setAttribute("class","_btn_cell_show");
						th.setAttribute("data-no",i);
					} else{
						th.innerHTML = '<i class="fa fa-caret-right "></i> <br>'
						th.setAttribute("class","_btn_cell_show _btn_cell_show-hide");
						th.setAttribute("style","width:10px");
						th.setAttribute("data-no",i);
					}
				tr.appendChild(th);
				}
			}
		}
		var th = document.createElement('th');
			th.innerHTML = "移<br>動";
			tr.appendChild(th);
		var th = document.createElement('th');
			th.setAttribute("style","width:35px");
			th.innerHTML = "複<br>製";
			tr.appendChild(th);
		return tr;
	}
	
	function _getEmptyNode(){
        var tr = document.createElement('tr');
		var s = "";
			s += "<tr>";
			s += '<td colspan="100" class="_nodata"><i class="fa fa-plus-square "></i> ボタンを押して、データを入力してください</td>';
			s += '</tr>';
			tr.innerHTML = s;
		return tr;
	}
	
	function _isVisible (_s,_i){
		if(_s == undefined) return true;
		if(_s.length == 0) return true;
		if(_s.length <= _i) return true;
		return (_s[_i] === "0") ? false:true;
	}
	
	function _initEditState(_o){
		if(_o[CELL_TYPE.STATE] === undefined) _o[CELL_TYPE.STATE] = [];
		return _o[CELL_TYPE.STATE]
	}
	
	function _getEditState(_a,_id){
		var b = false;
		for (var g = 0; g <  _a.length ;g++) {
			if(_a[g] == _id) b = true;
		}
		return b;
	}
	
	/* ---------- ---------- ---------- */

	//マルチグリッドで使用してる
	//カード検索オブジェクトの、検索条件サマリー表示
	
	function getGridTagSum(_gridParam,_list){
		var tag = '<table class="_editableGridSum">';
		for (var i = 0; i < _list.length ; i++) {
			tag += "<tr>";
			for (var ii = 0; ii < _gridParam.cells.length ; ii++) {
				var cell = _gridParam.cells[ii];
				var val = Treatment.toValue(_list[i][cell.id] ,"");
				if(cell.view == "one") tag += '<td>' + val + '</td>';
			}
			tag += "</tr>";
		}
		tag += "</table>";
		return tag;
	}
	
	// "0110"のように、テキストで配列をあつかう
	function strintState(_s,_no){
		if(_s === undefined) _s = "1"
		if(_s === "")_s = "1"
		var a = _s.split(",")
		var leng = a.length;
		for (var i = 0; i <= _no ; i++) {
			if(leng <= i)a[i] = "1"
		}
		a[_no] = (a[_no] == "1") ? "0" : "1";
		return a.join(",");
	}
	
	function textToArray (csv,cellTypes){
		var lines = csv.split("\n");
		var list = [];
		for (var i = 1; i < lines.length ; i++) {
			var o = {};
			var d = BR_2_N(lines[i]).split("	");
			if(d.length === 1 && d[0] === ""){
				//
			}else{
				var count = 0;
				for (var ii = 0; ii < cellTypes.length ; ii++) {
					d[count] = TAB_2_N(d[count]);
					
					var cell = cellTypes[ii];
					switch (cell.type) {
							
						case CELL_TYPE.ANCHOR :
							//このタイプは、2セルデータを使用
							o[cell.id] = {
								href	: d[count+0],
								target	: d[count+1]
							};
							if(o[cell.id].href ===undefined)o[cell.id].href = "";
							if(o[cell.id].target ===undefined)o[cell.id].target = "";
							count++;
							break;
							
						case CELL_TYPE.BTN :
							// //このタイプは、4セルデータを使用
							o[cell.id] = {
								href	: d[count+0],
								target	: d[count+1],
								text	: d[count+2],
								class_	: d[count+3],
								image	: ""
							};
							if(o[cell.id].href 		===undefined) o[cell.id].href = "";
							if(o[cell.id].target 	===undefined) o[cell.id].target = "";
							if(o[cell.id].text 		===undefined) o[cell.id].text = "";
							if(o[cell.id].class_ 	===undefined) o[cell.id].class_ = "";
							
							count++;
							count++;
							count++;
							break;
							
						case CELL_TYPE.IMAGE :
							o[cell.id] = {
								mode	: getImageMode( d[count] ),
								path	: getImageLayoutDB( d[count] ),
								width	: getExelString( d[count+1] ),
								ratio	: getExelString( d[count+2] )
							};
							count++;
							count++;
							
							break;
						
						default :
							if(d[count] != ""){
								o[cell.id] = d[count];
							}
					}
					count++
				}
				list.push(o);
			}
		}
		return list;
	}
	
	function arrayToText (list,cellTypes){
		var csv = [];
		var a = [];
		
		//見出し（1行目）
		for (var i = 0; i < cellTypes.length ; i++) {
			var cell = cellTypes[i];
			switch (cell.type) {
			case CELL_TYPE.ANCHOR :
				a.push("●"+cell.name)
				a.push("●リンクターゲット")
				break;
				
			case CELL_TYPE.BTN :
				a.push("●"+cell.name)
				a.push("●リンクターゲット")
				a.push("●リンクラベル名")
				a.push("●リンククラス名")
				break;
			
			case CELL_TYPE.IMAGE :
				a.push("●"+cell.name)
				a.push("●画像幅")
				a.push("●画像比率")
				break;
			
			case CELL_TYPE.STATE : break;
			
			default :
				a.push("●"+cell.name);
			}
		}
		csv.push(a.join("	"));
		
		//データ（2行目〜）
		for (var i = 0; i < list.length ; i++) {
			var row = [];
			for (var ii = 0; ii < cellTypes.length ; ii++) {
				var b = true;
				if(cellTypes[ii].type === CELL_TYPE.STATE) b = false;//編集ステートは書き出さない
				//
				if(b){
					var cell = cellTypes[ii];
					var val = list[i][cell.id];
					if(val){
						if(cell.type == CELL_TYPE.ANCHOR){
							val = val.href + "	" +  val.target;
							
						} else if(cell.type == CELL_TYPE.BTN){
							val = [
								val.href,
								val.target,
								val.text,
								val.class_
							].join("	");
							
						} else if(cell.type == CELL_TYPE.IMAGE){
							val = [
								setImageLayoutDB(val.path),
								"["+val.width+"]",
								"["+val.ratio+"]"
							].join("	");
							
						} else{
							val = N_2_TAB(val);
							
						}
						val = N_2_BR(val);
					} 
					row.push(val);
				}
			}
			csv.push(row.join("	"));
		}
		return csv.join("\n");
	}
	
	/* ---------- ---------- ---------- */
	
	//画像ブロックに、レイアウトモードを追加したので、
	//表計算出力に対応させる (IDを発行し、IO対応)
	
	var ImageLayoutDB = {}
	
	function setImageLayoutDB(_val){
		if(typeof _val == "string") return _val;
		var uid = DateUtil.getRandamCharas(10);
		ImageLayoutDB[uid] = _val;
		return "{IMAGE_ID:" + uid + "}";
	}
	
	window.ImageLayoutDB = ImageLayoutDB;
	function getExelString(_s){
		_s = _s.split("[").join("");
		_s = _s.split("]").join("");
		return _s;
	}
	function getImageMode(_uid){
		if(_uid.indexOf("{IMAGE_ID:") != -1) return "layout";
		return "simple";
	}
	function getImageLayoutDB(_uid){
		if(_uid.indexOf("{IMAGE_ID:") == -1){ return _uid; }
		_uid = _uid.split("{IMAGE_ID:").join("")
		_uid = _uid.split("}").join("");
		if(ImageLayoutDB[_uid]){
			return ImageLayoutDB[_uid];
		}
		return {};
	}
	
	/* ---------- ---------- ---------- */
	
	var BR = "{_BR}";
	
	function N_2_BR(_s){
		if (_s == undefined) return ""; 
		_s = _s.split("<br />").join("&lt;br&gt;");
		_s = _s.split("<br>").join("&lt;br&gt;");
		_s = _s.split("\n").join(BR);
		return _s;
	}
	
	function BR_2_N(_s){
		if (_s == undefined) return "";
		_s = _s.split("&lt;br&gt;").join("<br>");
		_s = _s.split(BR).join("\n");
		return _s;
	}
	
	var TAB = "{_T}";
	function N_2_TAB(_s){
		if (_s == undefined) return ""; 
		if(_s == "\t") _s = "";
		_s = _s.split("\t").join(TAB);
		return _s;
	}
	
	function TAB_2_N(_s){
		if (_s == undefined) return "";
		_s = _s.split(TAB).join("\t");
		return _s;
	}
	
	return {
		textToArray:textToArray,
		arrayToText:arrayToText,
		getGridTag:getGridTag,
		getGridTagSum:getGridTagSum,
		strintState:strintState
	}
})();



EditableView.InputU = (function(){
	
	function getNo(_s){
		return Number($(_s).attr("data-no"));
	}
	
	function addData(_type){
		var cellTypes = _type;
		var o = {};
		for (var i = 0; i < cellTypes.length ; i++) {
			var cell = cellTypes[i];
			var val = "";
			val = cell.def;
			if(typeof cell.def == "function") {
				val = cell.def()
			}
			//2017-08-28 19:12:47
			if(typeof cell.def == "object") {
				val = JSON.parse(JSON.stringify(cell.def));
			}
			if(val == ""){
				if(cell.type == CELL_TYPE.SELECT){
					for (var g = 0; g < cell.vals.length ; g++) {
						if(cell.vals[g][2] == "1")val = cell.vals[g][0]; 
					}
				}	
			}
			if(val=="DATE_ID"){
				val = DateUtil.getFormattedDate(new Date(),"YYYYMMDD_RRRRR");
			}
			o[cell.id] = val;
		}
		o._state = ["publicData"];
		return o;
	}
	
	function getTenten(_s){
		var s = "";
		if(_s){
			s = ".";
			var gg = Math.floor(_s.length/5);
			for (var i = 0; i <  gg ; i++) {
				s += ".";
			}
		} else{
			s = "";
		}
		return s.split(".....").join("..... ");
	}
	
	return { 
		getNo:getNo,
		addData:addData,
		getTenten:getTenten
		
	}
})();


EditableView.InputFormProvider = (function(){

	function getNoteTag (_s){
		var tag = ""
		if(_s != ""){
			if(_s != undefined){
				tag += '<div class="_note">'+_s +'</div>'
			}
		}
		return tag;
	}
	function _getNote(_cell){
		var note = getNoteTag(_cell.note);
		var div = document.createElement('div');
		if(note) div.innerHTML = note;
		return div;
	}

	/* ---------- ---------- ---------- */

	function single(i,val,cell){
    	var fragment = document.createDocumentFragment();
		var input = document.createElement('input');
			input.setAttribute('class', "_editableNode");
			input.setAttribute('style', cell.style);
			input.setAttribute('data-no', i);
			input.setAttribute('data-id', cell.id);
			input.setAttribute('data-type', cell.type);
			input.setAttribute('placeholder', cell.placeholder);
			input.value = val;
		
		fragment.appendChild(input);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function multi(i,val,cell){
    	var fragment = document.createDocumentFragment();
        var div = document.createElement('div');
			div.setAttribute('class', "_input-with-btns");
			
		var textarea = document.createElement('textarea');
			textarea.setAttribute('class', ["_editableNode" ,cell.class_,CMS_FormU.getCSS_Class(cell.codeType)].join(" "));
			textarea.setAttribute('style', cell.style);
			textarea.setAttribute('data-no', i);
			textarea.setAttribute('data-id', cell.id);
			textarea.setAttribute('data-type', cell.type);
			textarea.value = val;
		
        var btns = document.createElement('div');
			btns.setAttribute('class', "_btns");
			btns.innerHTML = '<span class="_btn_input _edit" data-type="textarea:'+cell.codeType+'">'+Dic.I.Edit+'</span>'
			
			div.appendChild(textarea);
			div.appendChild(btns);
		
		fragment.appendChild(div);
		fragment.appendChild(_getNote(cell));
		return fragment;
	}
	
	function select(i,val,cell){
		
    	var fragment = document.createDocumentFragment();
        var select = document.createElement('select');
			select.setAttribute('data-no', i);
			select.setAttribute('data-id', cell.id);
        
		var ops = (function(_cell,_parent){ 
			var s = "";
			var vs = _cell.vals;
			if(typeof _cell.vals == "function") vs = _cell.vals();
			var m = false;
			for (var g = 0; g < vs.length ; g++) {
   				var option = document.createElement('option');
				var op = vs[g];
				if( val == op[0]){ 
					option.setAttribute('selected', "selected");
					m = true;
				}
				option.setAttribute('value', op[0]);
				option.innerText = op[1]
				_parent.appendChild(option);
			}
			if(!m){
   				var option = document.createElement('option');
					option.setAttribute('value',val);
					option.setAttribute('selected', "selected");
					option.innerText = val + ' ( 未定義の値です )'
				_parent.appendChild(option);
			}
		})(cell,select);
		
		fragment.appendChild(select);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function checkbox(i, val, cell) {
		var s = (cell.name == "公開") ? "" : cell.name;
		
    	var fragment = document.createDocumentFragment();
		var uid = DateUtil.getRandamCharas(10);
        var input = document.createElement('input');
			input.setAttribute('class', "checkbox");
			input.setAttribute('type', "checkbox");
			input.setAttribute('id', uid);
			input.setAttribute('data-no', i);
			input.setAttribute('data-id', cell.id);
			if(val == "1"){
			input.setAttribute('checked','checked');
			}
			
        var label = document.createElement('label');
			label.setAttribute('for', uid);
			label.innerHTML =" " + s

		fragment.appendChild(input);
		fragment.appendChild(label);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function image(i,val,cell){
		
    	var fragment = document.createDocumentFragment();
		var uid = DateUtil.getRandamCharas(10);
		InputTagTempDatas.addData(uid, val);
        var div = document.createElement('div');
			div.setAttribute('class', "_image_set");
			div.setAttribute('data-no', i);
			div.setAttribute('data-id', cell.id);
			div.setAttribute('data-val', uid);	
		
		var imgTag = '<div class="_no-photo">画像未設定</div>'
		
		if(val.path != "") {
			imgTag = CMS_ImgBlockU.getImageTag({
				path	: val.path,
				isPub	: false,
				width	: "100%",
				ratio	: val.ratio,
				alt		: "",
				attr	: ""
			});
		}
		
        var div_m = document.createElement('div');
			div_m.setAttribute('class', "_btn_image _image_thumb _cms_btn_alphaS");
			div_m.innerHTML = imgTag
		
        var div_s = document.createElement('div');
			div_s.setAttribute('class', "_image_extra");
		var s = "";
			//simple
			s += '<div class="_cms_btn_alpha _btn_mode _btn_mode_simple">'
			s += '	<i class="fa fa-lg fa-circle-o"></i><i class="fa fa-lg fa-dot-circle-o "></i>';
			s += '	シンプルモード';
			s += '	<span class="ss_inspect3 _img_simple"></span>'
			s += '</div>';
			s += '<div class="_mode_switch_body _body_img_simple">';
			s += '		<div class="_cms_btn_alphaS _btn_image_t">'+val.path+'</div>';
			s += '		<div class="_cms_btn_alpha _btn_image_list ss_img_select img_select2_img"></div>';
			s += '		<div class="_cms_btn_alpha _btn_image_mock ss_img_select img_select2_dummy"></div>';
			s += '		<div class="_cms_btn_alpha _btn_image_delete ss_img_select img_select2_remove"></div>';
			// s += '		<div class="_cms_btn_alpha _btn_image_tag_ng "><i class="fa fa-check-square "></i> IMGタグのみ出力</div>'
			// s += '		<div class="_cms_btn_alpha _btn_image_tag_ac "><i class="fa fa-square-o "></i>  IMGタグのみ出力</div>'
			s += '</div>';
			s += '<div class="_mode_switch_body_hr"></div>';
			
			//layout
			s += '<div class="_cms_btn_alpha _btn_mode _btn_mode_layout">'
			s += '	<i class="fa fa-lg fa-circle-o"></i><i class="fa fa-lg fa-dot-circle-o "></i>';
			s += '	レイアウトモード';
			s += '	<span class="ss_inspect3 _img_layout"></span>'
			s += '</div>';
			s += '<div class="_mode_switch_body _body_img_layout">';
			s += '		<div class="_cms_btn_alpha _btn_image_layout ss_img_select img_select2_layoutimg"></div>';
			s += '</div>';
			s += '<div class="_mode_switch_body_hr"></div>';
			s += '<div class="">';
			s += '幅 : <span><input class="_in_image_width _w50" placeholder="100px" data-candidate="_cms_image_width"></span>';
			s += ' 比率 : <span><input class="_in_image_ratio _w40" placeholder="3:2" data-candidate="_cms_image_ratio"></span>';
			s += '</div>';
			div_s.innerHTML = s;
			
		if(val.mode == "simple"){
			$(div_s).find("._btn_mode_simple").addClass("_current")
			$(div_s).find("._body_img_layout").hide()
		} else{
			$(div_s).find("._btn_mode_layout").addClass("_current")
			$(div_s).find("._body_img_simple").hide()
		}
		$(div_s).find("._in_image_width").val(val.width);
		$(div_s).find("._in_image_ratio").val(val.ratio);
		
		// if(val.onlyImgTag){
		// 	$(div_s).find('._btn_image_tag_ac').hide();
		// } else{
		// 	$(div_s).find('._btn_image_tag_ng').hide();
		// }
		
		div.appendChild(div_m);
		div.appendChild(div_s);
		fragment.appendChild(div);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function anchor(i,val,cell){
    	var fragment = document.createDocumentFragment();
		var uid = DateUtil.getRandamCharas(10);
		
        var div = document.createElement('div');
			div.setAttribute('class', "_btn_anchor _cms_btn_alpha");
			div.setAttribute('data-no', i);
			div.setAttribute('data-id', cell.id);
			div.setAttribute('data-val', uid);	
			div.innerHTML = CMS_AnchorU.getViewTag(val,false);
		InputTagTempDatas.addData(uid, val);
		
		fragment.appendChild(div);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function textAnchor(i,val,cell){
    	var fragment = document.createDocumentFragment();
		var uid = DateUtil.getRandamCharas(10);
		
        var div = document.createElement('div');
			div.setAttribute('class', "_btn_textAnchor _cms_btn_alpha");
			div.setAttribute('data-no', i);
			div.setAttribute('data-id', cell.id);
			div.setAttribute('data-val', uid);	
			div.innerHTML = CMS_AnchorU.getViewTag(val,false);
		InputTagTempDatas.addData(uid, val);
		
		fragment.appendChild(div);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	function yyyymmdd(i,val,cell){
    	var fragment = document.createDocumentFragment();
		
        var div = document.createElement('div');
			div.setAttribute('class', "_editYYYYMMDD");
			div.setAttribute('data-no', i);
			div.setAttribute('data-id', cell.id);
			div.setAttribute('data-type', cell.type);	
			div.innerHTML = val
			
		fragment.appendChild(div);
		fragment.appendChild(_getNote(cell));
		
		return fragment;
	}
	
	return {
		single: single,
		multi: multi,
		select: select,
		checkbox: checkbox,
		
		image: image,
		anchor: anchor,
		textAnchor: textAnchor,
		yyyymmdd: yyyymmdd
	}
})();

/*
setTimeout(function(){
	_test()
},500);
function _test(){
	var o = PageElement.object;
	for (var n in o) {
		var tar = o[n]
		console.log("*-" + tar.pageInfo.id);
		if(tar["grids"]){
			var grid = tar.grids;
			for (var i = 0; i < grid.length ; i++) {
				if(grid[i]["textData"]){
					if(grid[i].textData["cells"]){
						var cells = grid[i].textData.cells;
						for (var ii = 0; ii < cells.length ; ii++) {
							console.log(cells[ii].type);
						}
					}
				}
			}
		}
	}
}
// single
// multi
// checkbox
// select
*/



// //後方互換用
// function __convertImage(_val){
// 	if(!_val) _val = "";
// 	if(typeof _val == "string"){
// 		_val = { mode:"simple", path:_val, width:"", ratio:"" }
// 	}
// 	if (!_val.mode){
// 		if(typeof _val.path == "string"){
// 			_val.mode = "simple";
// 		} else{
// 			_val.mode = "layout";
// 		}
// 	}
// 	if (!_val.width) _val.width = "";
// 	if (!_val.ratio) _val.ratio = "";
// 	return _val;
// }

EditableView.InputFormProviderGrid = (function(){
	
	function _brText(_s){ return _s.split("\n").join("<br>"); }
	
	/* ---------- ---------- ---------- */

	function _td_core(i, val, cell,state,_type) { 
		var s = CMS_TagU.deleteCellAttr(val);
			s = CMS_TagU.convertCellBR(s);
		var edited = (state) ? " _edited":"";
        var td = document.createElement('td');
			td.setAttribute('class', "_editableTD" + edited);
			td.setAttribute('style', cell.style);
			td.setAttribute('data-no', i);
			td.setAttribute('data-id', cell.id);
			td.setAttribute('data-type', cell.type);
			td.setAttribute('data-input', _type);
			td.innerHTML = s;
		return td;
	}
	
	function single	(i, val, cell, state) { return _td_core(i, val, cell, state, "input") }
	function multi	(i, val, cell, state) { return _td_core(i, val, cell, state, "textarea") }
	function table	(i, val, cell, state) { return _td_core(i, val, cell, state, "table") }
	
	/* ---------- ---------- ---------- */

	function _state(i, val, cell,state) { return null; } 
	
	/* ---------- ---------- ---------- */
	
	function _createTD(state) {
		var edited = (state) ? " _edited":"";
        var td = document.createElement('td');
			td.setAttribute('class', edited);
		return td;
	}
	
	/* ---------- ---------- ---------- */

	function select(i, val, cell,state) {
		var input = EditableView.InputFormProvider.select(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	function checkbox(i, val, cell,state) {
		var input = EditableView.InputFormProvider.checkbox(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	function image(i, val, cell,state) {
		var input = EditableView.InputFormProvider.image(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	function anchor(i, val, cell,state) {
		var input =  EditableView.InputFormProvider.anchor(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	function textAnchor(i, val, cell,state) {
		var input = EditableView.InputFormProvider.textAnchor(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	function yyyymmdd(i, val, cell,state) {
		var input = EditableView.InputFormProvider.yyyymmdd(i, val, cell);
        var td = _createTD(state);
			td.appendChild(input);
		return td;
	}
	
	function edited(i, val, cell,state){
		var s;
		switch(cell.type){
			case CELL_TYPE.YYYYMMDD		: s = '...';break;
			case CELL_TYPE.SELECT		: s = '...';break;
			case CELL_TYPE.CHECK		: s = '...';break;
			case CELL_TYPE.IMAGE		: s = '...画像<';break;
			case CELL_TYPE.ANCHOR		: s = '...リンク';break;
			case CELL_TYPE.BTN	: s = '...ボタン';break;
			case CELL_TYPE.STATE		: break;
			default :
		}
		var edited = (state) ? " _edited":"";
    	var td = document.createElement('td');
		if(s){
			td.appendChild(document.createTextNode(s));
		} else{
			td.setAttribute('class', "_editableTDHide"+edited);
			td.setAttribute('data-no', i);
			td.setAttribute('data-id', cell.id);
			td.setAttribute('data-type', cell.type);
			td.setAttribute('data-input', cell.type);
			td.appendChild(document.createTextNode(EditableView.InputU.getTenten(val)));
		}
			return td;
	}
	
	/* ---------- ---------- ---------- */

	return {
		single: single,
		multi: multi,
		table: table,
		select: select,
		checkbox: checkbox,
		
		image: image,
		anchor: anchor,
		textAnchor: textAnchor,
		yyyymmdd: yyyymmdd,
		
		_state:_state,
		edited:edited
	}
})();


EditableView.InputEvent = (function(){

	//イベントアサイン まとめて行う
	function assign (v,this_){
		EditableView.InputEventText.assign(v,this_);
		EditableView.InputEventImg.assign(v,this_);
	}
	return {
		assign:assign
	}
})();

EditableView.InputEventImg = (function(){

	//イベントアサイン まとめて行う
	function assign (v,this_){
		//画像
		v.on("click","._btn_image"			,function(){ _changeImage(		$(this).closest("._image_set"),this_) });
		v.on("click","._btn_image_t"		,function(){ _changeImage_t(	$(this).closest("._image_set"),this_) });
		v.on("click","._btn_image_list"		,function(){ _changeImage_list(	$(this).closest("._image_set"),this_) });
		v.on("click","._btn_image_mock"		,function(){ _changeImage_mock(	$(this).closest("._image_set"),this_) });
		v.on("click","._btn_image_delete"	,function(){ _changeImage_remove($(this).closest("._image_set"),this_) });
		v.on("click","._btn_image_layout"	,function(){ _changeImage_layout($(this).closest("._image_set"),this_) });
		v.on("click","._btn_mode_simple"	,function(){ _changeImage_Mode($(this),"simple") });
		v.on("click","._btn_mode_layout"	,function(){ _changeImage_Mode($(this),"layout") });
		v.on("keyup","._in_image_width"		,function(){ _changeImage_input($(this),$(this).closest("._image_set"),this_,"width") });
		v.on("keyup","._in_image_ratio"		,function(){ _changeImage_input($(this),$(this).closest("._image_set"),this_,"ratio") });

		// v.on("click","._btn_image_tag_ng"	,function(){ _changeImage_onlyImg($(this).closest("._image_set"),this_,false) });
		// v.on("click","._btn_image_tag_ac"	,function(){ _changeImage_onlyImg($(this).closest("._image_set"),this_,true) });

		// v.on("keyup","._in_image_ratio"		,function(){ _changeImage_input($(this),$(this).parent().parent().parent().parent().eq(0),this_,"ratio") });
	}

	//画像の変更。モーダル
	function _changeImage  (_this,this_){
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);
		if(val.mode == "simple"){
			_changeImage_list(_this,this_);
		} else{
			_changeImage_layout(_this,this_);
		}
	}
	function _changeImage_list(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);

		if(DummyImageService.isMock(val.path)) val.path = CMS_Path.UPLOAD.ABS;
		//
		CMS_MainController.openAssetSelectRel("image", val.path ,function(_s){
			UpdateDelay.delay(function(){
				o[id].mode = "simple";
				o[id].path = _s;
				this_.changeData(o,no);
				//
				InputTagTempDatas.addData(uid, o[id])
				_changeImage_update(_this, o, id, o[id]);
			});
		});
	}
	function _changeImage_mock(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);

		if(DummyImageService.isMock(val.path) == false) val.path = "";
		DummyImageView.stageIn(val.path,function(_s){
			o[id].mode = "simple";
			o[id].path = _s;
			this_.changeData(o,no);
			//
			InputTagTempDatas.addData(uid, o[id])
			_changeImage_update(_this, o, id, o[id]);
		});
	}

	//画像の変更。prompt
	function _changeImage_t(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);

		var _s = prompt("画像URLを入力してください", val.path);
 		if(_s == val.path) return;
	 	if(_s == null) return;
	 	//
	 	o[id].path = _s;
	 	this_.changeData(o,no);
		//
		InputTagTempDatas.addData(uid, o[id]);
		_changeImage_update(_this, o, id, o[id]);
	}
	function _changeImage_remove(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);

	 	o[id].mode = "simple";
	 	o[id].path = "width:100,height:100";
	 	this_.changeData(o,no);
		//
		InputTagTempDatas.addData(uid, o[id]);
		_changeImage_update(_this, o, id, o[id]);
	}

	//レイアウト
	function _changeImage_layout(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);

		if(val.mode != "layout"){
			val.path = {};
		}
		ImageMapView.stageIn(val.path,function(_s){
			o[id].mode = "layout";
			o[id].path = _s;
			this_.changeData(o,no);
			//
			InputTagTempDatas.addData(uid, o[id])
			_changeImage_update(_this, o, id, o[id]);
		});
	}

	//画像変更後の共通処理
	function _changeImage_update(_this,_o,_id,_s){
		var imgTag = '<div class="_no-photo">画像未設定</div>'
		if(_s.path != ""){
			imgTag = CMS_ImgBlockU.getImageTag({
				path	: _s.path,
				isPub	: false,
				width	: "100%",
				ratio	: _s.ratio,
				alt		: "",
				attr	: ""
			});
		}
		$(_this).find("._btn_image").html(imgTag);
		$(_this).find("._btn_image_t").html(_s.path);
		_setEdited($(_this).parent(),_o,_id);
	}


	//幅とratio
	function _changeImage_input(_in,_this,this_,_type){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);

		var _s = _in.val();
		o[id][_type] = _s;
		this_.changeData(o,no);
		InputTagTempDatas.addData(uid, o[id]);
		_changeImage_update(_this, o, id, o[id]);
	}

	//モード切り替え（表示だけ）
	function _changeImage_Mode(_this,_mode){
		var parent = _this.parent().parent();
		if(_mode == "simple"){
			parent.find("._btn_mode_simple").addClass("_current")
			parent.find("._btn_mode_layout").removeClass("_current")
			parent.find("._body_img_simple").slideDown();
			parent.find("._body_img_layout").slideUp();
		} else{
			parent.find("._btn_mode_simple").removeClass("_current")
			parent.find("._btn_mode_layout").addClass("_current")
			parent.find("._body_img_simple").slideUp();
			parent.find("._body_img_layout").slideDown();
		}
	}

	//IMGタグのみ表示
	/*
	function _changeImage_onlyImg(_this,this_,_b){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);

		var parent = _this.parent().parent();
		if(_b){
			parent.find('._btn_image_tag_ac').hide();
			parent.find('._btn_image_tag_ng').show();
		} else{
			parent.find('._btn_image_tag_ac').show();
			parent.find('._btn_image_tag_ng').hide();
		}
	 	o[id].onlyImgTag = _b;
	 	this_.changeData(o,no);
	}*/

	 /* ! ---------- 共通 ---------- ---------- ---------- ---------- */

	 //セルを編集したら、背景を黄色くする
	function _setEdited (_view,_o,_id) {
		_view.addClass("_edited");

		//編集ステートをアップデートする グリッド再描画時に、編集ステートを引き継ぐ
		if(_o[CELL_TYPE.STATE] === undefined) _o[CELL_TYPE.STATE] = [];
		var editState = _o[CELL_TYPE.STATE]
		var b = false;
		for (var i = 0; i <  editState.length ; i++) {
			if(editState[i] == _id)b = true;
		}
		if(b == false) editState.push(_id);
	}
	function _getXY 		(_this){ return [ $(_this).offset().left +20, $(_this).offset().top - $(window).scrollTop() +20 ] }
	function _getDataNo 	(_this,this_){ return Number($(_this).attr("data-no")) }
	function _getDataID 	(_this,this_){ return $(_this).attr("data-id") }
	function _getDataVal 	(_this,this_){ return $(_this).attr("data-val") }
	function _getRecord 	(_this,this_,no){ return this_.gridData.getRecordAt(no) }

	return {
		assign:assign
	}
})();

EditableView.InputEventText = (function(){

	//イベントアサイン まとめて行う
	function assign (v,this_){

		//リンク
		v.on("click","._btn_anchor"			,function(event){ _changeA(this,this_,event) });
		v.on("click","._btn_textAnchor"		,function(event){ _changeBtn(this,this_,event) });

		//基本UI
		v.on("keyup","textarea"				,function(){ _changeInput(this,this_) });
		v.on("keyup","input"				,function(){ _changeInput(this,this_) });
		v.on("change","select"				,function(){ _changeInput(this,this_) });
		v.on("change","input.checkbox"		,function(){ _changeCheck(this,this_,$(this).prop("checked")) });

		//テーブルセル
		v.on("click","._editYYYYMMDD"		,function(){ _changeYYYYMMDD(this,this_) });
		v.on("click","._editableTD"			,function(){ _changeTableText(this,this_) });
		v.on("click","._editableTDHide"		,function(){ _changeTableText(this,this_,true) });
		v.on("click","._editableTD a" 		,function(event){ event.preventDefault(); });
	}

	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */

	//リンクの変更。モーダル
	function _changeA(_this,this_,event){
		event.stopPropagation();
		event.preventDefault();
		//
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);
		//
		Anchor_InputView.stageIn(val,function(_s){
			o[id] = _s;
			this_.changeData(o,no);
			InputTagTempDatas.addData(uid, _s)
			$(_this).html(CMS_AnchorU.getViewTag(_s,false));
			_setEdited($(_this).parent(),o,id);
		})
	}

	//ボタンの変更。モーダル
	function _changeBtn(_this,this_,event){
		event.stopPropagation();
		event.preventDefault();

		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var uid = _getDataVal(_this,this_);
		var val = InputTagTempDatas.getData(uid);
		//
		Anchor_BtnView.stageIn(val,function(_s){
			o[id] = _s;
			this_.changeData(o,no);
			InputTagTempDatas.addData(uid, _s)
			$(_this).html(CMS_AnchorU.getViewTag(_s,false));
			_setEdited($(_this).parent(),o,id);
		})
	}

	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */

	//<input>で値を変更
	function _changeInput(_this,this_){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		try{
			o[id] = $(_this).val();
			this_.changeData(o,no);
		}catch( e ){}
	}

	//checkboxで値を変更
	function _changeCheck(_this,this_,_checked){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var val = "";
		if(_checked) val = "1";
		try{
			o[id] = val;
			this_.changeData(o,no);
			_setEdited($(_this).parent(),o,id);
		}catch( e ){}
	}

	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */

	function _changeYYYYMMDD(_this,this_,_isHideCell){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var def = o[id];
		//
		Float_DateInputView.stageIn(def,function(_s){
			setTimeout(function(){
				o[id] = _s;
				this_.changeData(o,no);
				//
				_updateHTML($(_this),_s,_isHideCell);
				_setEdited($(_this).parent(),o,id);
			},200);
		},_getXY(_this) );

	}
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//グリッドセルの編集時の動作

	//tdで編集した場合（普通のセル） 改行は<BR>へ
	function _changeTableText(_this,this_,_isHideCell){
		var no = _getDataNo(_this,this_);
		var id = _getDataID(_this,this_);
		var o  = _getRecord(_this,this_,no);
		//
		var inputType = $(_this).attr("data-input");
		//
		var def = o[id];
		var type = inputType+ ":" + $(_this).attr("data-type");

		MiniEditer.stageIn(def,function(_s){
			o[id] = _s;
			this_.changeData(o,no);
			//
			var s = _s;
				s = CMS_TagU.deleteCellAttr(s);
				s = CMS_TagU.convertCellBR(s);
			_updateHTML($(_this),s,_isHideCell);
			_setEdited($(_this),o,id);
		}, type);
	}

	/* ---------- ---------- ---------- */

	 //セルを編集したら、表示をアップデートする
	function _updateHTML (_view,_val,_isHideCell) {
		var s = "";
		if(! _isHideCell) {
			s = _val;
		} else{
			s = EditableView.InputU.getTenten(_val);
		}
		try{
			_view.html(s);
		}catch( e ){
			_view.html(CMS_E.PARSE_ERROR);
		}
	}

	 /* ! ---------- 共通 ---------- ---------- ---------- ---------- */

	 //セルを編集したら、背景を黄色くする
	function _setEdited (_view,_o,_id) {
		_view.addClass("_edited");

		//編集ステートをアップデートする グリッド再描画時に、編集ステートを引き継ぐ
		if(_o[CELL_TYPE.STATE] === undefined) _o[CELL_TYPE.STATE] = [];
		var editState = _o[CELL_TYPE.STATE];
		var b = false;
		for (var i = 0; i <  editState.length ; i++) {
			if(editState[i] == _id)b = true;
		}
		if(b == false) editState.push(_id);
	}
	function _getXY 		(_this){ return [ $(_this).offset().left +20, $(_this).offset().top - $(window).scrollTop() +20 ] }
	function _getDataNo 	(_this,this_){ return Number($(_this).attr("data-no")) }
	function _getDataID 	(_this,this_){ return $(_this).attr("data-id") }
	function _getDataVal 	(_this,this_){ return $(_this).attr("data-val") }
	function _getRecord 	(_this,this_,no){ return this_.gridData.getRecordAt(no) }

	return {
		assign:assign
	}
})();


//グリッド編集時に、オブジェクトのような値を一時的に保存しておく
var InputTagTempDatas = (function(){
	var data = {};

	function addData(_id,_val){
		data[_id] = _val
	}
	function getData(_id){
		return data[_id]
	}

	function reset(){
		data = {}
	}
	function trace(){
		console.log(data);
	}

	return {
		addData : addData,
		getData : getData,
		reset : reset,
		trace:trace
	}
})();


/**
 * フリーレイアウトビュー
 * コンポジットクラスになっており、
 * FreeLayoutか、FreeLayoutColsしか、使用しない
 * 
 * オブジェクト要素をクリックで、SubPageViewを開く
 */

EditableView.FreeLayout  = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	  this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.isDragable = false;
	p.currentEditDetailNo = 0;
	
	p.init 			 = function() {
		this.v = {};
		this.isDragable = false;
		this.currentEditDetailNo = 0;
	}
	
	/* ---------- ---------- ---------- */
	//#registParent
	
	p.registParent 	 = function(_parent,_parentView,_pageParam,_deep){
		this.parent = _parent;
		this.parentView = _parentView;
		this.pageParam = _pageParam;
		this.deep = (_deep == null) ? 0:_deep;
		
	}
	
	/* ---------- ---------- ---------- */
	
	p.getData 	 	 = function (){
		return this.gridData.getRecords();
	}
	p.getDataAt 	 = function (_n){
		return this.gridData.getRecordAt(_n);
	}
	p.addData  		 = function (_type,_param){
		var o = PageElement_Util.getInitData(_type,_param);
		this.gridData.addRecord(o);
		this.update();
		this.parent.updateSubData();
	}
	p.addDataAt 	 = function (data,_n){
		this.gridData.addRecordAt(data,_n);
	}
	p.changeData 	 = function (data,no){
		this.gridData.overrideRecordAt(data,no);
		this.parent.updateSubData();
	}
	// p.historyData
	p.removeData 	  = function (no){
		this.gridData.removeRecordAt(no);
		this.update();
		this.parent.updateSubData();
		InspectView.stageOut();
		this.select(no);
	}
	p.duplicateData   = function (no){
		this.gridData.duplicateAt(no);
		this.update();
		this.parent.updateSubData();
		this.select(no+1);
	}
	
	/* ---------- ---------- ---------- */
	//#要素の移動
	
	p.canMove 	 	 = function (targetNo,_move){
		return (this.gridData.isValidArge(targetNo,_move));
	}
	p.moveData 	 	 = function (targetNo,_move){
		this.gridData.moveRecord(targetNo,_move);
		
		var t0 = this.v.replaceView.find('> *').eq(targetNo*2);
		var t1 = this.v.replaceView.find('> *').eq(targetNo*2+1);
		var t2 = this.v.replaceView.find('> *').eq(_move*2+1);
		t2.after(t1)
		t0.after(t2)
		
		var n1 = t1.attr("data-no");
		var n2 = t2.attr("data-no");
		
		t1.attr("data-no",n2)
		t2.attr("data-no",n1)
		this.parent.updateSubData();
	}
	//20150527 最初と最後に移動を追加
	p.moveDataToFirst = function (targetNo){
		var _move = this.gridData.moveRecordToFirst(targetNo);
		this.update();
		this.select(_move);
		this.parent.updateSubData();
		return _move;
	}
	p.moveDataLast = function (targetNo){
		var _move = this.gridData.moveRecordToLast(targetNo);
		this.update();
		this.select(_move);
		this.parent.updateSubData();
		return _move;
	}
	
	p.initData  	 = function (_data,_no){
		this.no = _no;
		this.type = _data.type;
		this.attr = _data.attr;
		this.extra = _data.extra;
		
		this.gridData = new EditableView.GridClass();
		this.gridData.initRecords(_data.data);
		this.setInitView();
		this.update();
	}
	p.setInitView 	 = function (){
		var self = this;
		if(this.deep > 0 && this.parent.type == "layout.div") this.isDragable = true;
		if(this.deep > 0 && this.parent.type == "replace.div") this.isDragable = true;
		//
		var className = "";
		var rootStyle = ""
		// var title = "";
		if(this.deep == 0){
			//ルートDIV時
			this.parent.setFreeLayout(this)
			className = "_freeLayoutRoot";
			
			//編集幅を指定
			rootStyle += CMS_SizeManager.getContentsWidth(this.pageParam.type);
			AddElementsManager.setData(this,this.getData().length-1)
			
			//コンテクストメニュー
			var ts = '._freeLayout,._freeLayoutDiv,._freeLayoutTable,._freeLayoutCols'
			this.parentView.on('contextmenu',ts,function(){
				if(window.isPressCommandKey)return;
				FreeLayoutInfoView.stageIn(this);
				$(this).click()
				return false;
			})
				
		} else{
			if(this.parent.type != "layout.cols"){
				className = "_freeLayoutDiv _freeLayoutToggle"
			} else{
				className = "_freeLayoutCols";
			}
		};
		
		//入力ID名やブロック出力のタグを取得
		var blockInfo = (function(_deep,_attr,_class){ 
			if(_deep == 0) return "";
			if(_class.indexOf("_freeLayoutDiv") != -1) return CMS_BlockAttrU.getMarkTag(_attr,true)
			return ""
		})(this.deep,this.attr,className);
		
		var _style = (function(_ex,_attr,_root){ 
			var _bg = CMS_ImgBlockU.getBgStyle(_ex);
			var _input = CMS_BlockAttrU.get_style(_attr) ;
		    return _bg + " " + _input + " " + _root;
		})(this.extra, this.attr, rootStyle);
		
		var _class	 = CMS_BlockAttrU.get_class(this.attr);
		var _aliasId  = CMS_BlockAttrU.get_id(this.attr);
			_aliasId  = (_aliasId) ? "_alias_" + _aliasId :"";
		
		if(this.parent.type != "layout.cols"){
			var tag = "";
				tag += '<div class=" '+className+" " +_aliasId+'" data-no="'+this.no+'">';
				tag += '<div class="cms-layout _replaceArea ' + _class + '" style="' + _style + '"></div>';
				tag += blockInfo;
				// tag += (!this.isDragable) ? "": ;
				if (this.isDragable) {
					tag += '<span class="_btn_delete"></span>'
					if(this.deep == 1){
						if(this.attr.narrow){
							tag += '<span class="_block_toggle _block_toggle_close"></span>';
						} else{
							tag += '<span class="_block_toggle"></span>';
						}
					}
				}
				tag += '</div>';
			this.view = $(tag);
			this.parentView.append(this.view);
			
			this.v.replaceView  = this.view.find('> ._replaceArea');
			this.view.find(' > ._btn_delete').click(function(){
				$(this).parent().click();
				InspectView.doCommand("delete");
			});
			
			this.view.find(' > ._block_toggle').click(function(){
				$(this).parent().click();
				$(this).toggleClass("_block_toggle_close");
				InspectView.doCommand("toggle");
			});
			//コンテナブロック ボタン
			this.view.on('click','._block_info ._btn',function(){
				$(this).parent().parent().parent().click();
				InspectView.doCommand($(this).data("command"),$(this).data("extra"));
			});
			
			//Myタグ定義 表示切り替え
			// this.view.on('click','._block_info ._replace_id',function(){
			// 	$(this).parent().parent().parent().parent().toggleClass("_cms_replace_open");
			// });
		} else{
			this.view = this.parent.v.replaceView.eq(this.no);
			this.view.attr("style", _style);
			this.view.attr("class", this.view.attr("class") + " " + _class);
			this.v.replaceView = this.parent.v.replaceView.eq(this.no);
		}
	}
	
	/* ---------- ---------- ---------- */
	//#update
	p.update 		 = function (){
		var self = this;
		var list = this.gridData.getRecords();
		this.v.replaceView.html("");
		
		//createViews
		for (var i = 0; i < list.length ; i++) {
            if(list[i] !== null){
				this.v.replaceView.append(DragController.getDropTag(i));
				
				var targetReplaceV = this.v.replaceView
				if(this.v.replaceView.length >1){
					targetReplaceV = this.v.replaceView.eq(i);
				}
				var type = list[i].type;
				if (type == "layout.div" || type == "replace.div" ) {
					var node = new EditableView.FreeLayout();
						node.registParent(this,targetReplaceV,this.pageParam,this.deep +1);
						node.initData(list[i],i);
						node.view.click(function(event){
							event.stopPropagation();
							InspectView.setPageData(this.pageParam);
							InspectView.setData("layout.div",$(this) , self ,null, $(this).find("> div").eq(0));
						});
				} else if(type == "layout.cols"){
					var node = new EditableView.FreeLayoutCols();
						node.registParent(this,targetReplaceV,this.pageParam,this.deep +1);
						node.initData(list[i],i);
						node.view.click(function(event){
							event.stopPropagation();
							InspectView.setPageData(this.pageParam);
							InspectView.setData("col", $(this), self, $(this), $(this).find("> div").eq(0));
						});
				} else {
					var _free = PageElement_Util.getPreview(list[i]);
						_free = HTMLServiceU.getReplacedHTML(_free,this.pageParam,type,false);
						
					var tag = ""; 
						tag += '<div class="_freeLayout '+'" data-no="'+i+'">';
						tag += 		_free;
						tag += 		CMS_BlockAttrU.getCommandTag(type);
						tag += 		CMS_BlockAttrU.getMarkTag(list[i].attr,true);
						tag += '	<span class="_btn_delete"></span>'
						tag += '</div>';
					try{
						this.v.replaceView.append(tag);
					}catch( e ){
						this.v.replaceView.append(CMS_E.PARSE_ERROR);
					}
				}
			}
		}
		
		this.v.replaceView.append(DragController.getDropTag(list.length));
		
		//クリック
		this.v.freeLayout = this.v.replaceView.find('> ._freeLayout');
		this.v.freeLayout.bind("click",function(event){
			var this_ = $(this);
			InspectView.setPageData(self.pageParam);
			InspectView.setData("object",this_ , self ,this_ ,this_.find("> * ").eq(0));
			return false;
		});
		this.v.freeLayout.bind("dblclick",function(event){
			var this_ = $(this);
			InspectView.setPageData(self.pageParam);
			InspectView.setData_DoubleClick("object",this_ , self ,this_ ,this_.find("> * ").eq(0));
			return false;
		});
		//削除
		this.v.freeLayout.find('._btn_delete').bind("mouseup",function(){
			$(this).parent().click();
			InspectView.doCommand("delete");
		});
		this.v.freeLayout.on('click','._block_command ._btn',function(){
			$(this).parent().parent().click();
			InspectView.doCommand($(this).data("command"));
		});
		this.v.freeLayout.on('click','._block_info ._btn',function(){
			$(this).parent().parent().parent().click();
			InspectView.doCommand($(this).data("command"),$(this).data("extra"));
		});
		
		/* ---------- ---------- ---------- */
		
		//ドラッグ
		if(this.isDragable){
		DragController.setDrag(this.parent,this.view,DragController.FREE_DROP); 
		}
		DragController.setDrag(this,this.v.replaceView.find("> ._freeLayout"),DragController.FREE_DROP);
		DragController.setDrop(this,this.v.replaceView.find("> ._dropArea"),DragController.FREE_DROP);
		//
		this.updateSubData();
	}
	p.updateSubData  = function(){
		this.parent.updateSubData();
	}
	
	/* ---------- ---------- ---------- */
	//#グリッドエディタ表示管理
	//フリーレイアウトで、表組をクリックして編集画面を開くなど
	
	p.showInlineGridEditor = function(no,_subPageType){
		currentEditDetailNo = no;
		var record = this.gridData.getRecordAt(no);
		this.detailNo = no;
		this.detailView = null;
		this.detailView = new EditableView.SubPageView();
		this.detailView.setObjectType(_subPageType);
		this.detailView.registParent(this);
		this.detailView.createView();
		this.detailView.initData(record.data);
		this.detailView.stageIn();
	}
	p.hideInlineGridEditor = function(_updated){
		if(! _updated) return;
		var _array = this.detailView.getData();
		var record = this.gridData.getRecordAt(currentEditDetailNo);
		record.data = _array;
		
		this.gridData.overrideRecordAt(record,this.detailNo);
		this.update();
		this.parent.updateSubData();
		this.select(this.detailNo);
	}
	
	/* ---------- ---------- ---------- */
	//
	p.selectNodeNext = function(_n){
		this.select(_n);
	}
	p.select = function(_n){
		try{
		var tar = this.v.replaceView.find('> *').eq(_n*2+1);
			tar.trigger("click");
			currentTop = tar.offset().top;
		}catch( e ){
			currentTop = 0;
		}
	}
	return c;
})();

EditableView.FreeLayoutCols = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_gridType) {
	  this.init(_gridType);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init 			 = function () {
		this.v = {};
	}
	p.registParent 	 = function (_parent,_parentView,_pageParam,_deep){
		this.parent 	 = _parent;
		this.parentView  = _parentView;
		this.pageParam = _pageParam;
		this.deep = (_deep == null) ? 0 : _deep;
	}
	
	/* ---------- ---------- ---------- */
	//#Data
	p.initData 		 = function (_data,_no){
		this.no = _no;
		this.type = _data.type;
		this.attr = _data.attr;
		this.gridData = new EditableView.GridClass();
		if(_data.data.length == 0) _data.data = [];
		this.gridData.initRecords(_data.data);
		this.setInitView();
		this.update();
	}
	p.changeData  	 = function (data,no){
		this.gridData.overrideRecordAt(data,no);
		this.parent.updateSubData();
	}
	p.duplicateData   = function (no){
		this.gridData.duplicateAt(no);
		this.parent.update();
		this.parent.updateSubData();
	}
	p.removeData 	  = function (no){
		this.gridData.removeRecordAt(no);
		this.parent.update();
		this.parent.updateSubData();
		InspectView.stageOut();
	}
	p.setInitView  	 = function (){
		var list = this.gridData.getRecords();
		var self = this;
		var style = CMS_BlockAttrU.getStyle(this.attr);
		var class_ = CMS_BlockAttrU.getClass(this.attr);
		
		var blockInfo = CMS_BlockAttrU.getMarkTag(this.attr,true)
		var tag = '';
			tag += '<div class="_freeLayoutTable _freeLayoutToggle " data-no="'+this.no+'" style="'+style+'">';
			tag += '<div class="cms-column ' + class_ + '">';
			for (var i = 0; i < list.length ; i++) {
			tag += '	<div class="cms-column-col " data-no="'+i+'"></div>';
			}
			tag += '</div>';
			tag += blockInfo;
			tag += '<span class="_btn_delete"></span>';
			if(this.deep == 1){
				if(this.attr.narrow){
					tag += '<span class="_block_toggle _block_toggle_close"></span>';
				} else{
					tag += '<span class="_block_toggle"></span>';
				}
			}
			tag += '</div>';
		this.view = $(tag);
		this.parentView.append(this.view);
		this.v.replaceView  = this.view.find('> .cms-column > .cms-column-col');
		this.view.find(' > ._btn_delete').click(function(){
			$(this).parent().click();
			InspectView.doCommand("delete");
		});
		
		this.view.find(' > ._block_toggle').click(function(){
			$(this).parent().click();
			$(this).toggleClass("_block_toggle_close");
			InspectView.doCommand("toggle");
		});
	}
	
	p.update 		 = function (){
		var self = this;
		var list = this.gridData.getRecords();
		for (var i = 0; i < list.length ; i++) {
			var divNode = new EditableView.FreeLayout();
				divNode.registParent(this,this.v.replaceView.eq(i),this.pageParam,this.deep +1);
				divNode.initData(list[i],i);
				divNode.view.click(function(event){
					event.stopPropagation();
					event.preventDefault();
					InspectView.setPageData(self.pageParam);
					InspectView.setData("layout.colDiv",$(this),self,$(this),$(this));
				});
		}
		DragController.setDrag(this.parent,this.view,DragController.FREE_DROP);
		this.updateSubData();
	}
	p.updateSubData  = function (){
		this.parent.updateSubData();
	}
	return c;
})();
/**
 * リピートオブジェクトビューの管理
*/

EditableView.CustomList 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_gridType) {
	  this.init(_gridType);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init			 = function (_gridType) {
		this.gridType = _gridType;
		this.v = {}
		this.setParam()
		this.customList = new EditableView.CustomListClass()
	}
	p.setParam 		 = function (){
		this.gridInfo	 = this.gridType.gridInfo;
	}
	p.registParent 	 = function (_parent){
		this.parent = _parent;
		this.customList.registParent(_parent);
		
	}
	p.initData 		 = function (_data){
		this.customList.initData([_data[0],_data[1],_data[2],_data[3]]);
	}
	p.getData 		 = function (){
		return this.customList.getData();
	}
	p.updateSubData = function (){}
	return c;
})();

EditableView.CustomListClass 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	  this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init= function () {
		this.v = {}
	}
	p.registParent 	 = function (_parent){
		this.parent = _parent;
	}
	p.initData 		 = function (_data){
		
		if(_data == null) _data = ["","",null];
		var this_ = this;
		var tag = '';
			tag += '<div class="_editableBlock _editableTemplate">';
			tag += '	<div class="_left">';
			tag += '		<div class="_h2" style="margin-top:0px;">テンプレート</div>';
			tag += '		<table>';
			tag += '			<tr>';
			tag += '				<td><div class="_title">CSS用ID名 {ID}</div></td>';
			tag += '				<td><input class="_id _color-style" style="width:150px;margin:0 0 5px 5px;" value=""></td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '		<div class="_tabBlock">';
			tag += '			<span class="_btn_html ">HTML or JS</span>';
			tag += '			<span class="_btn_css ">CSS</span>';
			tag += '		</div>';
			tag += '		<div class="_htmlArea"></div>';
			tag += '		<div class="_cssArea"></div>';
			tag += '	</div>';
			tag += '	<div class="_main">'
			tag += '		<div class="_core">'
			tag += '			<div class="_h2" style="margin-top:0px;">プレビュー<span style="font-weight:normal;"> (リストデータ×テンプレート)</span></div>';
			tag += '			<div class="_cms_btn-mini _btn_relaod"><i class="fa fa-repeat"></i> リストデータを反映</div>';
			tag += '			<div class="_tabBlock">';
			tag += '				<span class="_btn_preview">表示プレビュー</span>';
			tag += '				<span class="_btn_code">HTMLプレビュー</span>';
			tag += '			</div>';
			tag += '			<div class="_previewAreaWapper">'
			tag += '			<iframe class="_previewArea" src ="blank.html" frameborder="0" ></iframe>'
			tag += '			<div class="_codeArea"><textarea readonly></textarea></div>'
			tag += '			</div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '	<div class="_preset" style="position:relative">'
			tag += '	</div>';
			tag += '</div>';
			
		this.view = $(tag);
		this.parent.v.replaceArea.append(this.view);
		this.v.preview = this.view.find('._previewArea');
		this.v.code = this.view.find('._codeArea textarea');
		
		//
		this.v._htmlArea = this.view.find('._htmlArea');
		this.v._cssArea = this.view.find('._cssArea');
		//
		this.v._htmlArea.append(CMS_FormU.getTextarea("","html"))
		this.v._htmlArea.append('<div class="_cms_btn-mini _btn_js">JSでの実装サンプル</div>')
		this.v._cssArea.append(CMS_FormU.getTextarea("","style"))
		//
		this.v.in_html = this.v._htmlArea.find("textarea");
		this.v.in_css = this.v._cssArea.find("textarea");
	
		this.v.in_html.css({width:"350px",height:"280px"}).prop("wrap","off");
		this.v.in_css.css({width:"350px",height:"280px"}).prop("wrap","off");
		
		this.v._btn_html = this.view.find('._btn_html');
		this.v._btn_html.click(function(){  this_.openHTML(true)});
		this.v._btn_css = this.view.find('._btn_css');
		this.v._btn_css.click(function(){  this_.openHTML(false)});
		this.v._btn_js = this.view.find('._btn_js');
		this.v._btn_js.click(function(){  this_.addJS()});
		this.openHTML(true);
		
		//
		this.v._previewArea = this.v.preview
		this.v._codeArea = this.view.find('._codeArea');
		
		this.v.btn_preview = this.view.find('._btn_preview');
		this.v.btn_preview.click(function(){  this_.openPreview(true)});
		this.v._btn_code = this.view.find('._btn_code');
		this.v._btn_code.click(function(){  this_.openPreview(false)});
		this.openPreview(true);
		//
		this.v._btn_relaod = this.view.find('._btn_relaod');
		this.v._btn_relaod.click(function(){ this_.updatePreview()});
		
		this.v.temps = [
			this.view.find("._id"),
			this.v.in_html,
			this.v.in_css
		]
		this.v.temps[0].val(_data[0])
		this.v.temps[1].val(_data[1])
		this.v.temps[2].val(_data[2])
		
		this.view.find("textarea,input").keyup(function(){ 
			this_.updatePreview();
		});
		
		this.updatePreview();
		
		var presetView = new EditableView.CustomListPreset(this.view.find('._preset'));
			presetView.setData(_data[3]);
			presetView.stageIn(function(o,_param){
				this_.setPreset(o);
				this_.setSetting(_param);
			})
		this.templateSetting = _data[3];
		this.updateiFrameW();
	}
	
	p.setPreset = function (_o){
		this.v.temps[1].val(_o.html);
		this.v.temps[2].val(_o.css);
		this.updatePreview();
	}
	p.updateiFrameW = function (){
		var p = this.templateSetting;
		if(p.ww == 0){
			this.v.preview.css("width" ,this.templateSetting.t_ww )
		} else{
			this.v.preview.css("width" ,"100%" )
		}
		
	}
	p.setSetting = function (_o){
		this.templateSetting = _o;
		this.updateiFrameW();
	}
	var AC = "_active";
	p.openHTML 		 = function (_b){
		this.v._btn_html.removeClass(AC)
		this.v._btn_css.removeClass(AC)
		this.v._htmlArea.hide()
		this.v._cssArea.hide()
		if(_b){
			this.v._btn_html.addClass(AC)
			this.v._htmlArea.show()
		} else{
			this.v._btn_css.addClass(AC)
			this.v._cssArea.show()
		}
	}
	p.openPreview 	 = function (_b){
		this.v.btn_preview.removeClass(AC);
		this.v._btn_code.removeClass(AC);
		this.v._previewArea.hide();
		this.v._codeArea.hide();
		if(_b){
			this.v.btn_preview.addClass(AC);
			this.v._previewArea.show();
		} else{
			this.v._btn_code.addClass(AC);
			this.v._codeArea.show();
		}
	}
	p.getData 		 = function (){
		return [
			this.v.temps[0].val(),
			this.v.temps[1].val(),
			this.v.temps[2].val(),
			this.templateSetting
		];
	}
	p.updatePreview  = function (){
		var this_ = this;
		if(this.tID) clearTimeout(this.tID);
		this.tID = setTimeout(function(){
			this_.updatePreview_core()
		},200);
	}
	p.prevHTML = ""
	p.updatePreview_core= function (){
		
		var list = CMS_U.getPublicList( EditableView.currentGrid.getData() );
		var tag = ""; 
		
		if(ASSET_CSS_DIRS){
			for (var i = 0; i <  ASSET_CSS_DIRS.length ; i++) {
				tag += '<link rel="stylesheet" class="asset" type="text/css" href="'+ ASSET_CSS_DIRS[i]+'" />';
			}
		}
		
		tag += CMS_TemplateU.doTemplate( {
				id : this.v.temps[0].val(),
				htmls : this.v.temps[1].val(),
				css : this.v.temps[2].val(),
				//
				isPub : false,
				list : list,
				leng : list.length,
				isEdit : true
			});
		this.v.preview.contents().find('#REPLACE').html(tag);
		this.v.code.val(tag);    
		
		this.updatePreview_jsView(this.v.temps[1].val());

	}
	
	p.isJS = false;
	p.updatePreview_jsView = function (_s){
		if(CMS_TemplateU.isJS(_s)){
			if(this.isJS== false){
				var tar = this.v.temps[1];
					tar.removeClass("_color-html");
					tar.addClass("_color-js");
					tar.parent().find("._btn_input").data("type","textarea:js")
			}
			this.isJS = true;
		} else {
			if(this.isJS){
				var tar = this.v.temps[1];
					tar.removeClass("_color-js");
					tar.addClass("_color-html");
					tar.parent().find("._btn_input").data("type","textarea:html")
			}
			this.isJS = false;
		}
	}
	
	p.addJS = function (_o){
		this.v.temps[1].val(CMS_Data.CodeDic.getCode("block.replace.js"));
		this.updatePreview();
	}
	
	return c;
})();


EditableView.CustomListPreset = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view) {
	  this.init(_view);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_view) {
		this.view = _view;
		this.v = {}
	}
	p.setData = function(_data) {
		if(_data){
			this.param = _data;
		} else{
			this.param = EditableView.CustomListData.getPreset()
		}
	}
	p.createLayout = function() {
		var this_= this;
		var tag = ""
		tag += '<div class="ss_mylist_title"></div>';
		tag += '<div class="ss_mylist_bg">';
		tag += '	<div class="ss_mylist">';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_01" data-no="1"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_02" data-no="2"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_03" data-no="3"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_04" data-no="4"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_05" data-no="5"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_06" data-no="6"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _gs _g_07" data-no="7"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ws _w_01" data-no="1"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ws _w_02" data-no="2"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ws _w_03" data-no="3"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_01" data-no="1"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_02" data-no="2"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_03" data-no="3"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_04" data-no="4"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_05" data-no="5"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _ls _l_06" data-no="6"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _wws _ww_01" data-no="1"></div>';
		tag += '		<div class="_cms_btn_alpha _btn _wws _ww_02" data-no="2"></div>';
		 
		tag += '		<input class="_cms_btn_alpha _ts _t_01" onclick="this.select();" value="">';
		tag += '		<div class="_unit _unit_01"></div>';
		
		tag += '		<input class="_cms_btn_alpha _ts _t_02" onclick="this.select();" value="">';
		tag += '		<input class="_cms_btn_alpha _ts _t_02p" onclick="this.select();" value="">';
		tag += '		<div class="_unit _unit_02"></div>';
		
		tag += '		<div class="_layout_L">';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_01" data-no="1"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_02" data-no="2"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_03" data-no="3"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_04" data-no="4"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_05" data-no="5"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_L _d_L_06" data-no="6"></div>';
		tag += '		</div>';
		tag += '		<div class="_layout_R">';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_01" data-no="1"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_02" data-no="2"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_03" data-no="3"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_04" data-no="4"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_05" data-no="5"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_R _d_R_06" data-no="6"></div>';
		tag += '		</div>';
		tag += '		<div class="_layout_T">';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_01" data-no="1"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_02" data-no="2"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_03" data-no="3"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_04" data-no="4"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_05" data-no="5"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_T _d_T_06" data-no="6"></div>';
		tag += '		</div>';
		tag += '		<div class="_layout_B">';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_01" data-no="1"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_02" data-no="2"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_03" data-no="3"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_04" data-no="4"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_05" data-no="5"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_B _d_B_06" data-no="6"></div>';
		tag += '		</div>';
		tag += '		<div class="_layout_Z">';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_01" data-no="1"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_02" data-no="2"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_03" data-no="3"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_04" data-no="4"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_05" data-no="5"></div>';
		tag += '			<div class="_cms_btn_alpha _btn _ds_Z _d_Z_06" data-no="6"></div>';
		tag += '		</div>';
		
		tag += '		<div class="_layout_float">';
		tag += '			<div class=" _btn _image_w "></div>';
		tag += '			<input class="_cms_btn_alpha _ts _t_03 " onclick="this.select();" value="">';
		tag += '			<input class="_cms_btn_alpha _ts _t_03p" onclick="this.select();" value="">';
		tag += '			<div class="_unit _unit_03 "></div>';
		tag += '		</div>';
		// tag += '		<div class=" _btn _image_h"></div>';
		// tag += '		<input class="_cms_btn_alpha _ts _t_04 " onclick="this.select();" value="">';
		 
		tag += '	</div>';
		tag += '</div>';

		this.view.html(tag); 
		this.v.ds_L = this.view.find("._ds_L")
		this.v.ds_R = this.view.find("._ds_R")
		this.v.ds_T = this.view.find("._ds_T")
		this.v.ds_B = this.view.find("._ds_B")
		this.v.ds_Z = this.view.find("._ds_Z")
		this.v.ws = this.view.find("._ws")
		this.v.gs = this.view.find("._gs")
		this.v.ls = this.view.find("._ls")
		this.v.wws = this.view.find("._wws")
		
		this.v.t_01 = this.view.find("._t_01")
		this.v.t_02 = this.view.find("._t_02")
		this.v.t_03 = this.view.find("._t_03")
		// this.v.t_04 = this.view.find("._t_04")
		this.v.t_02p = this.view.find("._t_02p")
		this.v.t_03p = this.view.find("._t_03p")
		
		this.v.unit = this.view.find("._unit")
		this.v.unit_01 = this.view.find("._unit_01")
		this.v.unit_02 = this.view.find("._unit_02")
		this.v.unit_03 = this.view.find("._unit_03")
		
		this.v.image_w = this.view.find("._image_w")
		
		this.v.layout_L = this.view.find("._layout_L")
		this.v.layout_R = this.view.find("._layout_R")
		this.v.layout_T = this.view.find("._layout_T")
		this.v.layout_B = this.view.find("._layout_B")
		this.v.layout_Z = this.view.find("._layout_Z")
		this.v.layout_float = this.view.find("._layout_float")

	
		this.v.ds_L.click(function() { this_.setD($(this).data("no")); });
		this.v.ds_R.click(function() { this_.setD($(this).data("no")); });
		this.v.ds_T.click(function() { this_.setD($(this).data("no")); });
		this.v.ds_B.click(function() { this_.setD($(this).data("no")); });
		this.v.ds_Z.click(function() { this_.setD($(this).data("no")); });
		this.v.ws.click(function() { this_.setW($(this).data("no")); });
		this.v.gs.click(function() { this_.setG($(this).data("no")); });
		this.v.ls.click(function() { this_.setL($(this).data("no")); });
		this.v.wws.click(function() { this_.setWW($(this).data("no")); });
		
		this.v.t_01.keyup(function() { this_.changeText(0,$(this).val()) });	
		this.v.t_02.keyup(function() { this_.changeText(1,$(this).val()) });	
		this.v.t_03.keyup(function() { this_.changeText(2,$(this).val()) });	
		// this.v.t_04.keyup(function() { this_.changeText(5,$(this).val()) });	
		
		this.v.t_02p.keyup(function() { this_.changeText(3,$(this).val()) });	
		this.v.t_03p.keyup(function() { this_.changeText(4,$(this).val()) });	
		
		this.update(true,true);
	}
	
	p.changeText = function(_no,_val){
		var this_= this;
		if(this.tID) clearTimeout(this.tID);
		this.tID = setTimeout(function(){
			this_.changeText_core(_no,_val)
		},200);
	}
	
	p.changeText_core = function(_no,_val){
		
		if(_no==0)this.param.t_ww = Number(_val);
		if(_no==1)this.param.t_m = Number(_val);
		if(_no==2)this.param.t_iw = Number(_val);
		if(_no==3)this.param.t_m_p = Number(_val);
		if(_no==4)this.param.t_iw_p = Number(_val);
		// if(_no==5)this.param.t_ih = Number(_val);
		
		if(this.param.t_ww < 100){
			this.param.t_ww = 100;
		}
		this.update(false);
	}
	
	p.setD = function(_no){
		var n = Number(_no)-1;
		this.param.d = n;
		this.update();
	}
	p.setW = function(_no){
		var n = Number(_no)-1;
		this.param.w = n;
		this.update();
	}
	p.setG = function(_no){
		var n = Number(_no)-1;
		this.param.g = n;
		this.update();
	}
	p.setL = function(_no){
		var n = Number(_no)-1;
		this.param.l = n;
		this.update();
	}
	p.setWW = function(_no){
		var n = Number(_no)-1;
		this.param.ww = n;
		this.update();
	}
	
	/* ---------- ---------- ---------- */
	
	var AC = "_active";
	
	p.update = function(_updateView,_init){
		_updateView = (_updateView == undefined) ? true:_updateView;
		_init = (_init == undefined) ? false:_init;
		if(_updateView){
			this.v.ds_L.removeClass(AC);
			this.v.ds_R.removeClass(AC);
			this.v.ds_T.removeClass(AC);
			this.v.ds_B.removeClass(AC);
			this.v.ds_Z.removeClass(AC);
			this.v.ws.removeClass(AC);
			this.v.gs.removeClass(AC);
			this.v.ls.removeClass(AC);
			this.v.wws.removeClass(AC);
			
			var dd = this.param.d
			var dd2 = (function(n){ 
			    var a = [0,0,0,3,3,3];
			    return a[n]
			})(this.param.d);
			this.v.ds_L.eq(dd).addClass(AC);
			this.v.ds_R.eq(dd).addClass(AC);
			this.v.ds_T.eq(dd2).addClass(AC);
			this.v.ds_B.eq(dd2).addClass(AC);
			this.v.ds_Z.eq(dd2).addClass(AC);
			this.v.ws.eq(this.param.w).addClass(AC);
			this.v.gs.eq(this.param.g).addClass(AC);
			this.v.ls.eq(this.param.l).addClass(AC);
			this.v.wws.eq(this.param.ww).addClass(AC);
			
			var isFix = (this.param.ww == 0) ? true:false;
			if(isFix){
				this.v.unit.html("px");
				this.v.t_01.show();
				this.v.unit_01.show();
				//
				this.v.t_02.show();this.v.t_02p.hide();
				this.v.t_03.show();this.v.t_03p.hide();
			} else{
				this.v.unit.html("%");
				this.v.t_01.hide();
				this.v.unit_01.hide();
				//
				this.v.t_02.hide();this.v.t_02p.show();
				this.v.t_03.hide();this.v.t_03p.show();
			}
			
			this.v.layout_L.hide();
			this.v.layout_R.hide();
			this.v.layout_T.hide();
			this.v.layout_B.hide();
			this.v.layout_Z.hide();
			this.v.layout_float.hide()
			if(this.param.l == 0 )this.v.layout_T.show();
			if(this.param.l == 1 )this.v.layout_B.show();
			if(this.param.l == 2 )this.v.layout_L.show();
			if(this.param.l == 3 )this.v.layout_R.show();
			if(this.param.l == 4 )this.v.layout_Z.show();
			if(this.param.l == 2 || this.param.l == 3 ){
				this.v.layout_float.show()
			}
			
			this.v.t_01.val(this.param.t_ww);
			this.v.t_02.val(this.param.t_m);
			this.v.t_03.val(this.param.t_iw);
			// this.v.t_04.val(this.param.t_ih);
			this.v.t_02p.val(this.param.t_m_p);
			this.v.t_03p.val(this.param.t_iw_p);
		}
		if(!_init){
			var htmlCSS = EditableView.CustomListData.getCodes(this.param);
			this.callback(htmlCSS,this.param);
		}
		this.isInit = false;
	}
	
	/* ---------- ---------- ---------- */

	p.openFlg = false;
	p.isFirst = true;
	p.stageInit=function(){
		this.openFlg = false
		this.view.hide()
	}
	p.callback ;
	p.stageIn=function(_callback )  {
		if (! this.openFlg) { this.openFlg = true;
			this.view.show()
			this.callback = _callback;
			if(this.isFirst){
				this.createLayout()
			}
			this.isFirst = false;
			
		}
	}
	p.stageOut=function( )  {
		if (this.openFlg) { this.openFlg = false
		this.view.hide()
		}
	}
	return c;
})();


EditableView.CustomListData = (function(){
	function getPreset(){
		var param = {}
			param.g = 3-1;//絡む
			param.w = 0;//枠+背景
		
			param.l = 2;//レイアウト
			param.d = 2;//デザイン
			param.ww = 1;
		
			param.t_ww = 720;
			param.t_m = 10;
			param.t_iw = 80;
			param.t_ih = 120;
			param.t_m_p = 1;
			param.t_iw_p = 50;
		return param;
	}
	
	var _param = (function() {
		/* ---------- ---------- ---------- */
		var c = function() {
		  this.init();
		}
		var p = c.prototype;
		/* ---------- ---------- ---------- */
		
		p.init = function() {
			//レイアウト種類
			this.type = "T";//TBLR
			this.design = "designA";//TBLR
			
			//LRの場合
			this.img_width = "100px";//TB
			// this.img_height = "120px";//TB
			
			this.width = "720px";
			this.devide = "3";
			this.margin = "15px";
			
			//レスポンシブ
			this.responsive = false;
			
			//枠あり
			this.enclose = "";
		}
		return c;
	})();
	function getCodes(param){
		var param;
		
		var isFix = (param.ww == 0) ? true:false;
		var o = new _param();
			
			if(param.l == 0){
				if(param.d == 0) { o.type = "T"; o.design = "designA" }
				if(param.d == 1) { o.type = "T"; o.design = "designA" }
				if(param.d == 2) { o.type = "T"; o.design = "designA" }
				if(param.d == 3) { o.type = "T"; o.design = "designB" }
				if(param.d == 4) { o.type = "T"; o.design = "designB" }
				if(param.d == 5) { o.type = "T"; o.design = "designB" }
			}
			
			if(param.l == 1){
				if(param.d == 0) { o.type = "B"; o.design = "designA" }
				if(param.d == 1) { o.type = "B"; o.design = "designA" }
				if(param.d == 2) { o.type = "B"; o.design = "designA" }
				if(param.d == 3) { o.type = "B"; o.design = "designB" }
				if(param.d == 4) { o.type = "B"; o.design = "designB" }
				if(param.d == 5) { o.type = "B"; o.design = "designB" }
			}
			if(param.l == 2){
				if(param.d == 0) { o.type = "L"; 	o.design = "designA" }
				if(param.d == 1) { o.type = "LT"; 	o.design = "designA" }
				if(param.d == 2) { o.type = "LTF"; o.design = "designA" }
				if(param.d == 3) { o.type = "L"; 	o.design = "designB" }
				if(param.d == 4) { o.type = "LT"; 	o.design = "designB" }
				if(param.d == 5) { o.type = "LTF"; o.design = "designB" }
			}
			if(param.l == 3){
				if(param.d == 0) { o.type = "R"; 	o.design = "designA" }
				if(param.d == 1) { o.type = "RT"; 	o.design = "designA" }
				if(param.d == 2) { o.type = "RTF"; o.design = "designA" }
				if(param.d == 3) { o.type = "R"; 	o.design = "designB" }
				if(param.d == 4) { o.type = "RT"; 	o.design = "designB" }
				if(param.d == 5) { o.type = "RTF"; o.design = "designB" }
			}
			if(param.l == 4){
				if(param.d == 0) { o.type = "Z"; 	o.design = "designA" }
				if(param.d == 1) { o.type = "Z"; 	o.design = "designA" }
				if(param.d == 2) { o.type = "Z"; 	o.design = "designA" }
				if(param.d == 3) { o.type = "Z"; 	o.design = "designB" }
				if(param.d == 4) { o.type = "Z"; 	o.design = "designB" }
				if(param.d == 5) { o.type = "Z"; 	o.design = "designB" }
			}
			if(param.l == 5){
				if(param.d == 0) { o.type = "I"; 	o.design = "designA" }
				if(param.d == 1) { o.type = "I"; 	o.design = "designA" }
				if(param.d == 2) { o.type = "I"; 	o.design = "designA" }
				if(param.d == 3) { o.type = "I"; 	o.design = "designA" }
				if(param.d == 4) { o.type = "I"; 	o.design = "designA" }
				if(param.d == 5) { o.type = "I"; 	o.design = "designA" }
			}
			//
			if(isFix){
				o.width = param.t_ww + "px";
				o.margin = param.t_m + "px";
				o.img_width = param.t_iw + "px";
			} else{
				o.width = "100%";
				o.margin = param.t_m_p + "%";
				o.img_width = param.t_iw_p + "%";
			}
			// o.img_height = (param.t_ih != undefined) ? param.t_ih + "px" :"";
			o.devide = param.g + 1;
			o.enclose = (function(_n){ 
				var a = ["","A","B"];
			    return a[_n];
			})(param.w);
		
		
		return EditableView.CustomListData2.getCode(o);
	}
	return { getCodes:getCodes }
})();

EditableView.CustomListData2 = (function() {
	var view;
	var v = {};

	function get_design(_s) {
		return _s;
	}
	function get_isFix(_w) {
		if(_w.indexOf("px") != -1) {
			return true;
		} else{
			return false;
		}
	}
	function get_unit(_f) {
		return (_f) ? "px" :"%";
	}
	function get_li_devide(_d) {
		if(_d == undefined) return 2;
	    return Number(_d);
	}
	function get_li_margin(_m) {
		var m = _m;
			m = m.split("px").join("");
			m = m.split("%").join("");
		return Number(m);
	}
	function get_li_width(_w,_isFix,_margin,_devide) {
		var w = _w;
			w = w.split("px").join("");
			w = w.split("%").join("");
		if(_isFix) {
			var w2 = (w - (_margin * (_devide - 1)));
		    return Math.floor(w2 / _devide);
		} else{
			var w2 = ( w - (_margin * _devide));
		    return Math.floor(w2 / _devide);
		}
	}

	function getCodeHTML(_temp,_param) {
		var type = _param.type
		
		var start = _temp.ul.start
		if(_param.li_devide == 1){
			start = _temp.ul.startOne
		}
		
		var a = [];
			a.push(start);
				a.push(_temp.li.start);
				a.push(_temp[type].title);
				if(type == "B"){
					a.push(_temp[type].texts);
					a.push(_temp[type].images);
				} else{
					a.push(_temp[type].images);
					a.push(_temp[type].texts);
				}
				a.push(_temp.li.end);
			a.push(_temp.ul.end);
		var html =  a.join("");
			html = html.split("{UL_CLEARFIX}").join(" clearfix");
			html = html.split("{COMMONH}").join(" commonHeight");
		
		return html;
	}
	function getCodeCSS(_temp,_param) {
		var type = _param.type;
		var design = _param.design;
		
		var extra = "";
		if(_temp[type][design]){
			if(_temp[type][design].extra){
				extra = _temp[type][design].extra;
			}
		}
		var enclose = "";
		if(_param.enclose){
			if(_temp[type]["enclose" + _param.enclose]){
				enclose = _temp[type]["enclose" + _param.enclose];
			}
		}
		var base = _temp[type].base
		if(_param.li_devide == 1){
			base = _temp["One"].base
		}
		
		var a = [];
			// _temp[One].base
			a.push(base);
			a.push(enclose);
			a.push(_temp[type].images);
			a.push(_temp[type].texts);
			a.push(extra);
			a.push(_temp[design].t1);
			a.push(_temp[design].t2);
			a.push(_temp[design].t3);
			a.push(_temp.res);
			
		var u = _param.unit;
		var css =  a.join("");
			css = css.split("{UL_MR}"	).join(_param.ul_marginR + u);
			css = css.split("{LI_W}"	).join(_param.li_width + u);
			css = css.split("{LI_M}"	).join(_param.li_margin + u);
			css = css.split("{IMG_W}"	).join(_param.img_width + u);
			css = css.split("{TEXT_W}"	).join(_param.text_margin + u);
			// css = css.split("{IMG_H}"	).join(_param.img_h);
			css = css.split("{IMG_H}"	).join("");
			css = css.split("{IMG_M}"	).join(_param.img_m);

		return css;
	}
	
	function get_ul_marginR(_isFix,_w,_m,_d) {
		if(_isFix){
			return 20;
		} else{
			return 100 - ((_w * _d) + (_m * (_d - 1)));
		}
	}
	function get_img_width(_w) {
		var w = _w;
			w = w.split("px").join("");
			w = w.split("%").join("");
		return Number(w);
	}
	// function get_img_height(_h) {
	// 	var h = _h;
	// 		h = h.split("px").join("");
	// 		h = h.split("%").join("");
	// 	return Number(h);
	// }
	function get_text_margin(_isFix,_w) {
		var w = _w;
			w = w.split("px").join("");
			w = w.split("%").join("");
		var ww = Number(w);
		if(_isFix){
			return ww + 10;
		} else {
			return ww + 3;
		}
	}
	// function get_img_h(_type,_h) {
	// 	if(_h == undefined) return ""
	// 	if(_h == "") return ""
	// 		var s = "";
	// 			s += '	max-height:'+_h+'px;\n';
	// 			s += '	overflow:hidden;\n';
	// 		return s;

	// }
	function get_img_m(_type,_enclose) {
		var s = "0 0 10px 0";
		if(_type == "LTF") s = "0 5px 10px 0";
		if(_type == "RTF") s = "0 0 10px 5px";
		if(_type == "T") {
			if(_enclose != 0){
				s = "-10px -10px 10px -10px";
			}
		}
		if(_type == "B") {
			if(_enclose != 0){
				s = "10px -10px -10px -10px";
			}
		}
		return s;
	}
	
	function getCode(_in) {
		var p = {}
			p.type	 	 = _in.type;
			p.design	  = get_design(_in.design);
			p.isFix 	 = get_isFix(_in.width);
			p.unit 		 = get_unit(p.isFix);
			p.enclose 	 = _in.enclose;
			p.li_devide  = get_li_devide(_in.devide);
			p.li_margin  = get_li_margin(_in.margin);
			p.li_width 	 = get_li_width(_in.width, p.isFix, p.li_margin, p.li_devide);
			p.ul_marginR  = get_ul_marginR(p.isFix,p.li_width, p.li_margin, p.li_devide);
			p.img_width  = get_img_width(_in.img_width);
			// p.img_height  = get_img_height(_in.img_height);
			p.text_margin  = get_text_margin(p.isFix,_in.img_width);
			// p.img_h 	 = get_img_h(p.type,p.img_height);
			p.img_m 	 = get_img_m(p.type,p.enclose);
			
		var code = EditableView.CustomListData_Dic;
		var html  = getCodeHTML(code.html,p);
		var css  = getCodeCSS(code.css,p);
		
		return {
			css:css,
			html:html
		}
	}
	return {
		getCode: getCode 
	}
})();


EditableView.CustomListData_Dic = (function(){ 

	var css = (function(){ 
		var _ = {}
	
		_.One = {
			base : (function(){ 
				var s ="";
					s += '#{ID} {\n';
					s += '	margin-bottom:5px;\n';
					s += '}\n';
					s += '#{ID} li {\n';
					s += '	margin:0 0 {LI_M} 0;\n';
					s += '	border-radius:5px;\n';
					s += '}\n';
					s += '#{ID} a {font-size:12px;}\n';
				return s;
			})()
		}
		
		_.T = {
			base : (function(){ 
				var s ="";
					s += '#{ID} {\n';
					s += '	margin-right:-{UL_MR};\n';
					s += '	margin-bottom:5px;\n';
					s += '}\n';
					s += '#{ID} li {\n';
					s += '	float:left;\n';
					s += '	width:{LI_W};\n';
					s += '	margin:0 {LI_M} {LI_M} 0;\n';
					s += '	border-radius:5px;\n';
					s += '}\n';
					s += '#{ID} a {font-size:12px;}\n';
				return s;
			})(),
			enclose : "",
			encloseA : (function(){ 
				var s ="";
					s += '#{ID} li{\n';
					s += '	background:#fff;\n';
					s += '	box-sizing: border-box;\n';
					s += '	border: 1px solid rgba(0,0,0,0.1);\n';
					s += '}\n';
					s += '#{ID} .inner{\n';
					s += '	padding:10px;\n';
					s += '}\n';
				return s;
			})(),
			encloseB : (function(){ 
				var s ="";
					s += '#{ID} li{\n';
					s += '	background:#333;\n';
					s += '	color:#fff;\n';
					s += '	box-sizing: border-box;\n';
					s += '}\n';
					s += '#{ID} .inner{\n';
					s += '	padding:10px;\n';
					s += '}\n';
				return s;
			})(),
			images : (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '	margin:{IMG_M};\n';
					s += '{IMG_H}';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
				return s;
			})(),
			texts : (function(){ 
				var s ="";
					s += '#{ID} .texts {\n';
					s += '}\n';
				return s;
			})()
		}
		_.B = _.T;
		_.Z = JSON.parse(JSON.stringify(_.T));
		_.Z.images = ""
		_.Z.texts = ""
		
		_.I = JSON.parse(JSON.stringify(_.T));
		_.I.images = (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '{IMG_H}';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
				return s;
			})()
		_.I.texts = ""
		
		_.L = {
			base : (function(){ 
				var s ="";
					s += '#{ID} {\n';
					s += '	margin-right:-{UL_MR};\n';
					s += '	margin-bottom:5px;\n';
					s += '}\n';
					s += '#{ID} li {\n';
					s += '	float:left;\n';
					s += '	width:{LI_W};\n';
					s += '	margin:0 {LI_M} {LI_M} 0;\n';
					s += '	border-radius:5px;\n';
					s += '}\n';
					s += '#{ID} a {font-size:12px;}\n';
				return s;
			})(),
			enclose : "",
			encloseA : (function(){ 
				var s ="";
					s += '#{ID} li{\n';
					s += '	background:#fff;\n';
					s += '	box-sizing: border-box;\n';
					s += '	border: 1px solid rgba(0,0,0,0.1);\n';
					s += '}\n';
					s += '#{ID} .inner{\n';
					s += '	padding:10px;\n';
					s += '}\n';
				return s;
			})(),
			encloseB : (function(){ 
				var s ="";
					s += '#{ID} li{\n';
					s += '	background:#333;\n';
					s += '	color:#fff;\n';
					s += '	box-sizing: border-box;\n';
					s += '}\n';
					s += '#{ID} .inner{\n';
					s += '	padding:10px;\n';
					s += '}\n';
				return s;
			})(),
			images : (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '	float:left;\n';
					s += '	width:{IMG_W};\n';
					s += '	margin:{IMG_M};\n';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
				return s;
			})(),
			texts : (function(){ 
				var s ="";
					s += '#{ID} .texts {\n';
					s += '	margin:0 0 0 {TEXT_W};\n';
					s += '}\n';
				return s;
			})()
		}
		_.R = JSON.parse(JSON.stringify(_.L));
		_.R.images = (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '	float:right;\n';
					s += '	width:{IMG_W};\n';
					s += '	margin:{IMG_M};\n';
					s += '{IMG_H}';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
				return s;
			})()
		_.R.texts = (function(){ 
				var s ="";
					s += '#{ID} .texts {\n';
					s += '	margin:0 {TEXT_W} 0 0;\n';
					s += '}\n';
				return s;
			})()
			
		_.LT = _.L;
		_.RT = _.R;
		
		_.LTF = JSON.parse(JSON.stringify(_.LT));
		_.LTF.images = (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '	float:left;\n';
					s += '	width:{IMG_W};\n';
					s += '	margin:{IMG_M};\n';
					s += '{IMG_H}';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
					return s;
			})();
		_.LTF.texts = ""
		
		_.RTF = JSON.parse(JSON.stringify(_.LTF));
		_.RTF.images = (function(){ 
				var s ="";
					s += '#{ID} .images {\n';
					s += '	float:right;\n';
					s += '	width:{IMG_W};\n';
					s += '	margin:{IMG_M};\n';
					s += '{IMG_H}';
					s += '}\n';
					s += '#{ID} .images img {\n';
					s += '	width:100%;\n';
					s += '}\n';
				return s;
			})()
		_.RTF.texts = ""
		
		/* ---------- ---------- ---------- */
		
		_.designA = {
			t1 : (function(){ 
				var s ="";
					s += '#{ID} .t1 {\n';
					s += '	font-size:14px;\n';
					s += '	line-height:1.2;\n';
					s += '	font-weight:bold;\n';
					s += '	border-bottom: 2px solid #888;\n';
					s += '	margin:0 0 10px 0;\n';
					s += '	padding:5px 0 5px 0;\n';
					s += '}\n';
				return s;
			})(),
			t2 : (function(){ 
				var s ="";
					s += '#{ID} .t2 {\n';
					s += '	font-size:12px;\n';
					s += '	line-height:1.6;\n';
					s += '	margin:0 0 5px 0;\n';
					s += '}\n';
				return s;
			})(),
			t3 : (function(){ 
				var s ="";
					s += '#{ID} .t3 {\n';
					s += '	font-size:10px;\n';
					s += '	line-height:1.6;\n';
					s += '	color:#888;\n';
					s += '	margin:0 0 5px 0;\n';
					s += '}\n';
				return s;
			})()
		}
		_.designB = {
			t1 : (function(){ 
				var s ="";
					s += '#{ID} .t1 {\n';
					s += '	font-size:12px;\n';
					s += '	line-height:1.2;\n';
					s += '	font-weight:bold;\n';
					s += '	background:#333;\n';
					s += '	color:#fff;\n';
					s += '	padding:6px 2px 3px 2px;\n';
					s += '	margin:0 0 10px 0;\n';
					s += '	text-align:center;\n';
					s += '}\n';
				return s;
			})()
		}
		_.designB.t2 = _.designA.t2;
		_.designB.t3 = _.designA.t3;
		
		//
		_.res = (function(){ 
			var s ="\n";
				s += '@media screen and (max-width: 480px) {\n';
				s += '	#{ID} ul {\n';
				s += '		margin-right:auto;\n';
				s += '	}\n';
				s += '	#{ID} li {\n';
				s += '		float:none;\n';
				s += '		width:auto;\n';
				s += '		margin:0 0 20px 0;\n';
				s += '	}\n';
				s += '	#{ID} .images{\n';
				s += '		max-height:none;\n';
				s += '	}\n';
				s += '}\n';
			return s;
		})();
		return _;
	})();
	
	var html = (function(){ 
		var _ = {}
		_.ul = {}
		_.ul.start = (function(){ 
			var tag = "";
				// tag += '<div id="{ID}">\n';
				tag += '<ul id="{ID}" class="{UL_CLEARFIX}{COMMONH}">\n';
				tag += '{REPEAT_START}\n';
			return tag;
		})();
		_.ul.startOne = (function(){ 
			var tag = "";
				// tag += '<div id="{ID}">\n';
				tag += '<ul id="{ID}" class="">\n';
				tag += '{REPEAT_START}\n';
			return tag;
		})();
		_.ul.end = (function(){ 
			var tag = "";
				tag += '{REPEAT_END}\n';
				tag += '</ul>\n';
				// tag += '</div>\n';
			return tag;
		})();
		
		/* ---------- ---------- ---------- */
	
		_.li = {}
		_.li.start = (function(){ 
			var tag = "";
			// tag += '	<li {LINK}>\n';
			tag += '	<li class="cms-blocklink">\n';
			tag += '		<div class="inner clearfix">\n';
			return tag;
		})();
		_.li.end = (function(){ 
			var tag = "";
			tag += '		{LINK}\n';
			tag += '		</div>\n';
			tag += '	</li>\n';
			return tag;
		})();
		
		/* ---------- ---------- ---------- */
	
		_.Z = {
			title :"",
			images : "",
			texts : (function(){ 
				var tag = "";
					tag += '			<p class="t1">{1}</p>\n';
					tag += '			<p class="t2">{2}</p>\n';
					tag += '			<p class="t3">{3}</p>\n';
				return tag;
			})()
		}
	
		_.I = {
			title :"",
			images : (function(){ 
				var tag = "";
					tag += '			<div class="images">\n';
					tag += '				{IMG}\n';
					tag += '			</div>\n';
				return tag;
			})(),
			texts :""
		}
	
		_.T = {
			title :"",
			images : (function(){ 
				var tag = "";
					tag += '			<div class="images">\n';
					tag += '				{IMG}\n';
					tag += '			</div>\n';
				return tag;
			})(),
			texts : (function(){ 
				var tag = "";
					tag += '			<div class="texts">\n';
					tag += '				<p class="t1">{1}</p>\n';
					tag += '				<p class="t2">{2}</p>\n';
					tag += '				<p class="t3">{3}</p>\n';
					tag += '			</div>\n';
				return tag;
			})()
		}
		_.B = _.T;
		_.L = _.T;
		_.R = _.T;
		_.RT = {
			title : (function(){ 
				var tag = "";
					tag += '			<p class="t1">{1}</p>\n'
				return tag;
			})(),
			images : (function(){ 
				var tag = "";
					tag += '			<div class="images">\n';
					tag += '				{IMG}\n';
					tag += '			</div>\n';
				return tag;
			})(),
			texts : (function(){ 
				var tag = "";
					tag += '			<div class="texts">\n';
					tag += '				<p class="t2">{2}</p>\n';
					tag += '				<p class="t3">{3}</p>\n';
					tag += '			</div>\n';
				return tag;
			})()
		}
		_.LT = _.RT;
		_.LTF = _.RT;
		_.RTF = _.RT;
		return _;
	})();
		
	return {
		html:html,
		css:css
	}
})();


var InspectView 		 = (function(){
	
	if(window["sc"] == undefined) window.sc = {}
	window.sc.duplicateCurrent  = function (){ if(_hasTarget()) {duplicateData() }}
	window.sc.deleteCurrent 	= function (){ if(_hasTarget()) {deleteData() }}
	window.sc.copyCurrent 		= function (){ if(_hasTarget()) {copyData() }}
	window.sc.cutCurrent 		= function (){ if(_hasTarget()) {cutData() }}
	window.sc.pastCurrent 		= function (){ if(_hasTarget()) {pastData() }}
	window.sc.pastCurrent2 		= function (){ if(_hasTarget()) {pastData2() }}
	
	window.sc.moveTopCurrent  	= function (){ if(_hasTarget()) {moveDataToFirst(0) }}
	window.sc.moveUpCurrent  	= function (){ if(_hasTarget()) {moveData(-1) }}
	window.sc.moveDownCurrent  	= function (){ if(_hasTarget()) {moveData(1) }}
	window.sc.moveBottomCurrent = function (){ if(_hasTarget()) {moveDataToLast() }}
	
	window.sc.historyBack 	 	= function (){ if(_hasTarget()) {historyBack() }}
	window.sc.selectNodePrev  	= function (){ if(_hasTarget()) {selectNodeNext(-1) }}
	window.sc.selectNodeNext  	= function (){ if(_hasTarget()) {selectNodeNext(1) }}
	window.sc.dClick 		 	= function (){ if(_hasTarget()) {dClick() }}
	
	window.sc.editJSON 		 	= function (){ if(_hasTarget()) {editJSON() }}
	window.sc.addToMyBlock 	 	= function (){ if(_hasTarget()) {addToMyBlock() }}

 	function _hasTarget(){ return currentNode; }

	/* ---------- ---------- ---------- */
	
	var view;
	var v = {};
	
	function init(){
		InspectView.FormU.init();
		
		view = $('#InspectView');
		var tag = "";
			tag += '<div class="_header"><div class="_dragBar"></div><div class="_title"></div></div>';
			tag += '<div class="_btn_close"><i class="fa fa-lg fa-times-circle "></i></div>';
			tag += '<div class="_tabRow1">';
			tag += '	<ul>';
			tag += '		<li class="_tabItem _tab_data _current">データ</li>';
			tag += '		<li class="_tabItem _tab_design ">デザイン</li>';
			tag += '		<li class="_tabItem _tab_view">その他</li>';
			// tag += '		<li class="_tabItem _tab_id" style="padding-left:3px;padding-right:3px;">ID</li>';
			tag += '		<li class="_tabItem _tab_output">出力</li>';
			tag += '	</ul>';
			tag += '</div>';
			tag += '<div class="_inner">';
			tag += '	<div class="_tabRow2">';
			tag += '		<ul class="clearfix">';
			tag += '			<li class="_tabItemOut _tab_embed">埋込み <i class="fa fa-sign-in fa-lg"></i></li>';
			tag += '			<li class="_tabItemOut _tab_export">書出し <i class="fa fa-angle-right "></i> <i class="fa fa-file-text fa-lg"></i></li>';
			tag += '		</ul>';
			tag += '	</div>';
			tag += '	<div class="_body">';
			tag += '		<div class="_bodyItem _body_data"></div>';
			tag += '		<div class="_bodyItem _body_css"></div>';
			tag += '		<div class="_bodyItem _body_view"></div>';
			// tag += '		<div class="_bodyItem _body_id"></div>';
			tag += '		<div class="_bodyItem _body_output">';
			tag += '			<div class="_bodyItemOut _body_export"></div>';
			tag += '			<div class="_bodyItemOut _body_embed"></div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '</div>';
			tag += '<div class="_preview"><div class="_miniPreviw"></div></div>';
			tag += '<div class="_footer"></div>';
		view.html(tag);
		
		v.header	 = view.find('._header');
		v.btn_close	 = view.find('._btn_close');
		v.title		 = view.find('._title');
		v.body		 = view.find('._body');
		v.bodyItems		 = view.find('._bodyItem');
		v.bodyOutItems	 = view.find('._bodyItemOut');
		//
		v.body_data	 = view.find('._body_data');
		// v.body_id	 = view.find('._body_id');
		v.body_css	 = view.find('._body_css');
		v.body_view	 = view.find('._body_view');
		v.body_output = view.find('._body_output');
		v.body_export = view.find('._body_export');
		v.body_embed = view.find('._body_embed');
		//
		v.preview	 = view.find('._preview');
		v.miniPreviw = view.find('._miniPreviw');
		v.footer	 = view.find('._footer');
		
		v.body_view		.append( InspectView.View.init() );
		v.body_view		.append( InspectView.ID.init() );
		v.body_view		.append( InspectView.ATTR.init() );
		v.body_export	.append( InspectView.Export.init() );
		v.body_embed	.append( InspectView.Embed.init() );
		v.footer		.append( InspectView.Footer.init() );
		
		initTab();
		initTabOut();
		//bodyH_init();
		stageInit();
		setBtn();
		
		openTab("data");
		// openTab("design");
	}

	/* ---------- ---------- ---------- */
	
	function setBtn(){
		v.miniPreviw.on("click",function(){ showTag()});
		view.draggable({distance:5});
		
		view.on("mousedown",function(){
			CMS_KeyManager.setType("");
		})
		
		v.btn_close.click(function(){
			stageOut();
		});
	}
	
	/* ---------- ---------- ---------- */
	//タブの管理
	
	function initTab(){
		v.tabs		 = view.find('._tabItem');
		v.tab_data	 = view.find('._tab_data');
		v.tab_design = view.find('._tab_design');
		v.tab_view	 = view.find('._tab_view');
		// v.tab_id	 = view.find('._tab_id');
		v.tab_output = view.find('._tab_output');
		
		v.tab_data		.click(function(){openTab("data")})
		v.tab_design	.click(function(){openTab("design")})
		v.tab_view		.click(function(){openTab("view")})
		// v.tab_id		.click(function(){openTab("id")})
		v.tab_output	.click(function(){openTab("output")})
	}
	function openTab(_s){
		//タブ
		v.tabs.removeClass("_current");
		if(_s == "data") 	v.tab_data	.addClass("_current");
		if(_s == "design") 	v.tab_design.addClass("_current");
		if(_s == "view") 	v.tab_view	.addClass("_current");
		// if(_s == "id") 		v.tab_id	.addClass("_current");
		if(_s == "output") 	v.tab_output.addClass("_current");
		//
		if(_s == "output"){
			v.tabs_outs.show();
			if(!currentOutTab) openOutTab("embed");
		} else{
			v.tabs_outs.hide();
		}
		if(_s == "output"){
			v.preview.hide();
		} else{
			v.preview.show();
		}
		//ボディエリア
		v.bodyItems	.hide();
		if(_s == "data") 	v.body_data		.show();
		if(_s == "design") 	v.body_css		.show();
		if(_s == "view") 	v.body_view		.show();
		// if(_s == "id") 		v.body_id		.show();
		if(_s == "output") 	v.body_output	.show();
		
		updateBodyH();
	}
	
	/* ---------- ---------- ---------- */
	
	function initTabOut(){
		v.tabs_outs	 = view.find('._tabRow2');
		v.tab_out	 = view.find('._tabItemOut');
		v.tab_export = view.find('._tab_export');
		v.tab_embed	 = view.find('._tab_embed');
		
		v.tab_export	.click(function(){openOutTab("export")})
		v.tab_embed		.click(function(){openOutTab("embed")})
	}
	var currentOutTab;
	function openOutTab(_s){
		currentOutTab = _s;
		v.tab_out.removeClass("_current");
		if(_s == "export") 	v.tab_export.addClass("_current");
		if(_s == "embed") 	v.tab_embed.addClass("_current");
		
		v.bodyOutItems.hide();
		if(_s == "export") 	v.body_export.show();
		if(_s == "embed") 	v.body_embed.show();
		//
		updateBodyH();
	}
	
	/* ---------- ---------- ---------- */
	
	var windowMinH = 160;
	function updateBodyH(){
		var h = v.body.height();
		if(h < windowMinH) h = windowMinH;
		view.find("._inner").css({height:h+"px"});
		// view.addClass("_maxBodyH");
	}

	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//#要素選択
	
	var currentNode;
	var replaceNode;
	var replacePropNode;
	var currentDiv;
	var currentNo;
	var param;
	var blockType;
		
	/* ---------- ---------- ---------- */
	//要素ダブルクリック時にコール
	
	function setData_DoubleClick(_type,_this,this_,_rep,_repProp){
		setData(_type,_this,this_,_rep,_repProp);
		dClick();
	}
	function dClick(){
		var t = blockType;
		if(t.indexOf("object.") == 0){ view.find("._cms_btn_edit").click();}
		if(t == "tag.heading")		{ view.find("._input-with-btns ._edit_single").eq(0).click();}
		if(t == "tag.p")			{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.html")			{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.js")			{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.markdown")		{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.code")			{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.note")			{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.place")		{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.blockquote")	{ view.find("._input-with-btns ._edit").eq(0).click();}
		if(t == "tag.btn")			{ view.find("._btn_TextAnchor").eq(0).click();}
		if(t == "tag.img")			{ 
			//シンプル or レイアウトモード
			var b = false;
			if(param.data){ b = param.data.isLayoutMode; }
			if(b){
				view.find("._cms_btn_edit").eq(0).click();
			} else{
				view.find("._in_data_img").eq(0).click();
			}
		}
	}
	
	function doCommand(_command,_extra){
		if(_command == "delete")		{ deleteData()};
		if(_command == "toggle")		{ toogleDivView()};
		if(_command == "openDetail")	{ dClick()};
		if(_command == "export")		{ window.sc.inspect_export(); }
		if(_command == "export_link")	{ CMS_U.openURL_blank(_extra); }
		if(_command == "embed")			{ window.sc.inspect_embed(); }
		if(_command == "embed_link")	{ CMS_U.openURL_blank(_extra); }
	}

	/* ---------- ---------- ---------- */
	//要素選択時にコール
	//InspectView.setData
	
	var pageParam;
	function setPageData(_pageParam){
		pageParam = _pageParam;
	}
	//InspectView.setData
	function setData(_type,_this,this_,_rep,_repProp){
		//同じノードの場合は、スルー
		if(currentNode){if(currentNode.get(0)==_this.get(0))return;}
		//
		prevClickNode 	= currentNode;
		currentNode  	= _this;
		currentDiv 	 	= this_;
		replaceNode  	= _rep;
		replacePropNode = _repProp;
		currentNo 		= Number($(_this).attr("data-no"));
		param 			= currentDiv.gridData.getRecordAt(currentNo);
		blockType  		= param.type;
		var _attr 		= param.attr;
		
		//ノードの順番情報をアップデート
		updateNodeNo();
		
		//現在の選択ノード保持用
		EditableView.PageViewState.setCurretSelect(currentNode);
		
		//ブロック位置により、ページスクロールを調整する;
		updateTagPreview();
		
		//ページプリセット用
		_select_select_target();

		//colsのlayout.divの場合は、layout.colDivに
		if(_type == "layout.colDiv") blockType = _type;
		
		var _has = PageElement_Util.hasInputType;
		var _FU 	= InspectView.FormU;
		var _FUIMG 	= InspectView.FormU_Img;
		
		//属性取得
		var style 	 = CMS_BlockAttrU.get_style(_attr);
		var css_	 = CMS_BlockAttrU.get_css(_attr);
		var id_	 	 = CMS_BlockAttrU.get_id(_attr);
		var attr_	 = CMS_BlockAttrU.get_attr(_attr);
		var preview  = CMS_BlockAttrU.get_preview(_attr);
		var extra 	 = defaultVal(param["extra"] , {} );

		/* ---------- ---------- ---------- */
		//タイトル設定

		v.title.html(PageElement_Util.getTypeName(blockType) /*+ ' <span class="_t0">ブロック</span>'*/);
		 
		/* ---------- ---------- ---------- */
		//入力の組み立て
			
		var nodes = (function(){ 
			var a = [];
			if(blockType == "tag.anchor")	{ a.push(_FU.getAnchor		(param)); }
			if(blockType == "tag.html")		{ a.push(_FU.getHtml		(param,preview)); }
			if(blockType == "tag.js")		{ a.push(_FU.getJS			(param)); }
			if(blockType == "tag.code")		{ a.push(_FU.getCode		(param)); }
			if(blockType == "tag.markdown")	{ a.push(_FU.getMarkdown	(param)); }
			if(blockType == "tag.margin")	{ a.push(_FU.getMargin		(param)); }
			if(blockType == "tag.note")		{ a.push(_FU.getNote		(param)); }
			if(blockType == "tag.place")	{ a.push(_FU.getPlace		(param,extra)); }
			if(blockType == "tag.btn")		{ a.push(_FU.getBtn			(param)); }
			if(blockType == "tag.img")		{ a.push(_FUIMG.getIMG		(param,extra,"IMG")); }
			if(blockType == "layout.div")	{ a.push(_FUIMG.getBGIMG	(param,extra)); }
			if(blockType == "layout.cols")	{ a.push(_FU.getLayoutCol	()); }
			if(blockType == "replace.div")	{ a.push(_FU.getReplaceDiv	(param)); }
			if(_has(blockType,"CAPTION")) 	{ a.push(_FU.getCaptionTag	(param,extra)); }
			if(_has(blockType,"TEXTAREA")) 	{ a.push(_FU.getTextarea	(param)); }
			if(_has(blockType,"TREE")) 		{ a.push(_FU.getTree		(param)); }
			// if(_has(blockType,"IMGMAP")) 	{ a.push(_FU.getImageMap	(param)); }
			if(_has(blockType,"DETAIL")) 	{ a.push(_FU.getDetail		(blockType,currentDiv)); }
			if(_has(blockType,"RELOAD")) 	{ a.push(_FU.getReload		(blockType,currentDiv)); }
			if(_has(blockType,"HEADLINE")) 	{ a.push(_FU.getHeadlineTag	(param)); }
			if(blockType == "object.images"){ a.push(_FUIMG.getImages	(param,extra )); }
			a.push(_FU.getGuide(blockType));
			return a;
		})();
		v.body_data.empty();
		for (var i = 0; i <  nodes.length ; i++) {
			v.body_data.append(nodes[i]);
		}
		
		//CSS
		var nodes = (function(){ 
			//tag.headingの場合は、現在のh1,h2,,,を取得
			var _extra = (function(_type,_param){ 
				var s = "";
				if(_type == "tag.heading" && _param["data"]){
					if(_param.data["heading"]) s = _param.data["heading"];
				}
				return s;
			})(blockType,param);
			//
			var a = [];
			if(_has(blockType,"CLASS")) 		a.push( _FU.getDesignTag(css_,blockType,_extra));
			if(_has(blockType,"CSS")) 			a.push( _FU.getStyleTag( style ));
			a.push(_FU.getDesginGuide());
			
			return a;
		})();
		v.body_css.empty();
		for (var i = 0; i <  nodes.length ; i++) {
			v.body_css.append(nodes[i]);
		}
		
		//表示・非表示
		InspectView.View.setData( blockType,
			CMS_BlockAttrU.get_narrow(_attr),
			CMS_BlockAttrU.get_hide(_attr),
			CMS_BlockAttrU.get_hidePC(_attr),
			CMS_BlockAttrU.get_hideMO(_attr)
		);
	
		//ID
		InspectView.ID.setData( blockType, id_ );
		InspectView.ATTR.setData( blockType, attr_ );
		
		//書き出し
		InspectView.Export.setData( blockType,
			CMS_BlockAttrU.get_pubFileName(_attr),
			param
		);
		
		//埋め込み
		InspectView.Embed.setData( blockType,
			CMS_BlockAttrU.get_embedName(_attr), 
			CMS_BlockAttrU.get_embedID(_attr), 
			param
		);
		
		/* ---------- ---------- ---------- */
		
		setSelected();
		updateBodyH();
	}
	


	/* ---------- ---------- ---------- */
	//#選択要素へ、選択クラスをアサイン
	
	var prevClickNode;
	var _SN = "_selected";
	function setSelected(){
		$(prevClickNode).removeClass(_SN);
		$(currentNode).addClass(_SN);
		stageIn();
	}
	function unselect(){
		if(currentNode) $(currentNode).removeClass(_SN);
		_unselect_select_target();
	}
	
	/* ---------- ---------- ---------- */
	//選択ブロックを操作
	
	//次のブロック選択
	function selectNodeNext(_n){
		if(currentDiv){
			if(currentDiv["selectNodeNext"]){
				currentDiv.selectNodeNext(currentNo+_n);
			}
		}
		updateScrollPos();
	}
	window.selectNodeNext = selectNodeNext;
	
	//ブロックの複製
	function duplicateData(){
		currentDiv.duplicateData(currentNo);
		updateNodeNo();
		updateScrollPos();
		hilightElement();
	}
	
	//ブロックの移動
	function historyBack(){
		currentDiv.historyBack();
	}
	function moveData(_n){
		if(! currentDiv.canMove(currentNo,currentNo + _n))return;
		currentDiv.moveData(currentNo,currentNo + _n);
		currentNo += _n;
		updateNodeNo();
		updateScrollPos();
	}
	function moveDataToFirst(){
		currentDiv.moveDataToFirst(currentNo);
		currentNo = 0;
		updateNodeNo();
		updateScrollPos();
	}
	function moveDataToLast(){
		var _move = currentDiv.moveDataLast(currentNo);
		currentNo = _move;
		updateNodeNo();
		updateScrollPos();
	}
	
	//画面スクロール位置の調整
	function updateScrollPos(_b){
		if(currentNode){
			CMS_ScreenManager.updatePageScroll($(currentNode).offset().top,_b);
		}
	}
	
	/* ---------- ---------- ---------- */
	//attr
	
	function setAttr_attr		(val){ setAtt("attr",val); }
	function setAttr_id			(val){ setAtt("id",val); }
	function setAttr_css		(val){ setAtt("css",val); }
	function setAttr_style		(val){ setAtt("style",val); }
	function setAttr_preview	(val){ setAtt("preview",val); }
	function setAttr_pubFileName(val){ setAtt("pubFileName",val); }
	function setAttr_embedName	(val){ setAtt("embedName",val); }
	function setAttr_embedID	(val){ setAtt("embedID",val); }
	function setAttr_narrow		(val){ setAtt("narrow",val); }
	function setAttr_hide		(val){ setAtt("hide",val); }
	function setAttr_hidePC		(val){ setAtt("hidePC",val); }
	function setAttr_hideMO		(val){ setAtt("hideMO",val); }
	function setAttr_replaceID	(val){ setAtt("replaceID",val); }
	// function setAttr_hidePC		(val){ (val) ? setAtt("hidePC",val) : delAtt("hidePC"); }
	// function setAttr_hideMO		(val){ (val) ? setAtt("hideMO",val) : delAtt("hideMO"); }
	
	/* ---------- ---------- ---------- */
	//#タグのattributeを計算
	
	function setAtt(_s,_v){
		if(param.attr[_s] == _v)return;
		CMS_BlockAttrU.setAttr(param.attr,_s,_v);
		
		var t = blockType;
		//コンテナの背景対応
		if(t == "layout.div" && _s == "style") {
			_v = CMS_ImgBlockU.getBgStyle(param.extra) +_v;
		}
		replacePropNode.attr(_s,_v);
		if(t == "layout.cols"){
			replacePropNode.attr("class","cms-column " + CMS_BlockAttrU.clucuCss(param.attr));
			updateTagPreview();
		} else if( t == "layout.div" || t == "replace.div"){
			replacePropNode.attr("class","cms-layout " + CMS_BlockAttrU.clucuCss(param.attr));
			updateTagPreview();
		} else if( t == "layout.colDiv"){
			replacePropNode.attr("class","cms-column-col " + CMS_BlockAttrU.clucuCss(param.attr));
			updateTagPreview();
		} else {
			updateCallerView();
		}
		//レイアウトDIVのIDを変更した場合は、
		//_block_infoを探して上書きする。
		if(CMS_BlockAttrU.isMarkAttr(_s)){
			if(t ==  "layout.cols" || t == "layout.div" || t == "replace.div"){
				var tar = currentNode.find("> ._block_info");
					tar.html(CMS_BlockAttrU.getMarkTag(param.attr));
				updateTagPreview();
			}
		}
		currentDiv.updateSubData();
	}
	/*
	function delAtt(_s){
		if(param.attr[_s]){
			delete param.attr[_s];
			updateTagPreview();
			currentDiv.updateSubData();
		}
	}*/
	
	/* ---------- ---------- ---------- */
	//#選択元の要素をアップデート
	
	var tID_update
	
	function updateCallerView(){
		var cs = "_updating_block";
		if(blockType=="layout.div"){
			replacePropNode.attr("style", CMS_ImgBlockU.getBgStyle(param.extra) + param.attr["style"]);
			return;
		}
		var tar = replaceNode.find(' > *').eq(0);
			tar.addClass(cs);
			//
		if(tID_update) clearTimeout(tID_update)
		tID_update = setTimeout(function(){
			tar.removeClass(cs);
			updateCallerView_core();
		},200);
	}
	function updateCallerView_core(){
		updateTagPreview();
		//プレビュー更新
		var tar = replaceNode.find(' > *').eq(0);
		var tag = PageElement_Util.getPreview(param);
			tag = HTMLServiceU.getReplacedHTML(tag,pageParam,"",false);
			
			try{
				tar.replaceWith(tag);
			}catch( e ){
				tar.replaceWith(CMS_E.PARSE_ERROR);
			}
		//マーク更新
		var tar = replaceNode.find(' > ._block_info');
		var tag = CMS_BlockAttrU.getMarkTag(param.attr);
			tar.html(tag);
		currentDiv.updateSubData();
	}
	
	/* ---------- ---------- ---------- */
	//#タグプレビュー アップデート
	
	function updateTagPreview(){
		var s = ""
		if(JSON.stringify(param).length > 10000){
			//データが多い場合は、時間がかかるのでプレビューしない
			s = "選択ブロックのデータ量が多く、プレビューに時間がかかるため、このブロックはHTMLプレビューできません。"
		} else{
			s = PageElement_HTMLService.getTag(param);
			s = HTMLServiceU.getReplacedHTML(s,{},"",false);
			s = s.split("\n").join("");
			s = CMS_TagU.tag_2_t(s);
		}
		v.miniPreviw.html(s.substr(0,200));
	}
	
	/* ---------- ---------- ---------- */
	//ハイライト表示
	
	var hilght_tID;
	function hilightElement(){
		$("body").addClass("_copyBlock");
		if(hilght_tID) clearTimeout(hilght_tID);
		hilght_tID = setTimeout(function(){
			$("body").removeClass("_copyBlock");
		},200);
	}
	
	/* ---------- ---------- ---------- */
	//#コンテナ開閉トグル
	
	function toogleDivView(){
		InspectView.View.toggleNarrow();
	}
	
	/* ---------- ---------- ---------- */
	//#コピペ
	
	
	function deleteData(){
		currentDiv.removeData(currentNo);
		updateNodeNo();
	}
	function copyData(){
		CMS_Status.clipBord = JSON.stringify(param);
		hilightElement();
	}
	function cutData(){
		copyData();
		deleteData();
	}
	function pastData(){
		param = JSON.parse(CMS_Status.clipBord)
		AddElementsManager.addElement_by_object(param);
		updateNodeNo();
		updateScrollPos();
		hilightElement();
	}
	function pastData2(){
		param = JSON.parse(CMS_Status.clipBord)
		currentDiv.changeData(param,currentNo);
		if(currentDiv.parent.update != undefined){
			currentDiv.parent.update();
		} else{
			currentDiv.update();
		}
		updateNodeNo();
		updateScrollPos();
		hilightElement();
	}
	
	//ノードの順番情報をアップデート
	function updateNodeNo(){
		$(currentNode).data("no",currentNo);
		AddElementsManager.setData( currentDiv , currentNo);
	}
	
	function getCurrentNo(val) {
		return currentNo;
	}
	
	/* ---------- ---------- ---------- */
	//#タグ表示
	
	function showTag(){
		var this_ = this;
		var s = PageElement_HTMLService.getTag(param)
			s = HTMLServiceU.getReplacedHTML(s,{},"",false);
		Editer_TAGView.stageIn(s,function(_s){});
	}
	
	/* ---------- ---------- ---------- */
	//#JSON表示と編集
	
	function editJSON(){
		Editer_JSONView.stageIn(
			JSON.stringify(param, null, "	"),
			function(_s){
				editJSON_core(_s);
			}
		)
	}
	function editJSON_core(_s){
		try{
			var d = JSON.parse(_s);
		}catch( e ){
			alert("データ形式が正しくありません。");
			return false;
		};
		if(_s != null){
			UpdateDelay.delay(function(){
				var o = JSON.parse(_s);
				param = o;
				currentDiv.changeData(param,currentNo);
				if(currentDiv.parent.update != undefined){
					currentDiv.parent.update();
				} else{
					currentDiv.update();
				}
			});
		}
	}
	
	/* ---------- ---------- ---------- */
	//#JSON表示と編集
	
	function addToMyBlock(){
	}
	
	/* ---------- ---------- ---------- */
	//#Stage
	
	var isOpen = false;
	var isFirst = true;
	function stageInit() {
		view.hide();
	}
	
	function stageIn() {
		if(isFirst){
			var w = view.width();
			var h = view.height();
			
			var offsetX = 70;
			var offsetY = 160;
			if(CMS_StatusW > 1300) {
				offsetX = 140;
			}
			
			view.css("left",( CMS_StatusW - w - offsetX ) +"px");
			view.css("top", offsetY + "px");
			isFirst = false;
		}
		updatePosition()
		view.show();
	}
	function updatePosition() {
		var W = CMS_StatusW
		var H = CMS_StatusH
		
		var l = Number(view.css("left").split("px").join(""));
		var t = Number(view.css("top").split("px").join(""));
		var w = view.width();
		var h = view.height();
		
		if(l + 50 > W) view.css("left",(W - w -50) +"px");
		if(t + 50 > H) view.css("top",(H - h -20) +"px");
	}

	function stageOut() {
		unselect();
		currentNode = null;
		view.hide();
	}

	function stageOut_core() {
		view.hide();
	}
	
	/* ---------- ---------- ---------- */
	//ひな形ブロックリロードのみで使用
	
	function refreshBlock(){
		hilightElement();
		setTimeout(function(){
			currentDiv.update();
		},100);
	}
	
	/* ---------- ---------- ---------- */
	
	//プリセットステージで使用。
	//ブロックが選択されたら、コールする
	
	var select_target;
	function addSelectCallback(_tar){
		select_target = _tar;
	}
	function resetSelectCallback(){
		select_target = null;
	}
		
	function _select_select_target(){
		if(select_target){
			if(select_target.select) select_target.select();
		}
	}
	function _unselect_select_target(){
		if(select_target){
			if(select_target.unselect) select_target.unselect();
		}
	}
	/* ---------- ---------- ---------- */

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		doCommand: doCommand,
		
		setPageData: setPageData,
		setData: setData,
		setData_DoubleClick: setData_DoubleClick,
		
		setAtt 	: setAtt,
		setAttr_attr : setAttr_attr,
		setAttr_id : setAttr_id,
		setAttr_css : setAttr_css,
		setAttr_style : setAttr_style,
		setAttr_preview : setAttr_preview,
		setAttr_pubFileName : setAttr_pubFileName,
		setAttr_embedName : setAttr_embedName,
		setAttr_embedID	: setAttr_embedID,
		setAttr_narrow 	: setAttr_narrow,
		setAttr_hide	: setAttr_hide, 
		setAttr_hidePC 	: setAttr_hidePC,
		setAttr_hideMO 	: setAttr_hideMO,
		setAttr_replaceID 	: setAttr_replaceID,
		
		updateScrollPos: updateScrollPos,
		updateCallerView: updateCallerView,
		getCurrentNo: getCurrentNo,
		updateBodyH: updateBodyH,
		refreshBlock: refreshBlock,
		
		addSelectCallback:addSelectCallback,
		resetSelectCallback:resetSelectCallback
	}
})();


InspectView.Footer	 = (function(){

	var view;
	var v = {};
	
	function init(_view){
		view = $("<div>");
		var tag = ""
			tag += '<table>';
			tag += '	<tr>';
			tag += '		<td><span class="_cms_btn_alpha _btn_json_im ss_inspect2 _edit"></span></td>';
			//tag += '		<td>'
			// tag += '			<div class="_hoverSet">'
			// tag += '				<span class="_cms_btn_alpha _btn_json_im ss_inspect2 _edit"></span>'
			// tag += '				<div class="_hoverItems">'
			// tag += '					<span class="_cms_btn_alpha _btn_json_im ss_inspect2 _edit"></span>'
			// tag += '					<span class="_cms_btn_alpha _btn_addPreset ss_inspect2 _my"></span>'
			// tag += '				</div>'
			// tag += '			</div>'
			//tag += '		</td>';
			// tag += '		<td><span class="_cms_btn_alpha _btn_json_im ss_inspect2 _edit"></span></td>';
			// tag += '		<td><span class="_cms_btn_alpha _btn_addPreset ss_inspect2 _my"></span></td>';
			tag += '		<td>'
			tag += '			<div class="_hoverSet">'
			tag += '				<span class="_cms_btn_alpha _btn_copy ss_inspect2 _copipe"></span>'
			tag += '				<div class="_hoverItems">'
			tag += '					<span class="_cms_btn_alpha _btn_copy ss_inspect2 _copipe_copy" '+TIP("#+C","R")+'></span>'
			tag += '					<span class="_cms_btn_alpha _btn_cut ss_inspect2 _copipe_cut" '+TIP("#+X","R")+'></span>'
			tag += '					<span class="_cms_btn_alpha _btn_past ss_inspect2 _copipe_past" '+TIP("#+V","R")+'></span>'
			tag += '					<span class="_cms_btn_alpha _btn_past2 ss_inspect2 _copipe_past2" '+TIP("#+Shift+V","R")+'></span>'
			tag += '				</div>'
			tag += '			</div>'
			tag += '		</td>';
			// tag += '		<td>'
			// tag += '			<div class="_hoverSet">'
			// tag += '				<span class="_cms_btn_alpha _btn_dup ss_inspect2 _dup" '+TIP("#+D")+'></span>'
			// tag += '				<div class="_hoverItems">'
			// tag += '					<span class="_cms_btn_alpha _btn_dup ss_inspect2 _dup" '+TIP("#+D")+'></span>'
			// tag += '				</div>'
			// tag += '			</div>'
			// tag += '		</td>';
			tag += '		<td><span class="_cms_btn_alpha _btn_dup ss_inspect2 _dup" '+TIP("#+D")+'></span></td>';
			// tag += '		<td><span class="_cms_btn_alpha  ss_inspect2 _dup" '+TIP("#+D")+'></span></td>';
			tag += '		<td><span class="_cms_btn_alpha _btn_del ss_inspect2 _del" '+TIP("#+DELL")+'></span></td>';
			tag += '		<td>'
			tag += '			<div class="_hoverSet">'
			tag += '				<span class="_cms_btn_alpha _btn_next ss_inspect2 _move"></span>'
			tag += '				<div class="_hoverItems" style="top:-65px;">'
			tag += '					<span class="_cms_btn_alpha _btn_prev2 ss_inspect2 _move_top2"></span>'
			tag += '					<span class="_cms_btn_alpha _btn_prev ss_inspect2 _move_top" '+TIP("#+↑","R")+'></span>'
			tag += '					<span class="_cms_btn_alpha _btn_next ss_inspect2 _move_bottom" '+TIP("#+↓","R")+'></span>'
			tag += '					<span class="_cms_btn_alpha _btn_next2 ss_inspect2 _move_bottom2"></span>'
			tag += '				</div>'
			tag += '			</div>'
			tag += '		</td>';
			tag += '	</tr>';
			tag += '</table>';
		view.html(tag);
		
		setBtn();
		return view;
	}
	function setBtn(){
		view.find("._btn_dup")		.on("click",function(){ clickAnim(this);window.sc.duplicateCurrent()});
		view.find("._btn_del")		.on("click",function(){ clickAnim(this);window.sc.deleteCurrent();});
		view.find("._btn_copy")		.on("click",function(){ clickAnim(this);window.sc.copyCurrent();	});
		view.find("._btn_cut")		.on("click",function(){ clickAnim(this);window.sc.cutCurrent();	});
		view.find("._btn_past")		.on("click",function(){ clickAnim(this);window.sc.pastCurrent()});
		view.find("._btn_past2")	.on("click",function(){ clickAnim(this);window.sc.pastCurrent2()});
		
		view.find("._btn_prev2")	.on("click",function(){ clickAnim(this);window.sc.moveTopCurrent()});
		view.find("._btn_prev")		.on("click",function(){ clickAnim(this);window.sc.moveUpCurrent()});
		view.find("._btn_next")		.on("click",function(){ clickAnim(this);window.sc.moveDownCurrent()});
		view.find("._btn_next2")	.on("click",function(){ clickAnim(this);window.sc.moveBottomCurrent()});
		
		view.find("._btn_json_im")		.on("click",function(){ clickAnim(this);window.sc.editJSON()});
		view.find("._btn_addPreset")	.on("click",function(){ clickAnim(this);window.sc.addToMyBlock()});
	}
	function clickAnim(_this){
		var tar = $(_this);
		tar.css("opacity","0.25");
		setTimeout(function(){
			tar.css("opacity","1");
		},100);
	}
	return {
		init:init
	}
})();


InspectView.View	 = (function(){

	var view;
	var v = {};
	
	function init(_view){
		view = $("<div>");
		var tag = ""
			tag += '<div class="_notes">■表示設定</div>';
			tag += '<div class="_view_active">';
			tag += '	<div class="ss_inspect_views">';
			tag += '	<div class="_cms_btn_alpha _btn_hide 		ss_inspect _btn_hide" ></div>';
			tag += '	<div class="_cms_btn_alpha _btn_hide_ac 	ss_inspect _btn_hide_ac"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_pc 			ss_inspect _btn_pc"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_pc_ac 		ss_inspect _btn_pc_ac"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_mo 			ss_inspect _btn_mo"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_mo_ac 		ss_inspect _btn_mo_ac"></div>';
			tag += '	</div>';
			// tag += '	<br>';
			// tag += CMS_GuideU.getGuideTag("inspect/view","表示について","dark");
			tag += '</div>';
			tag += '<div class="_view_negative">';
			tag += '<div class="_dont_use _notes">このブロックでは利用できません。<br><br></div>';
			tag += '</div>';
			
		view.html(tag);
		v.view_active = view.find("._view_active").hide();
		v.view_negative = view.find("._view_negative").hide();
		
		setBtn();
		return view;
	}
	function setBtn(){
		v._btn_hide 	 = view.find("._btn_hide");
		v._btn_hide_ac	 = view.find("._btn_hide_ac");
		v._btn_pc 		 = view.find("._btn_pc");
		v._btn_pc_ac	 = view.find("._btn_pc_ac");
		v._btn_mo 		 = view.find("._btn_mo");
		v._btn_mo_ac	 = view.find("._btn_mo_ac");
		
		var update = true;
		
		v._btn_hide			.on("click",function(){setHide  (false,update)});
		v._btn_hide_ac		.on("click",function(){setHide  (true,update)});
		v._btn_pc			.on("click",function(){setHidePC(false,update)});
		v._btn_pc_ac		.on("click",function(){setHidePC(true,update)});
		v._btn_mo			.on("click",function(){setHideMO(false,update)});
		v._btn_mo_ac		.on("click",function(){setHideMO(true,update)});
	}
	
	/* ---------- ---------- ---------- */

	var narrow = "";
	var hide = "";
	var hidePC = "";
	var hideMO = "";
	
	function setData(_blockType,_narrow,_hide,_hidePC,_hideMO){
		if(_blockType == "layout.colDiv") {
			v.view_active.hide()
			v.view_negative.show()
			return;
		}
		v.view_active.show()
		v.view_negative.hide()
		//
		narrow = _narrow;
		hide = _hide;
		hidePC = _hidePC;
		hideMO = _hideMO;
		setNarrow	( narrow	, false);
		setHide		( hide		, false);
		setHidePC	( hidePC	, false);
		setHideMO	( hideMO	, false);
	}
	
	function toggleNarrow(){
		setNarrow(isNarrow ? false:true , true)
	}
	var isNarrow = false
	function setNarrow(_b,_update){
		isNarrow = _b;
		if(_b){
			if(_update) InspectView.setAttr_narrow(true);
		} else{
			if(_update) InspectView.setAttr_narrow("");
		}
	}
	
	function setHide(_b,_update){
		v._btn_hide.hide();
		v._btn_hide_ac.hide();
		if(_b){
			v._btn_hide.show();
			if(_update) InspectView.setAttr_hide(true);
		} else{
			v._btn_hide_ac.show();
			if(_update) InspectView.setAttr_hide("");
		}
	}
	function setHidePC(_b,_update){
		v._btn_pc.hide();
		v._btn_pc_ac.hide();
		if(_b){
			v._btn_pc.show();
			if(_update) InspectView.setAttr_hidePC(true);
		} else{
			v._btn_pc_ac.show();
			if(_update) InspectView.setAttr_hidePC("");
		}
	}
	function setHideMO(_b,_update){
		v._btn_mo.hide();
		v._btn_mo_ac.hide();
		if(_b){
			v._btn_mo.show();
			if(_update) InspectView.setAttr_hideMO(true);
		} else{
			v._btn_mo_ac.show();
			if(_update) InspectView.setAttr_hideMO("");
		}
	}
	return {
		init:init,
		setData:setData ,
		toggleNarrow:toggleNarrow 
	}
})();



InspectView.ID	 = (function(){

	var view;
	var v = {};
	
	function init(_view){
		view = $("<div>");
		var tag = ""
			tag += '<div class="_notes">■ID設定</div>';
			tag += '<div class="_view_active">';
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>id="値"</th><td><input class="_in_data_id _color-style _bold" placeholder="IDを入力" value=""></td></tr>';
			tag += '</table>';
			// tag += CMS_GuideU.getGuideTag("inspect/id","IDについて","dark");
			tag += '</div>';
			tag += '<div class="_view_negative">';
			tag += '<div class="_dont_use _notes">このブロックでは利用できません。<br><br></div>';
			tag += '</div>';
			
		view.html(tag);
		v.view_active = view.find("._view_active").hide();
		v.view_negative = view.find("._view_negative").hide();
		
		v.in_data_id = view.find("._in_data_id");
		v.in_data_id.keyup(function(){ 
			InspectView.setAttr_id($(this).val());
		});
		
		setBtn();
		return view;
	}
	function setBtn(){
	}
	
	function setData(_blockType,_id){
		if(_blockType == "layout.colDiv") {
			v.view_active.hide()
			v.view_negative.show()
			return;
		}
		v.view_active.show()
		v.view_negative.hide()
		
		v.in_data_id.val(_id)
	}
	
	return {
		init:init,
		setData:setData
	}
})();




InspectView.ATTR	 = (function(){

	var view;
	var v = {};
	
	function init(_view){
		view = $("<div>");
		var tag = ""
			tag += '<div class="_notes">■タグ属性設定 </div>';
			tag += '<div class="_view_active">';
			tag += '<table class="_mainlayout">';
			tag += '<tr><td>'
			tag += '<div class="_input-with-btns">'
			tag += '	<input class="_in_data_attr _color-style _bold" placeholder="タグ属性を入力" value="">';
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit_single" data-type="input:class">'+Dic.I.Edit+'</span> '
			tag += '	</div>'
			tag += '</td></tr>';
			tag += '</table>';
			tag += '<div class="_notes">※class,style,id属性以外を指定できます。汎用的な用途で利用できます。</div>';
			tag += '</div>';
			tag += '<div style="height:5px;"></div>';
			tag += CMS_GuideU.getGuideTag("inspect/id","その他タブについて","dark");
			
		view.html(tag);
		
		v.in_data_attr = view.find("._in_data_attr");
		v.in_data_attr.keyup(function(){ 
			InspectView.setAttr_attr($(this).val());
		});
		
		setBtn();
		return view;
	}
	function setBtn(){
	}
	
	function setData(_blockType,_id){
		v.in_data_attr.val(_id)
	}
	
	return {
		init:init,
		setData:setData
	}
})();



InspectView.Export	 = (function(){

	var view;
	var v = {};
	var _U
	
	/* ---------- ---------- ---------- */
	//ブロック公開
	
	function init(_view){
		_U = InspectView.Embed_U;
		view = $("<div>");
		var t_guide = '<i class="fa fa-level-down fa-rotate-180"></i> 書出したいファイル名を指定してください。既存ファイルを上書きしないように注意してください。'
		var tag = ""
			tag += '<div class="_view_active">';
			tag += '<div class="_notes">選択ブロックを、個別にファイルとして書出せます。RSSブロックの書出しなど。</div>'
			tag += '<div class="ss_guide _export _picture"></div>'
			tag += '<table class="_step" style="width:100%;">';
			tag += '	<tr class="">';
			tag += '		<td width="20"><div class="_stepNo">1</div></td>';
			tag += '		<td colspan="2">'
			tag += '			<div style="margin:0 0 4px 0;">書出しファイルパス</div>'
			tag += '			<input class="_path _in_data_path" value="" placeholder="./text.txt">'
			tag += '			<div class="_guideText" style="margin:5px 0 5px 0">'+t_guide+'</div>';
			tag += '			<div class="_btn_public_path"></div>';
			tag += '			<div class="_errorText_path"></div>';
			tag += '		</td>';
			tag += '	</tr>';
			tag += '	<tr class="_row_do">';
			tag += '		<td><div class="_stepNo" style="margin-top:5px;">2</div></td>';
			tag += '		<td>'
			tag += '			<div class=" _btn_pub _btn_public_block">書出す <i class="fa fa-angle-right "></i> <i class="fa fa-file-text fa-lg"></i></div>';
			tag += '		</td>'
			tag += '		<td>'
			tag += '			<div class=" _btn_pub _btn_public_clear">削除</div>';
			tag += '		<td>'
			tag += '		</td>';
			tag += '	</tr>';
			tag += '</table>';
			tag += '<br>';
			tag += CMS_GuideU.getGuideTag("inspect/export","書出について","dark");
			tag += '</div>';
			tag += '<div class="_view_negative">';
			tag += '<div class="_dont_use _notes">このブロックでは利用できません。</div>';
			tag += '</div>';
		view.html(tag);
		
		v.view_active = view.find("._view_active").hide();
		v.view_negative = view.find("._view_negative").hide();
		
		setBtn();
		return view;
	}
	function setBtn(){
		
		v.in_data_path = view.find('._in_data_path');
		v.btn_public_block = view.find('._btn_public_block');
		v.btn_public_clear = view.find('._btn_public_clear');
		v.btn_public_path = view.find('._btn_public_path');
		
		v.row_do = view.find('._row_do');
		
		v.errorText_path = view.find('._errorText_path').hide();
		
		v.in_data_path		.keyup(function(){ changeFilename($(this).val()); });
		v.btn_public_block	.click(function(){ publicBlock()});
		v.btn_public_clear	.click(function(){ unPublicBlock()});
		v.btn_public_path	.click(function(){ publicOpen()});
		v.guideText		 = view.find('._guideText');
		
		if(window["sc"] == undefined) window.sc = {}
		window.sc.inspect_export = function(){
			publicBlock_from_external()
		}
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	
	//ファイル名変更
	function changeFilename(_s){
		if (pubFile == _s) return;
		InspectView.setAttr_pubFileName(_s);
		pubFile = _s;
		update();
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	
	var param;
	var pubFile = "";
	
	function setData(_blockType,_file,_param){
		if(_blockType == "layout.colDiv") {
			v.view_active.hide()
			v.view_negative.show()
			return;
		}
		v.view_active.show()
		v.view_negative.hide()
		//
		//
		pubFile = _file;
		param = _param;
		v.in_data_path.val(pubFile);
		
		resetView();
		update_core();
	}
	
	function hasExportData(){
		if(pubFile) return true;
		return false
	}
	function resetView(){
		resetPublicBlock();
		if(tID) clearTimeout(tID);
	}
	
	/* ---------- ---------- ---------- */

	var tID;
	function update(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			update_core();
		},200);
	}
	
	function update_core(){
		var b = false;
		var error = _U.checkFilePath(pubFile);
		if(error == ""){
		 	_U.checkDirExist(pubFile,updatePath);
		} else{
			updatePath(pubFile,error);
		}
	}
	
	function updatePath(_path,_error){
		v.row_do.hide();
		if(_error){
			v.btn_public_path.hide();
			if(_error == "-1") _error = "";
			_error = CMS_E.getText(_error)
			if(_error){
				v.errorText_path.html(_error).show();
				v.guideText.hide()
			} else {
				v.errorText_path.hide();
				v.guideText.show()
			}
		} else{
			v.btn_public_path.html('<span class="_icon_dir_mini"></span>' + _path + ' ' + Dic.I.External).show();
			v.errorText_path.hide();
			v.row_do.show();
			v.guideText.hide()
		}
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	//書き出し
	
	var tID_write;
	function resetPublicBlock(){
		if(tID_write) clearTimeout(tID_write);
	}
	function publicBlock_from_external(){
		setTimeout(function(){
			publicBlock(true);
		},100);
	}
	function _getParam(url) {
		var dir = url.substring(0, url.lastIndexOf("/")+1);
		return { id:"", dir: "/" + dir };
	}
	function publicBlock(){
		if(window.isLocked(true))return;
		if(!hasExportData())return;
		CMS_ProccessView.stageIn();
		
		var tag = PageElement_HTMLService.getExportTag(param);
			tag = HTMLServiceU.setSiteRoot(tag,pubFile);
			tag = HTMLServiceU.getReplacedHTML(tag,_getParam(pubFile));//追加 20160901
			
		if(tID_write) clearTimeout(tID_write);
		tID_write = setTimeout(function(){
			Storage.Embed.writeFile(pubFile, tag, publicBlock_writed);
		},600);
	}
	function publicBlock_writed(_b){
		if(!_b){
			showWriteError();
			return;
		}
		CMS_ProccessView.stageOut();
		var s = '';
			s += '書き出しました。<br>'
			s += '<i class="fa fa-external-link-square "></i> '
			s += '<a href="'+CMS_Path.SITE.REL + pubFile+'" target="_blank">' + pubFile + '</a>';
		CMS_AlertView.stageIn("書出完了",s);
	}
	function showWriteError(){
		CMS_ProccessView.stageOut();
		CMS_AlertView.stageIn("エラー","書出し出来ませんでした。");
	}
	
	/* ---------- ---------- ---------- */
	//削除
	
	function unPublicBlock(){
		if(window.isLocked(true))return;
		Storage.Embed.deleteFile(pubFile, unPublicBlock_comp);
	}
	function unPublicBlock_comp(_b){
		if(!_b){
			showDeleteError();
			return;
		}
		var s = '';
			s += '削除しました。<br>'
		CMS_AlertView.stageIn("削除完了",s);
	}
	function showDeleteError(){
		CMS_AlertView.stageIn("エラー","削除は出来ませんでした。");
	}
	
	/* ---------- ---------- ---------- */

	//書き出したファイルを開く
	function publicOpen(){
		CMS_U.openURL_blank(CMS_Path.SITE.REL + pubFile);
	}
	
	return {
		init:init,
		setData:setData 
	}
})();




InspectView.Embed	 = (function(){

	var view;
	var v = {};
	var _U
	
	/* ---------- ---------- ---------- */
	//ブロック公開
	
	function init(_view){
		_U = InspectView.Embed_U;
		view = $("<div>");
		
		var t_guide = '<i class="fa fa-level-down fa-rotate-180"></i> 既に存在するHTMLファイルパスを指定してください。文字コードはUTF-8のみです。'
		var tag = ""
			tag += '<div class="_view_active">';
			tag += '<div class="_notes">CMS管理外のHTML内に、選択ブロックを書出せます。</div>'
			tag += '<div class="ss_guide _embed _picture"></div>'
			tag += '<table class="_step" style="width:100%;">';
			//
			tag += '	<tr class="">';
			tag += '		<td width="20"><div class="_stepNo">1</div></td>';
			tag += '		<td colspan="2">'
			tag += '			<div style="margin:0 0 4px 0;">埋込み先HTMLファイルパス</div>'
			tag += '			<table>';
			tag += '			<tr>';
			tag += '				<td><input class="_path _in_data_path" value="" placeholder="../index.html"></td>'
			tag += '				<td nowrap><div class="_btn_file_ref"><span class="_icon_dir"></span><br>参照</div></td>';
			tag += '			</tr>';
			tag += '			</table>';
			tag += '			<div class="_guideText" style="margin:5px 0 5px 0">'+t_guide+'</div>';
			tag += '			<div class="_btn_public_path"></div>';
			tag += '			<div class="_errorText_path"></div>';
			tag += '		</td>';
			tag += '	</tr>';
			//
			tag += '	<tr class="_row_id">';
			tag += '		<td><div class="_stepNo">2</div></td>';
			tag += '		<td colspan="2">'
			tag += '			<input type="hidden" class="_in_data_ID" value="" placeholder="埋込みIDを入力">';
			tag += '			<div class="_btn_embed_code">埋込コードの配置</div>';
			tag += '			<div style="margin:5px 0;">';
			tag += '				ID：<span class="_embedcode"></span> ( ';
			tag += '					<span class="_embedLink _preview_embed">取得</span>,';
			tag += '					<span class="_embedLink _change_embed">変更</span>';
			tag += '				)';
			tag += '			</div>';
			tag += '		</td>';
			tag += '	</tr>';
			//
			tag += '	<tr class="_row_do">';
			tag += '		<td><div class="_stepNo" style="margin-top:5px;">3</div></td>';
			tag += '		<td>'
			tag += '			<div class=" _btn_pub _btn_public_block">埋込む <i class="fa fa-sign-in fa-lg"></i></div>';
			tag += '		</td>'
			tag += '		<td>'
			tag += '			<div class=" _btn_pub _btn_public_clear">クリア</div>';
			tag += '		<td>'
			tag += '		</td>';
			tag += '	</tr>';
			tag += '</table>';
			tag += '<br>';
			tag += CMS_GuideU.getGuideTag("inspect/embed","埋込みについて","dark");
			tag += '</div>';
			tag += '<div class="_view_negative">';
			tag += '<div class="_dont_use _notes">このブロックでは利用できません。</div>';
			tag += '</div>';
		view.html(tag);
		
		v.view_active = view.find("._view_active").hide();
		v.view_negative = view.find("._view_negative").hide();
		
		setBtn();
		return view;
	}
	function setBtn(){
		
		v.in_data_path	 	= view.find('._in_data_path');
		v.in_data_ID	 	= view.find('._in_data_ID');
		v.btn_public_block 	= view.find('._btn_public_block');
		v.btn_public_clear 	= view.find('._btn_public_clear');
		v.btn_public_path 	= view.find('._btn_public_path');
		v.btn_file_ref 		= view.find('._btn_file_ref');
		v.btn_embed_code 	= view.find('._btn_embed_code');
		v.embedcode 		= view.find('._embedcode');
		v.guideText		 	= view.find('._guideText');
		
		v.row_id = view.find('._row_id');
		v.row_do = view.find('._row_do');
		
		v.errorText_path = view.find('._errorText_path').hide();
		// v.error_id		 = view.find('._error_id').hide();
		// v.error_id.click(function(){$(this).hide()})
		
		v.change_embed = view.find('._change_embed');
	 	v.change_embed.click(function() { 
 			var def = v.in_data_ID.val();
 			var s = prompt("埋込IDを入力してください",v.in_data_ID.val());
 			if(!s)return;
 			if(def == s)return;
 			v.in_data_ID.val(s).keyup();
	 	});
		
		v.preview_embed = view.find('._preview_embed');
	 	v.preview_embed.click(function() { 
 			prompt("IDをコピーし、埋込み先HTMLファイルにペーストしてください",getEmbedTag(true));
	 	});
		
		v.in_data_path		.keyup(function(){ changeFilename($(this).val()); });
		v.in_data_ID		.keyup(function(){ changeID($(this).val()); });
		v.btn_public_block	.click(function(){ publicBlock(true)});
		v.btn_public_clear	.click(function(){ publicBlock(false)});
		v.btn_public_path	.click(function(){ publicOpen()});
		//***
		v.btn_file_ref	.click(function(){ 
			var s = v.in_data_path.val();
			CMS_MainController.openAssetSelectRel("link", s ,function(_val){
				UpdateDelay.delay(function(){
					v.in_data_path.val(_val).keyup();
				});
			});
		});
		v.btn_embed_code	.click(function(){ 
			var s = v.in_data_path.val();
			var param = URL_U.getPageObject( CMS_Path.SITE.REL + s);
				param.extra = {
					addText :{
						label:'カーソルを移動して埋め込んでください',
						data:getEmbedTag(true)
					}
				}
			CMS_MainController.openAssetFile(param);
		});
		
		if(window["sc"] == undefined) window.sc = {}
		window.sc.inspect_embed = function(){
			publicBlock_from_external();
		}
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	
	//ファイル名変更
	function changeFilename(_s){
		if (pubFile == _s) return;
		InspectView.setAttr_embedName(_s);
		pubFile = _s;
		update();
	}
	var prevPubID = ""
	function changeID(_s){
		if (pubID == _s) return;
		InspectView.setAttr_embedID(_s);
		pubID = _s;
		v.embedcode.html(_s);
		update();
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	
	var param;
	var pubFile = "";
	var pubID = "";
	
	function setData(_blockType,_file,_id,_param){
		if(_blockType == "layout.colDiv") {
			v.view_active.hide()
			v.view_negative.show()
			return;
		}
		v.view_active.show()
		v.view_negative.hide()
		//
		pubFile = _file;
		pubID = _id;
		param = _param;
		v.in_data_path.val(pubFile);
		v.in_data_ID.val(pubID);
		v.embedcode.html(pubID);
		
		resetView();
		update_core();
	}
	function hasExportData(){
		if(pubFile && pubID) return true;
		return false
	}
	
	function resetView(){
		resetPublicBlock();
		if(tID) clearTimeout(tID);
		if(e_tID2) clearTimeout(e_tID2);
	}
	
	/* ---------- ---------- ---------- */

	var tID;
	function update(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			update_core();
		},200);
	}
	
	function update_core(){
		var b = false;
		var error = _U.checkFilePath(pubFile,{isHTML:true});
		if(error == ""){
		 	_U.checkFileExist(pubFile,updatePath);
		} else{
			updatePath(pubFile,error);
		}
	}
	
	function updatePath(_path,_error){
		v.row_id.hide();
		v.row_do.hide();
		if(_error){
			v.btn_public_path.hide();
			if(_error == "-1") _error = "";
			_error = CMS_E.getText(_error)
			if(_error == ""){
				v.errorText_path.hide();
				v.guideText.show()
			} else{
				v.errorText_path.html(_error).show();
				v.guideText.hide()
			}
		} else{
			if(hasExportData()){
				v.row_id.show();
				v.row_do.show();
			} else{
				v.row_id.show();
				if(! pubID){
					v.in_data_ID.val("block").keyup();
				}
			}
			v.btn_public_path.html('<span class="_icon_dir_mini"></span>' + _path + ' ' + Dic.I.External).show();
			v.errorText_path.hide();
			v.guideText.hide()
		}
		// v.preview_embed.html(getEmbedTag());
	}
	function getEmbedTag(_b){
		return _U.getEmbedTag(pubID,_b);
	}
	
	/* ! ---------- ---------- ---------- ---------- ---------- */
	
	//書き出し
	var tID_write;
	function resetPublicBlock(){
		if(tID_write) clearTimeout(tID_write);
	}
	var isEmbed = false;
	function publicBlock_from_external(){
		setTimeout(function(){
			publicBlock(true);
		},100);
	}
	function publicBlock(_b){
		if(window.isLocked(true))return;
		if(!hasExportData())return;
		isEmbed = _b;
		CMS_ProccessView.stageIn();
		if(tID_write) clearTimeout(tID_write);
		tID_write = setTimeout(function(){
			Storage.Embed.loadFile(pubFile, publicBlock_loaded);
		},600);
	}
	
	function _getParam(url) {
		var dir = url.substring(0, url.lastIndexOf("/")+1);
		return { id:"", dir: "/" + dir };
	}

	function publicBlock_loaded(_b,data){
		if(!_b) {
			showWriteError();
			return;
		}
		
		var tag = PageElement_HTMLService.getExportTag(param);
			tag = HTMLServiceU.setSiteRoot(tag , pubFile);
			tag = HTMLServiceU.getReplacedHTML(tag,_getParam(pubFile));//追加 20160901
		
		if(!isEmbed) tag = "";
		var out = _U.replaceEmbedText(data, pubID, tag);
		if(out == false) {
			showError_id();
			return;
		}
		Storage.Embed.writeFile(pubFile, out, publicBlock_writed);
	}
	function publicBlock_writed(_b){
		if(!_b){
			showWriteError();
			return;
		}
		CMS_ProccessView.stageOut();
		var s = '';
			s += '書き出しました。<br>'
			s += '<i class="fa fa-external-link-square "></i> '
			s += '<a href="'+CMS_Path.SITE.REL + pubFile+'" target="_blank">' + pubFile + '</a>';
		CMS_AlertView.stageIn("書出完了",s);
	}
	function showWriteError(){
		CMS_ProccessView.stageOut();
		CMS_AlertView.stageIn("エラー","書出し出来ませんでした。");
	}

	/* ---------- ---------- ---------- */
	
	var e_tID2;
	function showError_id(){
		if(e_tID2) clearTimeout(e_tID2);
		CMS_ProccessView.stageOut();
		var s = '<span class="_small">埋込み先に埋込みタグが存在しません。<br>';
			s += '<em>' +pubFile+'</em>へ、以下のタグを埋め込んでください。<br>';
			s += '<em>' + getEmbedTag() + '</em></span>';
		CMS_AlertView.stageIn("エラー", s );
	}
	
	/* ---------- ---------- ---------- */

	//書き出したファイルを開く
	function publicOpen(){
		CMS_U.openURL_blank(CMS_Path.SITE.REL + pubFile);
	}
	
	return {
		init:init,
		setData:setData
	}
})();





InspectView.Embed_U = (function(){

	/* ---------- ---------- ---------- */
	//埋込み用チェック
	function checkFileExist(_path,_callback){
		//メモリリストチェック
		if(checkExistFileList(_path)) {
			_callback(_path, "" );
			return;
		}
		//PHPで実際にチェック
		Storage.Embed.checkFileExist(_path, function(error){
			if(error){
				_callback(_path,error);
			} else{
				//メモリリストに追加
				addExistFileList(_path);
				_callback(_path,"");
			}
		});
	}
	//ファイル確認済みのリスト
	var existFileList = []
	function checkExistFileList(_s){
		for (var i = 0; i <  existFileList.length ; i++) {
			if(existFileList[i] == _s) return true;
		}
		return false;
	}
	function addExistFileList(_s){
		if(checkExistFileList(_s) == false){
			existFileList.push(_s)
		}
	}
	
	/* ---------- ---------- ---------- */
	//書出し用チェック
	
	function checkDirExist(_path,_callback){
		//メモリリストチェック
		if(checkExistDirList(_path)) {
			_callback(_path, "" );
			return;
		}
		//PHPで実際にチェック
		Storage.Embed.checkDirExist(_path, function(error){
			if(error){
				_callback(_path,error);
			} else{
				//メモリリストに追加
				addExistDirList(_path);
				_callback(_path,"");
			}
		});
	}
	//ディレクトリ確認済みのリスト
	var existDirList = []
	function checkExistDirList(_s){
		var dir = CMS_Path.SITE.REL + URL_U.getBaseDir(_s);
		for (var i = 0; i <  existDirList.length ; i++) {
			if(existDirList[i] == dir) return true;
		}
		return false;
	}
	function addExistDirList(_s){
		var dir = CMS_Path.SITE.REL + URL_U.getBaseDir(_s);
		if(checkExistDirList(dir) == false){
			existDirList.push(dir)
		}
	}
	
	/* ---------- ---------- ---------- */
	
	//ファイルパスをチェック
	function checkFilePath(_path,_param){
		_param = (_param) ? _param : {};
		if(_path == ""){
			return "-1";
		}
		if(_path.indexOf("_cms") == 0 ){
			return "CMSディレクトリ内には埋め込めません";
		}
		if(_path.charAt(_path.length -1) == "/" ){
			return "ファイルパスを入力してください";
		}
		if(_path.charAt(0) == "/" ){
			return "相対パスで入力してください";
		}
		if(_path.match(/[^0-9a-zA-Z_-¥.¥/]+/) != null){
			return "正しいファイルパスを入力してください";
		}
		var ex = URL_U.getExtention(_path);
		if(_param["isHTML"]){
			if(ex == "html" || ex == "htm"){
				//
			} else{
				return "HTMLファイル名を入力してください";
			}
		}
		return "";
	}
	
	/* ---------- ---------- ---------- */
	
	//埋め込みタグ
	function getEmbedTag(_id,_b){
		if(!_id) return "";
		if(_b){
			return ["<!-- EMBED:" + _id + " -->", "<!-- \/EMBED:" + _id + " -->"].join("");
		} else{
			return ["&lt;!-- EMBED:" + _id + " --&gt;", "&lt;!-- \/EMBED:" + _id + " --&gt;"].join("");
		}
	}
	function replaceEmbedText(_s,_id,_tag){
		var es = ["<!-- EMBED:" + _id + " -->", "<!-- \/EMBED:" + _id + " -->"];
		var rep = es[0] + "\n" + _tag + "\n" + es[1];
		var reg = new RegExp(es[0] + "(\n|.)*?" + es[1] , 'ig');
		if(_s.match(reg)){
			return _s.replace(reg, rep);
		} else{
			return false;
		}
	}
	return { 
		checkFileExist:checkFileExist,
		checkDirExist:checkDirExist,
		checkFilePath:checkFilePath,
		getEmbedTag:getEmbedTag,
		replaceEmbedText:replaceEmbedText
	}
})();



InspectView.TextAnchorClass 		 = (function(){
	/* ---------- ---------- ---------- */
	var c = function(_a,_b,_c,_d) {
	  this.init(_a,_b,_c,_d);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.type
	p.view
	p.val 
	p.callback 
	
	p.init = function(_view,_val,_callback) {
		if(_view.size() == 0)return;
		this.view 	 = _view;
		this.val 	 = _val;
		this.callback  = _callback;
		this.setData();
		this.update(this.val);
	}
	p.setData = function() { 
		var this_ = this;
		//ボタン設定の場合
		this.view.click(function(event){
			event.stopPropagation();
			event.preventDefault();
			Anchor_BtnView.stageIn(this_.val,function(_val){
				this_.val = _val
				this_.update(this_.val);
				this_.callback(this_.val);
			})
		});
	}
	p.update = function(_val) { 
		var tag = CMS_AnchorU.getViewTag(_val,false)
		this.view.html(tag);
	}

	return c;
})();


InspectView.AnchorClass 		 = (function(){
	/* ---------- ---------- ---------- */
	var c = function(_a,_b,_c,_d) {
	  this.init(_a,_b,_c,_d);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.type
	p.view
	p.val 
	p.callback 
	
	p.init = function(_view,_val,_callback) {
		if(_view.size() == 0)return;
		this.view 	 = _view;
		this.val 	 = _val;
		this.callback  = _callback;
		this.setData();
		this.update(this.val);
	}
	p.setData = function() { 
		var this_ = this;
		//リンク設定の場合
		this.view.off("click");
		this.view.click(function(event){
			Anchor_InputView.stageIn(this_.val,function(_val){
				this_.val = _val
				this_.update(this_.val);
				this_.callback(this_.val);
			})
			event.stopPropagation();
			event.preventDefault();
		});
	}
	p.update = function(_val) { 
		var tag = CMS_AnchorU.getViewTag(_val,false);
		this.view.html(tag);
	}
	p.getVal = function() { 
		return this.val;
	}

	return c;
})();


InspectView.FormU = (function(){
	
	var updateCallback;
	function init(){
		updateCallback = InspectView.updateCallerView;
		InspectView.FormU_Img.init();
		InspectView.FormU_Preset.init()
		//フォームのイベントアサインは、CMS_FormUで行う
	}
	
	/* ---------- ---------- ---------- */
	
	function assignMainInput(_node,_param){
		_node.find("._in_data").keyup(function() {
			updateMainParam(_param,$(this).val());
		});
	}
	function updateMainParam(_param,_v){
		if(_param.data == _v)return;
		_param.data = _v;
		updateCallback();
	}
	//
	function assignExtraInput(_node,_param){
		_node.find("._in_data_extra").keyup(function(){
			updateExtra( _param,$(this).val() ,$(this).data("type"));
		});
	}
	function updateExtra(_param,val,_tar){
		if(_param["extra"] ==undefined) _param.extra = {}
		_param.extra[_tar] = val;
		updateCallback();
	}
	//
	function assignAttrInput(_node,_param){
		_node.find("._in_data_attr").keyup(function(){
			updateAttr( _param,$(this).val() ,$(this).data("type"));
		});
	}
	function updateAttr(_param,val,_tar){
		InspectView.setAtt(_tar,val);
	}
	
	/* ---------- ---------- ---------- */

	function getHeadlineTag(_param){
		function _core(_name,_type,_placeholder,_layout){
			var s = ""
				s += '	<tr>';
				s += '		<td>{NAME}</td>';
				s += '		<td>';
				s += '			<div class="_input-with-btns">'
				s += '			<input class="_in_data_H " data-type="{TYPE}" placeholder="{PH}" value="{DATA}">'
				s += '			<div class="_btns"><span class="_btn_input _edit_single" data-type="input:text">'+Dic.I.Edit+'</span></div>'
				s += '			</div>'
				s += '		</td>';
				s += '		<td style="text-align:right;"><div class="_cms_btn_alpha _btn_anchor" data-type="{TYPE}"></div></td>';
				s += '	</tr>';
				s = s.split("{NAME}").join(_name)
				s = s.split("{PH}").join(_placeholder)
				s = s.split("{TYPE}").join(_type)
			return s;
		}
		var tag = ""
			tag += '<div>'
			tag += '	<input class="_in_data_H_Type" style="display:none;" value="'+_param.data.heading+'">'
			tag += '	<div class="_selectArea"></div>';
			tag += '	<table class="_mainlayout">';
			tag += 			_core("","main","テキストを入力","main");
			tag += '	</table>';
			tag += '	<table class="_mainlayout more_detail">';
			tag += 			_core("","right","サブテキストを入力","");
			tag += '	</table>';
			tag += '</div>'

		var node = $(tag);
			node.find("._in_data_H").eq(0).val(_param.data["main"].text);
			node.find("._in_data_H").eq(1).val(_param.data["right"].text);
			_setAnchorEvents(node,_param);
			InspectView.FormU_Heading.setNode(node,_param.data.heading);

		node.find("._in_data_H")		.keyup(function(){ editTextHeader( $(this).val() ,$(this).data("type")); });
		node.find("._in_data_H_Type")	.keyup(function(){ editTextH_Type( $(this).val()); });

		function editTextHeader(val,_tar){
			var node = _param.data[_tar]
			if(node.text == val)return;
			node.text = val;
			updateCallback();
		}
		function editTextH_Type(val,_tar){
			var node = _param.data;
			if(node.heading == val)return;
			node.heading = val;
			updateCallback();
		}
		return node;
	}
	/* ---------- ---------- ---------- */

	function getCaptionTag(_param,_extra){
		var tag = ""
			tag += '<table class="_mainlayout" style="margin-bottom:10px;">';
			tag += '<tr><th>見出し</th><td>'
			tag += '	<div class="_input-with-btns">'
			tag += '	<input class="_in_data_extra" data-type="head" placeholder="キャプション" value="">'
			tag += '	<div class="_btns"><span class="_btn_input _edit_single" data-type="input:text">'+Dic.I.Edit+'</span></div>'
			tag += '	</div>'
			tag += '</td></tr>';
			tag += '</table>';
		var node = $(tag);
			node.find("._in_data_extra").val(defaultVal(_extra.head,""));
		assignExtraInput(node,_param);
		return node;
	}
	
	function getAnchor(_param){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>ページ内<br>リンク用ID</th><td><input class="_in_data"></td></tr>';
			tag += '</table>';
		var node = $(tag);
			node.find("input").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	
	function getTextarea(_param){
		var tag = ""
			tag += '<div class="_input-with-btns _input-textarea">'
			tag += '	<textarea class="_textarea-scroll _in_data" placeholder="テキストを入力"></textarea><br>'
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-type="textarea:p">'+Dic.I.Edit+' 編集</span> '
			tag += '	</div>'
			tag += '</div>'
		var node = $(tag);
			node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		
		return node;
	}
	function getMarkdown(_param){
		var tag = "";
			tag += '<div class="_input-with-btns _input-textarea">'
			tag += '	<textarea class="_textarea-scroll _in_data" placeholder="テキストを入力"></textarea><br>'
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-type="textarea:markdown">'+Dic.I.Edit+' 編集</span> '
			tag += '	</div>'
			tag += '</div>'
		var node = $(tag);
			node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	function getCode(_param){
		var tag = "";
			tag += '<div class="_input-with-btns _input-textarea">'
			tag += '	<textarea class="_textarea-scroll _in_data _color-html" placeholder="テキストを入力"></textarea><br>'
			tag += '	<div class="_btns">'
			tag += 			'<span class="_btn_input _edit" data-type="textarea:code">'+Dic.I.Edit+' 編集</span> '
			tag += '	</div>'
			tag += '</div>'
		var node = $(tag);
		if(_param) node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	function getHtml(_param,_preview,_callback){
		var tag = "";
			tag += '<div>'
			tag += '	<div class="_input-with-btns _input-textarea">'
			tag += '		<textarea class="_textarea-scroll _in_data _color-html" placeholder="テキストを入力"></textarea><br>'
			tag += '		<div class="_btns">'
			tag += 				'<span class="_btn_input _edit" data-type="textarea:html">'+Dic.I.Edit+' 編集</span> '
			tag += '		</div>'
			tag += '	</div>'
			tag += '	<div class="_in_preview_on" style="margin:5px 0;"><i class="fa fa-lg fa-square-o "></i> プレビューする (JSも実行されます)</div>'
			tag += '	<div class="_in_preview_off" style="margin:5px 0;"><i class="fa fa-lg fa-check-square "></i> プレビューする (JSも実行されます)</div>'
			tag += '</div>'
		var node = $(tag);
		if(_param) node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		
		function _toggle(_v){
			node.find("._in_preview_on").hide();
			node.find("._in_preview_off").hide();
			if(_v == ""){
				node.find("._in_preview_on").show();
			} else{
				node.find("._in_preview_off").show();
			}
			InspectView.setAttr_preview(_v);
		}
		node.find("._in_preview_on").click(function(){ _toggle("1")})
		node.find("._in_preview_off").click(function(){ _toggle("")})
		_toggle(_preview);
		return node;
	}
	function getJS(_param,_preview,_callback){
		var tag = "";
			tag += '<div>'
			tag += '	<div class="_input-with-btns _input-textarea">'
			tag += '		<textarea class="_textarea-scroll _in_data _color-html" placeholder="JavaScriptを入力"></textarea><br>'
			tag += '		<div class="_btns">'
			tag += 				'<span class="_btn_input _edit" data-type="textarea:js">'+Dic.I.Edit+' 編集</span> '
			tag += '		</div>'
			tag += '	</div>'
			tag += '</div>'
		var node = $(tag);
		if(_param) node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	function getMargin(_param){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>高さマージン</th><td><input class="_in_data"></td></tr>';
			tag += '<tr><td colspan="2">'
			tag += 'マイナスマージンも設定できます。<br>例：-100px';
			tag += '</td></tr>';
			tag += '</table>';
		var node = $(tag);
			node.find("input").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	function getNote(_param){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>ノート</th><td>'
			tag += '	<div class="_input-with-btns _input-textarea">'
			tag += '		<textarea class="_textarea-scroll _in_data" placeholder="テキストを入力"></textarea><br>'
			tag += '		<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-type="textarea:multi">'+Dic.I.Edit+' 編集</span> '
			tag += '		</div>'
			tag += '	</div>'
			tag += '</td></tr>';
			tag += '</table>';
		var node = $(tag);
			node.find("textarea").val(_param.data);
		assignMainInput(node,_param);
		return node;
	}
	function getPlace(_param,_extra){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>ノート</th><td>'
			tag += '	<div class="_input-with-btns _input-textarea">'
			tag += '		<textarea class="_textarea-scroll _in_data" placeholder="テキストを入力"></textarea><br>'
			tag += '		<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-type="textarea:multi">'+Dic.I.Edit+' 編集</span> '
			tag += '		</div>'
			tag += '	</div>'
			tag += '</td></tr>';
			tag += '<tr><th>サイズ</th><td>';
			tag += '幅: <input class="_in_data_extra _w50" data-type="width"><br>';
			tag += '高: <input class="_in_data_extra _w50" data-type="height">';
			tag += '</td></tr>';
			tag += '</table>';
		var node = $(tag);
			node.find("textarea").val(_param.data);
			node.find("._in_data_extra").eq(0).val(defaultVal(_extra.width,""));
			node.find("._in_data_extra").eq(1).val(defaultVal(_extra.height,""));
		assignMainInput(node,_param);
		assignExtraInput(node,_param);

		return node;
	}

	function getBtn(_param){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>リンク</th><td><div class="_btn_TextAnchor _cms_btn_alpha"></div></td></tr>';
			tag += '</table>';
		var node = $(tag);
	
		new InspectView.TextAnchorClass(
			node.find('._btn_TextAnchor'),
			defaultVal(_param.data,""),
			function (_val){
				_param.data = _val;
				updateCallback();
			}
		);
		
		return node;
	}
	
	function _setAnchorEvents(_node,_param){
		//リンク設定
		var btns = _node.find('._btn_anchor');
		btns.each(function (index, dom) {
			var tar = $(this);
			var type = tar.data("type");
			var _link = (type == "") ? _param.data : _param.data[type];
			new InspectView.AnchorClass(
				tar,
				defaultVal(_link.link,{}),
				function (_val){
					_link.link = _val;
					updateCallback();
				}
			);
		});
	}
	/* ---------- ---------- ---------- */
	
	
	function getDetail(_blockType,_currentDiv){
		var tag = "";
			tag += '<div>'
			tag += '<span class="_cms_btn _cms_btn_edit" '+TIP_ENTER+'>'
			tag += Dic.I.Grid+' データの編集</span>';
			tag += '</div>'
		var node = $(tag);
			node.find("._cms_btn_edit").click(function(){
				var id = _blockType.split(".")[1];
				var d = PageElement.object[id];
				if(d) _currentDiv.showInlineGridEditor(InspectView.getCurrentNo() ,d);
			});
		return node;
	}
	function getReload(_blockType,_currentDiv){
		var tag = "";
			tag += '<div>'
			tag += '<span class="_cms_btn _cms_btn_reload">'
			tag += '<i class="fa fa-refresh "></i> プレビュー更新</span>';
			tag += '</div>'
		var node = $(tag);
			node.find("._cms_btn_reload").click(function(){
				// updateCallback();
				InspectView.refreshBlock();
			});
		return node;
	}
	function getTree(_param){
		var tag = "";
			tag += '<div>'
			tag += '<span class="_cms_btn _cms_btn_edit" '+TIP_ENTER+'>'
			tag += Dic.I.Grid+' データの編集</span>';
			tag += '</div>'
		var node = $(tag);
			node.find("._cms_btn_edit").click(function(){
				var val = _param.data;
				var htmlAbs = CMS_Path.PAGE.ABS;
				var tree = CMS_Data.Sitemap.getData();
				TreeViewMakerView.stageIn(htmlAbs,tree,val,function(_s){
					_param.data = _s;
					setTimeout(function(){
						updateCallback();
					}, 200);
				});
			});
		return node;
	}
	
	/* ---------- ---------- ---------- */

	//画像リスト
	// function getImageMap(_param){
		
	// 	var tag = "";
	// 		tag += '<div>'
	// 		tag += '<span class="_cms_btn _cms_btn_edit" '+TIP_ENTER+'>'
	// 		tag += Dic.I.Grid+' データの編集</span>';
	// 		tag += '</div>'
	// 	var node = $(tag);
	// 		node.find("._cms_btn_edit").click(function(){
	// 			ImageMapView.stageIn(_param.data,function(_s){
	// 				_param.data = _s;
	// 				setTimeout(function(){
	// 					updateCallback();
	// 				}, 200);
	// 			});
	// 		});
			
	// 	return node;
	// }
	
	function getLayoutCol(){
		return $('<div class="ss_guide _inspect"></div>');
	}
	function getReplaceDiv(_param){
		var tag = "";
			tag += '<table class="_mainlayout">';
			tag += '<tr><th>Myタグ<br>ID</th><td><input class="_in_data_attr" data-type="replaceID"></td></tr>';
			tag += '<tr><th>説明</th><td><input class="_in_data_attr" data-type="replaceTitle"></td></tr>';
			tag += '</table>';
		if(_param.attr["replaceID"] ==undefined)_param.attr.replaceID = "";
		if(_param.attr["replaceTitle"] ==undefined)_param.attr.replaceTitle = "";
		var node = $(tag);
			node.find("._in_data_attr").eq(0).val(_param.attr.replaceID);
			node.find("._in_data_attr").eq(1).val(_param.attr.replaceTitle);
		assignAttrInput(node,_param);
		
		return node;
	}
	function getGuide(_type){
		var s = '<div style="height:5px;"></div>'
			s += CMS_GuideU.getGuideTag("block/"+_type,PageElement_Util.getTypeName(_type) + "について","dark");
		return $(s);
	}
	function getDesginGuide(){
		var s = '<div style="height:5px;"></div>'
			s += CMS_GuideU.getGuideTag("inspect/design","デザインタブについて","dark");
		return $(s);
	}
	/* ---------- ---------- ---------- */

	function getDesignTag(_val,_blockType,_extra){
		var tag = ""
			tag += '<div class="_body_css_class">';
			tag += 'class="値"<br>';
			tag += '<div class="_input-with-btns" style="margin:2px 0;">'
			tag += '	<input class="_design _color-style _bold" placeholder="クラス名を入力 (例：designA)">';
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit_single" data-type="input:class">'+Dic.I.Edit+'</span> '
			tag += '	</div>'
			tag += '</div>'
			tag += '</div>';
		var node = $(tag);
			node.find("input").val(_val)
			node.find("input").keyup(function(){
				InspectView.setAttr_css($(this).val());
			});
		InspectView.FormU_Preset.setNode( node,_blockType,_extra );
		return node;
	}
	function getStyleTag(_val){
		var tag = ""
			tag += '<div class="_body_css_style">';
			tag += 'style="値"<br>';
			tag += '<div class="_input-with-btns _input-textarea" style="margin:2px 0;">'
			tag += '	<textarea class="_style _color-style" placeholder="CSSを入力 (例：font-size:12px)"></textarea><br>'
			tag += '	<div class="_btns">'
			tag += '		<span class="_btn_input _edit" data-type="textarea:style">'+Dic.I.Edit+'</span> '
			tag += '	</div>'
			tag += '</div>'
			tag += '</div>'
		var node = $(tag);
		node.find("textarea").val(_val)
		node.find("textarea").keyup(function(){
			InspectView.setAttr_style($(this).val());
		});
		return node;
	}

	return {
		init	: init,
		
		getHeadlineTag		: getHeadlineTag,
		getCaptionTag		: getCaptionTag,
		getAnchor		: getAnchor,
		getTextarea		: getTextarea,
		getMarkdown		: getMarkdown,
		getCode			: getCode,
		getHtml			: getHtml,
		getJS			: getJS,
		getMargin		: getMargin,
		getNote			: getNote,
		getPlace		: getPlace,
		getBtn			: getBtn,
		
		getDetail		: getDetail,
		getReload		: getReload,
		getTree			: getTree,
		// getImageMap		: getImageMap,
		getLayoutCol	: getLayoutCol,
		getReplaceDiv	: getReplaceDiv,
		
		getGuide		: getGuide,
		getDesginGuide	: getDesginGuide,
		
		getDesignTag	: getDesignTag,
		getStyleTag		: getStyleTag
	}
})();
	
	

InspectView.FormU_Img = (function(){
	
	var updateCallback;
	function init(_updateCallback){
		updateCallback = InspectView.updateCallerView;
	}
	
	/* ---------- ---------- ---------- */

	function assignExtraInput(_node,_param){
		_node.find("._in_data_extra").keyup(function(){
			updateExtra( _param,$(this).val() ,$(this).data("type"));
		});
	}
	function updateExtra(_param,val,_tar){
		if(_param["extra"] ==undefined) _param.extra = {}
		_param.extra[_tar] = val;
		updateCallback();
	}
	
	/* ---------- ---------- ---------- */

	//画像ブロック
	function getIMG(_param,_extra){
		var tag = "";
			tag += '<div class="_mode_switch">';
			//
			tag += '	<div class="_cms_btn_alpha _btn_mode _btn_mode_simple">'
			tag += '		<i class="fa fa-lg fa-circle-o"></i><i class="fa fa-lg fa-dot-circle-o "></i>';
			tag += '		シンプルモード';
			tag += '		<span class="ss_inspect3 _img_simple"></span>'
			tag += '	</div>';
			tag += '	<div class="_mode_switch_body _body_img_simple">';
			tag += '		<table class="_mainlayout">';
			tag += '		<tr><td>';
			tag += '			<span class="_in_data_img_t">' + _param.data.img + '</span>'
			tag += '			<table style="width:auto">';
			tag += '			<tr><td>';
			tag += '			<div class="_cms_btn_alphaS _in_data_img _cms_bg_trans">'
			
			tag += CMS_ImgBlockU.getImageTag({
				path	: _param.data.img,
				isPub	: false,
				width	: "100%",
				ratio	: "",
				alt		: "",
				attr	: ""
			});
			tag += '			</div>'
			tag += '			</td><td>';
			tag += '				<span class="_cms_btn_alpha _in_data_img_list ss_img_select img_select_img"></span>'
			tag += '				<span class="_cms_btn_alpha _in_data_img_mock ss_img_select img_select_dummy"></span>'
			tag += '			</td></tr></table>';
			tag += '			<div class="_cms_btn_alpha _btn_image_tag_ng "><i class="fa fa-check-square "></i> IMGタグのみ出力</div>'
			tag += '			<div class="_cms_btn_alpha _btn_image_tag_ac "><i class="fa fa-square-o "></i>  IMGタグのみ出力</div>'
			tag += '		</td></tr>';
			tag += '		</table>';
			// tag += '		<div class="_wide_preset">';
			// tag += '			<span class="_btn_w">100%</span> <span class="_btn_w">400px</span><br>';
			// tag += '			<span class="_btn_w"> 50%</span> <span class="_btn_w">200px</span><br>';
			// tag += '			<span class="_btn_w"> 25%</span> <span class="_btn_w">100px</span><br>';
			// tag += '		</div>';
			tag += '	</div>'
			//
			tag += '	<div class="_mode_switch_body_hr"></div>';
			//
			tag += '	<div class="_cms_btn_alpha _btn_mode _btn_mode_layout">'
			tag += '		<i class="fa fa-lg fa-circle-o"></i><i class="fa fa-lg fa-dot-circle-o "></i>';
			tag += '		レイアウトモード';
			tag += '		<span class="ss_inspect3 _img_layout"></span>'
			tag += '	</div>';
			tag += '	<div class="_mode_switch_body _body_img_layout">';
			tag += '		<div>'
			tag += '			<span class="_cms_btn _cms_btn_edit" '+TIP_ENTER+'>'
			tag += '			<i class="fa fa-object-ungroup "></i> レイアウト編集</span>';
			tag += '		</div>'
			tag += '	</div>'
			//
			tag += '	<div class="_mode_switch_body_hr"></div>';
			tag += '	<table class="_mainlayout">';
			tag += '		<tr>';
			tag += '			<td>　幅：<span><input class="_in_data_extra _in_data_w _sub _w50" data-type="width" placeholder="100px" data-candidate="_cms_image_width"></span></td>';
			tag += '			<td>ALT：<span><input class="_in_data_extra _in_data_alt _sub _w50" data-type="alt" placeholder="代替テキストを入力"></span></td>';
			tag += '		</tr>';
			tag += '		<tr>';
			tag += '			<td>比率：<span><input class="_in_data_extra _in_data_h _sub _w50" data-type="height" placeholder="3:2" data-candidate="_cms_image_ratio"></span></td>';
			tag += '			<td>注釈：<span><input class="_in_data_extra _in_data_cap _sub _w50" data-type="caption" placeholder="キャプションを入力"></span></td>';
			tag += '		</tr>';
			tag += '	</table>';
			tag += '	<table class="_mainlayout">';
			tag += '		<tr>';
			tag += '			<td>';
			tag += '			<div class="_cms_btn_alpha _btn_image_check_ng " style="margin-bottom:5px"><i class="fa fa-check-square "></i> クリックで拡大</div>'
			tag += '			<div class="_cms_btn_alpha _btn_image_check_ac " style="margin-bottom:5px"><i class="fa fa-square-o "></i>  クリックで拡大</div>'
			tag += '			</td>';
			tag += '			<td><div class="_cms_btn_alpha _btn_anchor" data-type=""></div></td>';
			tag += '		</tr>';
			tag += '	</table>';
			tag += '</div>'
		var node = $(tag);
		assignEvent_simple(node,_param,_extra);
		assignEvent_layout(node,_param,_extra);
		assignExtraInput(node,_param);
		
		return node;
	}
	//シングルイメージ
	function assignEvent_simple(node,_param,_extra){
		 
		node.find("._body_img_simple ._in_data_img")			.click(function(){ clickImageThumb(); });
		node.find("._body_img_simple ._in_data_img_t")			.click(function(){ editImagePath($(this).html()); });
		node.find("._body_img_simple ._in_data_img_list")		.click(function(){ showImageList(); });
		node.find("._body_img_simple ._in_data_img_mock")		.click(function(){ showImageMock(); });
		// node.find("._body_img_simple ._wide_preset ._btn_w")	.click(function(){ setImageWide($(this).html()) });
		
		/* ---------- ---------- ---------- */
		//タグのみ出力
		var tag_ng = node.find('._btn_image_tag_ng');
		var tag_ac = node.find('._btn_image_tag_ac');
		function _updateOnlyBtn(_update){
			if(_param.data.onlyImgTag){
				tag_ng.show(); tag_ac.hide();
			} else{
				tag_ng.hide(); tag_ac.show();
			}
			if(_update) updateCallback();
		}
		tag_ng.click(function(){ _param.data.onlyImgTag = false;_updateOnlyBtn(true); });
		tag_ac.click(function(){ _param.data.onlyImgTag = true;_updateOnlyBtn(true) });
		_updateOnlyBtn();
		//

		/* ---------- ---------- ---------- */
		
		node.find("._in_data_alt")	.val(defaultVal(_extra["alt"],""));
		node.find("._in_data_cap")	.val(defaultVal(_extra["caption"],""));
		node.find("._in_data_w")	.val(defaultVal(_extra["width"],""));
		node.find("._in_data_h")	.val(defaultVal(_extra["height"],""));
		
		function updateImageView(_s){
			_param.data.img = _s;
			setTimeout(function(){
				setImage(_s);
				updateCallback();
			}, 200);
		}
		function setImage(_s){
			node.find("._body_img_simple ._in_data_img").html(CMS_Path.MEDIA.getPreviewImageTag(_s));
			node.find("._body_img_simple ._in_data_img_t").html(_s);
		}
		function clickImageThumb(){
			showImageList();
		}
		function showImageList(){
			var s = _param.data.img;
			if(DummyImageService.isMock(_param.data.img) ) s = CMS_Path.UPLOAD.ABS;
			//パスを相対パスに変換して、コールする
			CMS_MainController.openAssetSelectRel("image", s ,function(_s){
				updateImageView(_s);
			});
		}
		function showImageMock(){
			var s = _param.data.img;
			if(DummyImageService.isMock(_param.data.img) == false) s = "";
			DummyImageView.stageIn(s,function(_s){ updateImageView(_s); });
		}
		function editImagePath(_val){
			var _s = prompt("画像URLを入力してください", _val);
	 		if(_s != null){ if(_val != _s){ updateImageView(_s); }}
		}
		
		
		/* ---------- ---------- ---------- */
		//リンクボタン
		var zoom_ng = node.find('._btn_image_check_ng');
		var zoom_ac = node.find('._btn_image_check_ac');
		var libtn = node.find('._btn_anchor');
		function _updateBtn(_update){
			if(_param.data.isZoom){
				zoom_ng.show(); zoom_ac.hide(); libtn.hide();
			} else{
				zoom_ng.hide(); zoom_ac.show(); libtn.show();
			}
			if(_update) updateCallback();
		}
		zoom_ng.click(function(){ _param.data.isZoom = false;_updateBtn(true); });
		zoom_ac.click(function(){ _param.data.isZoom = true;_updateBtn(true) });
		
		new InspectView.AnchorClass(
			node.find('._btn_anchor'),
			defaultVal(_param.data.link,{}),
			function (_val){
				_param.data.link = _val;
				updateCallback();
			}
		);
		_updateBtn();
	}
	
	//レイアウトモード
	function assignEvent_layout(node,_param,_extra){
		
		node.find("._cms_btn_edit").click(function(){
			if(_param.data["layout"] == undefined) _param.data.layout = {}
			ImageMapView.stageIn(_param.data.layout,function(_s){
				_param.data.layout = _s;
				_param.data.isLayoutMode = true;
				setTimeout(function(){
					updateCallback();
				}, 200);
			});
		});
		//モード切り替え
		var btn_off = node.find('._btn_mode_simple');
		var btn_on = node.find('._btn_mode_layout');
		var body_01 = node.find('._body_img_simple');
		var body_02 = node.find('._body_img_layout');
		
		function _updateBtn(_update){
			if(_param.data.isLayoutMode){
				btn_off.removeClass("_current");
				btn_on.addClass("_current");
				if(_update) {
					body_01.slideUp();body_02.slideDown();
				} else{
					body_01.hide();body_02.show();
				}
			} else{
				btn_off.addClass("_current");
				btn_on.removeClass("_current");
				if(_update) {
					body_01.slideDown();body_02.slideUp();
				} else{
					body_01.show();body_02.hide();
				}
			}
			if(_update) {
				updateCallback();
			}
		}
		btn_off.click(function(){ _param.data.isLayoutMode = false;_updateBtn(true); });
		btn_on.click(function(){ _param.data.isLayoutMode = true;_updateBtn(true) });
		
		_updateBtn();
		
		return node;
	}

	/* ---------- ---------- ---------- */

	//コンテナブロック用背景画像設定
	function getBGIMG(_param,_extra){
		if(!_param.extra) _param.extra = {}
		if(!_param.extra.bg) _param.extra.bg = {};
		if(!_param.extra.bg.img) _param.extra.bg.img = "";
		if(!_param.extra.bg.color) _param.extra.bg.color = "";
		if(!_param.extra.bg.use) _param.extra.bg.use = false;
		var param = _param.extra.bg;
		
		var tag = ""
			tag += '<div style="margin:20px 0;">';
			tag += '	<div>';
			tag += '		<div class="_cms_btn_alpha _btn_image_on " style="margin-bottom:5px"><i class="fa fa-check-square "></i> 背景画像を設定する</div>'
			tag += '		<div class="_cms_btn_alpha _btn_image_off " style="margin-bottom:5px"><i class="fa fa-square-o "></i>  背景画像を設定する</div>'
			tag += '	</div>';
			tag += '	<div class="_setting_bg" style="margin:0 0 0 10px;">';
			tag += '		<table class="_mainlayout ">';
			tag += '		<tr><td>';
			tag += '			<span class="_in_data_img_t">' + param.img + '</span>'
			tag += '			<table style="width:auto">';
			tag += '			<tr><td>';
			tag += '			<div class="_cms_btn_alphaS _in_data_img">'
			if(param.img){
				tag += CMS_ImgBlockU.getImageTag({
					path	: param.img,
					isPub	: false,
					width	: "100%",
					ratio	: "",
					alt		: "",
					attr	: ""
				});
			}
			tag += '			</div>'
			tag += '			</td><td>';
			tag += '				<span class="_cms_btn_alpha _in_data_img_list ss_img_select img_select_img"></span>'
			// tag += '				<span class="_cms_btn_alpha _in_data_img_mock ss_img_select img_select_dummy"></span>'
			tag += '			</td></tr></table>';
			tag += '		</td></tr>';
			tag += '		</table>';
			tag += '	<p>※ デザインタブのstyle設定で直接CSSで指定するのと同じです。</p>';
			tag += '	</div>';
			tag += '</div>';
		var node = $(tag);
		
		node.find("._in_data_img")			.click(function(){ clickImageThumb(); });
		node.find("._in_data_img_t")			.click(function(){ editImagePath($(this).html()); });
		node.find("._in_data_img_list")		.click(function(){ showImageList(); });
		// node.find("._in_data_img_mock")		.click(function(){ showImageMock(); });

		function updateImageView(_s){
			param.img = _s;
			setTimeout(function(){
				setImage(_s);
				updateCallback();
			}, 200);
		}
		function setImage(_s){
			if(_s){
				node.find("._in_data_img").html(CMS_Path.MEDIA.getPreviewImageTag(_s));
				node.find("._in_data_img_t").html(_s);
			} else{
				node.find("._in_data_img").html("--");
				node.find("._in_data_img_t").html("--");
			}
		}
		function clickImageThumb(){
			showImageList();
		}
		function showImageList(){
			var s = param.img;
			if(DummyImageService.isMock(param.img) ) s = CMS_Path.UPLOAD.ABS;
			//パスを相対パスに変換して、コールする
			CMS_MainController.openAssetSelectRel("image", s ,function(_s){
				updateImageView(_s);
			});
		}
		// function showImageMock(){
		// 	var s = param.img;
		// 	if(DummyImageService.isMock(_param.data.img) == false) s = "";
		// 	DummyImageView.stageIn(s,function(_s){ updateImageView(_s); });
		// }
		function editImagePath(_val){
			var _s = prompt("画像URLを入力してください", _val);
	 		if(_s != null){ if(_val != _s){ updateImageView(_s); }}
		}
		
		var on_ = node.find('._btn_image_on');
		var off_ = node.find('._btn_image_off');
		var bgs = node.find("._setting_bg");
		
		function _updateBtn(_update){
			if(_param.extra.bg.use){
				on_.show(); off_.hide();bgs.show();
			} else{
				on_.hide(); off_.show();bgs.hide();
			}
			if(_update) updateCallback();
		}
		on_.click(function(){ _param.extra.bg.use = false;_updateBtn(true); });
		off_.click(function(){ _param.extra.bg.use = true;_updateBtn(true) });
		_updateBtn();
		
		return node;
	}

	/* ---------- ---------- ---------- */

	//画像リスト
	function getImages(_param,_extra){
		var tag = "";
			tag += '<div>';
			tag += '	<table class="_mainlayout">';
			tag += '		<tr><td>　幅：<input class="_in_data_extra _in_data_w _sub _w60" data-type="width" placeholder="100px" data-candidate="_cms_image_width"></td></tr>';
			// tag += '		<tr><td>比率：<input class="_in_data_extra _in_data_h _sub _w60" data-type="height" placeholder="3:2" data-candidate="_cms_image_ratio"></td></tr>';
			tag += '	</table>';
			tag += '	<table class="_mainlayout">';
			tag += '		<tr><td>マージン<br>(上右下左)</td><td><input class="_in_data_extra _in_data_mg _sub _w100" data-type="margin" placeholder="0 10px 10px 0" data-candidate="_cms_images_margin"></td></tr>';
			tag += '	</table>';
			tag += '	<div class="_row">';
			tag += '		<div class="_in_check_extra">';
			tag += '			<div class="_off"><i class="fa fa-lg fa-check-square "></i> 横に並べる</div>';
			tag += '			<div class="_on" style="display:none;"><i class="fa fa-lg fa-square-o "></i> 横に並べる</div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '</div>';
			
		var node = $(tag);
			node.find("._in_data_w").val(defaultVal(_extra["width"],""));
			// node.find("._in_data_h").val(defaultVal(_extra["height"],""));
			node.find("._in_data_mg").val(defaultVal(_extra["margin"],""));
		//
		function toggle(_s,_update){
			if(_s == "1"){
				_on.hide();
				_off.show();
				if(_update)updateExtra(_param,"1","float");
			} else{
				_on.show();
				_off.hide();
				if(_update)updateExtra(_param,"","float");
			}
			updateCallback();
		}
		var _off = node.find("._in_check_extra ._off");
		var _on = node.find("._in_check_extra ._on");
			_off.click(function(){ toggle("",true) });
			_on.click(function(){ toggle("1",true) });
		toggle(defaultVal(_extra["float"],""),false);
		
		assignExtraInput(node,_param);
		
		return node;
	}

	return { 
		init:init,
		getIMG			: getIMG,
		getBGIMG		: getBGIMG,
		getImages		: getImages
	}
})();


InspectView.FormU_Heading = (function(){
	var view 
	var v = {} 
	
	var currentVal = ""
	function setNode(_view,_val){
		view = _view;
		currentVal = _val;
		v.select = $(createSelectText(listHeading,_val));
		view.find("._selectArea").append(v.select);
		
		view.find("._btn_heading").click(function(){
			var tar = view.find("input._in_data_H_Type");
			var s = $(this).data("id");
				tar.val(s).keyup();
			var s2 = $(this).text();
				view.find("._selectBox ._name span").html(s2)
			updateView(s);
		});
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	function updateView(_s){
		currentVal = _s;
	
		var views = view.find("._btn_heading");
			views.removeClass("_active");
			views.each(function (index, dom) {
				var id = $(this).data("id");
				if(currentVal == id) $(this).addClass("_active");
			});
	}
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var listHeading = [
		["h1" ,"<span>タイトル＜H1＞</span>","1"],
		["h2" ,"<span>大見出し＜H2＞</span>","0"],
		["h3" ,"<span>中見出し＜H3＞</span>","0"],
		["h4" ,"<span>小見出し＜H4＞</span>","0"],
		["h5" ,"<span style='font-size:10px;margin-top:10px'>小見出し2＜H5＞</span>","0"],
		["h6" ,"<span style='font-size:10px;'>小見出し3＜H6＞</span>","0"]
	];

	function createSelectText (_vars,_current){
		if(!_current)return "";
		var a = _current.split(" ");
		var tag = '<div class="_selectBox">'
			tag += '<div class="_name"><span>{NAME}</span> <i class="fa fa-sort " style="color:yellow"></i></div>'
			tag += '<div class="_list">'
		for (var i = 0; i < _vars.length ; i++) {
			var seld = "";
			for (var ii = 0; ii < a.length ; ii++) {
				if(_vars[i][0] == a[ii]) {
					seld = "_active"
				}
			}
			tag += '<div class="_btn_heading _btn_' + _vars[i][0] + " "+ seld  +'" data-id="'+_vars[i][0]+'" >'+_vars[i][1]+'</div>';
		}
			tag += "</div>";
			tag += "</div>";
			
		var seld = "";
		for (var i = 0; i < _vars.length ; i++) {
			if(_vars[i][0] == _current) {
				seld = _vars[i][1];
			}
		}
			tag = tag.split("{NAME}").join(seld);
		return tag;
	}
	
	return { 
		setNode:setNode
	}
})();

//CSSデザインプリセット 
InspectView.FormU_Preset	 = (function(){

	function init(){
		//CSSファイルを更新したら、更新
		CMS_Data.InspectCSS.registUpdateCallback(function(){
			setNode_core();
		})
	}
	
	/* ---------- ---------- ---------- */
	var view
	var v = {}
	var extra;
	var blockType;
	
	//ノードをセットし、プリセット関係のHTMLを返す
	function setNode(_view,_blockType,_extra){
		view = _view;
		extra = _extra;
		blockType = _blockType;
		prevVal = ""
		if(CMS_Data.InspectCSS.hasData() == false){
			hasNoData();
			return;
		}
		
		v.input = _view.find("input");
		v.input.keyup(function(){ keyup()})
		v.wapper = $('<div class="_presetArea"></div>');
		view.append(v.wapper)
		setNode_core();
	}
	
	function hasNoData(){
		var tag = ""
			tag += '<div class="_presetError">CSSプリセットファイルが見つからないか、未設定です。<br>';
			tag += ASSET_CSS_DIRS[0];
			tag += '</div>';
		view.append(tag);
	}
	
	function setNode_core(){
		v.wapper.empty();
		
		initPreset(blockType,extra);
		v.presets = $(getTag());
		v.items = v.presets.find("._item");
		v.subWapper = v.presets.find("._presetSubWapper");
		
		v.wapper.append(v.presets);
		assignEvent();
		updateSelect();
	}
	
	/* ---------- ---------- ---------- */
	
	function assignEvent(){
		//プリセットクリック
		v.presets.find("._btn_add").click(function(){
			openDesignLibPage();
		});
		v.presets.find("._btn_item").click(function(){
			selectItem($(this));
		});
		//編集クリック
		v.presets.find("._btn_edit").click(function(){
			var id = $(this).parent().data("node");
			CMS_MainController.openPresetCSSFile(id);
		});
		v.presets.find("._btn_preset").click(function(){
			CMS_MainController.openPresetCSSFile("");
		});
		
		v.preset_tabs = v.presets.find("._preset_tab");
		v.preset_tabs.click(function(){
			openTab($(this).data("no"))
		})
		v.preset_tab_bodys = v.presets.find("._preset_tab_body");
		openTab(currentTab);
	}
	
	var currentTab = 0
	function openTab(_no){
		currentTab = _no;
		v.preset_tabs.removeClass("_current").eq(currentTab).addClass("_current");
		v.preset_tab_bodys.hide().eq(currentTab).show();
		// v.preset_tab_bodys.show();
		InspectView.updateBodyH();
	}
	
	function openDesignLibPage(){
		var s = "?class=" + currentType + "._new_";
		window.open(CSS_DESIGN_URL + s ,"cms_asset");
	}
	
	/* ---------- ---------- ---------- */
	
	var tID;
	function keyup(){ 
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			updateSelect();
		},200);
	}
	
	function getVal(){ 
		var s = ""
		if(v.input) s = v.input.val();
		return s;
	}
	function setVal(_s){
		if(!_s)_s = ""
		if(v.input) {
			v.input.val(_s).keyup();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var currentPresetList = [];
	var presetsTagList = [];
	var presetsCommonList = [];
	var currentType = "";
	function initPreset(_blockType,_extra){
		var model = PageElement_Util.getElementInfo(_blockType);
		try{
			currentType = model.pageInfo.cssDef.selector;
		}catch( e ){
			currentType = "";
			return;
		}
		//見出しの場合は、特別に処理
		if(_blockType == "tag.heading"){
			currentType = currentType.split("{h1-h6}").join(_extra);
		}
		presetsTagList 		= CMS_Data.InspectCSS.getList(currentType);
		presetsCommonList 	= CMS_Data.InspectCSS.getList("","common");
		
		//がっちゃんこ
		currentPresetList = [];
		_toFlat(currentPresetList , presetsTagList);
		_toFlat(currentPresetList , presetsCommonList);
	}
	
	function _toFlat (_list,_defs){
		for (var i = 0; i <  _defs.length ; i++) {
			if(_defs[i].subs.length > 0){
				for (var ii = 0; ii < _defs[i].subs.length ; ii++) {
					_list.push(_defs[i].subs[ii]);
				}
			} else{
				_list.push(_defs[i]);
			}
		}
	}
	
	/* ---------- ---------- ---------- */

	var itemCount = 0;
	function getTag(){
		itemCount = 0;
		var tag = "";
			tag += '<div class="_presetTitle">CSSプリセット <span class="_btn_preset"><i class="fa fa-pencil"></i> 編集</span></div>'
			tag += '<div class="_preset_tabs">'
			tag += '	<div class="_preset_tab" data-no="0">ブロックごと</div>'
			tag += '	<div class="_preset_tab" data-no="1">汎用クラス</div>'
			tag += '</div>'
			tag += '<div class="_presetItems">';
			tag += '	<div class="_preset_tab_body">' 
			tag += '		<div style="min-height:50px;">' 
			tag += 			getTag_core(presetsTagList);
			tag += '		</div>';
			if(presetsTagList.length == 0){
			tag += '		<div>このブロックに対応するプリセットはありません。</div>';
			}
			tag += '		<div class="_btn_add">デザインライブラリへ <i class="fa fa-external-link-square "></i></div>';
			tag += '	</div>';
			tag += '	<div class="_preset_tab_body">';
			tag += 			getTag_core(presetsCommonList) 
			tag += 			'<div style="line-height:1.4;margin:5px 0 0 0;">※ 汎用クラスでは、先頭に<span style="color:#ff0">sp-</span>とつけると、スマホ向け指定できます。</div>'
			tag += '	</div>';
			tag += '</div>'
			
		return tag;
	}
	
	function getTag_core(pres){
		var tag = "";
		for (var i = 0; i < pres.length ; i++) {
			var hasSub = false;
			if(pres[i].subs){
				if(pres[i].subs.length > 0) hasSub = true;
			}	
			if(hasSub){
				tag += '<div class="_presetSubWapper">';
				tag += '	<div class="_presetSubTitle"><i class="fa fa-bars "></i> '+pres[i].label+' <i class="fa fa-angle-right "></i></div>';
				tag += '	<div class="_presetSubs">'
				for (var ii = 0; ii < pres[i].subs.length ; ii++) {
					tag += getTagItem(pres[i].subs[ii]);
				}
				tag += '	</div>';
				tag += '</div>';
			} else{
				tag += getTagItem(pres[i]);
			}
		}
		return tag;
	}
	//個別プリセット
	function getTagItem(_o){
		var temp = "";
		if(_o.class == "---") {
			temp += '<div class="_item _hr"></div>'
		} else{
			temp += '<div class="_item" data-node="{NODE}" data-id="{CLASS}">';
			temp += '	<span class="_btn_item">{ICON_ON}{ICON_OFF} {NAME} <span class="_cssName">{CLASS}</span></span>';
			temp += '	<span class="_btn_edit"><i class="fa fa-pencil"></i> 編集</span>';
			temp += '</div>';
			temp = temp.split("{NO}").join(itemCount);
			temp = temp.split("{ICON_ON}").join('<i class="fa fa-check-square _checked"></i>');
			temp = temp.split("{ICON_OFF}").join('<i class="fa fa-square-o _not_checked"></i>');
			temp = temp.split("{NAME}").join(_o.label);
			temp = temp.split("{NODE}").join(_o.selector);
			temp = temp.split("{CLASS}").join(_o.class);
			itemCount++;
		}
		return temp;
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	
	//選択時
	function selectItem(_node){
		var _val =  _node.parent().data("id")
		var isSelected = _node.parent().hasClass("_current");
		var a = _treat( getVal() ).split(" ");
		
		if(! isSelected){
			//追加
			a.push(_val);
		} else{
			//削除
			var pres = currentPresetList;
			var _a = [];
			for (var i = 0; i < a.length ; i++) {
				var has = true;
				for (var ii = 0; ii < pres.length ; ii++) {
					if(a[i] == pres[ii].class){
						if(_val == a[i]){
							has = false;
						}
					}
				}
				if(has)_a.push(a[i]);
			}
			a = _a;
		}
		setVal(a.join(" "));
		updateSelect();
	}
	
	//_currentアップデート
	var CURRENT = "_current"
	var prevVal = "";
	function updateSelect(){
		if(prevVal == getVal()) return;
		prevVal = getVal();
		var a = _treat(prevVal).split(" ");
		var pres = currentPresetList;
		
		var _currents = [];
		for (var n = 0; n < a.length ; n++) {
			var name = a[n];
			for (var i = 0; i < pres.length ; i++) {
				if(name == pres[i].class){
					_currents.push(i);
				}
			}
		}
		v.items.removeClass(CURRENT);
		for (var i = 0; i < _currents.length ; i++) {
			var n = _currents[i];
			v.items.eq(n).addClass(CURRENT);
		}
		
		v.subWapper.removeClass(CURRENT);
		v.subWapper.each(function (index, dom) {
			if($(this).find("." + CURRENT).size() > 0){
				$(this).addClass(CURRENT);
			}
		});
	}
	
	
	/* ---------- ---------- ---------- */

	function _treat(_s){
		if(_s == undefined) return ""
			_s = _s.split("  ").join(" ");
			_s = _s.split("  ").join(" ");
			_s = _s.split("  ").join(" ");
		return _s;
	}
	
	return { 
		init:init,
		setNode:setNode
	}
})();


var AddElements 		 = (function(){
	var view;
	var v = {}
	function init(){
		view = $('#AddElements');
		var tag = "";
			tag += '<div id="AddElementsArrow">';
			tag += '	<span class="_icon"><i class="fa fa-plus "></i>';
			tag += '	<span class="_text">ブロック追加</span>';
			tag += '</div>';
			tag += '<div id="AddElementsArrowClose">';
			tag += '	<span class="_icon"><i class="fa fa-minus "></i></span>';
			tag += '</div>';
			tag += '<div id="AddElementsView"></div>';
			tag += '<div id="AddElementsBtnSet"></div>';
		view.html(tag);
		
		v.arrow = $('#AddElementsArrow');
		v.arrowClose = $('#AddElementsArrowClose');
		 v.arrow.click(function() { show(); });
		 v.arrowClose.click(function() { hide(); });

		update();
		
		AddElementsView 	.init();
		AddElementsBtnSet 	.init();
		stageInit();
	}
	
	var prevY = -1;
	function update(){
	}
	var isShow = false;
	function show(){
		$("body").addClass("_showAddPanel");
	}
	var tID;
	function hide(){
		$("body").removeClass("_showAddPanel");
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	function setVisible(_b){
		if(_b){
			stageIn()
		} else{
			stageOut();
		}
		
	}
	return {
		init: init,
		stageIn:stageIn,
		stageOut:stageOut,
		update: update,
		setVisible:setVisible
	}
})();


	
AddElementsView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#AddElementsView');
		var tag = "";
			tag += '<div class="_mouseArea"></div>';
			tag += '<div class="_core ss_add_bg"></div>';
			tag += '<div class="_text_block_add ">';
			tag += '	<div class="_btn"><div class="_cms_btn_alphaS ss_add_misk _00"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+1")+'><div class="_cms_btn_alphaS ss_add_misk _h1 _btn_add_h1"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+2")+'><div class="_cms_btn_alphaS ss_add_misk _h2 _btn_add_h2"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+3")+'><div class="_cms_btn_alphaS ss_add_misk _h3 _btn_add_h3"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+4")+'><div class="_cms_btn_alphaS ss_add_misk _h4 _btn_add_h4"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+5")+'><div class="_cms_btn_alphaS ss_add_misk _p _btn_add_p"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+6")+'><div class="_cms_btn_alphaS ss_add_misk _free _btn_add_markdown"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+7")+'><div class="_cms_btn_alphaS ss_add_misk _img _btn_add_img"></div></div>';
			tag += '	<div class="_btn" '+TIP("#+8")+'><div class="_cms_btn_alphaS ss_add_misk _margin _btn_add_margin"></div></div>';
			tag += '</div>';
			tag += '<div class="_help-icon _btn_guide_base"><i class="fa fa-question "></i></div>';
		view.html(tag)
		
		v.core = view.find('._core');
		v.baseBlock = view.find('._00');
		
		// view.find('._btn_guide_base').click(function(){CMS_GuideView.stageIn("block/base"); });
		view.find('._btn_guide_base').click(function(){
			CMS_GuideU.openGuide("block/base");
		});
		
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		var tag = ""
 			tag += '<div class="_btn_add_div ss_add _btn_l_01" ></div>';
 			tag += '<div class="_btn_add_cols2 ss_add _btn_l_02" ></div>';
 			tag += '<div class="_btn_add_cols3 ss_add _btn_l_03" ></div>';
 			tag += '<div class="_btn_add_cols4 ss_add _btn_l_04" ></div>';
 			tag += '<div class="_btn_add_margin ss_add _btn_margin" ></div>';
 			tag += '<div class="_btn_add_a ss_add _btn_o_a" ></div>';
 			tag += '<div class="_btn_add_note ss_add _btn_note" ></div>';
 			tag += '<div class="_btn_add_place ss_add _btn_place" ></div>';
 			tag += '<div class="_btn_add_h1 ss_add _btn_h_01" ></div>';
 			tag += '<div class="_btn_add_h2 ss_add _btn_h_02" ></div>';
 			tag += '<div class="_btn_add_h3 ss_add _btn_h_03" ></div>';
 			tag += '<div class="_btn_add_h4 ss_add _btn_h_04" ></div>';
 			tag += '<div class="_btn_add_markdown ss_add _btn_o_md" ></div>';
 			tag += '<div class="_btn_add_p ss_add _btn_t_01" ></div>';
 			tag += '<div class="_btn_add_list ss_add _btn_t_list" ></div>';
 			tag += '<div class="_btn_add_img ss_add _btn_o_01" ></div>';
 			tag += '<div class="_btn_add_imgs ss_add _btn_o_images " ></div>';
 			tag += '<div class="_btn_add_btn ss_add _btn_t_btn" ></div>';
 			tag += '<div class="_btn_add_btnList ss_add _btn_t_btnlist" ></div>';
 			tag += '<div class="_btn_add_table2 ss_add _btn_o_fulltable" ></div>';
 			tag += '<div class="_btn_add_html ss_add _btn_o_html" ></div>';
 			tag += '<div class="_btn_add_blq ss_add _btn_t_blq" ></div>';
 			tag += '<div class="_btn_add_code ss_add _btn_t_code" ></div>';

		var ade = AddElementsManager.addElement;
		v.core.html(tag);
		view.find('._btn_add_div')		.click(function(){ade("layout.div","")});
		view.find('._btn_add_cols2')	.click(function(){ade("layout.cols","2")});
		view.find('._btn_add_cols3')	.click(function(){ade("layout.cols","3")});
		view.find('._btn_add_cols4')	.click(function(){ade("layout.cols","4")});
		view.find('._btn_add_cols5')	.click(function(){ade("layout.cols","5")});
		view.find('._btn_add_margin')	.click(function(){ade("tag.margin","")});
		view.find('._btn_add_note')		.click(function(){ade("tag.note","")});
		view.find('._btn_add_place')	.click(function(){ade("tag.place","")});
		
		view.find('._btn_add_h1')		.click(function(){ade("tag.heading","h1")});
		view.find('._btn_add_h2')		.click(function(){ade("tag.heading","h2")});
		view.find('._btn_add_h3')		.click(function(){ade("tag.heading","h3")});
		view.find('._btn_add_h4')		.click(function(){ade("tag.heading","h4")});
		
		view.find('._btn_add_p')		.click(function(){ade("tag.p","")});
		view.find('._btn_add_list')		.click(function(){ade("object.list","")});
		view.find('._btn_add_btn')		.click(function(){ade("tag.btn","")});
		view.find('._btn_add_btnList')	.click(function(){ade("object.btnList","")});
		view.find('._btn_add_a')		.click(function(){ade("tag.anchor","")});
		view.find('._btn_add_img')		.click(function(){ade("tag.img","")});
		view.find('._btn_add_imgs')		.click(function(){ade("object.images","")});
		view.find('._btn_add_table2')	.click(function(){ade("object.table","")});
		view.find('._btn_add_html')		.click(function(){ade("tag.html","")});
		view.find('._btn_add_markdown')	.click(function(){ade("tag.markdown","")});
		view.find('._btn_add_blq')		.click(function(){ade("tag.blockquote","")});
		view.find('._btn_add_code')		.click(function(){ade("tag.code","")});
		
		v.baseBlock.click( function (){click_()});
		view.hover( 
			function(){ hover() },
			function(){ hoverOut() }
		);
		window.addBlock = AddElementsManager.addElement;
	}
	
	function click_(){
		if(tID) clearTimeout(tID)
		view.addClass("hover")
		hideFloatView();
	}
	
	function hover(){
		if(tID) clearTimeout(tID)
	}
	var tID
	function hoverOut(){
		if(tID) clearTimeout(tID)
		tID = setTimeout(function(){
			view.removeClass("hover")
		},500);
	}
	
	/* ---------- ---------- ---------- */
	
	return {
		init: init
	}
})();

AddElementsBtnSet 		 = (function(){
	var view;
	var v = {};
	var _delay
	
	function init(){
		view = $('#AddElementsBtnSet');

		var tag = "";
			tag += '<div class="_btn"><div class="_cms_btn_alphaS ss_add_misk _01"></div><div class="_help-icon _btn_guide_01"><i class="fa fa-question "></i></div></div>';
			tag += '<div class="_btn"><div class="_cms_btn_alphaS ss_add_misk _02"></div><div class="_help-icon _btn_guide_02"><i class="fa fa-question "></i></div></div>';
			// tag += '<div class="_btn"><div class="_cms_btn_alphaS ss_add_misk _01"></div></div>';
			// tag += '<div class="_btn"><div class="_cms_btn_alphaS ss_add_misk _02"></div></div>';
		view.html(tag)
		
		// stageInit();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		
		v._01 = view.find('._01')
		v._02 = view.find('._02')
		
		v._01.click(function(){ openGadgetList() });
		v._02.click(function(){ openMyPreset() });
		
		view.find('._btn_guide_01').click(function(){CMS_GuideU.openGuide("block/gadget"); });
		view.find('._btn_guide_02').click(function(){CMS_GuideU.openGuide("block/preset"); });
	}
	
	function openGadgetList(){
		GadgetListView.stageIn(function(_type,_param){
			setTimeout(function(){
				if(_type == "_repeat"){
					AddElementsManager.addElement_by_object(_param);
				} else{
					AddElementsManager.addElement(_type,"");
				}
			},200);
		})
	}
	function openMyPreset(){
		PresetStageView.stageIn()
	}
	
	function addElement(_param){
		setTimeout(function(){
			AddElementsManager.addElement_by_object(_param);
		},200);
	}
	
	return {
		init: init
	}
})();
/**
 * エレメントの新規挿入時の位置の管理や、挿入を行う
 */

AddElementsManager = (function() {
	var currentTar;
	var currentNo;

	function setData(_tar, _no) {
		currentTar = _tar;
		currentNo = _no;
	}

	function addElement(_type, _param) {
		hideFloatView();
		var o = PageElement_Util.getInitData(_type, _param);
		currentTar.addDataAt(o, currentNo + 1);
		if (_type == "object.tabList") {
			currentTar.addDataAt(JSON.parse(PageElement_JText.tabListData01), currentNo + 2);
			currentTar.addDataAt(JSON.parse(PageElement_JText.tabListData02), currentNo + 2);
			currentTar.addDataAt(JSON.parse(PageElement_JText.tabListData03), currentNo + 2);
		}
		currentTar.update();
		currentTar.select(currentNo + 1);
	}
	
	function addElement_by_object(_param) {
		hideFloatView();
		currentTar.addDataAt(_param, currentNo + 1);
		currentTar.update();
		currentTar.select(currentNo + 1);
	}
	return {
		setData: setData,
		addElement: addElement,
		addElement_by_object: addElement_by_object
	}
})();


var Float_PreviewState = {
	isPreview:false
}


var Float_Preview = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Float_Preview');
		var tag = ""
			tag += '<div id="Float_PreviewFull"></div>'
			tag += '<div id="Float_PreviewMini"></div>'
			tag += '<div id="Float_PreviewTab"></div>'
		view.html(tag)
		
		Float_PreviewFull.init()
		Float_PreviewMini.init()
		Float_PreviewTab.init()
		
		S.isPreview = Storage.Memo.getListPreviewFull();
	}
		
	var S = Float_PreviewState
	
	/* ---------- ---------- ---------- */
	
	function updateSitemapDate(){
		Float_PreviewFull.updateSitemapDate()
		Float_PreviewMini.updateSitemapDate()
	}
	
	/* ---------- ---------- ---------- */
	
	function getGloupIDs(_di,_dir){
		var _s = CMS_Data.Sitemap.getGloupPath_by_id(_di,_dir)
		var tag = ""
		var gs = _s.split("/");
		for (var i = 0; i <  gs.length ; i++) {
			if(gs[i] != ""){
			tag += '<i class="fa fa-folder-open "></i> ' + gs[i] + " "
			}
		}
		if(tag != ""){
			return '<b>' + tag + '</b>';
		}
		return "なし"
	}
	function DoTemplate(_temp , _param){
		var urlRel = CMS_Path.PAGE.getRelPath(_param.id,_param.dir);
		var urlAbs = CMS_Path.PAGE.getAbsPath_deco(_param.id,_param.dir);
		var _sav = CMS_Data.Sitemap.getSaveDate(_param.id,_param.dir);
		var _pub = CMS_Data.Sitemap.getPublishDate(_param.id,_param.dir);
		var gl = Float_Preview.getGloupIDs(_param.id,_param.dir);
		if(gl == "") gl = "なし"
		_temp = _temp.split("{ID}")			.join(_param.id);
		_temp = _temp.split("{NAME}")		.join(String(_param.name).split("<br>").join(""));
		_temp = _temp.split("{G}")			.join(gl);
		_temp = _temp.split("{SAVE_DATE}")	.join(_pub + " " + CMS_SaveDateU.getRelatedDate(_sav));
		_temp = _temp.split("{PUB_DATE}")	.join(_pub + " " + CMS_SaveDateU.getRelatedDate(_pub));
		_temp = _temp.split("{URL}")		.join(urlRel);
		_temp = _temp.split("{URL_R}")		.join(urlRel + "?r=" + _param.prevPub + "&c=noChash");
		_temp = _temp.split("{URL_ABS}")	.join(urlAbs);
		return _temp;
	}
		
	/* ---------- ---------- ---------- */
	
	//プレビュ表示切替
	function switchPreview(_b){
		Storage.Memo.setListPreviewFull(_b);
		S.isPreview = _b;
		//
		Float_PreviewFull.stageOut_core()
		Float_PreviewMini.stageOut_core()
		stageIn(ps[0],ps[1],ps[2])
		
		
	}
		
	/* ---------- ---------- ---------- */
	
	function stageInit(){
	}
	var ps = []
	function stageIn(_type,_xy,_param){
		ps = [_type,_xy,_param]
		if(S.isPreview){
			Float_PreviewFull.stageIn(_type,_xy,_param);
		} else{
			Float_PreviewMini.stageIn(_type,_xy,_param);
		}
	}
	function stageOut(){
		if(S.isPreview){
			Float_PreviewFull.stageOut()
		} else{
			Float_PreviewMini.stageOut()
		}
	}
	function stageOut_core(){
		if(S.isPreview){
			Float_PreviewFull.stageOut_core()
		} else{
			Float_PreviewMini.stageOut_core()
		}
	}
	return {
		init: init,
			stageIn: stageIn,
			stageOut: stageOut,
			stageOut_core: stageOut_core,
			getGloupIDs: getGloupIDs,
			DoTemplate: DoTemplate,
			updateSitemapDate: updateSitemapDate,
			switchPreview: switchPreview
	}
})();

var Float_PreviewTab = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Float_PreviewTab');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = "";
			tag += '<div class="_inner"></div>';
			view.html(tag)
			v.inner = view.find('._inner');
	}
	
	function setBtn(){
		
		view.hover(function(){
			if(tID) clearTimeout(tID)
		} , function(){
			stageOut();
		})
	}
	
	/* ---------- ---------- ---------- */
	
	function update(_x,_param){
		updatePos(_x);
		var tag = ''
			tag += '<span class="_name">{NAME}</span> '
		if(_param.type == "page"){
			tag += '<span class="_filePath_blue">{URL_ABS}</span>'
		}
		var name = (_param.name) ? _param.name :_param.id;
		v.inner.html(name);
		var tempP = {
			name	:name,
			id		:_param.id,
			dir		:_param.dir,
			prevPub	:""
		}
		v.inner.html( Float_Preview.DoTemplate( tag , tempP ));
	}
	
	/* ---------- ---------- ---------- */
	var isHover = false
	function updatePos(_x){
		view.css("left", _x + "px");
		view.hover(
			function(){
				isHover = true;
			},
			function(){
				isHover = false;
				stageOut()
			}
		)
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_x,_param){
		view.show();
		update(_x,_param)
	}
	var tID
	function stageOut(){
			if(isHover)return;
			view.hide();
	}
	function stageOut_core(){
		if(tID) clearTimeout(tID)
		view.hide();
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		stageOut_core: stageOut_core
	}
})();

var Float_PreviewMini = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Float_PreviewMini');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = "";
			tag += '<div class="_arrow"></div>';
			tag += '<div class="_fuki">';
			tag += '	<div class="_inner"></div>';
			tag += '	<div class="_cms_btn_alpha _btn_preview_open"><i class="fa fa-caret-down "></i> プレビューを開く</div>';
			tag += '</div>';
			view.html(tag)
			
			v.arrow = view.find('._arrow');
			v.inner = view.find('._inner');
	}
	
	function setBtn(){
		
		view.hover(function(){
			if(tID) clearTimeout(tID)
		} , function(){
			stageOut();
		})
		
		v.btn_preview_open = view.find('._btn_preview_open');
		v.btn_preview_open.click(function(){ 
			Float_Preview.switchPreview(true);
		});

	}
	
	/* ---------- ---------- ---------- */
	
	function update(_type,_xy,_param){
		updatePos(_xy);
		
		var tag =  '';
		if(_type == Dic.ListType.DIR){
			// tag += '	<div class="_title">{NAME}</div>'
			tag += '	<div><span class="_m">グループID : </span><span class="_gID"><i class="fa fa-folder-open"></i>{ID}</span></div>'
			v.btn_preview_open.hide()
		}
		if(_type == Dic.ListType.PAGE){
			tag += '	<div class="_title">{NAME}</div>'
			tag += '	<div class="_filePath">{URL_ABS}</div>'
			// tag += '	<div class=""><span class="_m">所属グループID\'s : </span>{G}</div>'
			v.btn_preview_open.show()
		}
		
		var tempP = {
			name	:_param.name,
			id		:_param.id,
			dir		:_param.dir,
			prevPub	:""
		}
		v.inner.html( Float_Preview.DoTemplate( tag , tempP ));
			
	}
	
	/* ---------- ---------- ---------- */
	
	var prevY = -1;
	var currentY = -1;
	function updatePos(_xy){
		var tarY = _xy.y -25;
		view.css("top", tarY + "px");
	}
	
	/* ---------- ---------- ---------- */

	function updateSitemapDate(){ }
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_type,_xy,_param){
		// if(! isOpen){ isOpen = true;
			if(isFirst){}
			
			if(tID) clearTimeout(tID)
			tID = setTimeout(function(){
				view.show();
				isFirst = false;
				update(_type,_xy,_param)
			},50);
		// }
	}
	var tID
	function stageOut(){
		if(tID) clearTimeout(tID)
		tID = setTimeout(function(){
			view.hide();
			prevY = -1
		},300);
	}
	function stageOut_core(){
		if(tID) clearTimeout(tID)
		view.hide();
		prevY = -1
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		stageOut_core: stageOut_core,
		updateSitemapDate: updateSitemapDate
	}
})();


var Float_PreviewFull = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Float_PreviewFull');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = "";
			tag += '<div class="_arrow"></div>';
			tag += '<div class="_zoomArea"></div>';
			tag += '<div class="_inner"></div>';
			tag += '<div class="_cms_btn_alpha _btn_preview_close"><i class="fa fa-caret-up "></i> プレビューを閉じる</div>';
			view.html(tag)
			
			v.inner = view.find('._inner');
			v.arrow = view.find('._arrow');
			
			v.zoomArea = view.find('._zoomArea');
			Float_PreviewFullZoom.init(view,v.zoomArea);
	}
	
	function setBtn(){
		
		view.hover(function(){
			if(tID) clearTimeout(tID)
		} , function(){
			stageOut();
		})
		
		v.btn_preview_close = view.find('._btn_preview_close');
		v.btn_preview_close.click(function(){ 
			Float_Preview.switchPreview(false);
		});
		
	}
	
	/* ---------- ---------- ---------- */
	
	function update(_type,_xy,_param){
		updatePos(_xy);
		
		if(prevPage) prevPage.stageOut();
		var tar = hasPage(_type,_param);
		if(tar == null){
			tar = new Float_PreviewFrame(_type,v.inner,_param);
			pages.push(tar);
		}
		tar.stageIn();
		prevPage = tar;
		current = prevPage;
		
		if(_type == Dic.ListType.DIR)v.btn_preview_close.hide();
		if(_type == Dic.ListType.PAGE)v.btn_preview_close.show();
		
	}
	var current;
	function getCurrent(){
		return current;
	}

	var prevPage;
	var pages = [];
	
	function hasPage(_type,_param){
		var u = CMS_Path.PAGE.getRelPath(_param.id,_param.dir)
		for (var i = 0; i <  pages.length ; i++) {
			if(_type == Dic.ListType.PAGE){
				if(pages[i].type == _type){
					if(pages[i].url == u){
						return pages[i];
					}
				}
			}
			if(_type == Dic.ListType.DIR){
				if(pages[i].type == _type){
					if(pages[i].id == _param.id){
						return pages[i];
					}
				}
			}
		}
		return null;
	}
	
	/* ---------- ---------- ---------- */
	
	var prevY = -1;
	var currentY = -1;
	function updatePos(_xy){
		v.arrow.css("top", (_xy.y-35) + "px");
		/*
		var tarY = _xy.y
		var saH = CMS_StatusH - view.height() ;
		
		if(saH < tarY) tarY = saH;
		if(tarY < 100)  tarY = 100;
		if(prevY == -1){
			currentY = tarY - 50
			view.css("top",currentY+ "px");
		}
		var saY = tarY - currentY;
		v.arrow.css("top", _xy.y + "px");
		prevY = tarY
		*/
	}
	
	/* ---------- ---------- ---------- */

	function updateSitemapDate(){
		for (var i = 0; i <  pages.length ; i++) {
			pages[i].resetDate();
		}
	}
	/* ---------- ---------- ---------- */

	function getPages(){
		return pages;
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_type,_xy,_param){
		// if(! isOpen){ isOpen = true;
			if(isFirst){}
			
			if(tID) clearTimeout(tID)
			tID = setTimeout(function(){
				view.show();
				isFirst = false;
				update(_type,_xy,_param)
			},50);
		// }
	}
	var tID;
	function stageOut(){
		if(tID) clearTimeout(tID)
		tID = setTimeout(function(){
			view.hide();
			prevY = -1;
		},500);
	}
	function stageOut_core(){
		if(tID) clearTimeout(tID)
		view.hide();
		prevY = -1
	}
	return {
		init: init,
		getPages: getPages,
		getCurrent: getCurrent,
		stageIn: stageIn,
		stageOut: stageOut,
		stageOut_core: stageOut_core,
		updateSitemapDate: updateSitemapDate
	}
})();

var FloatPreviewState = {
	currentWs:["1000"],
	currentZoom:0.33
}

var Float_PreviewFullZoom = (function(){
	var parentView;
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(_parentView,_view){
		parentView = _parentView;
		view = _view;
		createlayout();
		setBtn();
		initStage();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = ""
			tag += '		<div class="_btnSet">幅 :';
			tag += '			<span class="_btn_ws _cms_btn_alpha">1000px</span>';
			tag += '		</div>';
			tag += '		<div class="_btnSet">拡大 :';
			tag += '			<span class="_cms_btn_alpha _btn_zoomOut"><i class="fa fa-lg fa-minus-circle "></i> ';
			tag += '			</span>';
			tag += '			<span class="_cms_btn_alpha _btn_zoom">33%</span>';
			tag += '			<span class="_cms_btn_alpha _btn_zoomIn"><i class="fa fa-lg fa-plus-circle "></i> ';
			tag += '			</span>';
			tag += '		</div>';
		view.html(tag);
	}
	
	function setBtn(){
		v.btn_ws = view.find('._btn_ws');
		v.btn_ws.click(function(){ 
			setW(prompt("プレビュー幅を指定してください(px)。カンマで区切ると複数のプレビューを作成できます。",currentWs.join(",")));
		});
		v._btn_zoom = view.find('._btn_zoom');
		v._btn_zoom.click(function(){ zoomInput() });	
		v._btn_zoomOut = view.find('._btn_zoomOut');
		v._btn_zoomIn = view.find('._btn_zoomIn');
		v._btn_zoomOut.click(function(){ zoomOut() });	
		v._btn_zoomIn.click(function(){ zoomIn() });	
	}
	
	/* ---------- ---------- ---------- */
	
	var currentWs
	
	function updateState(){
		Storage.Memo.setListPreviewState([ currentZoom , currentWs.join(",") ]);
		var pages = Float_PreviewFull.getPages();
		var current = Float_PreviewFull.getCurrent();
		updateStateView();
		for (var i = 0; i <  pages.length ; i++) {
			pages[i].reset();
		}
		if(current) current.updateWS_State();
	}
	function updateStateView(){
		FloatPreviewState.currentWs = currentWs;
		FloatPreviewState.currentZoom = currentZoom;
		
		v._btn_zoom.html(currentZoom+"%");
		v.btn_ws.html(currentWs.join(",")+"px");
		
		var ww = (function(_w,_z){ 
			var w = 0;
			for (var i = 0; i <  _w.length ; i++) {
				w += Number(_w[i]);
			}
			var ss = (w * (_z/100)) + 30;
			if(ss < 250)ss = 250;
			return ss;
		})(currentWs, currentZoom);
		parentView.width(ww);
		
		updateZoomState();
	}
	
	function initStage(){
		var state = Storage.Memo.getListPreviewState();
		currentZoom = parseInt(state[0]);
		if(currentZoom < minZoom)currentZoom = minZoom;
		if(currentZoom > maxZoom)currentZoom = maxZoom;
		currentWs = state[1].split(",");
		
		updateStateView();
	}
	function setW(_s){
		if(!_s) return;
		var a = _s.split(",")
		for (var i = 0; i < a.length ; i++) {
			if(isNaN(a[i]))return;
		}
		currentWs = _s.split(",");
		for (var i = 0; i < currentWs.length ; i++) {
			var s = currentWs[i]
			if(s < 320) s = 320;
			if(s > 2000)s = 2000;
			currentWs[i] = s
		}
		updateState();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentZoom = 50;
	var zooms = [10,20, 25, 33, 50 ];
	function zoomInput(){
		zoom(parseInt(prompt("ズーム値を指定してください(10〜50%)",currentZoom)));
	}
	var minZoom = 10;
	var maxZoom = 50;
	function zoomIn(){
		var s = maxZoom;
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom < zooms[i]){
				s = zooms[i];
				break;
			}
		}
		zoom(s);
	}
	function zoomOut(){
		var s = zooms[0];
		for (var i = 0; i < zooms.length ; i++) {
			if(currentZoom > zooms[i]){
				s = zooms[i];
			}
		}
		zoom(s);
	}
	function zoom(_s){
		if(!_s)return;
		if(isNaN(_s))return;
		if(currentZoom == _s)return;
		 if(_s >= maxZoom) { _s = maxZoom; }
		 if(_s <= zooms[0]) { _s = zooms[0]; }
		currentZoom = _s;
		updateState();
	}
	function updateZoomState(){
		v._btn_zoomIn.removeClass("_btn_disable");
		v._btn_zoomOut.removeClass("_btn_disable");
		if(currentZoom == maxZoom) {
			v._btn_zoomIn.addClass("_btn_disable");
		}
		if(currentZoom == zooms[0]) {
			v._btn_zoomOut.addClass("_btn_disable");
		}
	}

	return { init:init }
})();


var Float_PreviewFrame = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_type,_parent,_pageModel) {
	  this.init(_type,_parent,_pageModel);
	}
	var p = c.prototype;
	
	/* ---------- ---------- ---------- */

	p.init = function(_type,_parent,_pageModel) {
		this.type = _type;
		this.parentView = _parent;
		this.pageModel = _pageModel;
		this.id = this.pageModel.id
		this.dir = this.pageModel.dir
		
		this.view = $('<div></div>')
		this.parentView.append(this.view);
	}

	p.prevPub
	p.resetDate = function() {
		this.prevPub = DateUtil.getRandamCharas(10);
	}
	p.update = function() {
		if (this.type == Dic.ListType.DIR) this.update_dir()
		if (this.type == Dic.ListType.PAGE) this.update_page()
	}
	p.update_dir = function() {
		var tag =  '';
			tag += '	<div class="_title">{NAME}</div>'
			tag += '	<div><span class="_m">グループID : </span><span class="_gID"><i class="fa fa-folder-open"></i>{ID}</span></div>'
		
		var tempP = {
			name	:this.pageModel.name,
			id		:this.id,
			dir		:this.dir,
			prevPub	:""
		}
		this.view.html( Float_Preview.DoTemplate( tag , tempP ));
	}
	p.update_page = function() {
		if(this.prevPub == this.pageModel.publicDate ) return;
		this.prevPub = this.pageModel.publicDate;
		
		this.url = CMS_Path.PAGE.getRelPath(this.id,this.dir);//IDとして利用してるので必要
		
		var tag =  '';
			tag += '<div class="_infoArea">'
			tag += '	<div class="_title">{NAME}</div>'
			tag += '	<div class="_filePath_blue">{URL_ABS}</div>'
			tag += '	<div class=""><span class="_m">所属グループID\'s : </span>{G}</div>'
			// tag += '	<div class="_frame"><iframe width="1100" height="1000" src ="{URL_R}" ></iframe></div>'
			tag += '	<div class="_date _dark"><span class="_m"><i class="fa fa-clock-o"></i> 保存日時：</span>{SAVE_DATE}</div>'
			tag += '	<div class="_date _dark"><span class="_m"><i class="fa fa-clock-o"></i> 公開日時：</span>{PUB_DATE}</div>'
			tag += '</div>'
			tag += this._getIFrames();
		
		var tempP = { name :this.pageModel.name, id :this.id, dir :this.dir, prevPub :this.prevPub }
		this.view.html( Float_Preview.DoTemplate( tag , tempP ));
	}
	
	p._getIFrames = function() {
		var currentWs = FloatPreviewState.currentWs
		var s = FloatPreviewState.currentZoom /100;
		
		var ww = 0;
		for (var i = 0; i < currentWs.length ; i++) {
			ww += currentWs[i] * s;
		}
		var tag =  '';
			tag += '	<div class="_iframeArea" style="width:'+ww+'px">'
		for (var i = 0; i < currentWs.length ; i++) {
			var temp = '';
				temp += '<div class="_iframeDiv" style="width:{WW}px;" >';
				temp += '	<iframe src="{URL_R}" width="{W}" height="100%" style="{S}"></iframe>';
				temp += '</div>';
				// temp = temp.split("{U}").join(this.loadURL);
				temp = temp.split("{WW}").join(currentWs[i]*s);
				temp = temp.split("{W}").join(currentWs[i]);
				temp = temp.split("{S}").join(this._getZoomCSS(s));
			tag += temp;
		}
			tag += '	</div>'
		return tag;
	}
		
	p._getZoomCSS = function(s) {
		var ts = '';
			ts +="-webkit-transform: scale("+s+");"
			ts +="-moz-transform: scale("+s+");"
			ts +="-ms-transform: scale("+s+");"
			ts +="transform: scale("+s+");"
			ts += "width:"+(100/s)+"%;";
			ts += "height:"+(100/s)+"%;";
		return ts;
	}
	

	p.reset = function() {
		this.prevPub = null;
		this.view.html("")
	}
	
	p.updateWS_State = function() {
		this.update();
	}
	
	/**/
	p.openFlg = false;
	p.stageInit=function(){
		this.openFlg = false
		this.view.hide()
	}
	p.stageIn=function( ) {
		if (! this.openFlg) { this.openFlg = true;
			this.view.show();
			this.update();
		}
	}
	p.stageOut=function( )  {
		if (this.openFlg) { this.openFlg = false
		this.view.hide()
		}
	}
	return c;
})();


var SimpleToolTip = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#SimpleToolTip');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
	}
	
	function setBtn(){
	}
	
	
	/* ---------- ---------- ---------- */
	
	function update(_xy,_html){
		view.css("left",_xy.x)
		view.css("top",_xy.y)
		view.html(_html)
	}
	
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_xy,_html){
		// if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			update(_xy,_html);
		// }
	}
	function stageOut(){
		// if(isOpen){ isOpen = false;
			view.hide();
		view.html("")
		// }
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();
var Float_DateInputView 	 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Float_DateInputView');
		stageInit();
	}
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_btn_close"></div>';
			tag += '<div class="_body"><div class="_date"></div></div>'
		view.html(tag);
		v.body = view.find('._body');
		v.date = view.find('._date');
		//
		v._btn_close = view.find('._btn_close');
		setBtn();
	}
	function setBtn(){
		v._btn_close.click(function(){  stageOut() });
	}
	
	/* ---------- ---------- ---------- */
	
	var curretDate = ""
	function setValue(_s){
		curretDate = _s;
		v.date.datetimepicker({
			value:curretDate,
			format:'Y/m/d H:i',
			inline:true,
			lang:'ja',
			onChangeDateTime: function( dp,$input ){
				updateValue(dp,$input)
  			}
		});
	}
	
	function updateValue(dp,$input){
	    curretDate = $input.val();
		callback(curretDate);
	    stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_s,_callback,_xy){
		if(view === undefined) return;
		callback = _callback;
		if(isFirst){
			createlayout();
			isFirst = false;
		}
		view.show();
		if(CMS_StatusW-300 < _xy[0]){_xy[0] = CMS_StatusW-300}
		view.css("left",_xy[0]);
		view.css("top",_xy[1]);
		setValue(_s);
	}
	function stageOut(){
		if(view === undefined) return;
		view.hide();
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();//



var FreeLayoutInfoView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#FreeLayoutInfoView');
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v.inner = $('<div class="_inner"></div>');
		view.append(v.inner)
		
		var tag = ""
			tag += '<div class="_item _item_edit" data-action="dClick">'+TIP2("#+Enter")+'<span class="_block_btn">'+Dic.I.Edit+'</span> ブロックを編集</div>';
			tag += '<div class="_items">';
			tag += '	<div class="_item-title">ブロックのコピペ</div>';
			tag += '	<div class="_item-body">';
			tag += '		<div class="_item" data-action="copyCurrent">'+TIP2("#+C")+'<i class="fa fa-copy"></i> コピー</div>';
			tag += '		<div class="_item" data-action="cutCurrent">'+TIP2("#+X")+'<i class="fa fa-cut "></i> カット</div>';
			tag += '		<div class="_item" data-action="pastCurrent">'+TIP2("#+V")+'<i class="fa fa-clipboard "></i> ペースト</div>';
			tag += '		<div class="_item" data-action="pastCurrent2">'+TIP2("#+Shift+V")+'<i class="fa fa-clipboard "></i> 上書きペースト</div>';
			tag += '	</div>';
			tag += '</div>';
			tag += '<div class="_item" data-action="duplicateCurrent">'+TIP2("#+D")+'<i class="fa fa-copy"></i> ブロックを複製</div>';
			tag += '<div class="_items">';
			tag += '	<div class="_item-title">ブロックの移動</div>';
			tag += '	<div class="_item-body">';
			tag += '		<div class="_item" data-action="moveTopCurrent"><i class="fa fa-angle-double-up "></i>  一番上へ</div>';
			tag += '		<div class="_item" data-action="moveUpCurrent">'+TIP2("#+↑")+'<i class="fa fa-angle-up "></i>  ひとつ上へ</div>';
			tag += '		<div class="_item" data-action="moveDownCurrent">'+TIP2("#+↓")+'<i class="fa fa-angle-down "></i> ひとつ下へ</div>';
			tag += '		<div class="_item" data-action="moveBottomCurrent"><i class="fa fa-angle-double-down "></i>  一番下へ</div>';
			tag += '	</div>';
			tag += '</div>';
			tag += '<div class="_item " data-action="editJSON">{<i class="fa fa-ellipsis-h "></i>} 直接編集-JSON</div>';
			tag += '<div class="_item " data-action="addToMyBlock"><i class="fa fa-plus-circle "></i> Myブロック登録</div>';
			tag += '<div class="_item" data-action="deleteCurrent">'+TIP2("#+DELL")+'<i class="fa fa-times-circle " style="color:red"></i> ブロックを削除</div>';
			tag += '<div class="_note">●操作ヒント<br>'
			tag += '<b>編集</b>：Ctrl-Enter or ダブルクリック<br>'
			tag += '<b>選択変更</b>：[↑][↓]<br>'
			tag += '<b>移動</b>：ドラッグ<br>';
			tag += '</div>';
		v.inner.html(tag);
		
		v.item_edit = view.find("._item_edit");
		v.item = view.find("._item");
		v.item.click(function(){
			if($(this).hasClass("_disable"))return;
			var ac = $(this).data("action");
			tar.click();
			if(window.sc[ac]) window.sc[ac]();
			stageOut()
		})
		view.hover(
			function(){  },
			function(){ stageOut()}
		)
	}
	
	function setBtn(){
	}
	
	
	/* ---------- ---------- ---------- */
	var tar 
	function update(_view,_type){
		tar = $(_view);
		
		var y = 0;
		if (CMS_StatusH < CMS_Status.mouseY + view.height() ) {
			y = CMS_StatusH - view.height() - 20 + "px";
		} else{
			y = CMS_Status.mouseY-10 + "px"
		}
		if(CMS_Status.mouseY + view.height() +10);
		
		view.css({
			left: CMS_Status.mouseX-10 + "px",
			top: y
		});
		
		var cs = tar.attr("class");
		if(cs.indexOf("_freeLayoutTable") != -1 || cs.indexOf("_freeLayoutDiv")  != -1){
			v.item_edit.addClass("_disable");
		} else {
			v.item_edit.removeClass("_disable");
		}
		
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_view,_type){
		view.show();
		if(isFirst){
			createlayout();
		}
		isFirst = false;
		
		update(_view,_type)
	}
	
	function stageOut(){
		view.hide();
		tar = null;
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var InputCnadidate = (function(){
	var view
	function init(){
		view = $("#InputCnadidate");

		$(document).on("click","._candidate_item",function(){
			clickItem($(this).data("val"));
		})
		$(document).on("focus","input[data-candidate]",function(){
			stageIn($(this));
		});
		$(document).on("click","input[data-candidate]",function(){
			stageIn($(this));
		});
		// $(document).on("mouseout","input[data-candidate]",function(){
		// 	stageOut_delay();
		// });
		
		view.on("mouseover",function(){ clearTimer(); });
		view.on("mouseout",function(){ stageOut_delay(); });
		
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	var currentTar 
	function showList(_tar){
		if(!_tar.data("candidate"))return;
		var id = _tar.data("candidate");
		var ls = InputCnadidateDic.getList(id)
		if(!ls)return;
		currentTar = _tar;
		
		var tag = ""
		for (var i = 0; i <  ls.length ; i++) {
			if(ls[i][1] == "") ls[i][1] = ls[i][0];
			tag += '<div class="_candidate_item" data-val="'+ls[i][1]+'">' + ls[i][0] + '</div>'
		}
		// view.css({
		// 	top:_tar.offset().top + 18,
		// 	left:_tar.offset().left + 30
		// })
		view.html(tag);
		_tar.parent().css("position","relative").append(view);
		// _tar.parent().css("border","solid 1px #888").append(view);
	}

	/* ---------- ---------- ---------- */
	
	function clickItem(_val){
		if(!currentTar)return;
		if(_val == "")return;
		if(_val == undefined)return;
		if(_val == "--"){
			currentTar.val("").keyup();
		} else{
			currentTar.val(_val).keyup();
		}
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	// var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_tar){
		stageOut();
		if(! isOpen){ isOpen = true;
			// if(isFirst){}
			// isFirst = false;
			view.show();
			showList(_tar);
		}
	}
	var tID;
	function clearTimer(){
		if(tID) clearTimeout(tID);
	}
	function stageOut_delay(){
		clearTimer();
		tID = setTimeout(function(){
			stageOut();
		},200);
	}
	function stageOut(){
		clearTimer();
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
	
})();

var InputCnadidateDic = (function(){

	var dic = {}
	dic._cms_image_width = [
		["100%",""],
		["50%",""],
		["25%",""],
		["600px",""],
		["400px",""],
		["200px",""],
		["100px",""],
		["リセット","--"]
	]
	dic._cms_image_ratio = [
		["1:1",""],
		["2:1",""],
		["2:3",""],
		["3:2",""],
		["16:9",""]	,
		["リセット","--"]	
	]
	dic._cms_images_margin = [
		["0",""],
		["0 10px 10px 0",""],
		["0 20px 20px 0",""],
		["リセット","--"]	
	]
	dic._cms_text_size = [
		["10px",""],
		["12px",""],
		["14px",""],
		["16px",""],
		["18px",""],
		["24px",""],
		["32px",""],
		["42px",""],
		["60px",""],
		["80px",""],
		["120px",""],
		["リセット","--"]	
	]
	dic._cms_text_align = [
		["left",""],
		["center",""],
		["right",""],
		["リセット","--"]
	]
	dic._cms_line_heiht = [
		["1",""],
		["1.2",""],
		["1.4",""],
		["1.6",""],
		["1.8",""],
		["2",""],
		["リセット","--"]
	]
	dic._cms_box_round = [
		["2px",""],
		["5px",""],
		["10px",""],
		["5%",""],
		["10%",""],
		["25%",""],
		["50%",""],
		["リセット","--"]
	]
	dic._cms_border_w = [
		["1px",""],
		["2px",""],
		["4px",""],
		["リセット","--"]
	]
	
	dic._cms_text_bold = [
		["太字","bold"],
		["リセット","--"]
	]
	
	dic._cms_text_font = [
		["明朝体","serif"],
		["ゴシック体","sans-serif"],
		["筆記体","cursive"],
		["装飾体","fantasy"],
		["等幅体","monospace"],
		["リセット","--"]
	]
	dic._cms_text_sdw = [
		["1","1"],
		["2","2"],
		["4","4"],
		["8","8"],
		["16","16"],
		["32","32"],
		["リセット","--"]
	]

	function getList(_v){
		if(!dic)return;
		if(!dic[_v])return;
		return dic[_v];
	}

	return { getList:getList }
})();

var ColorPickerView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#ColorPickerView');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = '';
			tag += '<div class="_color_preview">***</div>';
			tag += '<canvas id="CMS_ColorCanvas" width="255" height="181"></canvas>';
			tag += '<div class="_btn_reset">色をクリア</div>';
		view.append(tag);
		
		v.color_preview = view.find("._color_preview");
		
		v.btn_reset = view.find("._btn_reset");
		v.btn_reset.click(function(){ reset() });
		
		initCanvas();
	}
	
	var currentSel;
	function setBtn(){
		$(document).on("focus","input._colorPicker",function(){
			currentSel = $(this);
			previewColor(currentSel.val());
			stageIn(currentSel,function(_val){
				currentSel.val(_val).keyup();
				stageOut();
			});
		});
		$(document).on("click","input._colorPicker",function(){
			currentSel = $(this);
			previewColor(currentSel.val());
			stageIn(currentSel,function(_val){
				currentSel.val(_val).keyup();
				stageOut();
			});
		})
		$(document).on("mouseout","input._colorPicker",function(){
			stageOut_delay();
		});
		view.on("mouseover",function(){ clearTimer(); });
		view.on("mouseout",function(){ stageOut_delay(); });
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	var canvas;
	var ctx;
	
	function initCanvas(){
		canvas = document.getElementById("CMS_ColorCanvas");
		ctx = canvas.getContext("2d");
		
		var image = new Image();
		    image.src = "./images/colorlist.png";
		    image.onload = function(){
				ctx.clearRect(0, 0, canvas.width, canvas.height); 
				var x = (canvas.width - image.width) / 2;
				var y = (canvas.height - image.height) / 2;      
				ctx.drawImage(image, x, y);
			};
		canvas.onclick = function(e){ selectColor(getColor(e)); }
		canvas.onmousemove = function(e){ previewColor(getColor(e)); }
	}
	
	function getColor(e) {
		var x = parseInt(e.offsetX);
		var y = parseInt(e.offsetY);
		var imagedata = ctx.getImageData(x, y, 1, 1);
		return rgba2hex(imagedata.data[0],imagedata.data[1],imagedata.data[2]);
	}
	function previewColor(_val) {
		v.color_preview.css( { background : _val } );
		v.color_preview.html( _val );
	}
	function selectColor(_val) {
		if(cb){
			cb(_val);
		}
	}
	function rgba2hex(r,g,b) {
		r = r.toString(16);
		if (r.length == 1) r = "0" + r;
		g = g.toString(16);
		if (g.length == 1) g = "0" + g;
		b = b.toString(16);
		if (b.length == 1) b = "0" + b;
		return '#' + r + g + b;  
	}  
	
	/* ---------- ---------- ---------- */
	
	function reset() {
		currentSel.val("").keyup();
		stageOut();
	}
	/* ---------- ---------- ---------- */
	
	function showList(_tar) {
		view.css({
			top:_tar.offset().top + 22,
			left:_tar.offset().left
		})
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	var cb;
	function stageInit(){
		view.hide();
	}
	function stageIn(_tar,_cb){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
			cb = _cb;
			showList(_tar);
		}
	}
	var tID;
	function clearTimer(){
		if(tID) clearTimeout(tID);
	}
	function stageOut_delay(){
		clearTimer();
		tID = setTimeout(function(){
			stageOut();
		},200);
	}
	function stageOut(){
		clearTimer();
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var ModalViewCreater 	 = (function(){
	function createBaseView(_class,_view){
		var tag = "";
			tag += '	<div class="_bg"></div>';
			tag += '	<div class="_modalBox">';
			tag += '		<div class="_header"><div class="_replaceArea"></div></div>';
			tag += '		<div class="_header_ex"><div class="_replaceArea"></div></div>';
			tag += '		<div class="_body _simple-scroll"><div class="_replaceArea"></div></div>';
			tag += '		<div class="_footer"><div class="_replaceArea"></div></div>';
			tag += '		<div class="_extra"><div class="_replaceArea"></div></div>';
			tag += '	</div>';
		_view.append(tag);
		var v = {}
			v.header  	= _view.find("._header ._replaceArea");
			v.header_ex = _view.find("._header_ex ._replaceArea");
			v.body 	 	= _view.find("._body ._replaceArea");
			v.footer  	= _view.find("._footer ._replaceArea");
			v.extra  	= _view.find("._extra ._replaceArea");
		return v;
	}

	return {
		createBaseView:createBaseView
	}
})();

var MiniEditer = (function(){
	
	var view;
	var v = {};
	
	function init(){
		view = $('#MiniEditer');
		v.body = $("body");
		stageInit();
	}
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_bg"></div>';
			tag += '<div class="_anno">編集完了：背景クリック or '+TIP2("#+Enter") + '</div>';
			tag += '<div class="_modalBox">';
			tag += '	<div class="_header _header_def clearfix">';
			tag += '		<div class="_title">'+Dic.I.Edit+' <span></span></div>';
			tag += '		<div class="_btn_full ss_icon _icon_full" '+TIP("F11","T")+'></div>';
			tag += '		<div class="_dragBar"></div>';
			tag += '	</div>';
			tag += '	<div class="_header _header_full clearfix">';
			tag += '		<div class="_title">'+Dic.I.Edit+' <span></span></div>';
			tag += '		<div class="_btn_full_off ss_icon _icon_full_off" '+TIP("F11","T")+'></div>';
			tag += '	</div>';
			tag += '	<div class="_body clearfix"></div>';
			tag += '</div>';
		view.html(tag)

		v.bg 			= view.find('._bg');
		v.anno 			= view.find('._anno');
		v.header 		= view.find('._header');
		v.headerD 		= view.find('._header_def');
		v.headerF 		= view.find('._header_full');
		v.modalBox 		= view.find('._modalBox');
		v.bodyArea 		= view.find('._body');
		v.title 		= view.find('._title span');
		v.btn_full 		= view.find('._btn_full');
		v.btn_full_off 	= view.find('._btn_full_off');
		v.btn_full		.click(toggleFullScreen);
		v.btn_full_off	.click(toggleFullScreen);
		
		MiniEditer.Editors.init(v.bodyArea);
		
		setEvent();
		setBtn();
		CMS_ScreenManager.registResize(function(){
			resize()
		});
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		v.bg.bind("mousedown",function(){stageOut();});
		v.anno.bind("mousedown",function(){stageOut();});
	}
	
	/* ---------- ---------- ---------- */

	function setEvent(){
		v.modalBox.draggable({ distance: 5, handle: v.headerD });
		 v.modalBox.resizable( {
			resize: onResuze, stop: onResuzeStop,
			minWidth:350,
		});
		v.headerD.bind("dblclick",function(){
			startFullScreen();
		})
		v.headerF.bind("click",function(){
			endFullScreen();
		})
	}
	
	var tID;
	function onResuze(event,ui){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){ 
			setTextareaSize(ui.size.height-100); 
		},10);
	}
	function onResuzeStop(event,ui){
		setTextareaSizeEnd(ui.size.height-100);
	}
	var currentTextareaH = 150;
	function setTextareaSize(_h){
		currentTextareaH = _h ;
		MiniEditer.Editors.resize(currentTextareaH);
	}
	function getTextareaSize(){
		return currentTextareaH;
	}
	function setTextareaSizeEnd(_h){
		setTextareaSize(_h);
		v.modalBox.css("height","auto");
	}
	
	/* ---------- ---------- ---------- */
	
	var defVal = "";
	var prevVal = "";
	var currentVal = "";
	
	function setData(_s){
		if(_s == undefined) _s = "";
		currentVal = defVal = _s;
		MiniEditer.Editors.setData(
			_s,
			type,
			function(_s){
				currentVal = _s;
				if(isFull == false){
					_callback();
				}
			}
		);
		
		updateTitle(type);
		
		if(type.indexOf("input:") != -1){
			v.modalBox.css("width",200+"px")
		}
		
		if(type.indexOf("input:") != -1){
			v.modalBox.css("width",ws.single+"px");
		} else{
			v.modalBox.css("width",ws.multi+"px");
		}
	}
	
		var callbackTID;
	function _callback(){
		if(callbackTID) clearTimeout(callbackTID);
		callbackTID = setTimeout(function(){
				callback(currentVal);
		},200);
	}
	/* ---------- ---------- ---------- */
	
	function updateTitle(_s){
		var t = _s.split(":")[1]
		var s = "テキスト編集"
		if (t == "style") s = "style属性編集";
		if (t == "single-class") s = "class属性編集";
		if (t == "markdown") s = "Markdown編集";
		if (t == "html") s = "HTML編集";
		if (t == "js") s = "JavaScript編集";
		v.title.html(s);
	}
	
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var type;
	var callback;
	
	function stageIn(_s,_callback,_type){
		stageOut()
		if(! isOpen){ isOpen = true;
			showModalView(this);
			if (isFirst) { createlayout(); } 
			isFirst = false;
			view.show();
			callback = _callback;
			type = _type;
			setData(_s);
			v.body.addClass("_modalTextEditing");
			updatePos();
			//
			v.anno.hide().delay(100).fadeIn(100);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			
			view.hide();
			v.body.removeClass("_modalTextEditing");
			endFullScreen()
			memoryW();
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var defW = 400;
 	var ws = { single:defW, multi:defW }
 	
	function memoryW(){
		if(type){
			if(type.indexOf("input:") != -1){
				ws.single = v.modalBox.width()
			} else{
				ws.multi = v.modalBox.width()
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var currentPos = {x:0,y:0};
	var closeTime = new Date();
	function updatePos(){
		var y = 0;
		var x = 0;
		
		//
		if (CMS_Status.mouseX  > CMS_StatusW*0.66) {
			x = CMS_Status.mouseX - v.modalBox.width()- 20;
		} else{
			x = CMS_Status.mouseX + 20;
			// x = CMS_Status.mouseX - 50;
		}
		if (CMS_Status.mouseY  > CMS_StatusH*0.8) {
			y = CMS_Status.mouseY - v.modalBox.height() - 20;
		} else{
			y = CMS_Status.mouseY + 15;
			// y = CMS_Status.mouseY - 25;
		}
		
		if (CMS_Status.mouseY == 0) {
			y = 200;
			x = 200;
		}
		var w = v.modalBox.width() + 10;
		var h = v.modalBox.height() + 10;
		if (window.isFireEnterClick) {
			x = CMS_StatusW / 2 - (w / 2);
			y = CMS_StatusH / 2 - (h / 2);
		}
		if (x + w > CMS_StatusW) { x = CMS_StatusW - w }
		if (y + h > CMS_StatusH) { y = CMS_StatusH - h }
		if (x < 0) { x = 10 }
		if (y < 0) { y = 10 }
		
		//前回の表示位置や時間があまり変わらない場合は、同じ位置に
		var saX = Math.abs(currentPos.x - x);
		var saY = Math.abs(currentPos.y - y);
		var saT = new Date().getTime() - closeTime.getTime();
		var b = false;
		if(saX + saY > 150) b = true;
		if(saT > 1000) b = true;
		if(b){
			v.modalBox.css({ left: x, top: y });
			currentPos = {x:x,y:y};
		}
		closeTime = new Date();
	}
	
	function resize(){
		if(isFull){
			setTextareaSize(CMS_StatusH-70);
		}
	}
	
	
	/* ---------- ---------- ---------- */
	var isFull = false
	var modalRect = {x:0,y:0,w:0,h:0}
	var tempH = 0
	
	function startFullScreen(){
		if(isFull == true)return;
		isFull = true;
		updateFullScreen();
	}
	function endFullScreen(){
		if(isFull == false)return;
		isFull = false;
		updateFullScreen();
	}
		
	function toggleFullScreen(){
		if(isFull == false){
			isFull = true;
		} else{
			isFull = false;
		}
		updateFullScreen()
	}
	window.editFullScreen = toggleFullScreen;
	function updateFullScreen(){
		if(isFull){
			modalRect = {
				y : v.modalBox.offset().top,
				x : v.modalBox.offset().left,
				w : v.modalBox.width(),
				h : v.modalBox.height()
			}
			$("body").addClass("_editFullscreen");
			v.modalBox.css({
				top:"0px",
				bottom:"0px",
				left:"0px",
				right:"0px",
				width:"100%",
				height:"100%"
			})
			tempH = currentTextareaH;
			setTextareaSizeEnd(CMS_StatusH-70);
		} else{
			$("body").removeClass("_editFullscreen");
			v.modalBox.css({
				top		: modalRect.y + "px",
				bottom	: "auto",
				left	: modalRect.x + "px",
				right	: "auto",
				width	: modalRect.w + "px",
				height	: modalRect.h + "px"
			})
			setTextareaSizeEnd(tempH);
			_callback(currentVal);
		}
	}
	
	function setRect(_rect){
		
	}
	/* ---------- ---------- ---------- */

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		resize: resize,
		compliteEdit: compliteEdit
	}
})();

MiniEditer.Editors = (function(){
	var view;
	var v = {};
	
	function init(_parentView){
		view = $('<div class="_textarea"></div>');
		_parentView.append(view);
	}
	
	var editors = {}
	var callback;
	
	var prevEditor;
	var currentEditor;
	var initTID;
	function setData(_s,_type,_callback){
		callback = _callback;
		
		if(currentEditor)currentEditor.stageOut()
		if(! editors[_type]){
			var t = _type.split(":")[1];
			if(_type.indexOf("input:") != -1){
				currentEditor = new MiniEditer.InputView(view,t);
			} else{
				//multi,table
				currentEditor = new MiniEditer.CodeView(view,t);
			}
			editors[_type] = currentEditor;
		} else{
			currentEditor = editors[_type];
		}
		
		//データセット時のアップデートをスルーする処理
		var isUpdateable = false;
		if(initTID) clearTimeout(initTID);
		initTID = setTimeout(function() {
			isUpdateable = true;
		}, 100);

		currentEditor.stageIn();
		currentEditor.setData(_s,function(_s){
			if(!isUpdateable) return;
			callback(_s);
		});
		
		resize();
		
	}
	
	var currentH = 150;
	function resize(_h){
		if(_h) currentH = _h;
		currentEditor.resize(currentH);
	}
	
	return {
		init: init,
		setData: setData,
		resize: resize
	}
})();

MiniEditer.InputView = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_type) {
	  this.init(_view,_type);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view,_type) {
		var self = this;
		this.v = {}
		this.parentView = _view;
		this.type = _type;
		
		var tag = "";
			tag += '<div class="_text-editor">';
			tag += '	<div class="_name">' +_type+ '</div>';
			tag += '	<div class="_presetBtns clearfix"></div>';
			tag += '	<input class="_single">';
			tag += '	<div class="_footer clearfix">';
			tag += '		<div class="_status"></div>';
			tag += '	</div>';
			tag += '	<div class="_option clearfix" style="padding:8px 0 0 5px;">';
			tag += '	※改行する場合は&lt;BR&gt;を入力';
			tag += '	</div>';
			tag += '</div>';
		this.view = $(tag);
		this.view.addClass(CodeMirrorU.getColorType(this.type));
		this.parentView.append(this.view);
		this.input = this.view.find("._single");
		this.input.keyup(function(){self.update()});
		this.v.footer	 	= this.view.find('._footer');
		this.v.status	 	= this.view.find('._status');
		
		this.preset = new MiniEditer.PresetClass(
			this,
			this.view.find("._presetBtns"),
			this.type,
			function(_s){self.assignTag(_s)}
		);
	}
	
	/* ---------- ---------- ---------- */

	p.search = function() {
		//
	}
	
	p.assignTag = function(tags) {
		var ele = this.input;
		var pos = {}
			pos.start = ele.get(0).selectionStart;
			pos.end = ele.get(0).selectionEnd;
		var val = ele.val();
		var r = val.slice(pos.start, pos.end);
		if(r == "") {
			r = tags[0] + tags[1] + tags[2]
		} else{
			r = tags[0] + r + tags[2]
		}
		var ts = [ val.slice(0, pos.start) , r + " " , val.slice(pos.end) ];
		ele.val(ts.join(""));
		ele.get(0).setSelectionRange(pos.start + r.length ,pos.start + r.length + 1);
		this.update();
	}
	
	p.update = function() {
		this.currentVal = this.input.val()
		this.callback(this.currentVal);
		this.updateState();
	}
	p.restore = function() {
		this.input.val(this.defVal).keyup();
	}
	p.setData = function(_s,_callback) {
		this.defVal = this.currentVal =  _s;
		this.callback = _callback;
		this.input.val(_s).focus();
		this.input.get(0).setSelectionRange(0,0);
		this.updateState();
	}
	p.resize = function(_h) {
	}
	
	p.updateState = function() {
		var s = (function(_s1,_s2){ 
			var s = "";
				// s += "行数 : "+_s1.split("\n").length + ' <i class="fa fa-long-arrow-right"></i> ' + '<b>' + _s2.split("\n").length + '行</b>'
				s += "文字数 : "+_s1.length + ' <i class="fa fa-long-arrow-right"></i> ' + '<b>' +_s2.length + '文字</b>'
			return s;
		})(this.defVal,this.currentVal);
		this.v.status.html(s); 
		this.updateRestoreBtn();
	}
	p.updateRestoreBtn = function (){
		this.preset.setRestoreBtn(this.defVal == this.currentVal);
	}
	
	/* ---------- ---------- ---------- */

	p.stageInit=function(){
		//
	}
	p.stageIn=function( )  {
		this.view.show()
	}
	p.stageOut=function( )  {
		this.view.hide()
	}
	return c;
})();

MiniEditer.CodeView = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_type) {
	  this.init(_view,_type);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view,_type) {
		var self = this;
		this.v = {}
		this.parentView = _view;
		this.type = _type;
		
		var tag = "";
			tag += '<div class="_text-editor">';
			tag += '	<div class="_name">' +_type+ '</div>';
			tag += '	<div>';
			tag += '		<div class="_presetBtns clearfix"></div>';
			tag += '		<textarea class="codemirror"></textarea>';
			tag += '	</div>';
			tag += '	<div class="_footer clearfix">';
			tag += '		<div class="_status"></div>';
			tag += '	</div>';
			tag += '	<div class="_option clearfix"></div>';
			tag += '</div>';
		this.view = $(tag);
		
		this.textarea = this.view.find("textarea");
		this.parentView.append(this.view);
		
		this.cmEditor = this.createCMEditor(this.textarea,this.type);
		this.v.codemirrorView = this.view.find(".CodeMirror");
		
		this.v.footer	 	= this.view.find('._footer');
		this.v.status	 	= this.view.find('._status');
		
		this.option = new MiniEditer.CodeViewOption(this.view.find("._option"),this.type);
		
		this.preset = new MiniEditer.PresetClass(
			this,
			this.view.find("._presetBtns"),
			this.type,
			function(_s){self.assignTag(_s)}
		);
		
	}
	
	/* ---------- ---------- ---------- */

	p.search = function() {
		CodeMirror.commands.find(this.cmEditor);
	}
	
	p.assignTag = function(tags) {
		var r = this.cmEditor.getSelection();
			r = (r == "") ? (tags[0] + tags[1] + tags[2]) : (tags[0] + r + tags[2]);
		this.cmEditor.replaceSelection(r,"around");
		this.cmEditor.focus();
	}
	
	p.createCMEditor = function(_view,_type) {
		var self = this;
		this.view.addClass(CodeMirrorU.getColorType(_type));
		
		var e = CodeMirrorU.createEditor(_view.get(0),_type,true);
			e.on("change",function(){ self.update(); })
		return e;
	}
	
	p.update = function() {
		this.currentVal = this.option.getData() + this.cmEditor.getValue();
		
		this.callback(this.currentVal);
		this.updateState();
	}
	p.restore = function() {
		this.cmEditor.setValue(this.defVal);
	}
	p.setData = function(_s,_callback) {
		var self = this;
		this.defVal = this.currentVal =  _s;
		this.callback = _callback;
		
		_s = this.option.setData(_s,function(){ self.update(); });
		
		this.cmEditor.setValue(_s);
		this.cmEditor.focus();
		// this.cmEditor.setCursor(99999);
		this.updateState();
	}
	p.resize = function(_h) {
		if(_h< 100) _h = 100;
		this.v.codemirrorView.height(_h);
		this.cmEditor.refresh();
	}
	p.updateState = function() {
		var s = (function(_s1,_s2){ 
			var s = "";
				// s += "行数 : "+_s1.split("\n").length + ' <i class="fa fa-long-arrow-right"></i> ' + '<b>' + _s2.split("\n").length + '行</b>'
				s += "文字数 : "+_s1.length + ' <i class="fa fa-long-arrow-right"></i> ' + '<b>' +_s2.length + '文字</b>'
			return s;
			
		})(this.defVal,this.currentVal);
		this.v.status.html(s); 
		this.updateRestoreBtn();
	}
	p.updateRestoreBtn = function (){
		this.preset.setRestoreBtn(this.defVal == this.currentVal);
	}
	
	
	/* ---------- ---------- ---------- */

	p.stageInit=function(){
		//
	}
	p.stageIn=function( )  {
		this.view.show()
	}
	p.stageOut=function( )  {
		this.view.hide()
	}
	return c;
})();



MiniEditer.CodeViewOption = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_type) {
	  this.init(_view,_type);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_view,_type) {
		this.view = _view;
		this.type = _type;
		this.v = {}
		
		this.createView()
	}

	/* ---------- ---------- ---------- */
	//改行チェック
	
	p.createView = function(){
		var self = this;
		
		var tag = "";
			tag += '<div class="_checks_p" style="padding:5px 0 0 0;">';
			tag += '※改行は&lt;BR&gt;に変換されます';
			tag += '</div>';
			tag += '<div class="_checks_html" style="padding:5px 0 0 0;">';
			tag += '※改行する場合は&lt;BR&gt;を入力';
			tag += '</div>';
			tag += '<div class="_checks">';
			tag += '	<span class="_check_no_br"><i class="fa fa-square-o"></i> 改行 <i class="fa fa-arrow-right "></i> &lt;BR&gt;</span>';
			tag += '	<span class="_check_no_br_ac"><i class="fa fa-check-square"></i> 改行 <i class="fa fa-arrow-right "></i> &lt;BR&gt;</span>';
			tag += '</div>';
			tag += '<div class="_attrs">';
			tag += 'セル属性 : <input type="text" class="_in_attr" placeholder=\'colspan="2"\'>'
			tag += '</div>';
		this.view.append(tag);
		this.v.attrs 		= this.view.find('._attrs');
		this.v.in_attr 		= this.view.find('._in_attr');
		this.v.in_attr.keyup(function(){ self.update_attr();})
		
		this.v.checks	 		= this.view.find('._checks');
		this.v.checks_p		 	= this.view.find('._checks_p');
		this.v.checks_html		= this.view.find('._checks_html');
		this.v.check_no_br	 	= this.view.find('._check_no_br');
		this.v.check_no_br_ac 	= this.view.find('._check_no_br_ac');
		
		this.v.check_no_br		.click(function(){ self.update_br(false,true) });
		this.v.check_no_br_ac	.click(function(){ self.update_br(true,true) });
	}	
	
	/* ---------- ---------- ---------- */
	
	p.hasAttrBR = false;
	p.hasAttrTD = false;
	
	p.setData = function(_s,_callback){
		var s = _s;
		this.callback = _callback;
		
		/* ---------- ---------- ---------- */
		
		this.hasAttrTD = (function(_t){ 
		 	if(_t == "table") return true;
		 	return false;
		})(this.type);
		
		this.v.in_attr.val("")
		if(this.hasAttrTD){
			this.v.in_attr.val(CMS_TagU.getCellAttr(s))
			s = CMS_TagU.deleteCellAttr(s);
			this.v.attrs.show();
		} else{
			this.v.attrs.hide();
		}
		
		/* ---------- ---------- ---------- */

		this.hasAttrBR = (function(_t){ 
		 	if(_t == "multi") return true;
		 	if(_t == "table") return true;
		 	return false;
		})(this.type);
		
		this.v.checks.hide()
		this.v.checks_p.hide()
		this.v.checks_html.hide()
		if(this.hasAttrBR){
			this.update_br( CMS_TagU.hasCellBR(s) );
			s = CMS_TagU.deleteCellBR(s);
			this.v.checks.show()
		} else{
			if(this.type == "p"){ this.v.checks_p.show() }
			if(this.type == "code"){ this.v.checks_p.show() }
			if(this.type == "html"){ this.v.checks_html.show() }
		}
		return s
	}
		
	/* ---------- ---------- ---------- */
	
	p.init_attr = function(_s){
		this.v.in_attr.focus().val(s);
	}
	p.update_attr = function(){
		// var s = this.v.in_attr.val();
		this.update();
	}
	
	/* ---------- ---------- ---------- */
	p.isNotBR = false;
	p.update_br = function(_b,_isUpdate){
		this.isNotBR = _b;
		this.v.check_no_br.hide();
		this.v.check_no_br_ac.hide();
		if(_b){
			this.v.check_no_br.show();
		} else{
			this.v.check_no_br_ac.show();
		}
		if(_isUpdate) this.update();
	}
	
	/* ---------- ---------- ---------- */

	p.update = function(){
		this.callback();
	}
	
	p.getData = function(){
		var s = "";
		
		if(this.hasAttrTD){
			var att = this.v.in_attr.val();
			if( att != "")		{ s += "[[" +att+ "]]" ; }
		}
		if(this.hasAttrBR){
			if( this.isNotBR )	{ s += NOT_BR; }
		}
		return s;
	}
	return c;
})();


MiniEditer.PresetClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_view,_type,_callback) {
	  this.init(_parent,_view,_type,_callback);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_parent,_view,_type,_callback) {
		this.parent = _parent;
		this.view = _view;
		this.type = _type;
		this.callback = _callback;
		this.v = {};
		this.view.html(this.getTag(this.type));
		this.setBtn();
	}

	p.getTag = function(_type){
		var tag = "";
			tag += '<span class="_presetItem _btn_restore"><i class="fa fa-reply "></i> 編集前に戻す</span> ';
			
		if (_type == "class"){ return tag; }
		if (_type == "style") { return tag; };
		if (_type == "svg") { return tag; };
		// if (_type == "html") { return tag; };
		if (_type == "js") { return tag; };
		
			// tag += '<span class="_presetItem _btn_sampleText _type-multi">サンプル文書</span> ';
			// tag += '<span class="_presetItem _btn_sampleMarkDown  _type-markdown">サンプルMarkdown</span> ';
			
			tag += '<span class="_presetItem _btn_search"><i class="fa fa-search "></i> 検索</span> ';
			
			tag += '<div class="_presetGloup">';
			tag += '	<span class="_presetTitle">文字スタイル <i class="fa fa-caret-down "></i> </span> ';
			tag += '	<div class="_presetBody">';
			tag += '		<span class="_presetItem _btn_tag_br"		><b>改行 &lt;br&gt;</b></span> ';
			tag += '		<span class="_presetItem _btn_tag_hr"		><b>区切り線 &lt;hr&gt;</b></span> ';
			tag += '		<span class="_hr"></span> ';
			tag += '		<span class="_presetItem _btn_tag_big"		><span style="font-size:120%">大 &lt;big&gt;</span></span> ';
			tag += '		<span class="_presetItem _btn_tag_small"	><span style="font-size:85%">小 &lt;small&gt;</span></span> ';
			tag += '		<span class="_presetItem _btn_tag_bold"		><b>太字 &lt;bold&gt;</b></span> ';
			tag += '		<span class="_presetItem _btn_tag_strong"	><strong>強調 &lt;strong&gt;</strong></span> ';
			tag += '		<span class="_presetItem _btn_tag_notes"	><span class="notes">注釈 &lt;span.notes&gt;</span></span> ';
			tag += '		<span class="_hr"></span> ';
			tag += '		<span class="_presetItem _btn_tag_red"		><b style="color:red">強調：赤 &lt;b&gt;</b></span> ';
			tag += '		<span class="_presetItem _btn_tag_blue"		><b style="color:blue">強調：青 &lt;b&gt;</b></span> ';
			tag += '		<span class="_presetItem _btn_tag_yellow"	><b style="background:yellow">強調：黄 &lt;b&gt;</b></span> ';
			tag += '	</div>';
			tag += '</div>';
			
			tag += '<div class="_presetGloup">';
			tag += '	<span class="_presetTitle">定型文 <i class="fa fa-caret-down "></i> </span> ';
			tag += '	<div class="_presetBody">';
			tag += '		<span class="_presetItem _btn_tag_a"		><i class="fa fa-caret-right "></i> リンク</span> ';
			tag += '		<span class="_presetItem _btn_tag_blank"	><i class="fa fa-external-link-square "></i>  リンク</span> ';
			tag += '		<span class="_presetItem _btn_tag_mail"	><i class="fa fa-envelope "></i> メール</span> ';
			tag += '		<span class="_hr"></span> ';
			tag += '		<span class="_presetItem _btn_sampleText20"	> サンプル文書20文字</span> ';
			tag += '		<span class="_presetItem _btn_sampleText100"	> サンプル文書100文字</span> ';
			tag += '		<span class="_presetItem _btn_sampleText500"	> サンプル文書500文字</span> ';
			tag += '		<span class="_presetItem _btn_sampleMarkDown"	> サンプルMarkdown</span> ';
			tag += '	</div>';
			tag += '</div>';
			
			tag += '<span class="_presetItem _btn_embedtag">{{埋込タグ}}</span> ';
			
		return tag;
	}
	
	p.setBtn = function(){
		var self = this;
		var view = this.view;
		view.find('._add_style')		.click(function(){ self.gePresetCSS()});
		//
		view.find('._btn_tag_br')		.click(function(){ self.assignTag(['<br>','',''])});
		view.find('._btn_tag_bold')		.click(function(){ self.assignTag(['<b>','太字','</b>'])});
		view.find('._btn_tag_strong')	.click(function(){ self.assignTag(['<strong>','強調','</strong>'])});
		view.find('._btn_tag_notes')	.click(function(){ self.assignTag(['<span class="notes">','強調','</span>'])});
		view.find('._btn_tag_red')		.click(function(){ self.assignTag(['<b style="color:red">','赤','</b>'])});
		view.find('._btn_tag_blue')		.click(function(){ self.assignTag(['<b style="color:blue">','青','</b>'])});
		view.find('._btn_tag_yellow')	.click(function(){ self.assignTag(['<b style="background:yellow">','黄','</b>'])});
		view.find('._btn_tag_hr')		.click(function(){ self.assignTag(['<hr>','',''])});

		view.find('._btn_tag_big')		.click(function(){ self.assignTag(['<big>','大きく','</big>'])});
		view.find('._btn_tag_small')	.click(function(){ self.assignTag(['<small>','小さく','</small>'])});
		view.find('._btn_tag_a')		.click(function(){ self.assignTag([' <a href="http://www.google.co.jp">{-} ','リンク','</a>\n'])});
		view.find('._btn_tag_blank')	.click(function(){ self.assignTag([' <a href="http://www.google.co.jp" target="_blank">{+}','リンク','</a>\n'])});
		view.find('._btn_tag_mail')		.click(function(){ self.assignTag([' <a href="mailto:メールアドレス"><i class="fa fa-envelope "></i>','メールアドレス','</a>\n'])});
		
		view.find('._btn_sampleText20')		.click(function(){ self.sampleText(20)});
		view.find('._btn_sampleText100')	.click(function(){ self.sampleText(100)});
		view.find('._btn_sampleText500')	.click(function(){ self.sampleText(500)});
		view.find('._btn_sampleMarkDown')	.click(function(){ self.sampleMarkDown()});
		
		view.find('._btn_embedtag').click(function() {
			EmbedTagListView.stageIn("my",function(_s){
				self.assignTag([_s+'\n',"",""]);
			});
		});
		
		this.v.btn_restore = view.find('._btn_restore')
		this.v.btn_restore.click(function(){ self.parent.restore()});
		view.find('._btn_search').click(function(){ self.parent.search()});
		
		// view.find('._presetCSS').click(function(){
		// 	var offset = $(this).offset();
		//  	Preset_ClassView.stageIn( 
		//  		function(_s) {self.assignTag([" " + _s,'','']) }, 
		//  		$(this).data("type"),
		//  		{ x: offset.left, y: offset.top }
	 //		);
		// });
		this.assingHober()
	}
	
	/* ---------- ---------- ---------- */
	
	p.assingHober = function(_b){
		var tID;
			var self = this;
		this.view.find('._presetGloup').hover(function(){
			var tar = $(this);
			if(tID) clearTimeout(tID);
			tID = setTimeout(function(){
				tar.addClass("_active");
			},200);
			
		},function(){
			if(tID) clearTimeout(tID);
			self.resetHover();
		});
	}
	p.resetHover = function(){
	 	this.view.find("._active").removeClass("_active");
	}
	
	/* ---------- ---------- ---------- */
	
	p.setRestoreBtn = function(_b){
		if(_b){
			this.v.btn_restore.removeClass("_active")
		} else{
			this.v.btn_restore.addClass("_active")
		}
	}
	p.assignTag = function(_tag,_delay){
		if(_delay ==undefined) _delay= 200;
		var self = this;
		if(_delay){
			setTimeout(function(){
				self.callback(_tag);
			},_delay);
		} else{
			this.callback(_tag)
		}
		this.resetHover()
	}
	p.sampleText = function(_n){
		if(_n == 20){
			this.assignTag([ "","","サンプルの文書ですので、ご注意ください。"])
		}
		var s = "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
		if(_n == 100){
			this.assignTag([ "","",s]);
		}
		if(_n == 500){
			this.assignTag([ "","",s+s+s+s+s]);
		}
	}
	p.sampleMarkDown = function(){
		this.assignTag([ "","",PageElement.tag.markdown.getInitText()])
	}
	return c;
})();
var Editer_TAGView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Editer_TAGView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	var codeminerEditor;
	var codeminerView;
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Editer_TAGView,view);
		var tag = "";
			tag = '<div class="_title">生成されるHTMLの確認</div>';
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_read">ページ公開時に生成される、選択要素のHTMLを表示・確認できます。<span class="_colorRed" style="background:yellow;">編集はできません。</span></div>';
			tag += '<div class="_texts _text-editor ">'
			tag += '	<textarea class="codemirror"></textarea>'
			tag += '</div>';
		v.body.html(tag);
		
		v.textEditor = view.find('._text-editor');
		v.textEditor.addClass(CodeMirrorU.getColorType("html"));
		
		var changeFirst = true
		codeminerEditor = CodeMirrorU.createEditor(view.find("textarea").get(0),"html",true);
		codeminerView = view.find(".CodeMirror");
		
			tag = "";
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag);
		
		v.textarea		 = view.find('textarea');
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	
	function update(_s){
		codeminerEditor.setValue(_s);
	}
	
	/* ---------- ---------- ---------- */
	//class style

	function getData(){
		return ""
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut();
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_s,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			
			update(_s);
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
			var h = $(window).height() -250;
			codeminerView.height(h)
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();

var Editer_JSONView 	 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Editer_JSONView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	var codeminerEditor;
	var codeminerView;
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Editer_JSONView,view);
		var tag = ""
			tag = '<div class="_title">JSONデータの直接編集</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_read">ページのデータはJSON型式でテキストファイルで保存されています。<br>以下のテキストファイルを直接編集したり、コピーし、他のページにペーストすることにより、ページの複製が可能です。</div>';
			tag += '<div class="_texts _text-editor ">'
			tag += '	<textarea class="codemirror"></textarea>'
			tag += '</div>';
		v.body.html(tag)
		
		v.textEditor = view.find('._text-editor');
		v.textEditor.addClass(CodeMirrorU.getColorType("json"));
		
		var changeFirst = true
		codeminerEditor = CodeMirrorU.createEditor(view.find("textarea").get(0),"json",true);
		codeminerEditor.foldCode(CodeMirror.Pos(0,0));
		codeminerView = view.find(".CodeMirror");
		
			tag = ""
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 編集完了</div> ';
		v.footer.html(tag);
		
		v.textarea		 = view.find('textarea');
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do = view.find('._btn_do');
		v.btn_do.click(function(){ 
			callback(getData());
			stageOut();
		});
	}
	
	function update(_s){
		codeminerEditor.setValue(_s);
	}
	
	/* ---------- ---------- ---------- */
	//class style

	function getData(){
		return codeminerEditor.getValue();
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut();
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_s,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			
			update(_s);
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
			var h = $(window).height() -250;
			codeminerView.height(h)
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();

var Editer_ExcelView 	 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Editer_ExcelView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	var codeminerEditor;
	var codeminerView;
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Editer_ExcelView,view);
		var tag = ""
			tag = '<div class="_title">表計算ソフト用データ</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_read">以下のテキストエリアのテキストを表計算ソフトにコピペして編集してください。<br>';
			tag += '表計算ソフトでの編集がおわったら、セルを選択して、以下のエリアにコピペしてください。<br>';
			tag += 'なお、レイアウトモードの画像セルの場合は、ランダムIDを書き出します。表計算ソフト上では編集はできません。</div>';
			tag += '<div class="_texts _text-editor ">'
			tag += '	<textarea class="codemirror"></textarea>'
			tag += '</div>';
		v.body.html(tag)
		
		v.textEditor = view.find('._text-editor');
		v.textEditor.addClass(CodeMirrorU.getColorType("json"));
		
		var changeFirst = true
		codeminerEditor = CodeMirrorU.createEditor(view.find("textarea").get(0),"text",false);
		codeminerEditor.foldCode(CodeMirror.Pos(0,0));
		codeminerView = view.find(".CodeMirror");
		
			tag = ""
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_excel _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 編集完了</div> ';
		v.footer.html(tag);
		
		v.textarea		 = view.find('textarea');
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do = view.find('._btn_do');
		v.btn_do.click(function(){ 
			callback(getData());
			stageOut();
		});
	}
	
	function update(_s){
		codeminerEditor.setValue(_s);
		// codeminerEditor.selectAll();
		codeminerEditor.execCommand("selectAll");
	}
	
	/* ---------- ---------- ---------- */
	//class style

	function getData(){
		return codeminerEditor.getValue();
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		callback(getData());
		stageOut();
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_s,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			
			update(_s);
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
			var h = $(window).height() -400;
			codeminerView.height(h);
		}
	}
	
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		resize: resize,
		compliteEdit: compliteEdit
	}

})();


var Editer_CodeCopyView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Editer_CodeCopyView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Editer_CodeCopyView,view);
		var tag = "";
			tag = '<div class="_title">コードコピー</div>';
		v.header.html(tag);
		
			tag = "";
			tag += '<div class="_read"></div>';
			tag += '<textarea id="codeFrame" wrap="off" readonly></textarea> ';
		v.body.html(tag);
		v.read = v.body.find("._read");
		
		v.codeFrame = view.find('#codeFrame');
		
			tag = "";
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag);
		
		v.textarea		 = view.find('textarea');
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	
	function update(_type,_a){
		if(_type == "formMail"){
			updateFormMail(_a);
		}
	}
	
	function updateFormMail(_a){
		v.read.html("以下のコードを、<b>php/mail.php</b>へコピーし保存してください。");
		var temp = CMS_Data.CodeDic.getCode("mailform.php");
			temp = temp.split("{MAIL}").join(_a[0]);
			temp = temp.split("{FORMS}").join(_a[1]);
		v.codeFrame.val(temp);
	}
	
	/* ---------- ---------- ---------- */
	//class style

	function getData(){
		return ""
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
		createlayout();
	}
	var callback
	function stageIn(_type,_a,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			view.show();
			if(isFirst){}
			isFirst = false;
			update(_type,_a);
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
			var h = $(window).height() -300;
			v.codeFrame.height(h);
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();

var Anchor_InputView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Anchor_InputView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/link","_BASE_")+'</div>'
			tag += '<div class="_title">リンク設定</div>'
		v.header.html(tag);
		
		var tag = "";
			tag += '<table class="_layoutTable">';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">リンクURL</th>';
			tag += '		<td><input class="_editableNode _link_href _colorAnchor _w400" > ';
			tag += '		<span class="_btn_pages _cms_btn-nano "><i class="fa fa-lg fa-file-text"></i> ページ</span>'
			tag += '		<span class="_btn_files _cms_btn-nano "><span class="_icon_dir"></span>ファイル</span>'
			tag += '		<div class="_t_path_preview _input_href_anno">aa</div>'
			tag += '		</td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">リンク<br>ターゲット</th>';
			tag += '		<td><input class="_editableNode _link_tar _colorAnchor _w400" list="">';
			tag += '		<span class="_target_ref_btn _cms_btn-nano "><i class="fa fa-lg fa-external-link-square "></i> ターゲット</span></td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">Aタグ属性</th>';
			tag += '		<td><input class="_editableNode _link_attr _colorAnchor _w400" list=""></td>';
			tag += '	</tr>';
			tag += '</table>';
		v.body.html(tag);
		v.link_href	 = view.find('._link_href');
		v.link_tar	 = view.find('._link_tar');
		v.link_attr	 = view.find('._link_attr');
		v.input_href_anno = view.find('._input_href_anno');
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '<div class="_cms_btn _cms_btn_red _btn_del">リセット</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 設定する</div> ';
		v.footer.html(tag);
		
		setBtn();
	}
		
	function setBtn(){

		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do = view.find('._btn_do');
		v.btn_do.click(function(){ 
			compliteEdit()
		});
		
		v.btn_del = view.find('._btn_del');
		v.btn_del.click(function(){ 
			callback(getEmptyData());
			stageOut();
		});
		
		view.on("click",'._btn_pages',function(){
			Anchor_PageListView.stageIn(function(_val){
				v.link_href.val(_val).keyup();
			})
		});
		view.on("click",'._btn_files',function(){
			var s = v.link_href.val();
			CMS_MainController.openAssetSelectRel("link", s ,function(_val){
				UpdateDelay.delay(function(){
					v.link_href.val(_val).keyup();
				});
			});
		});
		view.on("click",'._target_ref_btn',function(){
			Anchor_TargetListView.stageIn(function(_val){
				v.link_tar.val(_val)
			})
		});
		view.on("keyup",'._link_href',function(){
			updatePathPreview($(this).val());
		});
	}
	
	function updateBtnClass(){}

	function update(){
		var this_ = this;
		
		if(!val) val = {};
		var _url  = defaultVal(val.href,"");
		var _tar  = defaultVal(val.target,"");
		var _attr  = defaultVal(val.attr,"");
		
		if(_url == "")_url = "#";
		
		v.link_href.val(_url)
		v.link_tar.val(_tar)
		v.link_attr.val(_attr)
		
		updatePathPreview()
	}
	function updatePathPreview(){
		var id = v.link_href.val();
		v.input_href_anno.html("リンクURLプレビュー："+CMS_Path.MEDIA.getAnchorPath_deco(id));
	}
	
	/* ---------- ---------- ---------- */
	//class style

	function getData(){
		var vals = {
			href:defaultVal(v.link_href.val(),""),
			target:defaultVal(v.link_tar.val(),""),
			attr:defaultVal(v.link_attr.val(),"")
		};
		return vals
	}
	function getEmptyData(){
		var vals = {
			href:"",
			target:""
		};
		return vals
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		callback(getData());
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	var val
	function stageIn(_val,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			val = _val;
			callback = _callback;
			if(isFirst){createlayout();}
			isFirst = false;
			view.show();
			update();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
		}
	}
	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();//modal
var Anchor_BtnView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Anchor_BtnView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_BtnView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/btn","_BASE_")+'</div>'
			tag += '<div class="_title">ボタン設定</div>'
		v.header.html(tag);
		
		var tag = "";
			tag += '<table class="_layoutTable">';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">リンクURL</th>';
			tag += '		<td><input class="_editableNode _link_href _colorAnchor _w400"> ';
			tag += '		<span class="_btn_pages _cms_btn-nano "><i class="fa fa-lg fa-file-text"></i> ページ</span>'
			tag += '		<span class="_btn_files _cms_btn-nano "><span class="_icon_dir"></span>ファイル</span>'
			tag += '		<div class="_t_path_preview _input_href_anno">aa</div>'
			tag += '		</td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">リンク<br>ターゲット</th>';
			tag += '		<td><input class="_editableNode _link_tar _colorAnchor _w400" list="">';
			tag += '		<span class="_target_ref_btn _cms_btn-nano "><i class="fa fa-lg fa-external-link-square "></i> ターゲット</span></td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">Aタグ属性</th>';
			tag += '		<td><input class="_editableNode _link_attr _colorAnchor _w400" list=""></td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">リンクテキスト</th>';
			tag += '		<td><input class="_editableNode _link_text _colorName _w500" style="margin:0 0 5px 0"><br>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-angle-right "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-caret-right "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-arrow-right "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-chevron-circle-right"></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-check "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-external-link-square "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-envelope "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-file "></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-file-text"></i></span>';
			tag += '			<span class="_icon_copy _cms_btn-nano "><i class="fa fa-file-pdf-o"></i></span>';
			tag += '			<span class="_icon_ref_btn _cms_btn-nano "><i class="fa fa-book "></i> その他アイコン</span>';
			tag += '		</td>'
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">画像パス</th>';
			tag += '		<td><input class="_editableNode _link_image _colorPath _w500">'
			tag += '		<span class="_image_ref_btn _cms_btn-nano "><i class="fa fa-book "></i> 画像</span>';
			tag += '		<p>画像パスを入力した場合は、リンクテキストの値が上書きされます</p>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">デザイン<br>(クラス)</th>';
			tag += '		<td>';
			tag += '			<input class="_link_class _color-style _w500" style="margin:5px 0;font-size:12px;" value="">';
			tag += '			<div class="_selectClass"></div>';
			tag += '			<p>文字サイズについては、ブロック情報パネルで設定</p>';
			tag += '		</td>';
			tag += '	</tr>';
			tag += '	<tr>';
			tag += '		<th class="_cellTitle">プレビュー</th>';
			tag += '		<td><div class="_preview"></div></td>';
			tag += '	</tr>';
			tag += '</table>';
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '<div class="_cms_btn _cms_btn_red _btn_del">リセット</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 設定する</div> ';
		v.footer.html(tag);
		
		v.previeFrame = view.find('._previeFrame');
		v.link_text	 = view.find('._link_text');
		v.link_image = view.find('._link_image');
		v.link_class  = view.find('._link_class');
		v.link_href	 = view.find('._link_href');
		v.link_tar	 = view.find('._link_tar');
		v.link_attr	 = view.find('._link_attr');
		v.preview	 = view.find('._preview');
		v.input_href_anno = view.find('._input_href_anno');
		v.selectClass = view.find('._selectClass');
		
		setBtn();
	}
	
	function setBtn(){

		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do = view.find('._btn_do');
		
		view.on("click", '._btn_do', function() {
			compliteEdit()
		});
		v.btn_del = view.find('._btn_del');
		v.btn_del.click(function(){ 
			callback(getEmptyData());
			stageOut();
		});
		
		view.on("keyup",'._link_text',function(){ updateBtnClass() });
		view.on("keyup",'._link_image',function(){ updateBtnClass() });
		view.on("keyup",'._link_class',function(){
			currentClass = $(this).val();
			updateBtnClass();
		})
		view.on("click",'._link_image',function(){
			var val = v.link_image.val()
			var s = prompt("画像URLを入力してください", val);
	 		if(s != undefined) s = "";
			v.link_image.val(s);
			updateBtnClass();
		});
		view.on("click",'._image_ref_btn',function(){
			var val = v.link_image.val();
			
			CMS_MainController.openAssetSelectRel("image",  val ,function(_val){
				v.link_image.val(_val)
				updateBtnClass();
			});
		});
		view.on("click",'._btn_pages',function(){
			Anchor_PageListView.stageIn(function(_val){
				v.link_href.val(_val).keyup()
			})
		});
		view.on("click",'._btn_files',function(){
			var s = v.link_href.val();
			CMS_MainController.openAssetSelectRel("link", s ,function(_val){
				UpdateDelay.delay(function(){
					v.link_href.val(_val).keyup();
					updateBtnClass();
				});
			});
		});
		view.on("click",'._target_ref_btn',function(){
			Anchor_TargetListView.stageIn(function(_val){
				v.link_tar.val(_val)
			})
		});
		view.on("click",'._icon_ref_btn',function(){
			Preset_IconView.stageIn(function(_icon){
				var s = v.link_text.val();
				v.link_text.val(_icon + " " + s);
				v.link_text.keyup();
			});
		});
		view.on("click",'._icon_copy',function(){
			var s = v.link_text.val();
			v.link_text.val($(this).html()+ " " + s);
			v.link_text.keyup();
		});
		
		view.on("change",'._pageList',function(){
			var val = $(this).val();
			if(val != "") v.link_href.val(val+".html").keyup();
		})
		
		view.on("keyup",'._link_href',function(){
			updatePathPreview($(this).val());
		});
	}

	function updateBtnClass(){
		var a = currentClass.split(" ");
		v.btnCopyMCs.removeClass("_active");
		for (var i = 0; i < a.length ; i++) {
			view.find('._area_' + a[i]).addClass("_active");
		}
		var t = ""
		if(v.link_image.val().length > 0){
			t = '<img src="' + CMS_Path.MEDIA.getImagePath(v.link_image.val(),false) + '">';
		} else{
			t = defaultVal(v.link_text.val(),v.link_href.val());
		}
		var tag = "";
		tag += '<span class="'+v.link_class.val()+'" >'+t+'</span>'
		v.preview.html(tag)
	}

	function update(){
		var this_ = this;

		if(!val) val = {};
		
		var _url  = defaultVal(val.href,"");
		var _tar  = defaultVal(val.target,"");
		var _attr  = defaultVal(val.attr,"");
		var _label = defaultVal(val.text,"");
		var _class  = defaultVal(val.class_,"");
		var _image  = defaultVal(val.image,"");
		
		if(_url == "")_url = "#";
		if(_label == "")_label = "ボタン名";
		if(_image == "")_image = "";
		if(_class == "")_class = ""
		
		v.link_href.val(_url)
		v.link_tar.val(_tar)
		v.link_attr.val(_attr)
		v.link_text.val(_label)
		v.link_image.val(_image)
		
		getBtnClassTag();
		setBtnClass(_class);
		updateBtnClass();
		updatePathPreview()
	}
	function updatePathPreview(){
		var id = v.link_href.val();
		// v.input_href_anno.html(CMS_Path.MEDIA.getAnchorPath(id,false));
		v.input_href_anno.html("リンクURLプレビュー："+CMS_Path.MEDIA.getAnchorPath_deco(id));
	}
	
		
	/* ---------- ---------- ---------- */
	//class style

	function getBtnClassTag(){
		var list = classList
		var tag = '<img src="images/btn_select_bg.png?3" width="346" height="166" border="0" alt="" >';
		for (var i = 0; i < list.length ; i++) {
			var temp = '<div class="_btnCopyMC _area_{1}" data="{1}" data-type="{0}" style="left:{2}px;top:{3}px;width:{4}px;height:{5}px;"></div>'
				temp = temp.split("{0}").join(list[i][0]);
				temp = temp.split("{1}").join(list[i][1]);
				temp = temp.split("{2}").join(list[i][2]-2);
				temp = temp.split("{3}").join(list[i][3]-1);
				temp = temp.split("{4}").join(list[i][4]);
				temp = temp.split("{5}").join(list[i][5]);
				tag += temp;
		}
		v.selectClass.html(tag);
		v.btnCopyMCs = view.find('._btnCopyMC')
		v.btnCopyMCs.click(function(){ 
			addBtnClass([$(this).attr("data-type"),$(this).attr("data")]);
		});
	}
		
	var classList = [
		["type","cms-btn-lightglay"		,41,3,60,21],
		["type","cms-btn-flat"			,104,3,60,21],
		["type","cms-btn-text-box"		,167,3,50,21],
		["type","cms-btn-text-white"	,224,3,49,21],
		["type","cms-btn-text-simple"	,280,3,45,21],
		
		["type","cms-btn-black"		,41,27,32,24],
		["type","cms-btn-white"		,75,27,32,24],
		["type","cms-btn-blue"		,109,27,32,24],
		["type","cms-btn-blue2"		,143,27,32,24],
		["type","cms-btn-green"		,177,27,32,24],
		["type","cms-btn-yellow"	,210,27,32,24],
		["type","cms-btn-orange"	,245,27,32,24],
		["type","cms-btn-red"		,279,27,32,24],
		["type","cms-btn-pink"		,313,27,32,24],
		
		["type","cms-btn-black-f"	,41,27+25,32,24],
		["type","cms-btn-white-f"	,75,27+25,32,24],
		["type","cms-btn-blue-f"	,109,27+25,32,24],
		["type","cms-btn-blue2-f"	,143,27+25,32,24],
		["type","cms-btn-green-f"	,177,27+25,32,24],
		["type","cms-btn-yellow-f"	,210,27+25,32,24],
		["type","cms-btn-orange-f"	,245,27+25,32,24],
		["type","cms-btn-red-f"		,279,27+25,32,24],
		["type","cms-btn-pink-f"	,313,27+25,32,24],
		
		["round","cms-btn-round-0"		,40,61+25,46,19],
		["round","cms-btn-round-5"		,86,61+25,46,19],
		["round","cms-btn-round-100"	,132,61+25,46,19],
		
		["size","cms-btn-size-ss"		,46,92+25,27,10],
		["size","cms-btn-size-s"		,76,91+25,32,12],
		["size","cms-btn-size-m"		,112,90+25,42,14],
		["size","cms-btn-size-l"		,158,88+25,52,17],
		["size","cms-btn-size-ll"		,214,85+25,62,21],

		["shadow","cms-btn-shadow-0"		,43,115+25,27,23],
		["shadow","cms-btn-shadow-1"		,73,115+25,27,23],
		["shadow","cms-btn-shadow-5"		,103,115+25,27,23],
		["shadow","cms-btn-shadow-10"		,133,115+25,27,23],
	];
	
	var currentClass = "";
	function addBtnClass(_s){
		var t = _s[0];
		var c = _s[1];
		var a = currentClass.split(" ");
		
		var types = {
			type:"",
			round:"",
			size:"",
			shadow:""
		}
		for (var i = 0; i < a.length ; i++) {
			for (var ii = 0; ii < classList.length ; ii++) {
				if(a[i] == classList[ii][1]){
					var _type = classList[ii][0]
					types[_type] = a[i]
				}
			}
		}
		
		types[t] = c;
		var ss = "";
		for (var n in types) {ss += types[n] + " " }
		setBtnClass(ss);
	}
	function setBtnClass(_c){
		currentClass = _c;
		v.link_class.val(currentClass);
		updateBtnClass();
	}
	function getData(){
		var o = {
			href	: defaultVal(v.link_href.val(),""),
			target	: defaultVal(v.link_tar.val(),""),
			attr	: defaultVal(v.link_attr.val(),""),
			text	: defaultVal(v.link_text.val(),""),
			class_	: defaultVal(v.link_class.val(),""),
			image	: defaultVal(v.link_image.val(),"")
		};
		return o
	}
	function getEmptyData(){
		var o = {
			href	: "",
			target	: "",
			attr	: "",
			text	: "",
			class_	: "",
			image	: ""
		};
		return o
	}
	
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
			callback(getData());
			stageOut()
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	var val
	function stageIn(_val,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			val = _val;
			callback = _callback;
			if(isFirst){createlayout();}
			isFirst = false;
			
			view.show();
			update();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
		}
	}
	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();


var Anchor_PageListView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Anchor_PageListView');
		stageInit();
	}
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_PageListView,view);

		var tag = ""
			tag = '<div class="_title">ページ選択</div>'
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag);
		
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		v._btn_close = view.find('._btn_close');
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		view.on("click",'._hasData',function(){ 
			clickText($(this).data("url"));
		});
		view.on("click",'._btn_link',function(event){ 
			var u = $(this).data("url");
			CMS_U.openURL_blank(u);
			event.stopPropagation();
			event.preventDefault();
		});
	}
	
	/* ---------- ---------- ---------- */
	//dir
	
	function update(){
		v.body.html(createPagelistBox);
	}
	
	var sitemapSelTag = ""
	function createPagelistBox(){
		sitemapSelTag = ""
		sitemapSelTag += "<table>"
		sitemapSelTag += "<tr>"
		sitemapSelTag += '<th>ページ名</th>'
		sitemapSelTag += '<th width="200">ファイル名</th>'
		sitemapSelTag += '<th width="70">リンク</th>'
		sitemapSelTag += "<tr>"
		
		createPagelistBox_core(CMS_Data.Sitemap.getFilelist(),0);
		sitemapSelTag += "</table>"
		return sitemapSelTag;
	}
	function createPagelistBox_core(_list,_deep){
		var dd = ""
		for (var i = 0; i < _deep ; i++) dd += "│ ";
		for (var i = 0; i < _list.length ; i++) {
			if(_list[i].list){
				if(_deep == 0) sitemapSelTag += '<tr><td>'+dd+'│ </td><td></td></tr>';
				var n = _list[i].name.split("<br>").join(" ");
				sitemapSelTag += '<tr class="_dirrow"><td colspan="3">'+dd+'├ <span class="_dir">'+ n +'</span></td></tr>'
				createPagelistBox_core(_list[i].list,_deep+1)
			} else{
				if(_list[i].type == Dic.ListType.PAGE){
					var n = _list[i].name.split("<br>").join(" ");
					var path = CMS_Path.PAGE.getAbsPath(_list[i].id,_list[i].dir);
					var pathRel = CMS_Path.PAGE.getRelPath(_list[i].id,_list[i].dir);
					path = path.substr(1,path.length)
					sitemapSelTag += '<tr class="_hasData" data-url="'+path+'">'
					sitemapSelTag += '<td class="_name">'+dd+"├ "+n+'</td>'
					sitemapSelTag += '<td class="_url">'+path+'</td>'
					sitemapSelTag += '<td class="_link"><div class="_cms_btn-nano _btn_link" data-url="'+pathRel+'"><i class="fa fa-external-link-square "></i> 開く</div></td>'
					sitemapSelTag += '</tr>'
				}
			}
		}
	}
	function clickText(_s){
		if(callback){
			UpdateDelay.delay(function(){
				callback(_s);
			});
		} else {
			CMS_CopyView.stageIn(_s,function(){})
		}
		stageOut()
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut()
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback = true;
	function stageInit(){
		view.hide();
		//load_dir();
	}
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			if(isFirst){
				createlayout();
			}
			update();
			isFirst = false;
			view.show();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	function resize(){
		if(isOpen){
		}
	}
	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();//modal
var Anchor_TargetListView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Anchor_TargetListView');
		stageInit();
	}
	
	var targeList = [
		["blank"	,"_blank"],
		["inner"	,"innerWindow({w:600,h:400})"],
		["none"		,""],
		["outer"	,"outerWindow({w:600,h:400})"]
	];
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_TargetListView,view);

		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/btn_target","_BASE_")+'</div>'
			tag += '<div class="_title">ターゲット選択</div>'
		v.header.html(tag);
		
		list = targeList;
		var tag = ""
		for (var i = 0; i < list.length ; i++) {
			var cb = ""
			if(list[i][1] != ""){
				cb = "_cms_btn_alpha"
			}
			tag +='<div class="'+cb+' ss_target ss_target_'+list[i][0]+'" data="'+list[i][1]+'"></div>'
		}
		v.body.html(tag); 
				
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		v._btn_close = view.find('._btn_close');
		setBtn();
	}
	
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		view.find("._cms_btn_alpha").click(function(){ 
			var type = $(this).attr("data");
			clickText(type);
		});
	}
	function clickText(_s){
		if(callback){
			UpdateDelay.delay(function(){
				callback(_s);
			});
		} else {
			CMS_CopyView.stageIn(_s,function(){})
		}
		stageOut()
	}
	
	/* ---------- ---------- ---------- */
	//dir
	
	function update(){
		//
	}
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		stageOut()
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback = true;
	var currentPath = "";
	function stageInit(){
		view.hide();
		//load_dir();
	}
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			if(isFirst){
				createlayout();
			}
			update();
			isFirst = false;
			view.show();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	function resize(){
		if(isOpen){
		}
	}
	return { init:init, stageIn:stageIn, stageOut:stageOut,	resize:resize,compliteEdit:compliteEdit}
})();//modal
var Preset_IconView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#Preset_IconView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Preset_IconView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/icon","_BASE_")+'</div>'
			tag += '<div class="_title">アイコンライブラリ</div>'
		v.header.html(tag);
		
			tag = ""
		v.body.html(tag)
		
		v.texts = view.find('._texts');
		v.status = view.find('._status');
					
			tag = ""
			tag += '<div class="_cms_btn _btn_close" '+TIP_ENTER+'>閉じる</div> ';
		v.footer.html(tag);
		createFontList();
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	function createFontList(){
		var tag = ""
		
		tag +='<div class="_p">サイト内では、オープンソースのウェブフォントFont Awesome ( http://fontawesome.io/ ) を利用できます。<br>'
		tag +='利用したいアイコンをコピーできます。本文やボタンはもちろん、メニューでも利用できます。</div>'
		tag +='<div class="_cols" style="margin:10px 0 0 0;">'
		tag +='	<div class="_col _sizeSelect"></div>'
		tag +='	<div class="_col _rotSelect"></div>'
		tag +='	<div class="_col _fixSelect"></div>'
		tag +='</div>'
		tag +='<div class="_searchArea" style="margin:5px 0;font-size:12px;">●絞り込み　　<input placeholder="arrow"></div>'
		tag +='<div class="_listArea"></div>'
		v.body.html(tag);
		
		v.searchArea = view.find('._searchArea input');
		v.listArea	 = view.find('._listArea');
		
		CMS_FormU.createCheckBox(
			view.find('._sizeSelect'),
			"●アイコンサイズ",
			[ '普通','1.3X','2X','3X','4X' ],
			0,
			function(_n){ setSize(_n) }
		)
		
		CMS_FormU.createCheckBox(
			view.find('._rotSelect'),
			"●回転",
			[ '普通','90度','180度','270度'/*,'横反転','縦反転' */],
			0,
			function(_n){ setRot(_n) }
		)
		CMS_FormU.createCheckBox(
			view.find('._fixSelect'),
			"●固定幅",
			[ '普通','固定幅' ],
			0,
			function(_n){ setFix(_n) }
		)
		
		v.searchArea.keyup(function(){
			searchIcon($(this).val());
		})
		
		view.on("click",'.fa',function(){ 
			var a = []
				a.push($(this).data("id"));
				a.push(sizeCs[currentSize]);
				a.push(rotCs[currentRot]);
				a.push(fixCs[currentFix]);
			var ss = a.join(" ");
				ss = ss.split("   ").join(" ")
				ss = ss.split("  ").join(" ")
			selectIcon ( '<i class="fa '+ ss +'"></i> ')
		});
		update();
		
	}
	function selectIcon(_s){
		if(callback){
				stageOut();
			UpdateDelay.delay(function(){
				callback(_s);
			});
		} else {
			CMS_CopyView.stageIn(_s,function(){})
		}
	}
	var searchString = "";
	function searchIcon(_s){
		searchString = _s;
		update()
	}
	
	/* ---------- ---------- ---------- */
	
	function update(){
		var fontList = ICON_FONT_LIST;
		var list = []
		for (var i = 0; i < fontList.length ; i++) {
			var b = false;
			var tag = "";
			tag += '<div class="_h2">'+fontList[i].title+"</div>"
			tag += '<div class="_g">'
			for (var ii = 0; ii < fontList[i].list.length ; ii++) {
				if(fontList[i].list[ii].indexOf(searchString) != -1){
					b = true;
					var a = [];
						a.push(fontList[i].list[ii]);
						a.push(sizeCs[currentSize]);
						a.push(rotCs[currentRot]);
						a.push(fixCs[currentFix]);
					tag += '<span><i class="fa '+ a.join(" ") +'" data-id="'+fontList[i].list[ii]+'"></i></span>'
				}
			}
			tag += '</div>'
			if(b) list.push(tag);
		}
		v.listArea.html(list.join(""));
	}
	
	/* ---------- ---------- ---------- */
	
	var sizeCs = ["","fa-lg", "fa-2x", "fa-3x", "fa-4x"];
	var rotCs = ["","fa-rotate-90", "fa-rotate-180", "fa-rotate-270"/*, "fa-flip-horizontal" ,"fa-flip-vertical"*/];
	var fixCs = ["","fa-fw"];

	var currentSize = 0;
	var currentRot = 0;
	var currentFix = 0;
	function setSize(_n){ currentSize = _n; update(); }
	function setRot(_n) { currentRot = _n; update(); }
	function setFix(_n) { currentFix = _n; update(); }
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			_callback = _callback ? _callback:null;
			callback = _callback;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize }
})();//modal


var ICON_FONT_LIST = [
	{
		title:"よく使うアイコン",
		list:[
			"fa-external-link",
			"fa-external-link-square",
			"fa-folder",
			"fa-folder-open",
			"fa-check",
			"fa-check-square",
			"fa-envelope",
			"fa-rss",
			"fa-rss-square",
			"fa-facebook",
			"fa-facebook-square",
			"fa-google-plus",
			"fa-google-plus-square",
			"fa-twitter",
			"fa-twitter-square",
			"fa-refresh",
			"fa-times",
			"fa-times-circle",
			"fa-warning"
		]
	},{
		title:"Web Application Icons",
		list:[
		"fa-adjust",
		"fa-anchor",
		"fa-archive",
		"fa-area-chart",
		"fa-arrows",
		"fa-arrows-h",
		"fa-arrows-v",
		"fa-asterisk",
		"fa-at",
		"fa-automobile (alias)",
		"fa-balance-scale",
		"fa-ban",
		"fa-bank (alias)",
		"fa-bar-chart",
		"fa-bar-chart-o (alias)",
		"fa-barcode",
		"fa-bars",
		"fa-battery-0 (alias)",
		"fa-battery-1 (alias)",
		"fa-battery-2 (alias)",
		"fa-battery-3 (alias)",
		"fa-battery-4 (alias)",
		"fa-battery-empty",
		"fa-battery-full",
		"fa-battery-half",
		"fa-battery-quarter",
		"fa-battery-three-quarters",
		"fa-bed",
		"fa-beer",
		"fa-bell",
		"fa-bell-o",
		"fa-bell-slash",
		"fa-bell-slash-o",
		"fa-bicycle",
		"fa-binoculars",
		"fa-birthday-cake",
		"fa-bluetooth",
		"fa-bluetooth-b",
		"fa-bolt",
		"fa-bomb",
		"fa-book",
		"fa-bookmark",
		"fa-bookmark-o",
		"fa-briefcase",
		"fa-bug",
		"fa-building",
		"fa-building-o",
		"fa-bullhorn",
		"fa-bullseye",
		"fa-bus",
		"fa-cab (alias)",
		"fa-calculator",
		"fa-calendar",
		"fa-calendar-check-o",
		"fa-calendar-minus-o",
		"fa-calendar-o",
		"fa-calendar-plus-o",
		"fa-calendar-times-o",
		"fa-camera",
		"fa-camera-retro",
		"fa-car",
		"fa-caret-square-o-down",
		"fa-caret-square-o-left",
		"fa-caret-square-o-right",
		"fa-caret-square-o-up",
		"fa-cart-arrow-down",
		"fa-cart-plus",
		"fa-cc",
		"fa-certificate",
		"fa-check",
		"fa-check-circle",
		"fa-check-circle-o",
		"fa-check-square",
		"fa-check-square-o",
		"fa-child",
		"fa-circle",
		"fa-circle-o",
		"fa-circle-o-notch",
		"fa-circle-thin",
		"fa-clock-o",
		"fa-clone",
		"fa-close (alias)",
		"fa-cloud",
		"fa-cloud-download",
		"fa-cloud-upload",
		"fa-code",
		"fa-code-fork",
		"fa-coffee",
		"fa-cog",
		"fa-cogs",
		"fa-comment",
		"fa-comment-o",
		"fa-commenting",
		"fa-commenting-o",
		"fa-comments",
		"fa-comments-o",
		"fa-compass",
		"fa-copyright",
		"fa-creative-commons",
		"fa-credit-card",
		"fa-credit-card-alt",
		"fa-crop",
		"fa-crosshairs",
		"fa-cube",
		"fa-cubes",
		"fa-cutlery",
		"fa-dashboard (alias)",
		"fa-database",
		"fa-desktop",
		"fa-diamond",
		"fa-dot-circle-o",
		"fa-download",
		"fa-edit (alias)",
		"fa-ellipsis-h",
		"fa-ellipsis-v",
		"fa-envelope",
		"fa-envelope-o",
		"fa-envelope-square",
		"fa-eraser",
		"fa-exchange",
		"fa-exclamation",
		"fa-exclamation-circle",
		"fa-exclamation-triangle",
		"fa-external-link",
		"fa-external-link-square",
		"fa-eye",
		"fa-eye-slash",
		"fa-eyedropper",
		"fa-fax",
		"fa-feed (alias)",
		"fa-female",
		"fa-fighter-jet",
		"fa-file-archive-o",
		"fa-file-audio-o",
		"fa-file-code-o",
		"fa-file-excel-o",
		"fa-file-image-o",
		"fa-file-movie-o (alias)",
		"fa-file-pdf-o",
		"fa-file-photo-o (alias)",
		"fa-file-picture-o (alias)",
		"fa-file-powerpoint-o",
		"fa-file-sound-o (alias)",
		"fa-file-video-o",
		"fa-file-word-o",
		"fa-file-zip-o (alias)",
		"fa-film",
		"fa-filter",
		"fa-fire",
		"fa-fire-extinguisher",
		"fa-flag",
		"fa-flag-checkered",
		"fa-flag-o",
		"fa-flash (alias)",
		"fa-flask",
		"fa-folder",
		"fa-folder-o",
		"fa-folder-open",
		"fa-folder-open-o",
		"fa-frown-o",
		"fa-futbol-o",
		"fa-gamepad",
		"fa-gavel",
		"fa-gear (alias)",
		"fa-gears (alias)",
		"fa-gift",
		"fa-glass",
		"fa-globe",
		"fa-graduation-cap",
		"fa-group (alias)",
		"fa-hand-grab-o (alias)",
		"fa-hand-lizard-o",
		"fa-hand-paper-o",
		"fa-hand-peace-o",
		"fa-hand-pointer-o",
		"fa-hand-rock-o",
		"fa-hand-scissors-o",
		"fa-hand-spock-o",
		"fa-hand-stop-o (alias)",
		"fa-hashtag",
		"fa-hdd-o",
		"fa-headphones",
		"fa-heart",
		"fa-heart-o",
		"fa-heartbeat",
		"fa-history",
		"fa-home",
		"fa-hotel (alias)",
		"fa-hourglass",
		"fa-hourglass-1 (alias)",
		"fa-hourglass-2 (alias)",
		"fa-hourglass-3 (alias)",
		"fa-hourglass-end",
		"fa-hourglass-half",
		"fa-hourglass-o",
		"fa-hourglass-start",
		"fa-i-cursor",
		"fa-image (alias)",
		"fa-inbox",
		"fa-industry",
		"fa-info",
		"fa-info-circle",
		"fa-institution (alias)",
		"fa-key",
		"fa-keyboard-o",
		"fa-language",
		"fa-laptop",
		"fa-leaf",
		"fa-legal (alias)",
		"fa-lemon-o",
		"fa-level-down",
		"fa-level-up",
		"fa-life-bouy (alias)",
		"fa-life-buoy (alias)",
		"fa-life-ring",
		"fa-life-saver (alias)",
		"fa-lightbulb-o",
		"fa-line-chart",
		"fa-location-arrow",
		"fa-lock",
		"fa-magic",
		"fa-magnet",
		"fa-mail-forward (alias)",
		"fa-mail-reply (alias)",
		"fa-mail-reply-all (alias)",
		"fa-male",
		"fa-map",
		"fa-map-marker",
		"fa-map-o",
		"fa-map-pin",
		"fa-map-signs",
		"fa-meh-o",
		"fa-microphone",
		"fa-microphone-slash",
		"fa-minus",
		"fa-minus-circle",
		"fa-minus-square",
		"fa-minus-square-o",
		"fa-mobile",
		"fa-mobile-phone (alias)",
		"fa-money",
		"fa-moon-o",
		"fa-mortar-board (alias)",
		"fa-motorcycle",
		"fa-mouse-pointer",
		"fa-music",
		"fa-navicon (alias)",
		"fa-newspaper-o",
		"fa-object-group",
		"fa-object-ungroup",
		"fa-paint-brush",
		"fa-paper-plane",
		"fa-paper-plane-o",
		"fa-paw",
		"fa-pencil",
		"fa-pencil-square",
		"fa-pencil-square-o",
		"fa-percent",
		"fa-phone",
		"fa-phone-square",
		"fa-photo (alias)",
		"fa-picture-o",
		"fa-pie-chart",
		"fa-plane",
		"fa-plug",
		"fa-plus",
		"fa-plus-circle",
		"fa-plus-square",
		"fa-plus-square-o",
		"fa-power-off",
		"fa-print",
		"fa-puzzle-piece",
		"fa-qrcode",
		"fa-question",
		"fa-question-circle",
		"fa-quote-left",
		"fa-quote-right",
		"fa-random",
		"fa-recycle",
		"fa-refresh",
		"fa-registered",
		"fa-remove (alias)",
		"fa-reorder (alias)",
		"fa-reply",
		"fa-reply-all",
		"fa-retweet",
		"fa-road",
		"fa-rocket",
		"fa-rss",
		"fa-rss-square",
		"fa-search",
		"fa-search-minus",
		"fa-search-plus",
		"fa-send (alias)",
		"fa-send-o (alias)",
		"fa-server",
		"fa-share",
		"fa-share-alt",
		"fa-share-alt-square",
		"fa-share-square",
		"fa-share-square-o",
		"fa-shield",
		"fa-ship",
		"fa-shopping-bag",
		"fa-shopping-basket",
		"fa-shopping-cart",
		"fa-sign-in",
		"fa-sign-out",
		"fa-signal",
		"fa-sitemap",
		"fa-sliders",
		"fa-smile-o",
		"fa-soccer-ball-o (alias)",
		"fa-sort",
		"fa-sort-alpha-asc",
		"fa-sort-alpha-desc",
		"fa-sort-amount-asc",
		"fa-sort-amount-desc",
		"fa-sort-asc",
		"fa-sort-desc",
		"fa-sort-down (alias)",
		"fa-sort-numeric-asc",
		"fa-sort-numeric-desc",
		"fa-sort-up (alias)",
		"fa-space-shuttle",
		"fa-spinner",
		"fa-spoon",
		"fa-square",
		"fa-square-o",
		"fa-star",
		"fa-star-half",
		"fa-star-half-empty (alias)",
		"fa-star-half-full (alias)",
		"fa-star-half-o",
		"fa-star-o",
		"fa-sticky-note",
		"fa-sticky-note-o",
		"fa-street-view",
		"fa-suitcase",
		"fa-sun-o",
		"fa-support (alias)",
		"fa-tablet",
		"fa-tachometer",
		"fa-tag",
		"fa-tags",
		"fa-tasks",
		"fa-taxi",
		"fa-television",
		"fa-terminal",
		"fa-thumb-tack",
		"fa-thumbs-down",
		"fa-thumbs-o-down",
		"fa-thumbs-o-up",
		"fa-thumbs-up",
		"fa-ticket",
		"fa-times",
		"fa-times-circle",
		"fa-times-circle-o",
		"fa-tint",
		"fa-toggle-down (alias)",
		"fa-toggle-left (alias)",
		"fa-toggle-off",
		"fa-toggle-on",
		"fa-toggle-right (alias)",
		"fa-toggle-up (alias)",
		"fa-trademark",
		"fa-trash",
		"fa-trash-o",
		"fa-tree",
		"fa-trophy",
		"fa-truck",
		"fa-tty",
		"fa-tv (alias)",
		"fa-umbrella",
		"fa-university",
		"fa-unlock",
		"fa-unlock-alt",
		"fa-unsorted (alias)",
		"fa-upload",
		"fa-user",
		"fa-user-plus",
		"fa-user-secret",
		"fa-user-times",
		"fa-users",
		"fa-video-camera",
		"fa-volume-down",
		"fa-volume-off",
		"fa-volume-up",
		"fa-warning (alias)",
		"fa-wheelchair",
		"fa-wifi",
		"fa-wrench",
			]
	},{
		title:"Hand Icons",
		list:[
		"fa-hand-grab-o (alias)",
		"fa-hand-lizard-o",
		"fa-hand-o-down",
		"fa-hand-o-left",
		"fa-hand-o-right",
		"fa-hand-o-up",
		"fa-hand-paper-o",
		"fa-hand-peace-o",
		"fa-hand-pointer-o",
		"fa-hand-rock-o",
		"fa-hand-scissors-o",
		"fa-hand-spock-o",
		"fa-hand-stop-o (alias)",
		"fa-thumbs-down",
		"fa-thumbs-o-down",
		"fa-thumbs-o-up",
		"fa-thumbs-up",
			]
	},{
		title:"Transportation Icons",
		list:[
		"fa-ambulance",
		"fa-automobile (alias)",
		"fa-bicycle",
		"fa-bus",
		"fa-cab (alias)",
		"fa-car",
		"fa-fighter-jet",
		"fa-motorcycle",
		"fa-plane",
		"fa-rocket",
		"fa-ship",
		"fa-space-shuttle",
		"fa-subway",
		"fa-taxi",
		"fa-train",
		"fa-truck",
		"fa-wheelchair",
			]
	},{
		title:"Gender Icons",
		list:[
		"fa-genderless",
		"fa-intersex (alias)",
		"fa-mars",
		"fa-mars-double",
		"fa-mars-stroke",
		"fa-mars-stroke-h",
		"fa-mars-stroke-v",
		"fa-mercury",
		"fa-neuter",
		"fa-transgender",
		"fa-transgender-alt",
		"fa-venus",
		"fa-venus-double",
		"fa-venus-mars",
			]
	},{
		title:"File Type Icons",
		list:[
		"fa-file",
		"fa-file-archive-o",
		"fa-file-audio-o",
		"fa-file-code-o",
		"fa-file-excel-o",
		"fa-file-image-o",
		"fa-file-movie-o (alias)",
		"fa-file-o",
		"fa-file-pdf-o",
		"fa-file-photo-o (alias)",
		"fa-file-picture-o (alias)",
		"fa-file-powerpoint-o",
		"fa-file-sound-o (alias)",
		"fa-file-text",
		"fa-file-text-o",
		"fa-file-video-o",
		"fa-file-word-o",
		"fa-file-zip-o (alias)",
			]
	},{
		title:"Spinner Icons",
		list:[
		"fa-circle-o-notch",
		"fa-cog",
		"fa-gear (alias)",
		"fa-refresh",
		"fa-spinner",
			]
	},{
		title:"Form Control Icons",
		list:[
		"fa-check-square",
		"fa-check-square-o",
		"fa-circle",
		"fa-circle-o",
		"fa-dot-circle-o",
		"fa-minus-square",
		"fa-minus-square-o",
		"fa-plus-square",
		"fa-plus-square-o",
		"fa-square",
		"fa-square-o",
			]
	},{
		title:"Payment Icons",
		list:[
		"fa-cc-amex",
		"fa-cc-diners-club",
		"fa-cc-discover",
		"fa-cc-jcb",
		"fa-cc-mastercard",
		"fa-cc-paypal",
		"fa-cc-stripe",
		"fa-cc-visa",
		"fa-credit-card",
		"fa-credit-card-alt",
		"fa-google-wallet",
		"fa-paypal",
			]
	},{
		title:"Chart Icons",
		list:[
		"fa-area-chart",
		"fa-bar-chart",
		"fa-bar-chart-o (alias)",
		"fa-line-chart",
		"fa-pie-chart",
			]
	},{
		title:"Currency Icons",
		list:[
		"fa-bitcoin (alias)",
		"fa-btc",
		"fa-cny (alias)",
		"fa-dollar (alias)",
		"fa-eur",
		"fa-euro (alias)",
		"fa-gbp",
		"fa-gg",
		"fa-gg-circle",
		"fa-ils",
		"fa-inr",
		"fa-jpy",
		"fa-krw",
		"fa-money",
		"fa-rmb (alias)",
		"fa-rouble (alias)",
		"fa-rub",
		"fa-ruble (alias)",
		"fa-rupee (alias)",
		"fa-shekel (alias)",
		"fa-sheqel (alias)",
		"fa-try",
		"fa-turkish-lira (alias)",
		"fa-usd",
		"fa-won (alias)",
		"fa-yen (alias)",
			]
	},{
		title:"Text Editor Icons",
		list:[
		"fa-align-center",
		"fa-align-justify",
		"fa-align-left",
		"fa-align-right",
		"fa-bold",
		"fa-chain (alias)",
		"fa-chain-broken",
		"fa-clipboard",
		"fa-columns",
		"fa-copy (alias)",
		"fa-cut (alias)",
		"fa-dedent (alias)",
		"fa-eraser",
		"fa-file",
		"fa-file-o",
		"fa-file-text",
		"fa-file-text-o",
		"fa-files-o",
		"fa-floppy-o",
		"fa-font",
		"fa-header",
		"fa-indent",
		"fa-italic",
		"fa-link",
		"fa-list",
		"fa-list-alt",
		"fa-list-ol",
		"fa-list-ul",
		"fa-outdent",
		"fa-paperclip",
		"fa-paragraph",
		"fa-paste (alias)",
		"fa-repeat",
		"fa-rotate-left (alias)",
		"fa-rotate-right (alias)",
		"fa-save (alias)",
		"fa-scissors",
		"fa-strikethrough",
		"fa-subscript",
		"fa-superscript",
		"fa-table",
		"fa-text-height",
		"fa-text-width",
		"fa-th",
		"fa-th-large",
		"fa-th-list",
		"fa-underline",
		"fa-undo",
		"fa-unlink (alias)",
			]
	},{
		title:"Directional Icons",
		list:[
		"fa-angle-double-down",
		"fa-angle-double-left",
		"fa-angle-double-right",
		"fa-angle-double-up",
		"fa-angle-down",
		"fa-angle-left",
		"fa-angle-right",
		"fa-angle-up",
		"fa-arrow-circle-down",
		"fa-arrow-circle-left",
		"fa-arrow-circle-o-down",
		"fa-arrow-circle-o-left",
		"fa-arrow-circle-o-right",
		"fa-arrow-circle-o-up",
		"fa-arrow-circle-right",
		"fa-arrow-circle-up",
		"fa-arrow-down",
		"fa-arrow-left",
		"fa-arrow-right",
		"fa-arrow-up",
		"fa-arrows",
		"fa-arrows-alt",
		"fa-arrows-h",
		"fa-arrows-v",
		"fa-caret-down",
		"fa-caret-left",
		"fa-caret-right",
		"fa-caret-square-o-down",
		"fa-caret-square-o-left",
		"fa-caret-square-o-right",
		"fa-caret-square-o-up",
		"fa-caret-up",
		"fa-chevron-circle-down",
		"fa-chevron-circle-left",
		"fa-chevron-circle-right",
		"fa-chevron-circle-up",
		"fa-chevron-down",
		"fa-chevron-left",
		"fa-chevron-right",
		"fa-chevron-up",
		"fa-exchange",
		"fa-hand-o-down",
		"fa-hand-o-left",
		"fa-hand-o-right",
		"fa-hand-o-up",
		"fa-long-arrow-down",
		"fa-long-arrow-left",
		"fa-long-arrow-right",
		"fa-long-arrow-up",
		"fa-toggle-down (alias)",
		"fa-toggle-left (alias)",
		"fa-toggle-right (alias)",
		"fa-toggle-up (alias)",
		"fa-Video Player Icons",
	
		"fa-arrows-alt",
		"fa-backward",
		"fa-compress",
		"fa-eject",
		"fa-expand",
		"fa-fast-backward",
		"fa-fast-forward",
		"fa-forward",
		"fa-pause",
		"fa-pause-circle",
		"fa-pause-circle-o",
		"fa-play",
		"fa-play-circle",
		"fa-play-circle-o",
		"fa-random",
		"fa-step-backward",
		"fa-step-forward",
		"fa-stop",
		"fa-stop-circle",
		"fa-stop-circle-o",
		"fa-youtube-play",
			]
	},{
		title:"Brand Icons",
		list:[
		"fa-500px",
		"fa-adn",
		"fa-amazon",
		"fa-android",
		"fa-angellist",
		"fa-apple",
		"fa-behance",
		"fa-behance-square",
		"fa-bitbucket",
		"fa-bitbucket-square",
		"fa-bitcoin (alias)",
		"fa-black-tie",
		"fa-bluetooth",
		"fa-bluetooth-b",
		"fa-btc",
		"fa-buysellads",
		"fa-cc-amex",
		"fa-cc-diners-club",
		"fa-cc-discover",
		"fa-cc-jcb",
		"fa-cc-mastercard",
		"fa-cc-paypal",
		"fa-cc-stripe",
		"fa-cc-visa",
		"fa-chrome",
		"fa-codepen",
		"fa-codiepie",
		"fa-connectdevelop",
		"fa-contao",
		"fa-css3",
		"fa-dashcube",
		"fa-delicious",
		"fa-deviantart",
		"fa-digg",
		"fa-dribbble",
		"fa-dropbox",
		"fa-drupal",
		"fa-edge",
		"fa-empire",
		"fa-expeditedssl",
		"fa-facebook",
		"fa-facebook-f (alias)",
		"fa-facebook-official",
		"fa-facebook-square",
		"fa-firefox",
		"fa-flickr",
		"fa-fonticons",
		"fa-fort-awesome",
		"fa-forumbee",
		"fa-foursquare",
		"fa-ge (alias)",
		"fa-get-pocket",
		"fa-gg",
		"fa-gg-circle",
		"fa-git",
		"fa-git-square",
		"fa-github",
		"fa-github-alt",
		"fa-github-square",
		"fa-gittip (alias)",
		"fa-google",
		"fa-google-plus",
		"fa-google-plus-square",
		"fa-google-wallet",
		"fa-gratipay",
		"fa-hacker-news",
		"fa-houzz",
		"fa-html5",
		"fa-instagram",
		"fa-internet-explorer",
		"fa-ioxhost",
		"fa-joomla",
		"fa-jsfiddle",
		"fa-lastfm",
		"fa-lastfm-square",
		"fa-leanpub",
		"fa-linkedin",
		"fa-linkedin-square",
		"fa-linux",
		"fa-maxcdn",
		"fa-meanpath",
		"fa-medium",
		"fa-mixcloud",
		"fa-modx",
		"fa-odnoklassniki",
		"fa-odnoklassniki-square",
		"fa-opencart",
		"fa-openid",
		"fa-opera",
		"fa-optin-monster",
		"fa-pagelines",
		"fa-paypal",
		"fa-pied-piper",
		"fa-pied-piper-alt",
		"fa-pinterest",
		"fa-pinterest-p",
		"fa-pinterest-square",
		"fa-product-hunt",
		"fa-qq",
		"fa-ra (alias)",
		"fa-rebel",
		"fa-reddit",
		"fa-reddit-alien",
		"fa-reddit-square",
		"fa-renren",
		"fa-safari",
		"fa-scribd",
		"fa-sellsy",
		"fa-share-alt",
		"fa-share-alt-square",
		"fa-shirtsinbulk",
		"fa-simplybuilt",
		"fa-skyatlas",
		"fa-skype",
		"fa-slack",
		"fa-slideshare",
		"fa-soundcloud",
		"fa-spotify",
		"fa-stack-exchange",
		"fa-stack-overflow",
		"fa-steam",
		"fa-steam-square",
		"fa-stumbleupon",
		"fa-stumbleupon-circle",
		"fa-tencent-weibo",
		"fa-trello",
		"fa-tripadvisor",
		"fa-tumblr",
		"fa-tumblr-square",
		"fa-twitch",
		"fa-twitter",
		"fa-twitter-square",
		"fa-usb",
		"fa-viacoin",
		"fa-vimeo",
		"fa-vimeo-square",
		"fa-vine",
		"fa-vk",
		"fa-wechat (alias)",
		"fa-weibo",
		"fa-weixin",
		"fa-whatsapp",
		"fa-wikipedia-w",
		"fa-windows",
		"fa-wordpress",
		"fa-xing",
		"fa-xing-square",
		"fa-y-combinator",
		"fa-y-combinator-square (alias)",
		"fa-yahoo",
		"fa-yc (alias)",
		"fa-yc-square (alias)",
		"fa-yelp",
		"fa-youtube",
		"fa-youtube-play",
		"fa-youtube-square",
			]
	},{
		title:"Medical Icons",
		list:[
		"fa-ambulance",
		"fa-h-square",
		"fa-heart",
		"fa-heart-o",
		"fa-heartbeat",
		"fa-hospital-o",
		"fa-medkit",
		"fa-plus-square",
		"fa-stethoscope",
		"fa-user-md",
		"fa-wheelchair",
			]
	}
]








var ServerInfoView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#ServerInfoView');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(EmbedTagListView,view);
		var tag = ""
			tag += '<div class="_title">サーバー情報</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		
		setBtn();
		
	}
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });

	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	
	function render(){
		var u = "storage.php?action=info";
		var tag = "";
			//
			tag += '<div class="_h2">PHP INFO</div>'
			tag += '<div class="_p"><iframe id="myFrame" class="" src ="'+u+'" ></iframe></div>'
			tag += '<div style="text-align:right;"><a href="'+u+'" target="_blank">別ウィンドウで見る <i class="fa fa-external-link-square "></i></a></div>'
			//
			tag += '<div class="_h2">その他</div>'
			if(window.IS_ESCAPE_WAF){
				tag += '<div class="_p _anno">'
				tag += '<b>WAF機能が有効です</b><br>'
				tag += 'このサーバーはWAF機能が有効のため、WAF機能を回避するモードで動作しています。<br>'
				tag += 'その場合、通常より保存・公開処理にかかる時間が少し増えます。<br>'
				tag += '</div>'
					
				tag += '<div class="_p"><b>WAF機能をOFF (無効) にするには</b><br>'
				tag += 'レンタルサーバーを利用であれば、各サーバー会社さまの管理画面より、WAF機能をOFFにしてください。<br>';
				tag += '( OFFにしても、反映されるまで5分〜1時間程度、時間がかかります )<br>';
				tag += '独自サーバーの場合は、サーバー管理者に相談してください。';
				tag += '</div>'
			} else{
				tag += '<div class="_p">とくにありません</div>'
			}
		v.body.html(tag);
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				render()
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var SitemapEditView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#SitemapEditView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(SitemapEditView,view);
		var tag = ""
			tag = '<div class="_title">まとめて編集</div>'
		v.header.html(tag);
		
			tag = ''
			tag += '<div class="_read">ページ情報を一括で編集できます。ディレクトリはこの画面では編集できません。<br>'
			tag += '同一のディレクトリ名+ページ名にならないように入力してください。</div>'
			tag += '<div class="_replaceList"></div>'
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '<div class="_cms_btn _cms_btn_active blue _btn_do">変更する</div> ';
		v.footer.html(tag)
		
		v.replaceList = view.find('._replaceList');
		v.textarea	 = view.find('textarea');
		setBtn();
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._bg ,._btn_do').click(function(){ clickDone() });
		
		view.on("keyup","._in_id",function(){ 
			var s = FileInfo_CheckID.checkValidID($(this).val())
			$(this).parent().find("._anno").html(s);
		});
		
		view.on("click","._editFile_dir_wap",function(){ 
			var tar = $(this).find("._editFile_dir")
			var val = tar.data("path");
			DirListView.stageIn(val,function(_s){
				tar.data("path" ,_s);
				tar.text(_s);
			})
		});
	}
	
	/* ---------- ---------- ---------- */
	//データ表示
	
	
	function getVal(_i,_v,_id){
		if(_v[_id] ==undefined) _v[_id] = "";
		var uid = "_list_" + nodeList.length;
		var val = _v[_id];
		var tag = ""
		if(_id == "dir"){
			var dir = FileInfoU.getDirPath(_v);
			tag += '<div class="_editFile_dir_wap"><span class="_icon_dir"></span><span class="_editFile_dir" data-path="'+dir+'">' + dir + '</span></div>'
		}
		if(_id == "id"){
			tag += '<input class="_in_id '+uid+'" placeholder="">'
			tag += '<div class="_anno"></div>'
		}
		if(_id == "name"){
			tag += '<input class="_in_name '+uid+'" placeholder="ページ名">'
		}
		if(_id == "tag"){
			tag += '<i class="fa fa-tags "></i> '
			tag += '<input class="_in_tag '+uid+'" list="tagDatalist" placeholder="国際,経済,スポーツ">'
		}
		if(_id == "date"){
			var dd = DateUtil.getFormattedDate(new Date(),"YYYY/MM/DD");
			tag += '<i class="fa fa-clock-o"></i> '
			tag += '<input class="_in_date '+uid+'" placeholder="'+dd+'">'
		}
		nodeList.push([uid,val]);
		return tag;
	}
	
	var listTags;
	function getDD(_item,_deep,_i){
		var tag = "";
		var ddD = ""
		var ddP = ""
		if(_deep != 0){
			for (var i = 1; i <  _deep ; i++) {
				ddD += "│";
				ddP += "│";
			}
			ddD += "├ ";
			ddP += "├ ";
		}
		if(_item.type == Dic.ListType.DIR){
			tag +='	<tr class="_item _dir level-'+_deep+'">'
			tag += '	<th data-no="'+_i+'">'+(_i+1)+'</th>' 
			tag += '	<td>'
			tag += '	<table><tr>'
			tag += '		<td><span class="_tree">' +ddD + '</span> </td>'
			tag += '		<td><i class="fa fa-folder-open fa-lg"></i> </td>'
			tag += '		<td><b>' + _item.name + '</b></td>'
			tag += '	</tr></table>'
			tag += '	</td>'
			tag += '</tr>'
		}

		if(_item.type == Dic.ListType.PAGE){
			tag +='	<tr class="_item _page">'
			tag += '	<th data-no="'+_i+'">'+(_i+1)+'</th>' 
			tag += '	<td>'
			tag += '	<table><tr>'
			tag += '	<td><span class="_tree">' +ddP + '</span> </td>'
			tag += '	<td><i class="fa fa-file-text fa-lg"></i> </td>'
			tag += '	<td>' + getVal(_i,_item,"name") + '</td>'
			tag += '	<td style="background:#e7ebf2;">'
			tag += '		<table>';
			tag += '			<tr>';
			tag += '				<td>'+getVal(_i,_item,"dir") +'</td>';
			tag += '				<td>'+getVal(_i,_item,"id")+'</td>';
			tag += '				<td>.html</td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '	<td>' + getVal(_i,_item,"tag") + '</td>'
			tag += '	<td>' + getVal(_i,_item,"date") + '</td>'
			tag += '	</tr></table>'
			tag += '</tr>'
		}
		if(_item.type == Dic.ListType.HTML){
		}
		
		listTags.push(tag);
		mapTable.push(_item);
		cnt++;
	}
	
	var cnt
	function getList(_list,_deep){
		var d = new Date();
		for (var i = 0; i <  _list.length ; i++) {
			getDD(_list[i],_deep,cnt);
			if(_list[i].type==Dic.ListType.DIR){
				getList(_list[i].list , _deep+1);
			}
		}
	}

	/* ---------- ---------- ---------- */
	
	var nodeList = [];
	var mapTable;
	var param;
	function update(_param){
		param = _param;
		//
		cnt = 0;
		mapTable = [];
		listTags = [];
		listTags.push('<table class="_mainList">');
		if(param.id == "sitemap_root"){
			getList(param.list,0);
		} else{
			getList([param],0);
		}
		listTags.push('</table>');
		v.replaceList.html(listTags.join("\n"));
		
		for (var i = 0; i <  nodeList.length ; i++) {
			v.replaceList.find("." + nodeList[i][0]).val(nodeList[i][1]);
		}
	}
	
	/* ---------- ---------- ---------- */
	//データ書き出し
	
	function clickDone(){
		if(window.isLocked(true))return;
		//
		changeFileNameList = [];
		getData();
		callback(param,changeFileNameList);
		stageOut()
	}
	function getData(){
		v.table = view.find("table._mainList");
		v.tr = v.table.find("tr._item")
		v.tr.each(function (index, dom) {
			getTRDat($(this))
		});
	}
	var changeFileNameList = []
	function getTRDat(_tar){
		var uid = Number(_tar.find("th").data("no"));
		if(mapTable[uid].type == Dic.ListType.PAGE){
			//DIR & ID
			var dir = FileInfoU.getDirVal(_tar.find("._editFile_dir").data("path"));
			var id = _tar.find("input._in_id").val();
			var b = false;
			if(dir != mapTable[uid].dir) b = true;
			if(id != mapTable[uid].id) b = true;
			if(b){
				changeFileNameList.push({
					old_: {
						dir: mapTable[uid].dir,
						id: mapTable[uid].id
					},
					new_: {
						dir: dir,
						id: id
					}
				})
			}
			mapTable[uid].dir = dir
			mapTable[uid].id 		= _tar.find("input._in_id").val();
			mapTable[uid].name 		= _tar.find("input._in_name").val();
			mapTable[uid].tag 		= _tar.find("input._in_tag").val();
			mapTable[uid].date 		= _tar.find("input._in_date").val();
			if(mapTable[uid].tag == "") delete mapTable[uid].tag
			if(mapTable[uid].date == "")  delete mapTable[uid].date
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_param,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			update(_param);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
			//
			nodeList = [];
			v.replaceList.empty()
		}
	}
	function resize(){
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize }
})();

var PresetStageView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#PresetStageView');
		
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){

		var tag = "";
			tag += '<div class="_bg"></div>';
			tag += '<div class="_modalBox">';
			tag += '	<div class="_body">';
			tag += '		<div id="PresetStage_PagesView"></div>';
			tag += '	</div>';
			tag += '	<div class="_navi">';
			tag += '		<div id="PresetStage_PageListView"></div>';
			tag += '	</div>';
			tag += '	<div class="_btn_add_dis">配置<br>する</div>';
			tag += '	<div class="_btn_add ">配置<br>する</div>';
			tag += '</div>';
			tag += '<div class="_btn_close">閉じる</div>';
		view.html(tag);
		
		//
		PresetStage_PagesView.init();
		PresetStage_PageListView.init();
		PresetStage_PageListView.stageIn();
		
		v.btn_disable = view.find("._btn_add_dis");
		v.btn_active = view.find("._btn_add");
		v.btn_active.hide();
		
		setBtn();
	}

	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._btn_add').click(function(){ addBlock() });
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	function openPage(_param){
		PresetStage_PagesView.stageOut();
		PresetStage_PagesView.stageIn(_param);
	}
	
	function addBlock(){
		window.sc.copyCurrent();
		stageOut();
		setTimeout(function(){
			var param = JSON.parse(CMS_Status.clipBord);
			AddElementsManager.addElement_by_object(param);
		},200);
		//ページが空のときや、選択がないときも、実装する
	}

	function select(){
		v.btn_disable.hide()
		v.btn_active.show()
	}
	function unselect(){
		v.btn_disable.show()
		v.btn_active.hide()
	}

	function save (){ 
		PresetStage_PagesView.save();
	}
		
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
		
			if(isFirst){
				createlayout();
			}
			unselect();
			
			CMS_KeyManager.setType("preset");
			//プリセットビュー表示時は、ページステートOFF
			EditableView.PageViewState.setOff();
			InspectView.stageOut();
			InspectView.addSelectCallback(PresetStageView);
			CMS_Header.stageOut();
			view.show();
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
			
			CMS_KeyManager.setType("");
			InspectView.stageOut();
			InspectView.resetSelectCallback();
			CMS_Header.stageIn();
			//ページステートもとに戻す 
			EditableView.PageViewState.setOn();
			
		}
	}

	return {
		init: init,
		openPage: openPage,
		select: select,
		unselect: unselect,
		save: save,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();



	
var PresetStage_PageListView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#PresetStage_PageListView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var gloups = PRESET_PAGE_LIST;
		
		var tag = ''
			tag += '<div class="_header">'
			tag += '	<div class="_title">プリセット</div>'
			tag += '</div>';
			tag += '<div class="_inner _simple-scroll">';
			
		for (var g = 0; g < gloups.length ; g++) {
			tag += '<div class="_gloup_name">'+gloups[g].name+'</div>'
			var list = gloups[g].list;
			tag += '<div class="_page_items">'
			for (var i = 0; i < list.length ; i++) {
				var tar = list[i];
				var id = "_preset_list_" +tar.id;
				tag += '<div class="_item" id="'+id+'"+ data-id="'+tar.id+'" data-name="'+tar.name+'">';
				tag += '<i class="fa fa-file-text" style="margin:2px 2px 0 2px;"></i> ';
				tag +=  list[i].name;
				tag += '</div>';
			}
			tag += "</div>";
		}
			tag += "</div>";
			
		view.html(tag);
		
		v.item = view.find("._item"); 
		v.item.click(function(){
			var tar = $(this);
			openPage( tar.data("id") , tar.data("name") );
		});
		v.item.eq(0).click();
		
		setBtn();
	}

	function setBtn(){
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	var current 
	function openPage(_id,_name){
		var param =  {
			type: Dic.PageType.PRESET,
			dir: Dic.DirName.PRESET,
			id:_id, 
			name:_name
		}
		if(current){
			current.removeClass("_current")
		}
		current = view.find("#_preset_list_"+_id);
		current.addClass("_current");
		
		PresetStageView.openPage(param);
	}
	
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
		
			view.show();
			if(isFirst){
				createlayout();
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();


var PresetStage_PagesView 		 = (function(){

	var view;

	function init(){
		view = $('#PresetStage_PagesView');
	}
	
	/* ---------- ---------- ---------- */
 	
	function _has_ps (_id){
		for (var i = 0; i < _ids.length ; i++) {
			if(_ids[i] == _id) return true;
		}
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	var _ids = [];
	var _ps = [];
	var _current;
	
	function openPage (_param){
		if(_has_ps(_param.id) == false){
			_ids.push(_param.id);
			_ps.push(new PresetStage_PageClass(view, _param));
		}
		for (var i = 0; i < _ids.length ; i++) {
			if(_ids[i] == _param.id) {
				_current = _ps[i];
				_ps[i].stageIn();
			} else{
				_ps[i].stageOut();
			}
		}
		
	}
	function save (){ 
		if(_current){
			_current.saveData();
		}
	}

	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_pageModel){
		if(! isOpen){ isOpen = true;
			view.show();
			openPage(_pageModel);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return {
		init: init,
		save: save,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();



var PresetStage_PageClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view,_pageModel) {
	  this.init(_view,_pageModel);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_view,_pageModel) {
		this.parentView = _view;
		this.pageModel 	= _pageModel;
		this.id 		= this.pageModel.id;
		this.dir 		= this.pageModel.dir;
		this.type 		= this.pageModel.type;
		
		var this_ 		= this;
		this.storageClass = new Storage.Online(this.type, this.id, this.dir, {});
		this.storageClass.load(function() {
			this_.loadData();
		});
	}
	
	p.loadData = function() {
		this.pageView = new EditableView.PageView (this.pageModel,this.storageClass,this.parentView);
		this.pageView.stageIn();
	}
	p.saveData =function () { if(this.pageView) this.pageView.saveData() }
	
	/* ---------- ---------- ---------- */

	p.stageInit = function() {}
	
	p.stageIn = function() {
		if(this.pageView){
			this.pageView.stageIn();
		}
	}
	p.stageOut = function() {
		if(this.pageView){
			this.pageView.stageOut();
		}
	}
	p.remove = function() {
		if(this.pageView){
			this.isShow = false;
			this.pageView.remove();
		}
	}
	return c;
})();



var GadgetListView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#GadgetListView');
		stageInit();
		//stageIn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(GadgetListView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("block/gadget","_BASE_")+'</div>'
			tag += '<div class="_title">ガジェットブロックなど</div>'
		v.header.html(tag);
		
		var tag = ""
		tag += '<div class="_tabs">'
		tag += '	<div class="_tt">組込み<br>ブロック</div>'
		tag += '	<div class="_tab" data-no="0">ガジェット<span>ブロック</span></div>'
		tag += '	<div class="_tab" data-no="1">カスタムリスト<span>ブロック</span></div>'
		tag += '	<div class="_tab" data-no="2">Myタグ<span>ブロック</span></div>'
		tag += '	<div class="_tab" data-no="3">データ<span>ブロック</span></div>'
		tag += '	<div class="_tab" data-no="4" style="float:right;margin-right:20px;">オリジナル<span>ブロック</span></div>'
		tag += '</div>'
		tag += '<div class="_gad_blocks">'
		
		/* ---------- ---------- ---------- */
		
		var list =  [
			["news"			,"object.news"],
			["newsB"		,"object.newsB"],
			["tab"			,"object.tabList"],
			["qa"			,"object.dl"],
			["talk"			,"object.talk"],
			
			["share"		,"object.share"],
			["slide"		,"object.photos"],
			["slide2"		,"object.slides"],
			["carrousel"	,"object.carrousel"],
			["pagenation"	,"object.pagenation"],
			["feed"			,"object.feed"],
			["formmail"		,"object.formMail"],
			["pageLink"		,"object.pageLink"]
		];
		tag += '<div class="_gad_block">'
		tag += '<div class="_read">スライダーやニュースなどの、便利なブロックです。</div>'
		for (var i = 0; i < list.length ; i++) {
			if(list[i][1] == ""){
				tag +='<br>'
			} else{
				tag +='<div class="_cms_btn_alpha ss_gadget _'+list[i][0]+'" data="'+list[i][1]+'"></div>'
			}
		}
		tag += "</div>"
		
		/* ---------- ---------- ---------- */
	
		tag += '<div class="_gad_block">'
		
		tag += '<table>'
		tag += '	<tr>'
		tag += '		<th><div class=" ss_gadget _repeat"></div></th>'
		tag += '		<td>'
		tag += '			<div class="_read">カスタムリストブロックを追加します。</div>'
		tag += '			<div class="_read">以下のプリセットからも追加できます。<br>　　<i class="fa fa-arrow-down "></i> </div>'
		tag += '		</td>'
		tag += '	</tr>'
		tag += '</table>'
		tag += '	<div class="_repeat_area">';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _T_01" data-id="T_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _T_02" data-id="T_02"></div>';
		
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _B_01" data-id="B_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _B_02" data-id="B_02"></div>';
		
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _Z_01" data-id="Z_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _Z_02" data-id="Z_02"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _Z_03" data-id="Z_03"></div>';
		
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _I_01" data-id="I_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _I_02" data-id="I_02"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _I_03" data-id="I_03"></div>';
		
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _L_01" data-id="L_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _L_02" data-id="L_02"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _L_03" data-id="L_03"></div>';
		
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _R_01" data-id="R_01"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _R_02" data-id="R_02"></div>';
		tag += '	<div class="_cms_btn_alphaS ss_preset_temp _R_03" data-id="R_03"></div>';
		tag += '	</div>';
		tag += "</div>"
		
		/* ---------- ---------- ---------- */
		//Myタグ定義ブロック
		
		var list =  [
			["replace_div"		,"replace.div"],
			["replace_text"		,"object.replaceTexts"]
		]
		
		tag += '<div class="_gad_block">'
		tag += '<div class="_read">Myタグを定義するブロックと、Myタグ関連のブロックです。</div>'
		tag += '<div class="_read"><b>● Myタグ定義</b></div>'
		for (var i = 0; i < list.length ; i++) {
			tag +='<div class="_cms_btn_alpha ss_gadget _'+list[i][0]+'" data="'+list[i][1]+'"></div>'
		}
		var list =  [
			["js"				,"tag.js"],
			["tree"				,"object.tree"],
		]
		tag += '<div class="_read"><b>● Myタグ内に配置するブロック</b></div>'
		for (var i = 0; i < list.length ; i++) {
			tag +='<div class="_cms_btn_alpha ss_gadget _'+list[i][0]+'" data="'+list[i][1]+'"></div>'
		}
		var list =  [
			["hina"				,"object.hinagata"]
		]
		tag += '<div class="_read"><b>● Myタグを利用するブロック</b></div>'
		for (var i = 0; i < list.length ; i++) {
			tag +='<div class="_cms_btn_alpha ss_gadget _'+list[i][0]+'" data="'+list[i][1]+'"></div>'
		}
		tag += "</div>"
			
		/* ---------- ---------- ---------- */
		//データブロック
		
		var list  =  [
			["csv"			,"object.data_csv"],
			["json"			,"object.data_json"],
			["xml"			,"object.data_xml"],
			["rss"			,"object.data_rss"],
			["text"			,"object.data_text"]
		];
		tag += '<div class="_gad_block">'
		tag += '<div class="_read">外部データファイル作成用のブロックで、ブロック情報パネルから書き出します。</div>'
		for (var i = 0; i < list.length ; i++) {
			if(list[i][1] == ""){
				tag +='<br>'
			} else{
				tag +='<div class="_cms_btn_alpha ss_gadget _'+list[i][0]+'" data="'+list[i][1]+'"></div>'
			}
		}
		tag += "</div>"
		
		/* ---------- ---------- ---------- */
		
		var list = PageElement_DIC;
		tag += '<div class="_gad_block">'
		tag += '<div class="_read">CMS組込みブロック以外に、独自に追加したブロックの一覧です。</div>'
		tag += '<div class="_read">/_cms/js/cms.free.jsで定義します。</div>'
		for (var i = 0; i < list.length ; i++) {
			if(list[i].custom){
				tag +='<div class="_cms_btn_alpha _btn_custom" data="'+list[i].type+'">'
				tag +='<div class="_t1">' + list[i].name + '</div>';
				tag +='<div class="_t2">' + list[i].name2 + '</div>';
				tag +='</div>';
			}
		}
		tag += "</div>"
		
		
		/* ---------- ---------- ---------- */
		
		tag += "</div>"
		
		v.body.html(tag); 

			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		v.gad_block = view.find("._gad_block"); 
		
		v.tab = view.find("._tab"); 
		v.tab.click(function(){ 
			var no = $(this).data("no");
			openTab(no);
		});
		
		view.find("._cms_btn_alpha").click(function(){ 
			var type = $(this).attr("data");
			callback(type);
			stageOut();
		});
		
		view.find('.ss_preset_temp').click(function(){
			addPreset($(this).data("id"))
		});
		
		setBtn();
		openTab(0);
		
	}
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	
	/* ---------- ---------- ---------- */
	
	function openTab(_n){
		v.tab.removeClass("_current").eq(_n).addClass("_current");
		v.gad_block.hide().eq(_n).show();
	}
	
	/* ---------- ---------- ---------- */
	
	var presets = {
			// param.g = 3-1;//絡む
			// param.w = 0;//枠+背景
			// param.l = 2;//レイアウト
			// param.d = 2;//デザイン
			// param.ww = 1;
		T_01:{ g: 3-1, w: 0, l: 0, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		T_02:{ g: 4-1, w: 0, l: 0, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		
		B_01:{ g: 3-1, w: 0, l: 1, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		B_02:{ g: 4-1, w: 0, l: 1, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		
		Z_01:{ g: 1-1, w: 0, l: 4, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 25 },
		Z_02:{ g: 2-1, w: 0, l: 4, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		Z_03:{ g: 3-1, w: 0, l: 4, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		
		I_01:{ g: 2-1, w: 0, l: 5, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 240, t_m_p: 1, t_iw_p: 25 },
		I_02:{ g: 3-1, w: 0, l: 5, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 150, t_m_p: 1, t_iw_p: 50 },
		I_03:{ g: 4-1, w: 0, l: 5, d: 0, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		
		L_01:{ g: 1-1, w: 0, l: 2, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 25 },
		L_02:{ g: 2-1, w: 0, l: 2, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		L_03:{ g: 3-1, w: 0, l: 2, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		
		R_01:{ g: 1-1, w: 0, l: 3, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 25 },
		R_02:{ g: 2-1, w: 0, l: 3, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 },
		R_03:{ g: 3-1, w: 0, l: 3, d: 2, ww: 1, t_ww: 720, t_m: 10, t_iw: 80,t_ih: 120, t_m_p: 1, t_iw_p: 50 }
	};
	
	function addPreset(_id){
		if(_id == undefined)return;
		
		var param = presets[_id];
		var codes = EditableView.CustomListData.getCodes(param);
		
		var grid = (function(g){ 
			if(g == 0 ) g= 1;
				g +=1;
			var a = []
			for (var i = 0; i <  g ; i++) {
				a.push(sampleData[i])
			}
			return a;
		})(param.g);
		
		var _id = "list_" + DateUtil.getRandamCharas(3);
		
		var obj = JSON.parse(JSON.stringify(tempData))
			obj.data.list.grid = grid;
			obj.data.template = [_id, codes.html, codes.css, param ];
		
		callback("_repeat",obj);
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	var defImage = { mode:"simple" , path: "width:200,height:133", width: "100%", ratio: "3:2" }
	
	var sampleData = [
		{
			publicData: "1",
			// image: "images/20120129_130222.jpg",
			image: defImage,
			ratio: "3:2",
			a1: "タイトル1",
			a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			anchor: "",
		},
		{
			publicData: "1",
			// image: "images/IMG_0509.jpg",
			image: defImage,
			ratio: "3:2",
			a1: "タイトル2",
			a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			anchor: "",
		},
		{
			publicData: "1",
			// image: "images/IMG_0627.jpg",
			image: defImage,
			ratio: "3:2",
			a1: "タイトル3",
			a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			anchor: "",
		},
		{
			publicData: "1",
			image: defImage,
			ratio: "3:2",
			a1: "タイトル4",
			a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			anchor: "",
		},
		{
			publicData: "1",
			image: "width:200,height:140,color:#888",
			ratio: "3:2",
			a1: "タイトル5",
			a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
			anchor: "",
		}
	]
	var tempData = {
		type: "object.repeat",
		data: {
			list: {
				texts: {},
				grid: []
			},
			template: ["","",""]
		},
		attr: {}
	}
	/* ---------- ---------- ---------- */
	
	
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	function resize(){
		if(isOpen){
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize }
})();//modal



var EmbedTagListView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#EmbedTagListView');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(EmbedTagListView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("embedtag/","_BASE_")+'</div>'
			tag += '<div class="_title">{{埋込みタグ}}</div>'
			tag += '<div class="_tabs">'
			tag += '	<div class="_tab _tab_my">Myタグ一覧</div>'
			tag += '	<div class="_tab _tab_page">ページタグ一覧</div>'
			tag += '	<div class="_tab _tab_file">ファイル埋込み</div>'
			tag += '</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		view.find("._cms_btn_alpha").click(function(){ 
			var type = $(this).attr("data");
			callback(type);
			stageOut();
		});
		
			tag = ""
			tag += '<div class="_area _area_my">_area_my</div>'
			tag += '<div class="_area _area_page">_area_page</div>'
			tag += '<div class="_area _area_file">_area_file</div>'
		v.body.html(tag); 
		
		v.tabs 		= v.header.find("._tab");
		v.tab = {}
		v.tab.my 	= v.header.find("._tab_my");
		v.tab.page 	= v.header.find("._tab_page");
		v.tab.file 	= v.header.find("._tab_file");
		
		v.tab.my.click(function(){ openTab("my")});
		v.tab.page.click(function(){ openTab("page")});
		v.tab.file.click(function(){ openTab("file")});
		
		v.areas 	= v.body.find("._area");
		v.area = {}
		v.area.my 	= v.body.find("._area_my");
		v.area.page = v.body.find("._area_page");
		v.area.file = v.body.find("._area_file");
		v.areas.hide();
		
		setBtn();
		
	}
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.on('click','._rep_id',function(){
			selectTag($(this).text());
		});
	}
	
	/* ---------- ---------- ---------- */
	//
	function openTab(_type){
		if(!_type)_type = "my";
		v.tabs.removeClass("_active");
		v.tab[_type].addClass("_active");
		
		v.areas.hide();
		v.area[_type].show()
		if(_type == "my") update_my();
		if(_type == "page") update_page();
		if(_type == "file") update_file();
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	
	function update(_type){
		openTab(_type);
	}
	
	/* ---------- ---------- ---------- */
	//my
	function update_my(){
		var tag = ""
		tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("embedtag/page","_BASE_")+'</div>'
		tag +='<br style="clear:both;">'
		tag +='<div class="_read" style="clear:both;">{{Myタグ設定}}ページで定義したMyタグの一覧です。タグ名をクリックすると、タグを取得できます。</div>'
	
		var locals = CMS_Data.MyTagReplace.getLocalMyTagList();
		tag += '<div class="_tag_h2">ローカル (このページのみで利用可能)</div>'
		if(locals){
			tag += '<div class="_tag_title"><i class="fa fa-cog"></i> このページのMyタグ</div>'
			tag += _createMyTable(locals);
		} else{
			tag += '<div>このページでは、ローカルなMyタグの定義はありません。</div>'
		}
			tag += '<br><br>'
		var gloup = CMS_Data.MyTag.getData();
		tag += '<div class="_tag_h2">グローバル (サイト全体で利用可能)</div>'
		for (var n in gloup){
			var pm = CMS_Data.MyTag.getParam_by_ID(n);
			if(pm){
				tag += '<div class="_tag_title"><i class="fa fa-cog"></i> ' + pm.name + '</div>'
			}
			tag += _createMyTable(gloup[n]);
		}
		v.area.my.html(tag);
	}
	function _createMyTable(_keys){
		var tag = ""
		tag +="<table>"
		for (var i = 0; i < _keys.length ; i++) {
			tag += '<tr>'
			tag += '<th>'
			tag += '	<span class="_rep_id">{{' + _keys[i].id + '}}</span>'
			tag += '</th> ';
			tag += '<td>'
			tag += '	<span class="_note">'+_keys[i].label+'</span>'
			tag += '</td> ';
			tag += '</tr>'
		}
		tag +="</table>"
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	var isFirstPage = true;
	function update_page(){
		if(!isFirstPage)return;
		isFirstPage = false;
		//
		var tag = "";
		tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("embedtag/my","_BASE_")+'</div>'
		tag +='<br style="clear:both;">'
		tag +='<div class="_read">ページタグは、CMSに用意されているタグです。ページに関する情報を出力します。タグ自体のカスタマイズはできません。</div>'
		var gloup = CMS_Data.PageTag.getData();
		for (var i = 0; i <  gloup.length ; i++) {
			tag += '<div class="_tag_title">' + gloup[i].label + '</div>'
			tag += _createPageTable(gloup[i].items);
		}
		v.area.page.html(tag);
	}
	function _createPageTable(_keys){
		var tag = ""
		tag +="<table>"
		for (var i = 0; i < _keys.length ; i++) {
			tag += '<tr>'
			tag += '<th>'
			tag += '	<span class="_rep_id">{{' + _keys[i].id + '}}</span>'
			tag += '</th> ';
			tag += '<td>'
			tag += '	<div class="_val">例：<span>'+_keys[i].text+'</span></div>'
			tag += '	<div class="_note">'+_keys[i].label+'</div>'
			tag += '</td> ';
			tag += '</tr>'
		}
		tag +="</table>"
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	function update_file(){
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("embedtag/file","_BASE_")+'</div>'
			tag +='<br style="clear:both;">'
			tag += '<div class="_read">ファイル埋込みは、外部HTMLやテキストファイルを埋込みます。主にテンプレHTMLの分割に用います。</div>';
			tag += '<div class="_note">※ シンプルなテンプレHTMLの構成であれば、分割する必要はありません。</div>';
			
			tag += '<div class="_tag_title">表記</div>';
			tag += '<div class="_read">';
			tag += 'ファイル埋込みを利用するには、以下の表記でタグを記載します。<br>';
			tag += '</div>';
				tag += '<div class="_sample">';
				tag += '<b>{{FILE:ファイルパス}}</b>';
				tag += '</div>';
				
			tag += '<div class="_read">';
			tag += 'ページ公開時に、ファイルパスのファイルをロードし埋込みます。<br>';
			tag += 'ロードするファイルでは、<mark>ページタグや、Myタグも利用</mark>できます。<br>';
			tag += '</div>';
			
			tag += '<div class="_tag_title">基本的な用途...テンプレHTMLでの利用</div>';
			tag += '<div class="_read">';
			tag += 'htmlディレクトリ/_template/parts/に配置したファイルを、<br>';
			tag += 'テンプレートHTML内に埋込むには、以下のように記述します。';
			tag += '</div>';
			
				tag += '<div class="_sample">';
				tag += '//例：header.html<br>';
				tag += '{{FILE:parts/header.html}}<br>';
				tag += '</div>';
			tag += '<div class="_note">※ 相対パスで記述する場合は、_template/ディレクトリからのパスになります。</div>';
			
			tag += '<div class="_tag_title">別のディレクトリのファイルの埋込</div>';
			tag += '<div class="_read">';
			tag += 'CMSのサイトルートからの絶対パスを記述してください。<br>';
				tag += '<div class="_sample">';
				tag += '//例：サイトルート以下の/aa/bb/cc.txt<br>';
				tag += '{{FILE:/aa/bb/cc.html}}<br>';
				tag += '</div>';
			
			
			tag += '<div class="_tag_title">テンプレHTML以外での利用</div>';
			tag += '<div class="_read">';
			tag += '通常のブロック内にも埋め込むことが出来ます。<br>';
			tag += '普通に{{FILE:ファイルパス}}を記載してください。<br>';
			tag += '<br>';
			tag += 'Myタグでも同じようなことができますが、<br>';
			tag += 'ブロックを共有する場合はMyタグを利用し、大きめのHTMLコードなどを<br>';
			tag += '共有する場合は、ファイル埋め込みを利用するのがおすすめです。<br>';
			tag += '<br>';
			tag += '別のシステムで生成したHTMLをロードする場合などに利用できます。<br>';
			tag += '</div>';
		v.area.file.html(tag);
	}
	
	/* ---------- ---------- ---------- */

	function selectTag(_s){
		if(cb){
			if(cb == 1){
				UpdateDelay.delay(function(){
					$("#SubPageView ._editableNode").eq(0).val(_s).keyup()
				});
			} else{
				cb(_s);
			}
			stageOut();
		} else{
	 		CMS_CopyView.stageIn(_s);
		}
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	// var cb = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(_type,_cb){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				createlayout();
			}
			cb = _cb;
			update(_type);
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();

if(window["_cms"] ==undefined) window._cms = {};
window._cms.openEmbedList = function(_type,_cb){
	EmbedTagListView.stageIn(_type,_cb);
}
// setTimeout(function(){
// 	window._cms.openEmbedList()
// },1000);




var CMS_GuideView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#CMS_GuideView');
		stageInit();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(_callback){
		CMS_GuideU.loadInit(function(){
			createlayout_core(_callback)
		});
	}
	function createlayout_core(_callback){
		var tag = "";
			tag += '<div class="_btn_close"></div>';
			tag += '<div class="_btn_zoom"><i class="fa fa-external-link-square "></i>  別ウィンドウで表示</div>'
			tag += '<div class="_title _dragBarArea">CMS 利用ガイド</div>'
			tag += '<div class="_navi guide-scroll"><div class="_inner"></div></div>'
			tag += '<div class="_body guide-scroll">'
			tag += '	<div class="_inner">'
			tag += '		<div class="_h1"></div>'
			tag += '		<div class="_text"></div>'
			tag += '	</div>';
			tag += '</div>';
		view.html(tag)
	
		v._btn_close = view.find('._btn_close');
		v.dragBarArea = view.find('._dragBarArea');
		v.h1	 = view.find('._h1');
		v.inner	 = view.find('._body ._inner');
		v.text	 = view.find('._text');
		v.navi	 = view.find('._navi ._inner');
		v._btn_zoom = view.find('._btn_zoom');
		
		v._btn_close.click(function(){stageOut();})
		v._btn_zoom.click(function(){openEx()})
		//
		try{
			view.draggable({handle: view.find('._dragBarArea')});
		}catch( e ){}
		_callback();
	}
	
	function setBtn(){
		$("body").on("click","._btn_guide_block",function(event){
			CMS_GuideU.openGuide($(this).data("id"))
			// stageIn(id);
			event.stopPropagation();
			event.preventDefault();
		})
		view.on("click","a",function(event){
			var type = $(this).data("type");
			if(type == "guide"){
				var href = $(this).attr("href");
				innerMove(href);
				event.stopPropagation();
				event.preventDefault();
			}
			if(type == "cms_link"){
				openInner($(this).attr("href"))
				event.stopPropagation();
				event.preventDefault();
			}
		})
		view.on("click","._btn_back",function(event){
			historyBack()
		})
		view.on("click","._h2-toggle",function(){
			if($(this).data("state")){
				$(this).next().slideUp()
				$(this).data("state","")
				$(this).removeClass("_open")
				$(this).find("span").html('<i class="fa fa-caret-down "></i>')
			} else {
				$(this).next().slideDown()
				$(this).data("state","1")
				$(this).addClass("_open")
				$(this).find("span").html('<i class="fa fa-caret-up "></i>')
			}
		});
	}
	
	function openInner (_s){
		if(GUIDE_STANDALONE){
			window.open("../index.html#"+_s);
		} else{
			CMS_MainController.openPage_by_hash(_s);
		}
	}
	
	/* ---------- ---------- ---------- */

	function setXML(_xml){
		v.text.html("");
		var nodes = _xml.find("item");
			update_core("",nodes.eq(0));
	}
	
	/* ---------- ---------- ---------- */
	//
	function getUID(_dir,_page){
		return "_guide_" + _dir + '__SP__' + _page.split(".").join("_CC_");
	}
	
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	//ナビ
	function initNavi(){
		var tag = ""
			var xml = CMS_GuideU.getXML();
			var gl = $(xml).find("gloup");
			gl.each(function(){
				if($(this).attr("type") == "rootext"){
					tag += $(this).text();
				} else{
					tag += getGloupHTML($(this))
				}
		})
		v.navi.html(tag);
		v.naviItems = v.navi.find("a");
	}
	function getGloupHTML(_gloup){
		var tag = ""
		var id = _gloup.attr("id");
			
			var h2 = (function(_s){
				if(_s)return '<div class="_h2">' + _s + '</div>';
				return ""
			})(_gloup.attr("name"));
			
			if(h2){
				var dd = "_h2_" + id;
				tag += '<div class="_h2-toggle '+dd+'"><span class="icon"><i class="fa fa-caret-down "></i></span>';
				tag += h2
				tag += '</div>'
			}
			
			if(h2) tag += '<div class="_toggle-body">';
			tag += '<ul>';
			var items = _gloup.find("> item");
			items.each(function(){
				var item = $(this);
				var _id = item.attr("id");
				var nn = (function(_node){ 
					var _s = _node.find("name").text()
					var _s2 = _node.find("navi").text()
					if(_s2) _s = _s2;
					if(_s.indexOf("--") != -1){
						var a = _s.split("--");
						return a[1];
					} else{
						return _s;
					}
    			})(item);
				if(_id == ""){
					tag += '</ul><div class="_h4">' + item.attr("name") + '</div><ul>';
				} else{
					if(nn){
						var s = id + '/' + _id;
						var sid = getUID(id,_id)
						tag += '<li><a href="' + s + '" id="' + sid + '" data-type="guide">' + nn + '</a></li>';
					}
				}
			})
			tag += '</ul>';
			if(h2)tag += '</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	function updateDirOpen(_id){
		var param = CMS_GuideU.getData(_id);
		var tar = v.navi.find("._h2_" + param.dir.id);
		if(tar.data("state") != "1"){
			tar.click();
		}
	}
	
	/* ---------- ---------- ---------- */

	function update(_id){
		if(_id =="") _id = "index/index"
		addHistory(_id);
		var param = CMS_GuideU.getData(_id);
		if(param.page == null) {
			v.h1.html("");
			// v.video.html("").hide();
			v.text.html("原稿、未作成です");
		} else{
			update_core(_id, param.page, param.dir);
		}
		v.naviItems.removeClass("_current");
		var aa = _id.split("/");
		v.navi.find("#"+getUID(aa[0],aa[1])).addClass("_current");
		
		updateDirOpen(_id);
	}
	
	function update_core(_id, param, _dir){
		setTitle(_id,param.find("name").text() ,_dir );
		var idText = '<div style="font-size:10px;color:#888;margin:3em 0 1em 0;">ガイドID：' + _id + '</div>';
		
		var bodyParam = {
			text: param.find("text").text() + idText,
			useToggle: (param.attr("useToggle") =="1") ? true : false
		}
		
		v.text.html("");
		setTimeout(function(){
			v.text.html( CMS_GuideU.getBodyTag(bodyParam));
		},100);
		
	}
	function setTitle(_id,_s,_d){
		var _s = (function(_s){ 
			if(_s.indexOf("--") != -1){
				var a = _s.split("--");
				return '<span style="font-size:12px;">' + a[0] + "</span> "+a[1];
			} else {
				return _s;
			}
		})(_s);
		var d = "";
		if(_d) d = '<span class="_gloup">' + _d.name + ' </span>';
		_s = d + _s;
		v.h1.html(setHistoryBtn() + _s);
	}
	var isInitPos = true;
	function setRect(){
		if(GUIDE_STANDALONE)return;
		if(isInitPos){
			var a = [800,700];
			var w = $('body').width();
			var h = $('body').height();
			if(!isMove){
				view.css("left",(w - a[0])/2);
				view.css("top",(h - a[1])/2);
			}
		}
		isInitPos = false;
	}
	
	/* ---------- ---------- ---------- */
	
	var history = [];
	var currentID = ""
	function addHistory(_id){
		if(window["GUIDE_DEV"]) return;
			
		if(isHistoryMove == false) history.push(_id);
		isHistoryMove = false;
		
		if(GUIDE_STANDALONE){
		location.hash = _id;
		}
		currentID = _id;
	}
	var isHistoryMove = false;
	function historyBack(){
		var id = history[history.length-2];
		history.pop()
		isHistoryMove = true;
		isMove = true;
		update(id);
	}
	function setHistoryBtn(){
		if(history.length == 1){
			return ""
		} else {
			return '<span class="_btn_back"><i class="fa fa-chevron-circle-left "></i> 戻る </span>'
		}
	}
	function innerMove(_id){
		isMove = true;
		update(_id);
	}
		
	function resetHistory(){
		// history = [];
	}
	
	/* ---------- ---------- ---------- */
	
	function openEx(){
		// window.open("./guide/index.html#" + currentID,"guide");
		window.open(GUIDE_URL + "#" + currentID, "guide");
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var isMove
	function stageIn(_id){
		isMove = false;
		stageOut();
		setTimeout(function(){
			stageIn_core(_id);
		},100);
	}
	function stageIn_core(_id){
		view.show();
		if(isFirst){
			createlayout(function(){
			initNavi();
			update(_id);
			});
			setRect();
			isFirst = false;
		} else{
			update(_id);
		}
	}
	function stageOut(){
		view.hide();
		resetHistory();
	}

	/* ---------- ---------- ---------- */
	
 return {
		init:init, 
		stageIn:stageIn, 
		stageOut:stageOut, 
	setXML:setXML
}
})();




var GUIDE_STANDALONE = false;
// var tID;
// if(tID) clearTimeout(tID);
// tID = setTimeout(function(){
// 	CMS_GuideView.stageIn("")
// },500);

var CMS_GuideU = (function(){
	function loadInit(_calback){
		_calback();
		/*
		var u = "./guide.php?" + "url=" + GUIDE_URL + "/guide.xml"
		$.ajax({
			scriptCharset: 'utf-8',
			type		: 'GET',
			url			: u,
			dataType	: 'xml',
			success		: function(s) { 
				setData(s);
				_calback();
			}
		})
		*/
	}
	
	function openGuide(_id){
		if(window.location.href.indexOf("http://192.168.1.23:999/develop") != -1){
			window.GUIDE_URL = "http://192.168.1.23:1000/server/www.js-cms.jp.v4/www/"
		}
		window.open(window.GUIDE_URL + "gateway.html#" + _id , "cms_guide");
	}
	//CMS_GuideU.getGuideTag("inspect/view","_BASE_","dark");
	function getGuideTag(_id,_s,_type){
		// return ""
		_s = _s.split("_BASE_").join("ガイド")
		if(_type == "dark"){
			return  '<span class="_btn_guide_block _btn_guide_block_dark" data-id="'+_id+'"><i class="fa fa-lg fa-question-circle"></i> ' + _s + "</span>" 
		} else if(_type == "header"){
			return  '<span class="_btn_guide_block _btn_guide_block_header _big" data-id="'+_id+'"><i class="fa fa-lg fa-question-circle"></i> ' + _s + "</span>" 
		} else if(_type == "big"){
			return  '<span class="_btn_guide_block _btn_guide_block_light _big" data-id="'+_id+'"><i class="fa fa-lg fa-question-circle"></i> ' + _s + "</span>" 
		} else if(_type == "blue"){
			return  '<span class="_btn_guide_block _btn_guide_block_light _blue" data-id="'+_id+'"><i class="fa fa-lg fa-question-circle"></i> ' + _s + "</span>" 
		} else{	
			return  '<span class="_btn_guide_block _btn_guide_block_light" data-id="'+_id+'"><i class="fa fa-lg fa-question-circle"></i> ' + _s + "</span>" 
		}
	}
	function setData(_xml){
		xml = _xml;
	}
	var xml;

	function getXML(_xml){
		return xml;
	}

	function getData(_id){
		if(!_id) return;
		var a = _id.split("/")
		var dir = $(xml).find("gloup#"+a[0]);
		
		var tar = { dir : {}, page : null };
			tar.dir.id = a[0];
			tar.dir.name = dir.attr("name");
			
		var items = dir.find("item");
			items.each(function(){
			var fullID = a[0]+"/"+$(this).attr("id");
			if(fullID == _id){
					tar.page = $(this);
			}
		})
		return tar;
	}
	function getBodyTag(_param){
		var _s = ajastSRC(_param.text);
		_s = _s.split("\n\n\n\n\n").join("\n\n");
		_s = _s.split("\n\n\n\n").join("\n\n");
		_s = _s.split("\n\n\n").join("\n\n");
		if(_s.charAt(0) == "\n") _s = _s.substr(1,_s.length)
		var a = _s.split("\n");
		
		var a2= []
		for (var i = 0; i <  a.length ; i++) {
			var s = a[i];
			var b = false
			if(s.substr(0,4) == "####") {
				s = s.split("####").join('<div class="_h4">') + '</div>'
				b = true;
			}
			if(s.substr(0,3) == "###") {
				s = s.split("###").join('<div class="_h3">') + '</div>'
				b = true;
			}
			if(s.substr(0,3) == "##+") {
				if(_param.useToggle){
				s = s.split("##+").join('<div class="_h2-toggle"><span class="icon"><i class="fa fa-caret-down "></i></span>') + '</div>'
				} else{
				s = s.split("##+").join('<div class="_h2">') + '</div>'
				}
				b = true;
			}
			if(s.substr(0,3) == "##!") {
				s = '<div class="_h2-midashi"><i class="fa fa-level-up fa-rotate-180"></i> ここから上級者・制作者向け</div>'
				b = true;
			}
			if(s.substr(0,2) == "##") {
				s = s.split("##").join('<div class="_h2">') + '</div>'
				b = true;
			}
			if(s.substr(0,2) == "//") {
				s = ""
				b = true;
			}
			if(s.indexOf("<<<") == 0)  {
				if(_param.useToggle){
					s = '<div class="_toggle-body">'
				} else{
					s = "";
				}
				b = true;
			}
			if(s.indexOf(">>>") == 0)  {
				if(_param.useToggle){
					s = '</div>'
				} else{
					s = "";
				}
				b = true;
			}
			if(s.charAt(s.length-1) == ">")  {
				b = true;
			}
			if(b == false){
				s += '<br>' 
			}
			a2.push(s)
		}
		return a2.join("\n");
	}
	function ajastSRC(_s){
		_s = replaceText(_s);
		if(window["GUIDE_STANDALONE"]){
			return _s;
		} else {
			// _s = _s.split("img  src").join("img src");
			// return _s.split('img src="').join('img src="guide/');
			_s = _s.split("img  src").join("img src");
			return _s.split('img src="').join('img src="'+GUIDE_URL);
		}
	}
	
	function ajastPath(_s){
		if(window["GUIDE_STANDALONE"]){
			return _s;
		} else {
			return "guide/" + _s
		}
	}
	var ICON_FILE = ' <i class="fa fa-file-text _color-file"></i> '
	
	var CMS_GuideDIC = [
		['[[設定：CMS置換えタグ]]'	,'html/_setting/doc_keys.json'	,"サイト設定：ページ情報タグへ"],
		['[[設定：置換えタグ登録]]'	,'html/_setting/keys.json'		,"サイト設定：UIタグ登録へ"],
		['[[設定：共通パーツ]]'		,'html/_setting/replace.json'	,"サイト設定：パーツ・ひな形登録へ"]
	];
	function replaceText(_s){
		var DIC = CMS_GuideDIC;
		for (var i = 0; i <  DIC.length ; i++) {
			if(_s.indexOf(DIC[i][0]) != -1){
				var rep = "";
				rep += '<div>' + ICON_FILE + '<a href="' + DIC[i][1] + '" data-type="cms_link">'
				rep += DIC[i][2]
				rep += '</a></div>'
				_s = _s.split(DIC[i][0]).join(rep)
			}
			}
		var ms = _s.match(/\[\[{.*?\}]\]/g);
		if(ms){
			for (var i = 0; i < ms.length ; i++) {
				var id = ms[i]
					id = id.split("[[{").join("");
					id = id.split("}]]").join("");
				var rep = ""
					rep += ICON_FILE+'<a href="' + id + '" data-type="cms_link">' + id + '</a>'
				_s = _s.split(ms[i]).join(rep);
			}
		}
		
		var ms = _s.match(/\[\[.*?\]\]/g);
		if(ms){
			for (var i = 0; i < ms.length ; i++) {
				var id = ms[i]
					id = id.split("[[").join("")
					id = id.split("]]").join("")
				var rep = ""	
				var param = CMS_GuideU.getData(id);
				if(param.page){
					var nn = param.page.find("name").text();
					rep += '<div class="_color-help"><i class="fa fa-lg fa-question-circle "></i> '
					rep += '<a href="' + id + '" data-type="guide">' + nn + '</a></div>'
				}
				_s = _s.split(ms[i]).join(rep);
			}
		}
		
		return _s;
	}
	return {
		loadInit:loadInit ,
		openGuide:openGuide ,
		getGuideTag:getGuideTag ,
		getXML:getXML ,
		getData:getData ,
		getBodyTag:getBodyTag,
		ajastPath:ajastPath
	}
})();


var FileInfoView 		 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#FileInfoView');
		stageInit();
	}
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(FileInfoView,view);
		var tag = "";
			tag = '<div class="_title">__REP__</div>';
		v.header.html(tag);
		
		var tag = ""
		 	tag += '<div class="_tab clearfix">';
		 	tag += '	<div class="_tab_base">基本情報</div>';
		 	tag += '	<div class="_tab_tag">ブログエントリー情報</div>';
		 	tag += '	<div class="_tab_extra">追加情報</div>';
		 	tag += '</div>';
		 	tag += '<div class="_gloup_base"></div>';
		 	tag += '<div class="_gloup_tag"></div>';
		 	tag += '<div class="_gloup_extra">';
	 		tag += '<div class="_read">追加情報を入力できます。</div>'
			tag += '	<div style="margin:10px 0;">';
	 		tag += 	CMS_GuideU.getGuideTag("file/grid","追加情報について");
			tag += '	</div>';
			tag += '	<div class="_gridArea _editableBlock" style="padding:0;"></div>';
			tag += "</div>";
		v.body.html(tag);
		
		v.gloup_base 	= view.find("._gloup_base");
		v.gloup_tag 	= view.find("._gloup_tag");
		v.gloup_extra 	= view.find("._gloup_extra");
		v.gridArea 		= view.find("._gridArea");
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_red _btn_del"><i class="fa fa-trash-o"></i> 削除する</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'>__REP__</div> ';
			tag += '<div class="_cms_btn _cms_btn_disable _btn_do_dis">__REP__</div> ';
		v.footer.html(tag);
		
		initTab();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//タブ
	
	function initTab(){
		v.tab_base = v.body.find('._tab_base');
		v.tab_tag = v.body.find('._tab_tag');
		v.tab_extra= v.body.find('._tab_extra');
		v.tab_base.click(function(){openTab(0)});
		v.tab_tag.click(function(){openTab(1)});
		v.tab_extra.click(function(){openTab(2)});
	}
	function openTab(_n){
		v.tab_base.removeClass("_active")
		v.tab_tag.removeClass("_active")
		v.tab_extra.removeClass("_active")
		v.gloup_base.hide()
		v.gloup_tag.hide()
		v.gloup_extra.hide()
		if(_n == 0){
			v.gloup_base.show()
			v.tab_base.addClass("_active")
		}
		if(_n == 1){
			v.gloup_tag.show()
			v.tab_tag.addClass("_active")
		}
		if(_n == 2){
			v.gloup_extra.show()
			v.tab_extra.addClass("_active")
		}
		hideFloatView();
	}
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do_dis = view.find('._btn_do_dis');
		
		v.btn_do	 = view.find('._btn_do');
		v.btn_do.click(function(){ compliteEdit(); });
		
		v.btn_del = view.find('._btn_del');
		v.btn_del.click(function(){
			if(window.isLocked(true))return;
			if(caller != undefined){
				caller.openEditFileInfo_comp(action,getParam(),"delete");
			}
			stageOut();
		});
	}
	
	
	/* ! ---------- update ---------- ---------- ---------- ---------- */
	
	function update(){
		
		v.btn_del.hide();
		v.btn_do.show()
		v.btn_do_dis.hide()
		
		//ボタン名設定
		var t = "";
		var b = "";
		if(action == "dir_edit")	{ t = "グループ編集・削除"; b = "変更する"; }
		if(action == "file_edit")	{ t = "HTMLページ編集・削除"; b = "変更する"; }
		if(action == "html_edit")	{ t = "見出し編集・削除"; 	b = "変更する"; }
		if(action == "dir_edit"){ v.btn_del.show(); }
		if(action == "file_edit"){ v.btn_del.show(); }
		if(action == "html_edit"){ v.btn_del.show(); }
		b = '<i class="fa fa-check"></i> ' + b;
		v.header.html('<div class="_title">'+t+'</div>');
		v.btn_do.html(b);
		v.btn_do_dis.html(b);
		
		var anno_id = '<div class="_anno">半角英数字 ( a〜z , A〜Z , 0〜9 , - , _ ) で入力してください。</div>'

		var _guide = CMS_GuideU.getGuideTag;
		
		var stateTag = (function(_state){ 
			var ss = CMS_PateStateU.getState(_state);
			var isCheckedHide 	 = (ss[0] == "1") ? "checked": "";
			var isCheckedHideMenu  = (ss[1] == "1") ? "checked": "";
			var isCheckedUnderConst = (ss[2] == "1") ? "checked": "";
			var uid = DateUtil.getRandamCharas(10);
			var uid2 = DateUtil.getRandamCharas(10);
			var uid3 = DateUtil.getRandamCharas(10);
			var s = '<tr><th>公開</th><td>'
				s += '<table class="_subtable">'
				s += '<tr><td><input type="checkbox" id="'+uid+'" class="_in_isHide" value="1" '+isCheckedHide+'>'
				s += ' <label for="'+uid+'">非公開にする</label> '+_guide("file/hide","")+'</td></tr>';
				s += '<tr><td><input type="checkbox" id="'+uid3+'" class="_in_isHideMenu" value="1" '+isCheckedHideMenu+'>';
				s += ' <label for="'+uid3+'">メニューに表示しない</label> '+_guide("file/hideMenu","")+'</td></tr>'
				s += '<tr><td><input type="checkbox" id="'+uid2+'" class="_in_isUnderConst" value="1" '+isCheckedUnderConst+'>';
				s += ' <label for="'+uid2+'">工事中にする</label> '+_guide("file/underconst","")+'</td></tr>'
				s += '</table>'
				s += '</td></tr>'
			return s;
		})(param.state);
		var cmsState = (function(_state){ 
			var ssC = CMS_PateStateU.getState(param.stateCMS);
			var isCheckedEM  = (ssC[0] == "1") ? "checked": "";
			var uidC1 = DateUtil.getRandamCharas(10);
			var uidC2 = DateUtil.getRandamCharas(10);
			var s = '<tr><th>CMS表示</th><td>'
				s+= '<input type="checkbox" id="'+uidC1+'" class="_in_isCheckedEM" value="1" '+isCheckedEM+'>'
				s+= ' <label for="'+uidC1+'"><span class="_fileEM"></span> 強調表示</label> ';
				s+= _guide("file/em","")
				s+= '</td></tr>'
			return s;
		})(param.stateCMS);
		var custom_a = (function(_param){ 
			if(_param.custom_a != undefined) return _param.custom_a;
			return ""
		})(param);
		var customAnchorTag = (function(){ 
			var s = ""
				s += '<tr><th>外部URL<br><span class="_repID">{HREF},{TAR}</span></th><td><input type="text" class="_text _in_custom_a _colorAnchor" placeholder="http://www.yahoo.co.jp/" />';
				s += " " + _guide("file/url","")+'</td></tr>'
			return s;
		})();
		var gloupIDTag = (function(_param){ 
			var _id = _param.id;
			var s = "";
				s += '<input type="text" class="_text _in_editFile_gid _w250 _colorGID " list="sitemapDatalistGloups"  value="'+_id + '" />'
			return s;
		})(param);
		var IDTag = (function(_param){
			var _dir = FileInfoU.getDirPath(_param);
			var _id = _param.id;
			var s = "";
				s += '<div class="_colorID-path" style="padding:5px;">'
				s += '<table class="_filepath">';
				s += '	<tr>';
				s += '		<td class="_fs12">ディレクトリ名</td>';
				s += '		<td class="_fs12">ページID</td>';
				s += '	</tr>';
				s += '	<tr>';
				s += '		<td>'
				s += '<div class="_editFile_dir_wap"><span class="_icon_dir"></span><span class="_editFile_dir" data-path="'+_dir+'">' + _dir + '</span></div>'
				s += '		</td>';
				s += '		<td>'
				s += '<input type="text" class="_text _in_editFile_id _w250 _colorID "  list="sitemapDatalist" value="'+_id + '" />'
				s += ' <span>.html</span></div>';
				s += '		</td>';
				s += '	</tr>';
				s += '</table>';
				return s;
		})(param);
		var nameTag = '<input type="text" class="_text _in_editFile_name _colorName" /><br>'
	
		//グループ
 		var tag = "";
		if(action == "dir_edit"){
			nameTag += _guide("file/gloupName","グループ名について");
		 	tag += '<table class="_fileInfoEditTable">'
			tag += '<tr><th>グループ名<br><span class="_repID">{NAME}</span></th><td>'+nameTag+'</td></tr>';
			tag += '<tr><th>グループID<br><span class="_repID">{ID}</span></th><td>'+anno_id+gloupIDTag
			tag += '	<div class="_t_anno _input_gid_anno"></div>'
			tag += _guide("file/gloupID","グループIDについて")
			tag += '</td></tr>';
			tag += stateTag;
			tag += customAnchorTag;
			tag += cmsState;
			tag += "</table>";
		}	
		
		//ページ
		if(action == "file_edit"){
			nameTag += _guide("file/pageName","ページ名について");
		var typeName = ""
		 	tag += '<table class="_fileInfoEditTable">'
			tag += '<tr><th>ページ名<br><span class="_repID">{NAME}</span></th><td>'+nameTag+'</td></tr>';
			tag += '<tr><th>ファイル名<br><span class="_repID">{DIR},{ID},{HREF}</span></th><td>'+anno_id+IDTag
			tag += '	<div class="_t_path_preview _path_preview"></div>';
			tag += '	<div class="_t_anno _input_id_anno"></div>'
			tag += '	</div>'
			tag += _guide("file/pageID","ファイル名について")
			tag += '</td></tr>';
			tag += stateTag;
			tag += customAnchorTag;
			tag += cmsState;
			tag += "</table>";
		}
		if(action == "html_edit"){
			var typeName = ""
			tag += '	<div style="margin:10px 0;">';
	 		tag += 	CMS_GuideU.getGuideTag("file/html","見出しについて");
			tag += '	</div>';
		 	tag += '<table class="_fileInfoEditTable">'
			tag += '<tr><th>名称<br><span class="_repID">{NAME}</span></th><td>'+nameTag+'</td></tr>';
			tag += '<tr><th>HTML<br><span class="_repID">{HTML}</span></th><td><textarea class="_text _in_editFile_html _color-html" ></textarea></td></tr>';
			tag += "</table>";
		}
		
		/* ---------- ---------- ---------- */
		//タグ&詳細
		
		if(param.tag == undefined) param.tag = "";
		var tagTag = '<input type="text" class="_text _in_editFile_tag _colorName" list="tagDatalist" placeholder="国際,経済,スポーツ" /><br>'
		
		if(param.date == undefined) param.date = "";
		var dd = DateUtil.getFormattedDate(new Date(),"YYYY/MM/DD");
		var dateTag = '<input type="text" class="_text _in_editFile_date _colorName" placeholder="'+dd+'" /><br>'
		
		if(param.read == undefined) param.read = "";
		var readTag = '<textarea class="_text _in_editFile_read _colorName" ></textarea>'
		
		var tag2 = "";
		//ページ
 		if(action == "dir_edit" || action == "file_edit" || action == "html_edit"){
		 	tag2 += '<div class="_read">CMSをブログ的に利用する際につかいます。</div>'
			tag2 += '	<div style="margin:10px 0;">';
		 	tag2 += 	CMS_GuideU.getGuideTag("file/blog","ブログエントリー情報について");
			tag2 += '	</div>';
		 	tag2 += '<table class="_fileInfoEditTable">'
			tag2 += '<tr><th><i class="fa fa-tags "></i> 分類用タグ名<br><span class="_repID">{TAG}</span></th><td>'+tagTag+'</td></tr>';
			tag2 += '<tr><th>ページ説明<br><span class="_repID">{READ}</span></th><td>'+readTag+'</td></tr>';
			tag2 += '<tr><th><i class="fa fa-clock-o"></i> 日付<br><span class="_repID">{DATE}</span></th><td>'+dateTag+'</td></tr>';
			tag2 += "</table>";
		}
		
		//
		v.gloup_base.empty().append(tag)
		v.gloup_tag.empty().append(tag2)
		
		if(param.name) v.gloup_base.find("._in_editFile_name").val(param.name);
		if(param.html) v.gloup_base.find("._in_editFile_html").val(param.html);
		if(custom_a) v.gloup_base.find("._in_custom_a").val(custom_a);
		
		if(param.tag) v.gloup_tag.find("._in_editFile_tag").val(param.tag);
		if(param.date) v.gloup_tag.find("._in_editFile_date").val(param.date);
		if(param.read) v.gloup_tag.find("._in_editFile_read").val(param.read);
		
		initCheckPath()
		initExtraGrid();
		initCheckParam();
		
		openTab(0);
	}
	function initCheckPath(){
		//見出しはスルーする
		if(action == "html_new" || action == "html_edit") return;
		//
		v.in_editFile_id = view.find('input._in_editFile_id');
		v.in_editFile_id.keyup(function(){ checkPath() });
		v.in_editFile_id.on('input', function(){checkPath()});
		
		v.in_editFile_gid = view.find('input._in_editFile_gid');
		v.in_editFile_gid.keyup(function(){ checkGloup() });
		v.in_editFile_gid.on('input', function(){checkPath()});
		
		v.editFile_dir_wap = view.find('._editFile_dir_wap');
		v.editFile_dir = view.find('._editFile_dir');
		v.editFile_dir_wap.click(function(){ 
			var val = v.editFile_dir.data("path");
			DirListView.stageIn(val,function(_s){
				v.editFile_dir.data("path",_s);
				v.editFile_dir.text(_s);
				checkPath();
			})
		});
		
		//テスト用
		window._setDirName = function(_s){
			v.editFile_dir.data("path",_s);
			v.editFile_dir.text(_s);
			checkPath();
		}
		
		v.input_id_anno = view.find('._input_id_anno')
		v.input_gid_anno = view.find('._input_gid_anno')
		v.path_preview = view.find('._path_preview');
		
		var list = CMS_Data.Sitemap.getFilelist();
		//IDチェック
		FileInfo_CheckID.setCallback(list,function(_res){
			v.path_preview.removeClass("_error")
			if(_res.annos.length == 0){
				v.btn_do.show()
				v.btn_do_dis.hide();
			} else{
				v.path_preview.addClass("_error");
				v.btn_do.hide();
				v.btn_do_dis.show();
			}
			v.path_preview.html(_res.path)
			v.input_id_anno.html(_res.annos.join("<br>"))
		});
		FileInfo_CheckID.checkInit(action,param.id,param.dir);
		
		//グループIDチェック
		FileInfo_CheckGID.setCallback(list,function(_res){
			if(_res.annos.length == 0){
				v.btn_do.show()
				v.btn_do_dis.hide();
			} else{
				v.btn_do.hide();
				v.btn_do_dis.show();
			}
			v.input_gid_anno.html(_res.annos.join("<br>"))
		});
		FileInfo_CheckGID.checkInit(action,param.id);
	}
	function checkPath(){
		FileInfo_CheckID.check(action,v.in_editFile_id.val(),v.editFile_dir.data("path"));
	}
	
	function checkGloup(){
		FileInfo_CheckGID.check(action,v.in_editFile_gid.val());
	}
	
	
	/* ---------- ---------- ---------- */
	//カスタムGRID
	
	var extraGrid
	function initExtraGrid(){
		v.gridArea.empty();
		extraGrid = new FileInfoGrid(v.gridArea)
		extraGrid.initData(param.extra);
	}
	
	
	/* ---------- ---------- ---------- */

	function getParam(){
		var in_gid 		 = view.find('._in_editFile_gid').val();
		var in_id 		 = view.find('._in_editFile_id').val();
		var in_dir 		 = view.find('._editFile_dir').data("path");
		var in_name 	 = view.find('._in_editFile_name').val();
		var in_tag 		 = view.find('._in_editFile_tag').val();
		var in_read 	 = view.find('._in_editFile_read').val();
		var in_date 	 = view.find('._in_editFile_date').val();
		//
		var in_custom_a  = view.find('._in_custom_a').val();
		var in_html 	 = view.find('._in_editFile_html').val();
		var in_extra 	 = extraGrid.getData();
		
		var pageState = CMS_PateStateU.createState([
			(view.find('._in_isHide').prop("checked")) ? "1":"0",
			(view.find('._in_isHideMenu').prop("checked")) ? "1":"0",
			(view.find('._in_isUnderConst').prop("checked")) ? "1":"0"
		]);
		
		var pageStateCMS = CMS_PateStateU.createState([
			(view.find('._in_isCheckedEM').prop("checked")) ? "1":"0",
			0,
			0
		]);
		if(action == "dir_edit"){
			param.id 		 = in_gid;
			param.name 		 = in_name;
			param.tag 		 = in_tag;
			param.read 		 = in_read;
			param.date 		 = in_date;
			//
			param.state 	 = pageState
			param.stateCMS 	 = pageStateCMS
			param.custom_a 	 = in_custom_a;
			param.extra 	 = in_extra;
		}
		if(action == "file_edit"){
			param.id 		 = in_id;
			param.dir 		 = FileInfoU.getDirVal(in_dir);
			param.name 		 = in_name;
			param.tag 		 = in_tag;
			param.read 		 = in_read;
			param.date 		 = in_date;
			//
			param.state 	 = pageState;
			param.stateCMS 	 = pageStateCMS;
			param.custom_a 	 = in_custom_a;
			param.extra 	 = in_extra;
		}
		if(action == "html_edit"){
			param.id 		 = in_id;
			param.name 		 = in_name;
			param.tag 		 = in_tag;
			param.read 		 = in_read;
			param.date 		 = in_date;
			//
			param.html 		 = in_html;
			param.extra 	 = in_extra;
		}
		
		//空ノードを削除したり、不要なノードを削除
		
		var newP = {}
		for (var n in param) {
			var b = true
			if(param[n] == "") b = false;
			if(param[n] == null) b = false;
			if(param[n] == undefined) b = false;
			if(n == "isHide") b = false;
			if(n == "isHideMenu") b = false;
			if(n == "isUnderConst") b = false;
			if(n == "isCheckedEM") b = false;
			if(n == "extra") {
				if(param[n].length == 0) b = false;
			}
			//空データや初期値の場合は削除
			if(n == "tag") 		{ if(param[n] == "") b = false;}
			if(n == "date") 	{ if(param[n] == "") b = false;}
			if(n == "read") 	{ if(param[n] == "") b = false;}
			if(n == "custom_a") { if(param[n] == "") b = false;}
			
			if(n == "state") 	{ if(param[n] == "0,0,0") b = false;}
			if(n == "stateCMS") { if(param[n] == "0,0,0") b = false;}

			//ノードリストの場合はtrue;
			if(n == "list") b = true;
			if(b){
				newP[n] = param[n];
			}
		}
		return newP;
	}
	/* ---------- ---------- ---------- */
	
	var prePreParam = ""
	function initCheckParam(){
		prePreParam = JSON.stringify(getParam());
	}
	function compliteEdit(){
		if (v.btn_do.css('display') == 'none'){
			stageOut();
			return;
		}
		var p = getParam();
		if(prePreParam == JSON.stringify(p)){
			stageOut();
			return;
		}
		//
		if(window.isLocked(true))return;
		//編集した場合のみデータ更新する
		if(caller != undefined){
			caller.openEditFileInfo_comp(action,p,"");
		} else{
			if(isLog) console.log(getParam());
		}
		stageOut();
	}
		
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	
	var action;
	var caller;
	var id;
	var param = {}
	var isEdit;
	function stageIn( _action , _caller , _param ){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			action = _action;
			caller = _caller;
			if(action.indexOf("_new") != -1){
				param = FileInfoView_U.getParam(_action)
			} else{
				param = _param;	
			}
			
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			checkFileInit = true;
			update()
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	function resize(){
		if(isOpen){
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize,compliteEdit:compliteEdit }
})();




//新規作成時のデフォルトパラメータを提供する
if(!window._cms) window._cms = {}
window._cms.lastAddID = ""
var FileInfoView_U = (function(){
	
	function getParam(_t,_extra) {
		
		if(_t == "dir_new"){
			var id = DateUtil.getFormattedDate(new Date(),"YYYYMMDD_RRRRR");
			window._cms.lastAddID = id;
			return {
				id:id,
				name: "グループ,groupname",
				list:[],
				type: Dic.ListType.DIR,
				custom_a:"",
				extra:[]
			}
		}
		if(_t == "file_new"){
			var o = {
				dir : "",
				baseID : "page",
				baseName : "ページ"
			}
			o = _getDefPageInfo(_extra.uid,o);
			var id = "_" + DateUtil.getFormattedDate(new Date(),"YYYYMMDD_RRR");
			// window._cms.lastAddID = o.baseID + id;
			return {
				id:o.baseID + id,
				name: o.baseName + id,
				dir: o.dir,
				type: Dic.ListType.PAGE,
				custom_a:"",
				saveDate:"-",
				publicDate:"-",
				extra:[]
			}
		}
		if(_t == "html_new"){
			return {
				id:DateUtil.getFormattedDate(new Date(),"YYYYMMDD_RRRRR"),
				name: "見出し",
				type: Dic.ListType.HTML,
				html:"<b>見出し</b>",
				extra:[]
			}
		}
	}
	
	//所属グループの先頭のファイルの情報を返す
	function _getDefPageInfo(_uid,_param){
		if(_uid) {
			var _gloup = CMS_Data.Sitemap.getGloup_by_uid(_uid);
			if(_gloup){
				if(_gloup.list){
					if(_gloup.list.length > 0){
						var ls = _gloup.list;
						for (var i = 0; i < ls.length ; i++) {
							if(ls[i].type == Dic.ListType.PAGE){
								return _getDefPage_core(ls[i],_gloup,_param);
							}
						}
					} else{
						return _getDefPage_core(null,_gloup,_param);
					}
				}
			}
		}
		return _param;
	}
	function _getDefPage_core(_fi,_gloup,_param){
		if(_fi){
			_param.dir = (function(_n){ 
				if(!_n)return "";
				return _n;
			})(_fi.dir);
		}
		_param.baseID = (function(_n){ 
			if(!_n) return "page";
			if(_n == "sitemap_root") return "page";
			return _n;
		})(_gloup.id);
		_param.baseName = (function(_n){ 
			if(!_n) return "ページ";
			_n = _n.split(",").join("");
			_n = _n.split("/").join("");
			_n = _n.split("-").join("");
		    return _n.substr(0,5);
		})(_gloup.name);
		
		return _param;
	}

	
	return { getParam:getParam }
})();

var FileInfoGrid = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view) {
	  this.init(_view);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function(_view) {
		this.view = _view
	}
	p.initData = function (_array){
		var tag = '<div class="_replaceAreaGrid"></div>';
		this.view.append(tag)
		this.v = {}
		this.v.replaceAreaGrid = this.view.find("._replaceAreaGrid")
		var gridType = new PageModel.Object_Grid({
			isNarrow:true,
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({}),
			textData:null,
			gridData:{
				info: new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "publicData",
						name: "公開"　,
						type: CELL_TYPE.CHECK,
						style: "",
						view: "",
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "id",
						name: "ID ",
						type: CELL_TYPE.SINGLE,
						def: "{SAMPLE_ID}"
					}),
					new PageModel.OG_Cell({
						id: "text",
						name: "値",
						type: CELL_TYPE.SINGLE,
						def: "サンプル値"
					})
				]
			}
		},false);
		this.gridView = new EditableView.BaseGrid(gridType);
		this.gridView.registParent(this);
		this.gridView.initData(_array);
	}
	p.getData = function() {
		var a = this.gridView.getData();
		var list = []
		for (var i = 0; i <  a.length ; i++) {
			if(a[i].id != ""){
				list.push(a[i])	
			}
		}
		return list;
	}
	p.updateSubData = function() {
		//
	}
	return c;
})();


//グループチェック
var FileInfo_CheckGID = (function(){
	
	var v = {}
	var callback
	var checkFileInit = true
	function setCallback(_filelist,_callback){
		callback = _callback;
		ids = [];
		// _filelist = [
		// 	 {dir:"/",id:"index"},
		// 	{dir:"",id:"index"},
		// 	{dir:"",id:"index2"}
		// ]
		var list =_filelist;
		if(list != undefined) {
			findID(list);
		}
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var ids = [];
	function findID(list){
		for (var i = 0; i < list.length ; i++) {
			if(list[i].type == Dic.ListType.HTML){
				ids.push(list[i].id)
				if(list[i].list != undefined){
					findID(list[i].list);
				}
			}
		}
	}
	function checkID(_id){
		for (var i = 0; i < ids.length ; i++) {
			if(_id == ids[i]){
				if(_id == defID){
				} else{
					return true;
				}
			}
		}
		return false;
	}

	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var action
	var annos = []
	
	function checkInit(_action,_id){
		 defID = _id
		 check(_action,_id);
	}
	function check(_action,_id){
		action = _action;
		
		annos = [];
		{
			if(_id == undefined) _id = "";
			if(_id == "") annos.push('<span class="_red">グループIDを入力してください。</span>');
			if(_id.charAt(0) =="_") annos.push('<span class="_red">1文字目は、アンダースコアは使用できません。</span>');
			if(_id.match(/[^0-9a-zA-Z_-]+/) != null )annos.push('<span class="_red">グループIDに、半角英数字以外の文字が含まれています。</span>');
		}
		
		if(checkID(_id)){
			annos.push('<span class="_red">すでに同じグループIDが存在します</span>');
		}
		var res = {}
			res.annos = annos
			// res.path = path;
		callback(res)
	}
	return {
		setCallback: setCallback,
		checkInit: checkInit,
		check: check
	}
})();

//IDチェック
var FileInfo_CheckID = (function(){
	
	var v = {}
	var callback
	var checkFileInit = true
	function setCallback(_filelist,_callback){
		callback = _callback;
		paths = [];
		// _filelist = [
		// 	 {dir:"/",id:"index"},
		// 	{dir:"",id:"index"},
		// 	{dir:"",id:"index2"}
		// ]
		var list =_filelist;
		if(list != undefined) {
			findID(list);
		}
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	//
	var paths = [];
	function findID(list){
		for (var i = 0; i < list.length ; i++) {
				var id = list[i].id;
				var dir = URL_U.treatDirName(list[i].dir);
				if(dir == "") dir = CMS_Path.PAGE.ABS
				if(list[i].type == Dic.ListType.PAGE){
					paths.push([id,dir])
				}
				if(list[i].list != undefined){
					findID(list[i].list);
				}
		}
	}
	function checkID(_id,_dir){
		for (var i = 0; i < paths.length ; i++) {
			if(_id == paths[i][0]){
				if(_dir == paths[i][1]){
					if(_dir == defDIR && _id == defID){
					} else{
						return true;
					}
				}
			}
		}
		return false;
	}

	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var tID
	function checkDir(_dir){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			checkDir_core(_dir)
		},300);
	}
	var checkDirDic = [];
	function checkDir_core(_dir){
		for (var i = 0; i <  checkDirDic.length ; i++) {
			if(checkDirDic[i][0] == _dir){
				return checkDirDic[i][1]
			}
		}
		checkDirDic.push([_dir,true]);
		
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var action
	var annos = []
	var defID = ""
	var defDIR = ""
	function checkInit(_action,_id,_dir){
		 defID = _id
		if(_dir == "") _dir = CMS_Path.PAGE.ABS
		 defDIR = URL_U.treatDirName(_dir);
		 check(_action,_id,_dir);
	}
	function check(_action,_id,_dir){
		action = _action
		if(action == "dir_edit")return;
		if(action == "html_edit")return;
		//
		annos = checkValidID(_id);
		_dir = URL_U.treatDirName(_dir)
		checkDir(_dir);
		var dirAnnos = [];
		{
			_dir = URL_U.treatDirName(_dir);
			if(_dir == "") _dir = CMS_Path.PAGE.ABS;
			if(_dir.match(/[^\/0-9a-zA-Z_-]+/) != null )annos.push('<span class="_red">ディレクトリ名に、半角英数字以外の文字が含まれています。</span>');
		}
		
		if(checkID(_id,_dir)){
			annos.push('<span class="_red">すでに同じファイル名が存在します</span>');
		}
		
		//DIR
		var siteURL = (function(_u){ 
		   if(_u.charAt(_u.length-1) == "/"){
				_u = _u.substr(0,_u.length -1)
			}
			return _u;
		})(CMS_Path.SITE.URL);
		
		var path = "公開URL : " + siteURL;
			path +=  "<span>"+ _dir+ _id+ ".html</span>";
		
		var res = {}
			res.annos = annos;
			res.path = path;
		callback(res)
	}
	
	
	function checkValidID(_id){
		var a = []
		if(_id == undefined) _id = "";
		if(_id == "") a.push('<span class="_red">ファイル名を入力してください。</span>');
		if(_id.charAt(0) =="_") a.push('<span class="_red">1文字目は、アンダースコアは使用できません。</span>');
		if(_id.match(/[^0-9a-zA-Z_-]+/) != null )a.push('<span class="_red">ファイル名に、半角英数字以外の文字が含まれています。</span>');
		return a;
	}
	
	return {
		setCallback: setCallback,
		checkInit: checkInit,
		check: check,
		checkValidID: checkValidID
	}
})();

var FileInfoU = (function(){
	
	/* ---------- ---------- ---------- */
	
	function getDirPath(param){
		if(param["dir"] != undefined){
			if(param["dir"] != ""){
				return param["dir"];
			}
		}
		if(CMS_Path.PAGE == undefined) return "";
		return CMS_Path.PAGE.ABS;
	}
	
	function getDirVal(_v){
		if(CMS_Path.PAGE == undefined) return "";
		if(_v == CMS_Path.PAGE.ABS) return "";
		return URL_U.treatDirName(_v);
	}
	return {
		getDirPath: getDirPath,
		getDirVal: getDirVal
	}
})();


var DirListView 		 = (function(){
	var view;
	var v = {};
	var baseDir = "";
	var targetDir = ""
	
	function init(){
		view = $('#DirListView');
		stageInit();
	}
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(DirListView,view);

		var tag = ""
			tag = '<div class="_title">ディレクトリ選択</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_read">HTMLファイルの書き出し先ディレクトリを選択してください。</div>'
			tag += '<div style="text-align:right;">'
			tag += '	<div class="_cms_btn-mini _btn_rootDir_reload" style="margin:0 0 10px 0;"><i class="fa fa-repeat "></i> リスト更新</div>'
			tag += '</div>'
			tag += '<div class="_replaceDir _dirTreeView "></div>'

		v.body.html(tag);
		
		v.replaceDir = view.find('._replaceDir');
		v.tagetPath = view.find('._tagetPath');
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		v._btn_close = view.find('._btn_close');
		setBtn();
	}
	
	
	/* ---------- ---------- ---------- */
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_rootDir_reload = view.find('._btn_rootDir_reload');
		v.btn_rootDir_reload.click(function(){ reload_dir() });
		v.btn_rootDir_reload.hide()
	}
	
	/* ---------- ---------- ---------- */
	//dir
	var reload_tID
	function reload_dir(){
		v.btn_rootDir_reload.hide()
		if(dirTree){
			dirTree.remove();
			dirTree = null;
			v.replaceDir.empty()
		}
		if(reload_tID)clearTimeout(reload_tID);
		reload_tID = setTimeout(function(){
			load_dir()
			if(currentPath){
				openCurrent(currentPath);	
			}
		},200);
	}
	var dirTree;
	function load_dir(){
		dirTree = new DirTreeViewNode(
			v.replaceDir,null,0,
			{
				initDeep :1,
				def :{ path: "", name: ""},
				showCMSDir :true,
				showWriteDir :true,
				isClickNGDir :false,
				currentSelect :null,
				extentions :"",
				settingDirs :[ 
					{path:CMS_Path.CMS.REL		,label:"CMS管理画面"},
					{path:CMS_Path.UPLOAD.REL	,label:"アップロード"},
					{path:CMS_Path.BACKUP.REL	,label:"バックアップ"},
					{path:CMS_Path.ASSET.REL	,label:"サイト設定"}
				],
				callback:function(s){},
				showSelectBtn:true,
				callback_select:function(s){
					openDir(s.path);
				}
			}
		);
		v.btn_rootDir_reload.show()
	}
	var currentSelectFile
	var tID;
	var currentPath;
	function openCurrent(_currentDir){
		currentPath = _currentDir
		var s = CMS_Path.SITE.REL + _currentDir;
			s = URL_U.getBaseDir(s.split("//").join("/"));	
		dirTree.setCurrent({dir:s,id:""},false);
	}
	function openDir(_d){
		var _dir = URL_U.treatDirName(_d.split("../").join("/"))
		UpdateDelay.delay(function(){
			stageOut();
			UpdateDelay.delay(function(){
				callback(_dir);
			});
		});
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_val,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			if(isFirst){
				createlayout();
				load_dir();
			}
			openCurrent(_val);
			isFirst = false;
			view.show()
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	function resize(){
		if(isOpen){ 
		}
		
	}
	return { init:init, stageIn:stageIn, stageOut:stageOut,
	resize:resize
 }
})();//modal

var DirTreeViewTest = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#DirTreeViewTest');
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		v = ModalViewCreater.createBaseView(DirTreeViewTest,view);

		var tag = ""
			tag = '<div class="_title">ディレクトリ選択</div>'
		v.header.html(tag);
		
			tag = ""
			tag += '<div class="_replaceDir _dirTreeView"></div><br><br><br>'
			tag += '*********************************'
			tag += '<div class="_replaceDir1 _dirTreeView"></div><br><br><br>'
			tag += '*********************************'
			tag += '<div class="_replaceDir2 _dirTreeView"></div><br><br><br>'
			tag += '*********************************'
			tag += '<div class="_replaceDir3 _dirTreeView"></div>'
		v.body.html(tag);
		
		v.replaceDir = view.find('._replaceDir');
		v.replaceDir1 = view.find('._replaceDir1');
		v.replaceDir2 = view.find('._replaceDir2');
		v.replaceDir3 = view.find('._replaceDir3');
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
		v.footer.html(tag)
		
		v.btn_close = view.find('._btn_close');
		// createCheck();
		// setBtn();
		var tree = new DirTreeViewNode(
			v.replaceDir,null,0,
			{
				initDeep :1,
				def :{ path: "", name: ""},
				showCMSDir :true,
				showWriteDir :false,
				isClickNGDir :true,
				currentSelect :null,
				extentions :"",
				callback:function(s,_view){
					if(isLog) console.log(s);
				}
			}
		);
		window.openDIR = function(_s){
			// openDIR("../test_blog_rename/cgi/lib/");
			tree.setCurrent(_s)
		}
		
		var tree = new DirTreeViewNode(
			v.replaceDir1,null,0,
			{
				initDeep :1,
				def :{ path: "", name: ""},
				showCMSDir :true,
				showWriteDir :false,
				isClickNGDir :true,
				currentSelect :null,
				hideRootNode :true,
				extentions :"",
				hideDirs :["../_cms/","../_backup/","../html/","../__"],
				callback:function(s){
					if(isLog) console.log(s);
				}
			}
		);
		
		/* ---------- ---------- ---------- */

		var tree2 = new DirTreeViewNode(
			v.replaceDir2,null,0,
			{
				initDeep :1,
				def :{ path: "../html/", name: "html"},
				showCMSDir :true,
				showWriteDir :true,
				isClickNGDir :true,
				currentSelect :null,
				extentions :"",
				callback:function(s){
					if(isLog) console.log(s);
				}
			}
		);
		
		/* ---------- ---------- ---------- */
		var tree3 = new DirTreeViewNode(
			v.replaceDir3,null,0,
			{
				initDeep :1,
				def :{ path: "../uploads/", name: "uploads"},
				showCMSDir :true,
				showWriteDir :true,
				isClickNGDir :true,
				currentSelect :null,
				extentions :"",
				callback:function(s){
					if(isLog) console.log(s);
				}
			}
		);
		tree3.setCurrent({dir:"../uploads/sub_3/",id:""});
		
		setBtn();
	}
	
	function setBtn(){
		v.btn_close.click(function(){ 
			stageOut();
		});
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){createlayout()}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();

// var tID;
// if(tID) clearTimeout(tID);
// tID = setTimeout(function(){
// 	DirTreeViewTest.init();
// 	DirTreeViewTest.stageIn();
// },1000);



var DirTreeViewNode = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_parent,_param,_deep,_treeParam) {
	  this.init(_parent,_param,_deep,_treeParam);
	}
	var p = c.prototype;
	
	/* ---------- ---------- ---------- */

	var rootParam

	p.init = function(_parent,_param,_deep,_treeParam) {
		var this_ = this;
		this.parentView = _parent;
		this.treeParam = _treeParam;
		if(_param == null) _param = _treeParam.def;
		this.param = _param;
		this.path = _param.path;
		this.deep = _deep;
		this.v = {}
		
		rootParam  = { 
			path: "../", 
			// name: CMS_Path.SITE.ABS_PATH,
			name: "/ サイトルート",
			w:"1"
		}
		
		if(_deep == 0){
			this.isRoot = true
			if(this.param.path == ""){
				this.param.path = rootParam.path;
				this.param.name = rootParam.name;
			} else{
				this.createView(rootParam);
				this.isSubCreated = true;
				this.subs = [ new DirTreeViewNode(this.v.sub,this.param,1,this.treeParam)];
				return;
			}
		} else{
			this.isRoot = false;
		}
		
		if(this.param["w"] == undefined){
			this.load_dir(this.param.path,function(data){
				data.nodes.sort(function(a, b){
					return ( a.name > b.name ? 1 : -1);
				});
				var a = [];
				var b = [];
				for (var i = 0; i < data.nodes.length ; i++) {
					if(this_.isSettingDir(data.nodes[i].path)){
						var s = this_.getSettingDir(data.nodes[i].path);
						data.nodes[i].label = s.label;
						a.push(data.nodes[i])
					} else{
						b.push(data.nodes[i])
					}
				}
				data.nodes = a.concat(b);
				
				this_.createView(data);
				this_.createSubs(data.nodes);
				this_.openDir()
			});
		} else{
			this_.createView(this.param);
			if(this.param.nodes.length > 0) {
				this.isLoadStart = true;
				this_.createSubs(this.param.nodes);
				this_.openDir();
			}
		}
	}
	
	/* ---------- ---------- ---------- */

	p.isLoadStart = false;
	p.load_dir = function(_path,_callback) {
		var this_ = this;
		this.isLoadStart = true;
		var qDeep = 1
		if(this.deep == 0) qDeep = this.treeParam.initDeep;
		var exs = "";
		if(this.treeParam.extentions !="" ) exs = '&extentions=' + this.treeParam.extentions;
		
		var p = '?action=getDirList';
				p += '&dir_name=' + escape_url(_path);
				p += '&limitDeep=' + qDeep;
				p += '&is_detail=1';
				p += exs
		var url = CMS_Path.PHP_DIRECTORY + p;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) { _callback(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		})
	}
	
	/* ---------- ---------- ---------- */
	
	p.createView = function(data) {
		var this_ = this;
		
		this.isClickable = true;
		//書き込み権限などチェック
		this.isWritable = (data.w == "1") ? true : false
		if(this.treeParam.showWriteDir == false) this.isWritable = true;
		
		//CMS関連のディレクトリか
		//20160523 いったん削除
		/*
		if(data.path.indexOf(CMS_Path.ASSET.REL) == 0 && data.path != CMS_Path.ASSET.REL) {
			this.isCMSDir = true;
			this.isWritable = false;
			data.w = "0";
		} else{
			this.isCMSDir = false;
		}
		if(this.treeParam.showCMSDir == false) {
			this.isCMSDir = false;
		}
		*/
		
		if(this.isWritable == false){
			if(this.treeParam.isClickNGDir == false){
				this.isClickable = false;	
			}
		}
		
		if(this.isNotHideDir(data.path,this.treeParam.hideDirs) ==false){
			return false;
		}
		
		var cs = ""
		if(this.deep == 0) {
			cs +="_btn_dir _btn_home";
		} else{
			cs +="_btn_dir _btn_dir_{DEEP}";
		}
		if(! this.isWritable) cs +=" _notWrite";
		if(! this.isClickable) cs +=" _noClickable";
		if(data.dirCount == "0") {
			cs +=" _notHasSubDir";
			this.isLoadStart = true;
		}
		if(data.name == "..") data.name = rootParam.name;
		var tag = '';
			tag +='<div class="_node">';
			tag +='	<div class="{CLASS}">';
			if(this.treeParam.showSelectBtn){
				tag +='		<span class="_btn_select" >選択</span>';
			}
			tag +='		<span class="_t1"><span class="{CLASS_ICON}"></span> <span class="_btn_name">{NAME}</span></span>';
			tag +='	</div>';
			tag +='	<div class="_subNode" style="padding: 0 0 0 10px;"></div>';
			tag +='</div>';
			tag = tag.split("{CLASS}").join(cs);
			tag = tag.split("{CLASS_ICON}").join(this.getDirIcon(this.deep,data.path));
			tag = tag.split("{DEEP}").join(this.deep);
			
			var nn = data.name;
			if(data.label){ nn += ' <span class="_label">'+data.label + '</span>';}
			tag = tag.split("{NAME}").join(nn);
			
		//ルートノードは表示しない
		if(this.deep == 0 && this.treeParam.hideRootNode) {
			tag = "";
			tag +='<div class="_node">';
			tag +='	<div class="_subNode"></div>';
			tag +='</div>';
		}
		
		this.view = $(tag);
		this.viewNode = this.view.find("._btn_dir");
		this.parentView.append(this.view);
		this.v.btn_select = this.view.find("._btn_select");
		this.v.btn_select.click(function(){
			this_.selectDirFile()
			return false;
		});
		this.v.btn_dir = this.view.find("._btn_dir");
		this.v.sub = this.view.find("._subNode");
		this.v.btn_dir.click(function(){
			this_.openDirFile(true)
			this_.toggleDir() 
			this_.openDir()
		});
		this.v.btn_dir.hover(
			function(){this_.showAttantion(true)},
			function(){this_.showAttantion(false)}
		);
		this.v.icon_dir = this.view.find("._icon_tree_dir,._icon_setting_dir");
		this.v.icon_dir.click(function(event){
			this_.toggleDir() 
			return false;
		})
	}
	/* ---------- ---------- ---------- */

	p.getDirIcon = function (_deep,_path){
		if(_deep == 0) {
			return "_icon_tree _icon_tree_home";
		} else {
			if(this.isSettingDir(_path)){
				return "_icon_tree2 _icon_tree_dir";
			} else{
				return "_icon_tree _icon_tree_dir";
			}
		}
	}
	p.isSettingDir = function (_path){
		if(! this.treeParam.settingDirs)return false;
		var ds = this.treeParam.settingDirs;
		for (var i = 0; i <  ds.length ; i++) {
			if(_path.indexOf(ds[i].path) == 0) return true;
		} 
		return false;
	}
	p.getSettingDir = function (_path){
		var ds = this.treeParam.settingDirs;
		for (var i = 0; i <  ds.length ; i++) {
			if(_path.indexOf(ds[i].path) == 0) return ds[i];
		} 
		return {};
	}
	/* ---------- ---------- ---------- */
	
	p.isNotHideDir = function(_path ,_dirs) {
		if(!_dirs) return true;
		var b = true;
		for (var i = 0; i <  _dirs.length ; i++) {
			if(_path.indexOf(_dirs[i]) == 0) b = false;
		}
		return b;
	}
	/* ---------- ---------- ---------- */
	p.subs
	p.checkDirName = function(_s) {
		return (_s.match(/[^0-9a-zA-Z_.-]+/) == null) ? true :false;
	}
	p.createSubs = function(dirs) {
		this.subs = []
		for (var i = 0; i < dirs.length ; i++) {
			if(this.checkDirName(dirs[i].name)){
				this.subs.push(new DirTreeViewNode(this.v.sub,dirs[i],this.deep+1,this.treeParam));
			}
		}
		this.isSubCreated = true;
		if(this.subCreatedCallback){
			this.subCreatedCallback();
			this.subCreatedCallback = null;
		}
	}
	p.isSubCreated = false;
	p.subCreatedCallback;
	
	/* ---------- ---------- ---------- */
	//アテンション
	
	p.showAttantion = function(_b) {
		if(this.isWritable )return;
		var xy= {
			x:this.v.btn_dir.offset().left+40,
			y:this.v.btn_dir.offset().top + this.v.btn_dir.height() +5
		}
		
		var ss = '<div class="_attention">書き込み権限がありません。<br><small>FTPソフトなどで、書き込み権限(707など)を設定してください</small></div>'
		//if(this.isCMSDir) ss = '<div class="_attention">CMSの設定ファイル用ディレクトリのため、書き出せません</div>'
		
		if(_b){
			SimpleToolTip.stageIn(xy,ss);
		} else{
			SimpleToolTip.stageOut();
		}
	}
	
	//クリック
	p.openDirFile = function(_clickFlg) {
		if(! this.isClickable)return;
		if(_clickFlg == undefined) _clickFlg = true;
		if(_clickFlg) this.treeParam.callback(this.param,this.view);
		//
		this.resetActive();
		this.treeParam.currentSelect = this;
		this.setActive(true);
	}
	p.resetActive = function() {
		if(this.treeParam.currentSelect){
			this.treeParam.currentSelect.setActive(false)
		}
	}
	
	//右の選択ボタンをクリック
	p.selectDirFile = function() {
		this.treeParam.callback_select(this.param);
	}
	
	p.setActive = function(_b) {
		if(_b){
			this.viewNode.addClass("_current")
		} else{
			this.viewNode.removeClass("_current")
		}
	}
	/* ---------- ---------- ---------- */
	//フォルダ開閉
	
	p.toggleDir = function() {
		if(! this.isClickable)return;
		if(this.isOpen){
			this.closeDir()
		} else{
			this.openDir()
		}
	}
	p.isOpen = false
	p.openDir = function() {
		if(! this.isClickable)return;
		var this_ = this;
		if(this.isLoadStart == false){
			this.load_dir(this.param.path,function(data){
				data.nodes.sort(function(a, b){
					return ( a.name > b.name ? 1 : -1);
				});
				this_.createSubs(data.nodes);
			})
		}
		if(this.v.icon_dir)	this.v.icon_dir.addClass("_open")
		if(this.v.sub)	this.v.sub.show()
		this.isOpen = true;
	}
	p.closeDir = function() {
		if(! this.isClickable)return;
		if(this.v.icon_dir)	this.v.icon_dir.removeClass("_open")
		if(this.v.sub)	this.v.sub.hide()
		this.isOpen = false;
	}
	
	/* ---------- ---------- ---------- */
	
	p.setCurrent = function(_param,_clickFlg) {
		if(_clickFlg == undefined) _clickFlg = true; 
		var this_ = this;
		
		if(this.isSubCreated == false){
			this.subCreatedCallback = function(){
				this_.setCurrent_core(_param,_clickFlg)
			}
		} else{
			this.setCurrent_core(_param,_clickFlg)
		}
	}
	
	p.setCurrent_core = function(_param,_clickFlg) {
		if(_clickFlg == undefined) _clickFlg = true; 
		var _path = _param.dir;
		
		for (var i = 0; i <  this.subs.length ; i++) {
			if(_path == "../") {
				this.param.fileName = _param.id;
				this.param.extra = _param.extra;
				this.openDirFile(_clickFlg);
				return;
			}
			if(_path.indexOf(this.subs[i].path) == 0){
				this.subs[i].openDir();
				this.subs[i].setCurrent(_param,_clickFlg);
			}
			if(_path == this.subs[i].path){
				//値セット
				this.subs[i].param.fileName = _param.id;
				this.subs[i].param.extra = _param.extra;
				this.subs[i].openDirFile(_clickFlg);
				
				//値リセット
				this.subs[i].param.fileName = "";
				this.subs[i].param.extra = "";
				return;
			}
		}
	}
	p.remove = function() {
	}
	return c;
})();


var DirTreeViewU = (function(){
	
	function getTag_filecount(_s){
		if(_s ==undefined) return "";
		return '<b>'+_s+'</b> files';
	}
	return { getTag_filecount:getTag_filecount }
})();




var DummyImageService = (function(){
	
	var DEF_FONT = "Verdana";
	
	var view;
	// var isInited = false
	function init(){
		$("body").append('<div id="DummyImageServiceView" style="display:none;"></div>')
		 view = $("#DummyImageServiceView");
	}
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	
	function isMock(_s){
		if(_s == undefined) return false;
		if(typeof _s != "string") return false;
		if(_s.indexOf(",") != -1) return true;
		return false;
	}
	function isDummy(_s){
		return isMock(_s)
	}
	
	function param_2_text(_param){
		var a = [];
		function f (_p,_id,_def,_a){
			if(_p[_id]){
				if(_def == ""){
					_a.push( _id +":" +_p[_id] )
				} else{
					if(_p[_id] != _def){
						_a.push( _id +":" +_p[_id] )
					}
				}
			}
		}
		f(_param,"width","" ,a);
		f(_param,"height","" ,a);
		f(_param,"color","#666" ,a);
		f(_param,"text","" ,a);
		f(_param,"text2","" ,a);
		f(_param,"font",10 ,a);
		f(_param,"font2",10 ,a);
		f(_param,"family",DEF_FONT ,a);
		f(_param,"family2",DEF_FONT ,a);
		f(_param,"style","" ,a);
		f(_param,"style2","" ,a);
		
		return a.join(",");
	}
	function getInitParam(){
		return{
			width: 200,
			height: 140,
			color: "#666",
			text: "",
			text2: "",
			font: 10,
			font2: 10,
			family: DEF_FONT,
			family2: DEF_FONT,
			style: "",
			style2: ""
		}
	}
	function text_2_param(_s){
			if(_s === undefined) _s = ""
			var a =  _s.split(",");
			var o = getInitParam();
			for (var i = 0; i <  a.length ; i++) {
				var aa = a[i].split(":");
				if(aa[0] == "width" 	&& aa[1] !="") o.width = Number(aa[1]);
				if(aa[0] == "height" 	&& aa[1] !="") o.height = Number(aa[1]);
				if(aa[0] == "color" 	&& aa[1] !="") o.color = aa[1];
				if(aa[0] == "text" 		&& aa[1] !="") o.text = aa[1];
				if(aa[0] == "text2" 	&& aa[1] !="") o.text2 = aa[1];
				if(aa[0] == "font" 		&& aa[1] !="") o.font = Number(aa[1]);
				if(aa[0] == "font2" 	&& aa[1] !="") o.font2 = Number(aa[1]);
				if(aa[0] == "family" 	&& aa[1] !="") o.family = aa[1];
				if(aa[0] == "family2" 	&& aa[1] !="") o.family2 = aa[1];
				if(aa[0] == "style" 	&& aa[1] !="") o.style = aa[1];
				if(aa[0] == "style2" 	&& aa[1] !="") o.style2 = aa[1];
			}
			return o;
	}
	function treatParam(_param){
		if(_param["width"]) _param.width = Number(_param.width);
		if(_param["height"]) _param.height = Number(_param.height);
		if(_param["font"]) _param.font = Number(_param.font);
		if(_param["font2"]) _param.font2 = Number(_param.font2);
		return _param;
	}
	var CANVAS_ID = "_DummyImageCanvas_"
	function getImage(_s){
		var param = text_2_param (_s);
		var temp = '<canvas id="{CANVAS_ID}" style="hidden" width="{W}" height="{H}"></canvas>';
			temp = temp.split("{CANVAS_ID}").join(CANVAS_ID);
			temp = temp.split("{W}").join(param.width);
			temp = temp.split("{H}").join(param.height);
		view.html(temp);
		var canvas = document.getElementById(CANVAS_ID);
			setImage_2_CTX(canvas.getContext('2d') ,param)
		return canvas.toDataURL();
	}
	
	function setImage_2_CTX(_ctx,_param){
		treatParam(_param)
		setImage_2_CTX_rect(_ctx,_param);
		if(_param.width >= 50 && _param.height >= 20){
		setImage_2_CTX_text(_ctx,_param);
		} 
	}
	function setImage_2_CTX_rect(_ctx,_param){
		_ctx.clearRect(0,0,800,400);
		_ctx.beginPath();
		if(_param.color != "trans"){
			_ctx.fillStyle = _param.color;
			_ctx.fillRect(0, 0, _param.width, _param.height);
		}
	}
	function setImage_2_CTX_text(_ctx,_param){
		var w = _param.width;
		var h = _param.height;
		
		_ctx.textBaseline = "middle"
		_ctx.textAlign = "center"
		_ctx.fillStyle = getTextColor(_param.color);
		_ctx.font = _getFont(_param.font,_param.family,_param.style); 
		var s = w + " x " + h;
		if(_param.text != "") s = _param.text;
		var tarH = (h/2) 
		if(_param.text2 != ""){
			tarH -= (_param.font2 / 2)
		}
		_ctx.fillText(s, w /2, tarH );
		
		if(_param.text2 != ""){
			_ctx.font = _getFont(_param.font2,_param.family2,_param.style2); 
			var s = _param.text2;
				tarH += (_param.font / 2) + (_param.font / 4) + (_param.font2 / 4)
			_ctx.fillText(_param.text2, w /2, tarH);
		}
	}
	function _getFont(_f,_fa,_st){
		 var s1 = (_f != "") ?  _f : "10";
		 var s2 = (_fa != "") ?  _fa : "Verdana";
		 var s3 = (_st != "") ? _st : "";
		return s3 +" " + s1  + "px '"+s2+"'";
	}
	
	var textColorBK= 'rgba(0,0,0,0.6)';
	var textColorWH= 'rgba(255,255,255,0.8)';
	
	var textColorBK2= 'rgba(0,0,0,0.05)';
	var textColorWH2= 'rgba(255,255,255,0.15)';
	function getTextColor(colorCode,_bk,_wh){
		if(_bk == undefined ) _bk = textColorBK
		if(_wh == undefined ) _wh = textColorWH
		if(colorCode.length == 4){
			var s = "#"
			s += colorCode.charAt(1) + colorCode.charAt(1)
			s += colorCode.charAt(2) + colorCode.charAt(2)
			s += colorCode.charAt(3) + colorCode.charAt(3)
			colorCode = s;
		}
		
		if(colorCode.length != 7)return _bk;
		
		var rgb = { red: 0, green: 0, blue: 0 }; 
		rgb.red   = parseInt(colorCode.substring(1, 3), 16);
		rgb.green = parseInt(colorCode.substring(3, 5), 16);
		rgb.blue  = parseInt(colorCode.substring(5, 7), 16);
		var brightness = (rgb.red + rgb.green + rgb.blue ) / (3*255);
		return brightness >= 0.5 ? _bk:_wh;
	}
	return {
		init:init,
		param_2_text:param_2_text,
		text_2_param:text_2_param,
		isMock:isMock,
		isDummy:isDummy,
		getImage:getImage,
		setImage_2_CTX:setImage_2_CTX
	}
})();

//__placeholder__.init();
var DummyImageView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#DummyImageView');
		stageInit();
		setBtn();
		// setTimeout(function(){
		// 	stageIn("width:200,height:100,color:,text:,font:",function(){})
		// },500);
	}
	
	/* ---------- ---------- ---------- */
	var fonts = [
		'Verdana',
		'Arial',
		// 'Comic Sans MS',
		'Courier',
		// 'Courier New',
		'Georgia',
		// 'Impact',
		// 'Times New Roman',
		// 'Trebuchet MS'
	]
 	var cols = [ "#fff","#eee", "#ddd", "#ccc", "#999", "#666", "#333", "#000", "#900", "#990", "#090", "#099", "#009", "#909", "#F00", "#FF0", "#0F0", "#0FF", "#00F", "#F0F", "#FCC", "#FFC", "#CFC", "#CFF", "#CCF", "#FCF" ]

	
	function createlayout(){
		v = ModalViewCreater.createBaseView(Anchor_InputView,view);
		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/dummy","_BASE_")+'</div>'
			tag += '<div class="_title">ダミー画像設定</div>'
		v.header.html(tag);
		
			tag = "";
			tag += '<div class="_read">ダミー画像設定では、アタリ用の画像を設定できます。<br>縦横のサイズを指定できるほか、色の設定や、文字の入力もできます。</div>'
			tag += '<div class="_mockStage">'
			
			// tag += '<canvas id="DummyImageView_canvas" width="800" height="300"></canvas>'
			tag += '<div class="_image_placeholder"></div>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:75px;">50</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:125px;">100</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:225px;">200</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:325px;">300</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:425px;">400</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:525px;">500</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:625px;">600</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:725px;">700</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_width" style="top:10px ;left:825px;">800</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_height" style="top:75px ;left:10px;">50</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_height" style="top:125px ;left:0px;">100</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_height" style="top:225px ;left:0px;">200</span>'
			tag += '<span class="_btn_preset _btn_pos _btn_height" style="top:325px ;left:0px;">300</span>'
			tag += '</div>';
			tag += '<table class="_values">';
			tag += '	<tr><td>縦横サイズ : </td><td>'
			tag += '		<input type="text" class="_in_ _in_width _w50" >x'
			tag += '		<input type="text" class="_in_ _in_height _w50" >'
			tag += '	 背景色:'
			tag += '		<input type="text" class="_in_ _in_color _w100">'
			
			for (var i = 0; i <  cols.length ; i++) {
			tag += '<span class="_btn_color" data-color="'+cols[i]+'" style="color:'+cols[i]+';"><i class="fa fa-circle "></i> </span> \n'
			}
			tag += '	</td></tr>';
			//text
			tag += '	<tr><td>テキスト : </td><td>'
			tag += '		<input type="text" class="_in_ _in_text _w200">'
			tag += '		font :'
			tag += '		<select class="_sel_ _in_family" >';
			for (var i = 0; i <  fonts.length ; i++) {
				tag += '	<option value="'+fonts[i]+'">'+fonts[i]+'</option>';
			}
			tag += '		</select>';
			tag += '		style :'
			tag += '		<select class="_sel_ _in_style" >';
			tag += '		<option value="">なし</option>';
			tag += '		<option value="bold">bold</option>';
			tag += '		<option value="italic">italic</option>';
			tag += '		</select>';
			tag += '		size :'
			tag += '		<input type="text" class="_in_ _in_font _w50">'
			tag += '		<span class="_btn_preset _btn_font">10</span>'
			tag += '		<span class="_btn_preset _btn_font">12</span>'
			tag += '		<span class="_btn_preset _btn_font">14</span>'
			tag += '		<span class="_btn_preset _btn_font">18</span>'
			tag += '		<span class="_btn_preset _btn_font">24</span>'
			tag += '		<span class="_btn_preset _btn_font">36</span>'
			tag += '		<span class="_btn_preset _btn_font">48</span>'
			tag += '	</td></tr>';
			
			tag += '	<tr><td>サブテキスト : </td><td>'
			tag += '		<input type="text" class="_in_ _in_text2 _w200">'
			tag += '		font :'
			tag += '		<select class="_sel_ _in_family2" >';
			for (var i = 0; i <  fonts.length ; i++) {
				tag += '	<option value="'+fonts[i]+'">'+fonts[i]+'</option>';
			}
			tag += '		</select>';
			tag += '		style :'
			tag += '		<select class="_sel_ _in_style2" >';
			tag += '		<option value="">なし</option>';
			tag += '		<option value="bold">bold</option>';
			tag += '		<option value="italic">italic</option>';
			tag += '		</select>';
			tag += '		size :'
			tag += '		<input type="text" class="_in_ _in_font2 _w50">'
			tag += '		<span class="_btn_preset _btn_font2">10</span>'
			tag += '		<span class="_btn_preset _btn_font2">12</span>'
			tag += '		<span class="_btn_preset _btn_font2">14</span>'
			tag += '		<span class="_btn_preset _btn_font2">18</span>'
			tag += '		<span class="_btn_preset _btn_font2">24</span>'
			tag += '		<span class="_btn_preset _btn_font2">36</span>'
			tag += '		<span class="_btn_preset _btn_font2">48</span>'
			tag += '	</td></tr>';
			
			tag += '	<tr><td  style="vertical-align: top;">プリセット : </td><td>'
			tag += '		<table class="_prest_rects">';
			tag += '			<tr>';
			tag += '				<td><div class="_preset_rect" data-src="width:80,height:60"></div></td>';
			tag += '				<td><div class="_preset_rect" data-src="width:100,height:80"></div></td>';
			tag += '				<td><div class="_preset_rect" data-src="width:200,height:140"></div></td>';
			tag += '				<td><div class="_preset_rect" data-src="width:300,height:200"></div></td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '		<table class="_prest_rects">';
			tag += '			<tr>';
			tag += '				<td><div class="_preset_rect" data-src="width:720,height:300"></div></td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '	</td></tr>';
			tag += '	<tr><td  style="vertical-align: top;">捕足 : </td><td>'
			tag += '	※ダミー画像は、ページ表示時にデータURIスキームを利用して表示されます。<br>'
			tag += '	※IE6,7,8など、データURIスキームに対応していないブラウザの場合は、<br>同じ縦横サイズのインラインエレメントに置き換えて表示されます。<br>'
			tag += '	※幅・高さともに、10〜1200pxまで指定できます。<br>'
			tag += '	※文字色は、背景色の濃さによって、白か黒色が自動で指定されます。直接指定する事はできません。<br>'
			tag += '	※幅・高さが小さい場合は、テキストは表示されません。<br>'
			tag += '	</td></tr>';
			tag += '</table>';
			tag += '';
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 設定する</div> ';
		v.footer.html(tag);

		
		setBtn();
	}
		
	function setBtn(){

		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		view.find('._btn_do').click(function(){ pressOK() });
		
		view.find('._in_').keyup(function(){update_pre()})
		view.find('._sel_').change(function(){update()})
		
		v.placeholder = view.find('._image_placeholder');
		
		v.in_width = view.find('._in_width')
		v.in_height = view.find('._in_height')
		v.in_color = view.find('._in_color')
		
		v.in_text = view.find('._in_text')
		v.in_text2 = view.find('._in_text2')
		
		v.in_font = view.find('._in_font')
		v.in_font2 = view.find('._in_font2')
		
		v.in_family = view.find('._in_family')
		v.in_family2= view.find('._in_family2')
		
		v.in_style = view.find('._in_style')
		v.in_style2 = view.find('._in_style2')
		
		v.btn_width = view.find('._btn_width')
		v.btn_width.click(function(){ 
			var s = $(this).text();
			v.in_width.val(s)
			update()
		});
		v.btn_height = view.find('._btn_height')
		v.btn_height.click(function(){ 
			var s = $(this).text();
			v.in_height.val(s)
			update()
		});
		
		v.btn_color = view.find('._btn_color')
		v.btn_color.click(function(){ 
			var s = $(this).data("color").toLowerCase()
			v.in_color.val(s)
			update()
		});
		
		v.btn_font = view.find('._btn_font')
		v.btn_font.click(function(){ 
			var s = $(this).text()
			v.in_font.val(s)
			update()
		});
		v.btn_font2 = view.find('._btn_font2')
		v.btn_font2.click(function(){ 
			var s = $(this).text()
			v.in_font2.val(s)
			update()
		});
		
		v.preset_rect = view.find('._preset_rect')
		v.preset_rect.each(function (index, dom) {
			createPresetImage(dom)
		});
		v.preset_rect.click(function(){ 
			var s = $(this).data("src")
			var p = DummyImageService.text_2_param(s)
			v.in_width.val(p.width)
			v.in_height.val(p.height)
			update()

		});
	}
	
	
	/* ---------- ---------- ---------- */
	function createPresetImage(_tar){
		var s = $(_tar).data("src");
		var data = DummyImageService.getImage(s);
		var tag = '<img src="'+data+'">' 
		$(_tar).html(tag);
	}
	
	/* ---------- ---------- ---------- */
	function initView(_s){
		var param = DummyImageService.text_2_param(_s);
		v.in_width	.val(param.width);
		v.in_height	.val(param.height);
		v.in_color	.val(param.color);
		
		v.in_text	.val(param.text);
		v.in_text2	.val(param.text2);
		
		v.in_font	.val(param.font);
		v.in_font2	.val(param.font2);
		
		v.in_family	.val(param.family);
		v.in_family2.val(param.family2);
		
		v.in_style	.val(param.style);
		v.in_style2	.val(param.style2);
		
		update()
	}
	
	
	
	/* ---------- ---------- ---------- */
	var canvas
	var ctx
	function getCurrentParam(){
		function f(_s){
			if(_s == false) return "";
			var s = _s;
				s = s.split(",").join("");
				s = s.split(":").join("");
			return s;
		}
		var param = {}
			param.width  = Number(f(v.in_width.val()));
			param.height  = Number(f(v.in_height.val()));
			param.color  = f(v.in_color.val());
			
			param.text 	 = f(v.in_text.val());
			param.text2  = f(v.in_text2.val());
			
			param.font 	 = f(v.in_font.val());
			param.font2  = f(v.in_font2.val());
			
			param.family  = f(v.in_family.val());
			param.family2  = f(v.in_family2.val());
			
			param.style  = f(v.in_style.val());
			param.style2  = f(v.in_style2.val());
		
		if(isNaN(param.width))return;
		if(isNaN(param.height))return;
		if(param.width > 1200) {
			param.width = 1200;
			v.in_width.val(param.width)
		}
		if(param.width < 10) {
			param.width = 10;
			v.in_width.val(param.width)
		}
		if(param.height > 1200) {
			param.height = 1200;
			v.in_height.val(param.height)
		}
		if(param.height < 10) {
			param.height = 10;
			v.in_height.val(param.height)
		}
		return param;
	}
	var tID
	function update_pre(){
		if(tID) clearTimeout(tID)
		tID = setTimeout(function(){
			update()
		},400);
	}
	function update(){
		var s = DummyImageService.param_2_text(getCurrentParam());
		var src = DummyImageService.getImage(s);
		if(v.placeholder){
			v.placeholder.html('<img src="'+src+'">')
		}
	}
	/* ---------- ---------- ---------- */
	
	function pressOK(){
		if(callback){
			callback(DummyImageService.param_2_text(getCurrentParam()));
		}
		stageOut();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback 
	function stageIn(_s,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			if(isFirst){
			createlayout();
			}
			callback = _callback
			initView(_s);
			isFirst = false;
			//
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();

/*
function hideModalView(){ }
function showModalView(){ }

$(function(){
	DummyImageService.init()
	ImageMapView.init()
	
	$(".btn_open").click(function(){
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: $(this).data("id"),
			dataType		: 'json',
			success			: function(data) {
				openAA({data:data})
			},
			error			: function(data) {console.log(data);}
		})
	})
	$(".btn_open").eq(0).click();
	$("._btn_out").click(function(){
		window.comp()
	})
	// setTimeout(function(){
	// 	$("._btn_out").click()
	// },500);
});
function openAA(_param){
	ImageMapView.stageOut();
	ImageMapView.stageIn(_param.data,function(_s){
		_param.data = _s;
		// setTimeout(function(){
		// 	updateCallback();
		// }, 200);
		$(".out").html(ImageMapExport.getHTML(_param.data));
		$("#out_html").val(ImageMapExport.getHTML(_param.data));
		$("#out_json").val(JSON.stringify(_param.data, null, "	"));
	});
}
*/
/* ! ---------- ImageMapView ---------- ---------- ---------- ---------- */

var ImageMapView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(){
		view = $('#ImageMapView');
		stageInit();
		ImageMapBMPText.init();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	var mainStage 
	function createlayout(){
		var tag = ""
			tag += '<div class="_bg"></div>'
			tag += '<div class="_modalBox">'
			tag += '	<div class="_header">'
			tag += '		<div class="_title">イメージブロック / レイアウト編集</div>'
			tag += '	</div>'
			tag += '	<div class="_body"></div>'
			tag += '	<div class="_footer">'
			tag += '		<div class="_btn_close">閉じる</div> ';
			tag += '		<div class="_btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 編集完了</div> ';
			tag += '	</div>'
			tag += '</div>'
		view.html(tag);
		
		v.header = view.find("._header");
		v.body = view.find("._body");
		v.footer = view.find("._footer");
		
		mainStage = ImageMap.MainStage;
		mainStage.init(v.body);

		setBtn();
		
	}
	/* ---------- ---------- ---------- */
	function setBtn(){
	
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
		
		v.btn_do = view.find('._btn_do');
		view.on("click", '._btn_do', function() {
			compliteEdit();
		});
	}
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	/* ---------- ---------- ---------- */
	
	function compliteEdit(){
		callback( mainStage.getData(true));
		stageOut();
	}
	// window.comp = compliteEdit
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	var callback;
	function stageInit(){
		view.hide();
	}
	function stageIn(_data,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			callback = _callback;
			if(isFirst){
				createlayout();
				CMS_ScreenManager.registResize(function(){
					resize();
				});
			}
			isFirst = false;
			//
			mainStage.setData(_data);
			resize();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
			ImageMap.InspectView.stageOut()
		}
	}
	function resize(){
		if(isOpen){ 
			mainStage.resize();
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut
	}
})();



var ImageMap = {}

ImageMap.MainStage = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(_view){
		view = _view;
		createlayout();
		updateWH();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){
		var tag = "";
			tag += '<div class="_canvas_tools">';
			tag += '	<input type="checkbox" class="_in_bg_dark" id="_imagemap_bg_dark" /><label for="_imagemap_bg_dark">プレビュー背景</label>';
			tag += '	　サイズ：<input type="number" step="10" class="_w50 _in_size_w " />';
			tag += '	☓<input type="number" step="10" class="_w50 _in_size_h" />px';
			tag += '	　背景色：<input type="text" class="_w60 _in_bg_color _colorPicker" />';
			tag += '	　文字色：<input type="text" class="_w60 _in_tx_color _colorPicker" />';
			tag += '	　吸着：<input type="text" class="_w30 _in_grid" />%';
			//tag += '	　ズーム：<input type="text" class="_w30 _in_zoom" />%';
			tag += '	　ズーム：';
			tag += '		<select class="_in_zoom">';
			tag += '			<option value="6.0">600%</option>';
			tag += '			<option value="4.0">400%</option>';
			tag += '			<option value="2.0">200%</option>';
			tag += '			<option value="1.5">150%</option>';
			tag += '			<option value="1.0">100%</option>';
			tag += '			<option value="0.75">75%</option>';
			tag += '			<option value="0.5" >50%</option>';
			tag += '			<option value="0.25">25%</option>';
			tag += '		</select>';
			tag += '		<span class="_move _move_up"><i class="fa fa-arrow-up "></i></span>';
			tag += '		<span class="_move _move_down"><i class="fa fa-arrow-down "></i></span>';
			tag += '		<span class="_move _move_left"><i class="fa fa-arrow-left "></i></span>';
			tag += '		<span class="_move _move_right"><i class="fa fa-arrow-right "></i></span>';
			tag += '	<div class="_right_area">';
			tag += '	　<div class="_btn _btn_reset"><i class="fa fa-trash "></i> リセット</div>';
			tag += '	</div>';
			tag += '	<div class="_top_area">';
			tag += '	　<div class="_btn _btn_json">{...} JSON編集</div>';
			tag += '	</div>';
			tag += '</div>';
			tag += '<div class="_add_btns">';
			tag += '	<div class="ss_add_image _read"></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _rect" 	data-type="item.rect" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _line" 	data-type="item.line" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _image" 	data-type="item.image" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _svg" 		data-type="item.svg" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _text" 	data-type="item.text" data-extra="multi"></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _text2" 	data-type="item.text" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _html" 	data-type="item.html" data-extra=""></div>';
			tag += '	<div class="_btn_add _cms_btn_alpha ss_add_image _link" 	data-type="item.link" data-extra=""></div>';
			tag += '</div>';
			tag += '<div class="_layoutView">';
			tag += '	<div class="_imageStageWapper">';
			tag += '		<div class="_imageStageInner">';
			tag += '			<div class="_cms-design-stage _cms_bg_trans"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '			<div class="_cms-design-mask"></div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '	<div class="_layersView"></div>';
			// tag += '	<div class="_zoomVal">0</div>';
			tag += '</div>';
		view.html(tag);

		ImageMap.InspectView.init();
		ImageMap.LayersView.init(view.find("._layersView"));
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//個別処理
	var in_ = {}
	
	function setBtn(){
		v.canvas_tools = view.find("._canvas_tools");
		// v.zoomVal = view.find("._zoomVal");
		
		v.all = v.canvas_tools.find("input");
		v.all.keyup(function(){ updateState(600)})
		v.all.change(function(){ updateState()})//checkbox
		
		in_.size_w 		= v.canvas_tools.find("._in_size_w");
		in_.size_h 		= v.canvas_tools.find("._in_size_h");
		in_.bg_color 	= v.canvas_tools.find("._in_bg_color");
		in_.tx_color 	= v.canvas_tools.find("._in_tx_color");
		in_.bg_dark 	= v.canvas_tools.find("._in_bg_dark");
		in_.grid 		= v.canvas_tools.find("._in_grid");
		
		initZoom()
		
		v.designStage 	= view.find("._cms-design-stage");
		v.designMask 	= view.find("._cms-design-mask");
		v.layers 		= view.find("._layersView");
		
		v.btn_reset 	= view.find("._btn_reset");
		v.btn_json 		= view.find("._btn_json");
		v.btn_add 		= view.find("._btn_add");
		
		v.btn_reset		.click(function(){ resetAll(); })
		v.btn_json		.click(function(){ editJson(); })
		v.btn_add		.click(function(){ 
			addItem($(this).data("type"), undefined, $(this).data("extra"));
			updateViewList();
		})
		
		view.on("dblclick","._design-item-image",function(){
			ImageMap.InspectView.dClick("image");
		})
		view.on("dblclick","._design-item-text",function(){
			ImageMap.InspectView.dClick("text");
		})
		view.on("dblclick","._design-item-svg",function(){
			ImageMap.InspectView.dClick("svg");
		})
		view.on("dblclick","._design-item-html",function(){
			ImageMap.InspectView.dClick("html");
		})
	}
	
	/* ---------- ---------- ---------- */
	//カンバスステート更新
	
	var tID_state;
	function updateState(_delay){
		if(tID_state) clearTimeout(tID_state);
		tID_state = setTimeout(function(){
			updateState_delay()
		},(_delay) ? _delay :200 );
	}
	function limit(_s,_low,_hight){
		if(_s < _low)_s = _low;
		if(_s > _hight)_s = _hight;
		return _s;
	}
	function updateState_delay(){
		var b = false;
		var cv = canvasData.canvas;
		if(cv.width != Number(in_.size_w.val()) ) {
			cv.width = limit(Number(in_.size_w.val()) ,10,2000)
			b = true;
		}
		if(cv.height != Number(in_.size_h.val()) ) {
			cv.height = limit(Number(in_.size_h.val()) ,10,2000)
			b = true;
		}
		if(cv.background != in_.bg_color.val() ) {
			cv.background = in_.bg_color.val()
			b = true;
		}
		if(cv.color != in_.tx_color.val() ) {
			cv.color = in_.tx_color.val()
			b = true;
		}
		if(cv.dark != in_.bg_dark.prop("checked") ) {
			cv.dark = in_.bg_dark.prop("checked")
			b = true;
		}
		if(cv.grid != Number(in_.grid.val()) ) {
			cv.grid = limit(Number(in_.grid.val()) ,0,100);
			ImageMap.State.grid = cv.grid;
		}
		
		if(b){
			update(false);
		}
	}
	
	/* ---------- ---------- ---------- */
	//データセット
	
	var canvasData;
	
	function setData(_data){
		canvasData = JSON.parse(JSON.stringify(_data));
		resetZoom();
		update(true);
	}
	
	function update(_initDate){
		if(! _initDate){
			canvasData = getData();
		}
		resetItem();
		ImageMap.InspectView.reset();
		ImageMap.LayersView.reset();
		
		if(canvasData == undefined) {
			canvasData.list = [];
		}
		if(canvasData.list == undefined) {
			canvasData.list = [];
		}
		if(canvasData.canvas == undefined) {
			canvasData.canvas = { width:"300",height:"200", background:"", grid:"" }
		}
		
		//サイズ
		var S = ImageMap.State;
			S.imageW = Number(canvasData.canvas.width);
			S.imageH = Number(canvasData.canvas.height);
			S.grid = Number(canvasData.canvas.grid);
			
		var ratio = ImageMapU.getRatio(S.imageW+":"+S.imageH);
		
		in_.size_w.val(S.imageW);
		in_.size_h.val(S.imageH);
		
		//背景色
		in_.bg_color.val(canvasData.canvas.background);
		in_.tx_color.val(canvasData.canvas.color);
		if(canvasData.canvas.dark) { in_.bg_dark.prop("checked",true) }
		
		//グリッド
		in_.grid.val(S.grid);
		
		/* ---------- ---------- ---------- */
		
		var cs1 = "";
		var cv = canvasData.canvas;
		if(cv.dark){ cs1 = "background:rgba(0,0,0,0.75)!important;"; }
		if(cv.background){ cs1 = "background:"+cv.background+"!important;"; } 
		var cs2 = "";
		if(cv.color){
			cs1 += "color:"+cv.color+";";
			cs2 += "fill:"+cv.color+";";
		}
		var tag = "";
			tag += '<style>';
			tag += '._cms-design-stage { position: absolute; width:100%; '+cs1+'}';
			tag += '._cms-design-stage svg{'+cs2+'}';
			tag += '._cms-design-stage svg{1: #fff;}';
			tag += '._cms-design-stage:before { content:""; display: block; padding-top:'+ ratio +'%;}';
			tag += '._cms-design-mask {position: absolute; width:100%; background: rgba(51,51,51,0.5);}';
			tag += '</style>';
		v.designStage.empty();
		v.designStage.html(tag);
		
		v.inner = v.designStage;
		
		//カンバス位置サイズ計算
		// var _wh = ImageMapU.resize( { w: S.imageW, h: S.imageH }, { w: S.stageW, h: S.stageH }, false );
		S.canvasW = S.imageW * getZoom();
		S.canvasH = S.imageH * getZoom();
		
		S.left = (S.stageW - S.canvasW) / 2;
		S.top = (S.stageH - S.canvasH) / 2;
		
		//サイズ・位置・背景指定
		v.designStage.width(S.canvasW);
		v.designStage.height(S.canvasH);
		v.designStage.css("left",S.left +"px");
		v.designStage.css("top",S.top +"px");
		
		//こまごま
		_updateGrid();
		// _updateZoomView();
		
		//組み立てなおし
		var _list = canvasData.list;
		for (var i = 0; i <  _list.length ; i++) {
			addItem(_list[i]);
		}
		updateViewList();
	}
	
	function _updateGrid(){
		var S = ImageMap.State;
		//枠作成
		var BD = 4;
		v.designMask.eq(0).width(S.canvasW+(BD*2));
		v.designMask.eq(0).height(BD);
		v.designMask.eq(0).css("left",S.left-BD +"px");
		v.designMask.eq(0).css("top",S.top-BD +"px");
		
		v.designMask.eq(1).width(BD);
		v.designMask.eq(1).height(S.canvasH);
		v.designMask.eq(1).css("left",S.left+S.canvasW +"px");
		v.designMask.eq(1).css("top",S.top +"px");
		
		v.designMask.eq(2).width(S.canvasW+(BD*2));
		v.designMask.eq(2).height(BD);
		v.designMask.eq(2).css("left",S.left-BD +"px");
		v.designMask.eq(2).css("top",S.top + S.canvasH +"px");
		
		v.designMask.eq(3).width(BD);
		v.designMask.eq(3).height(S.canvasH);
		v.designMask.eq(3).css("left",S.left -BD +"px");
		v.designMask.eq(3).css("top",S.top +"px");
		
		v.designMask.eq(4).width(S.canvasW+(BD*2));
		v.designMask.eq(4).height(1);
		v.designMask.eq(4).css("left",S.left +"px");
		v.designMask.eq(4).css("top",S.top + (S.canvasH/2) +"px");
		v.designMask.eq(4).css("opacity",0.2);
		
		v.designMask.eq(5).width(1);
		v.designMask.eq(5).height(S.canvasH);
		v.designMask.eq(5).css("left",S.left + (S.canvasW/2) +"px");
		v.designMask.eq(5).css("top",S.top +"px");
		v.designMask.eq(5).css("opacity",0.2);
	}
	
	/*
	function _updateZoomView(){
		var S = ImageMap.State;
		var sw = Math.round((S.canvasW/S.imageW)*100);
		var sh = Math.round((S.canvasH/S.imageH)*100);
		v.zoomVal.html( (sw > sh) ? sh + "%" : sw + "%" );
	}
	*/
	
	/* ---------- ---------- ---------- */
	//データ出力
	
	function getData(_updated){
		var out_ = JSON.parse(JSON.stringify(canvasData));
			out_.list = [];
		for (var i = 0; i <  items.length ; i++) {
			var data = items[i].getData();
				data.rect = ImageMapU.convertPixel_2_Percent(data.rect);
				if(_updated){
					if(data.type == "item.text"){
						if(data.data.bmp){
							data.data.bmpData = ImageMapBMPText.getImage(data);
						} else{
							data.data.bmpData = "";
						}
					}
					data.date = new Date().getTime();
				}
			out_.list.push(data);
		}
		return out_;
	}
	/* ---------- ---------- ---------- */
	
	function resetAll(){
		canvasData.list = [];
		update(true);
	}
		
	/* ---------- ---------- ---------- */
	
	function setJson(_s){
		var data
		try{
		  data = JSON.parse(_s);
		} catch( e ){
			alert("データ形式が正しくありません。");
			return;
		}
		if(data){
			setData(data);
		}
		
	}
	function editJson(){
		Editer_JSONView.stageIn(
			JSON.stringify(canvasData, null, "	"),
			function(_s){ setJson(_s) }
		);
	}
	
	/* ---------- ---------- ---------- */
	
	var items;
	
	//追加
	function resetItem(){
		if(items){
			for (var i = 0; i < items.length ; i++) {
				items[i].remove();
			}
		}
		items = [];
	}
	function addItem(_data,_pos,_extra){
		var data;
		if(typeof _data == "string"){
			data = ImageMapCode.getInitData(_data,_extra);
		} else{
			data = JSON.parse(JSON.stringify(_data));
		}
		data.rect = ImageMapU.convertPercent_2_Pixel(data.rect);
		var rectView = new ImageMap.RectViewClass(data.type);
			rectView.setData(data);
			if(_pos!= undefined){
				items.splice(_pos,0,rectView);
			} else{
				items.push(rectView);
			}
		return rectView;
	}
	
	//削除
	function removeItem(){
		if(!currentItem) return;
		var a = [];
		for (var i = 0; i < items.length ; i++) {
			if(items[i] == currentItem) {
				items[i].remove();
			} else{
				a.push(items[i])
			}
		}
		items = a;
		currentItem = null;
		//
		selectLast();
		updateViewList();
	}
	function selectLast(){
		if(items.length > 0){
			items[items.length -1].select();
		}
	}
	
	//JSON編集
	function editItem(){
		if(!currentItem) return;
		currentItem.editJson();
	}
	
	/* ---------- ---------- ---------- */

	//複製
	function dupItem_right(){
		if(!currentItem)return;
		var dup = currentItem.getData();
			dup.rect.left += dup.rect.width;
			dup.rect = ImageMapU.convertPixel_2_Percent(dup.rect);
		
		var item = addItem(dup,currentItem.no+1);
			item.select();
		updateViewList();
	}
	function dupItem_bottom(){
		if(!currentItem)return;
		var dup = currentItem.getData();
			dup.rect.top += dup.rect.height;
			dup.rect = ImageMapU.convertPixel_2_Percent(dup.rect);
		var item = addItem(dup,currentItem.no+1);
			item.select();
		updateViewList();
	}
	
	/* ---------- ---------- ---------- */
	//レイヤー順移動
	
	function swapItem(_items,_from,_to){
		var from_ 	 = items[_from];
		var to_ 	 = items[_to];
		if(from_ ==undefined)return;
		if(to_ ==undefined)return;
		_items[_to]  = from_;
		_items[_from]  = to_;
		return _items;
	}
	//全面へ
	function moveFront(){
		var n = currentItem.no;
		swapItem(items,n,n+1);
		updateViewList();
	}
		
	function moveBack(){
		var n = currentItem.no;
		swapItem(items,n,n-1);
		updateViewList();
	}
	function moveFront2(){
		var n = currentItem.no;
		swapItem(items,n,items.length-1);
		updateViewList();
	}
	function moveBack2(){
		var n = currentItem.no;
		swapItem(items,n,0);
		updateViewList();
	}
	
	//ビューの並びを更新
	function updateViewList(){
		var tag = ""
		for (var i = 0; i <  items.length ; i++) {
			items[i].setNo(i);
			items[i].updateImage();
			v.inner.append(items[i].getView());
		}
		ImageMap.LayersView.update(items);
	}
	
	function assingText2Image(_src){
		var src = CMS_PathFunc.treatRel(_src);
		var b = false;
		for (var i = 0; i <  items.length ; i++) {
			var data = items[i].getData();
			if(src == data.data.src) b = true;
		}
		if(! b){
			addItem("item.image",undefined,{ src:_src });
		}
		updateViewList();
	}
	
	/* ---------- ---------- ---------- */

	//選択セット
	var currentItem
	function selectItem(_item){
		currentItem = _item;
		ImageMap.InspectView.selectedItem(_item);
		ImageMap.LayersView.selectedItem(_item);
	}

	function hideItem(_no,_b){
		items[_no].hideItem(_b)
	}
	
	function lockItem(_no,_b){
		items[_no].lockItem(_b)
	}
		
	/* ---------- ---------- ---------- */
	
	function initZoom(){
		in_.zoom 		= v.canvas_tools.find("._in_zoom");
		in_.zoom.change(function(){updateZoom()})
		
		in_.move_left 		= v.canvas_tools.find("._move_left");
		in_.move_right 		= v.canvas_tools.find("._move_right");
		in_.move_up 		= v.canvas_tools.find("._move_up");
		in_.move_down 		= v.canvas_tools.find("._move_down");
		in_.move_left	.click(function(){moveCanvasLeft(100)})
		in_.move_right	.click(function(){moveCanvasLeft(-100)})
		in_.move_up		.click(function(){moveCanvasTop(100)})
		in_.move_down	.click(function(){moveCanvasTop(-100)})
	}
	
	var _zoom;
	function resetZoom(){
		in_.zoom.val("1.0");
		_zoom = 1;
	}
	function updateZoom(){
		_zoom = limit(Number(in_.zoom.val()) ,0,10);
		resize();
	}
	function getZoom(){
		return _zoom;
	}
	
	function __moveCanvas(_tar,_d,_n){
		var nn = _tar.css(_d).split("px").join("");
		_tar.css(_d, Number(nn) + _n);
	}
	function moveCanvasLeft(_n){
		__moveCanvas(v.designStage, "left", _n);
		__moveCanvas(v.designMask.eq(0), "left", _n);
		__moveCanvas(v.designMask.eq(1), "left", _n);
		__moveCanvas(v.designMask.eq(2), "left", _n);
		__moveCanvas(v.designMask.eq(3), "left", _n);
		__moveCanvas(v.designMask.eq(4), "left", _n);
		__moveCanvas(v.designMask.eq(5), "left", _n);
	}
	function moveCanvasTop(_n){
		__moveCanvas(v.designStage, "top", _n);
		__moveCanvas(v.designMask.eq(0), "top", _n);
		__moveCanvas(v.designMask.eq(1), "top", _n);
		__moveCanvas(v.designMask.eq(2), "top", _n);
		__moveCanvas(v.designMask.eq(3), "top", _n);
		__moveCanvas(v.designMask.eq(4), "top", _n);
		__moveCanvas(v.designMask.eq(5), "top", _n);
	}

	/* ---------- ---------- ---------- */
	
	function resize(){
		updateWH();
		update(false);
	}
	
	var canvasOffset = 40;
	var marginW = 30*2;
	var marginH = 220;
	var layerW = 180;
	
	function updateWH(){
		var _w = CMS_StatusW - ( marginW + layerW + canvasOffset );
		var _h = CMS_StatusH - ( marginH + canvasOffset );
		ImageMap.State.stageW = _w;
		ImageMap.State.stageH = _h;
		$("#ImageMapView ._imageStageWapper").width( _w + canvasOffset);
		$("#ImageMapView ._imageStageWapper").height( _h + canvasOffset);
		$("#ImageMapView ._layoutView").width( _w  + canvasOffset + layerW );
		$("#ImageMapView ._layoutView").height( _h  + canvasOffset );
	}
	
	/* ---------- ---------- ---------- */
	
	return {
		init: init,
		setData:setData,
		getData:getData,
		selectItem:selectItem,
		hideItem:hideItem,
		lockItem:lockItem,
		
		removeItem:removeItem,
		editItem:editItem,
		dupItem_right:dupItem_right,
		dupItem_bottom:dupItem_bottom,
		moveFront:moveFront,
		moveBack:moveBack,
		moveFront2:moveFront2,
		moveBack2:moveBack2,
		
		addItem:addItem,
		updateViewList:updateViewList,
		assingText2Image:assingText2Image,
		
		resize:resize
	}
})();



ImageMap.InspectView = (function(){
	
	var view;
	var v = {};
	
	function init(){
		view = $("#ImageMapInspectView");
		createlayout();
		stageInit();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){

		var tag = ""
			tag += '<div class="_header">';
			tag += '	<div class="_dragBar"></div>';
			tag += '	<div class="_inspect_title">選択アイテム設定</div>';
			tag += '</div>';
			
			tag += '<div class="_body_com">';
			tag += '	<div class="_subtitle">共通設定</div>';
			tag += '	<div class="_basic_tabs">'
			tag += '		<div class="_basic_tab" data-no="0">基本設定</div>'
			tag += '		<div class="_basic_tab" data-no="1">詳細</div>'
			tag += '	</div>'
			tag += '	<div class="_presetItems">';
			tag += '		<div class="_basic_tab_body">' 
			tag += '			<table class="_table">';
			tag += '				<tr>';
			tag += '					<th>X:</th><td><span><input type="number" class="_w50 _in_left" />%</span></td>';
			tag += '					<th>幅:</th><td><span><input type="number" class="_w50 _in_width" />%</span></td>';
			tag += '				</tr>';
			tag += '				<tr>';
			tag += '					<th>Y:</th><td><span><input type="number" class="_w50 _in_top" />%</span></td>';
			tag += '					<th>高:</th><td><span><input type="number" class="_w50 _in_height" />%</span></td>';
			tag += '				</tr>';
			// tag += '				<tr>';
			// tag += '					<td colspan="4"><div class="_btn_round">値を丸める</div>';
			// tag += '				</tr>';
			tag += '				<tr>';
			tag += '					<th>透明:</th><td><span><input type="number" step="0.1" max="1" min="0" class="_w50 _in_opacity" /></span></td>';
			tag += '					<th>回転:</th><td><span><input type="number" class="_w50 _in_rotate" /></span></td>';
			tag += '				</tr>';
			tag += '			</table>';
			tag += '			<table class="_table">';
			tag += '				<tr>';
			tag += '					<th>リンク</th><td><div class="_cms_btn_alpha _btn_anchor" data-type=""></div></td>';
			tag += '				</tr>';
			tag += '			</table>';
			tag += '		</div>';
			tag += '		<div class="_basic_tab_body">';
			tag += '			<table class="_table">';
			tag += '				<tr><th>class:</th><td><span><input type="text" class="_w100 _in_class" placeholder="クラス" /></span></td></tr>';
			tag += '				<tr><th>style:</th><td><span><input type="text" class="_w100 _in_style" placeholder="スタイル" /></span></td></tr>';
			tag += '				<tr><th>タグ属性:</th><td><span><input type="text" class="_w100 _in_attr" placeholder="タグ属性" /></span></td></tr>';
			tag += '			</table>';
			tag += '		</div>';
			tag += '	</div>'
			tag += '</div>'
			
			tag += '<div class="_body_uni">';
			//rect
			tag += '	<div class="_type_in _type_rect">';
			tag += '		<div class="_subtitle">四角設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>塗色:</th><td><span><input type="text" class="_w50 _in_rect_color _colorPicker" /></span></td></tr>';
			tag += '			<tr>';
			tag += '				<th>線色:</th><td><span><input type="text" class="_w50 _in_rect_border_color _colorPicker" /></span></td>';
			tag += '				<th>線幅:</th><td><span><input type="text" class="_w50 _in_rect_border_size" data-candidate="_cms_border_w" /></span></td>';
			tag += '			</tr>';
			tag += '			<tr><th>角丸:</th><td><span><input type="text" class="_w50 _in_rect_round" data-candidate="_cms_box_round" /></span></td></tr>';
			tag += '		</table>';
			tag += '	</div>';
			
			tag += '	<div class="_type_in _type_line">';
			tag += '		<div class="_subtitle">線設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>塗色:</th><td><span><input type="text" class="_w50 _in_line_color _colorPicker" /></span></td></tr>';
			tag += '			<tr><th>太さ:</th><td><span><input type="number" class="_w50 _in_line_w" /></span></td></tr>';
			tag += '			<tr><th>←:</th><td><span><input type="number" class="_w50 _in_line_l" /></span></td></tr>';
			tag += '			<tr><th>→:</th><td><span><input type="number" class="_w50 _in_line_r" /></span></td></tr>';
			tag += '		</table>';
			tag += '	</div>';
			
			//text
			tag += '	<div class="_type_in _type_text">';
			tag += '		<div class="_subtitle">テキスト設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>テキスト:</th><td colspan="3">'
			tag += '				<div class="_input-with-btns _input-textarea">'
			tag += '					<textarea class="_textarea-scroll _in_text" placeholder="テキストを入力"></textarea><br>'
			tag += '					<div class="_btns">'
			tag += '						<span class="_btn_input _edit" data-type="textarea:p">'+Dic.I.Edit+' 編集</span> '
			tag += '					</div>'
			tag += '				</div>'
			tag += '				</td>';
			tag += '			</tr>';
			tag += '			<tr>';
			tag += '				<th>サイズ:</th><td><span><input type="text" class="_w50 _in_text_size" data-candidate="_cms_text_size" /></span></td>';
			tag += '				<th>文字色:</th><td><span><input type="text" class="_w50 _in_text_color _colorPicker" /></span></td>';
			tag += '			</tr>';
			tag += '			<tr>';
			tag += '				<th>行揃え:</th><td><span><input type="text" class="_w50 _in_text_align" data-candidate="_cms_text_align" /></span></td>';
			tag += '				<th>行間:</th><td><span><input type="text" class="_w50 _in_text_line" data-candidate="_cms_line_heiht" /></span></td>';
			tag += '			</tr>';
			tag += '			<tr>';
			tag += '				<th>太字:</th><td><span><input type="text" class="_w50 _in_text_bold" data-candidate="_cms_text_bold" /></span></td>';
			tag += '				<th>影:</th><td><span><input type="text" class="_w50 _in_text_sdw" data-candidate="_cms_text_sdw" /></span></td>';
			tag += '			</tr>';
			tag += '			<tr>';
			tag += '				<th>フォント:</th><td colspan="3"><span><input type="text" class="_w130 _in_text_font" data-candidate="_cms_text_font" /></span></td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '		<div class="_btn_wide _btn_bmp_text">フォントリスト <i class="fa fa-external-link-square "></i></div>';
			tag += '		<div class="_em_box">';
			tag += '			<input type="hidden" class="_in_text_bmp" />';
			tag += '			<div class="_text_bmp_on"><i class="fa fa-lg fa-check-square "></i> ビットマップで書出す</div>';
			tag += '			<div class="_text_bmp_off"><i class="fa fa-lg fa-square-o "></i> ビットマップで書出す</div>';
			tag += '			<div class="_em_box_inner">';
			// tag += '				<div class="_em_box_read">';
			// tag += '					IMGタグにBase64でビットマップとして埋め込みます。<br>';
			// tag += '					複数ページで利用する場合は、画像ファイルへ書出して配置してください。<br>';
			// tag += '				</div>';
			tag += '				<div class="_btn_wide _btn_export_image"><i class="fa fa-image"></i> 画像ファイルへ変換し配置</div>';
			tag += '			</div>';
			tag += '		</div>';
			tag += '	</div>';
			
			//image
			tag += '	<div class="_type_in _type_image">';
			tag += '		<div class="_subtitle">画像設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>画像:</th><td><div class="_in_data_image_path" /></div></td></tr>';
			tag += '			<tr><th></th><td><div class="_in_data_image _cms_bg_trans" /></div></td></tr>';
			tag += '			<tr><th>角丸:</th><td><span><input type="text" class="_w50 _in_image_round" data-candidate="_cms_box_round" /></span></td></tr>';
			tag += '			<tr><th>横☓縦比:</th><td><span><input type="text" class="_w50 _in_image_ratio" data-candidate="_cms_image_ratio" /></span></td></tr>';
			tag += '			<tr><th></th><th>';
			tag += '				<input type="hidden" class="_in_image_fix" />';
			tag += '				<div class="_image_fix_on"><i class="fa fa-lg fa-check-square "></i> 原寸で表示</div>';
			tag += '				<div class="_image_fix_off"><i class="fa fa-lg fa-square-o "></i> 原寸で表示</div>';
			tag += '			</th></tr>'
			tag += '		</table>';
			tag += '		<input type="hidden" class="_w100 _in_image" />';
			tag += '	</div>';
			
			//svg
			tag += '	<div class="_type_in _type_svg">';
			tag += '		<div class="_subtitle">図形(SVG)設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>SVG:</th><td>'
			tag += '				<div class="_input-with-btns _input-textarea">'
			tag += '					<textarea class="_textarea-scroll _in_svg" placeholder="テキストを入力"></textarea><br>'
			tag += '					<div class="_btns">'
			tag += '						<span class="_btn_input _edit" data-type="textarea:svg">'+Dic.I.Edit+' 編集</span> '
			tag += '					</div>'
			tag += '				</div>'
			tag += '			</tr>';
			tag += '			<tr><th>色:</th><td><input type="text" class="_w50 _in_svg_color _colorPicker" /></td></tr>';
			tag += '		</table>';
			tag += '		<div class="_btn_wide _btn_svg_lib">図形(SVG)ライブラリ <i class="fa fa-external-link-square "></i></div>';
			tag += '	</div>';
			
			//Link
			tag += '	<div class="_type_in _type_link">';
			tag += '		<div class="_subtitle">リンク設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr>';
			tag += '				<th>メタ<br>データ:</th><td colspan="3"><span><input type="text" class="_w130 _in_meta" /></span></td>';
			tag += '			</tr>';
			tag += '			<tr>';
			tag += '				<th></th><td colspan="3">data-meta=""として出力</td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '	</div>';
			
			//html
			tag += '	<div class="_type_in _type_html">';
			tag += '		<div class="_subtitle">HTML設定</div>';
			tag += '		<table class="_table">';
			tag += '			<tr><th>HTML:</th><td>'
			tag += '				<div class="_input-with-btns _input-textarea">'
			tag += '					<textarea class="_textarea-scroll _in_html" placeholder="テキストを入力"></textarea><br>'
			tag += '					<div class="_btns">'
			tag += '						<span class="_btn_input _edit" data-type="textarea:html">'+Dic.I.Edit+' 編集</span> '
			tag += '					</div>'
			tag += '				</div>'
			tag += '			</tr>';
			tag += '			<tr><th></th><th>';
			tag += '				<input type="hidden" class="_in_html_preview" /><br>';
			tag += '				<div class="_html_preview_on"><i class="fa fa-lg fa-check-square "></i> プレビューする</div>';
			tag += '				<div class="_html_preview_off"><i class="fa fa-lg fa-square-o "></i> プレビューする</div>';
			tag += '			</th></tr>'
			tag += '		</table>';
			tag += '	</div>';
			tag += '</div>';
			//tag += '	font-size:6vw;<br>';
			
			tag += '<div class="_preview">';
			tag += '	<div class="_miniPreviw"></div>';
			tag += '</div>';
			tag += '<div class="_footer">';
			tag += '	<div>';
			tag += '		<table>';
			tag += '			<tr>';
			tag += '				<td>';
			tag += '					<span class="_cms_btn_alpha _btn_edit ss_imgInspect _edit"></span>';
			tag += '				</td>';
			tag += '				<td>';
			tag += '					<span class="_cms_btn_alpha _btn_dup_bottom ss_imgInspect _dup_bottom"></span>';
			tag += '				</td>';
			tag += '				<td>';
			tag += '					<span class="_cms_btn_alpha _btn_dup_right ss_imgInspect _dup_right"></span>';
			tag += '				</td>';
			tag += '				<td>';
			tag += '					<span class="_cms_btn_alpha _btn_del ss_imgInspect _del"></span>';
			tag += '				</td>';
			tag += '				<td>';
			tag += '					<div class="_hoverSet">';
			tag += '						<span class="_cms_btn_alpha _btn_next ss_imgInspect _move"></span>';
			tag += '						<div class="_hoverItems" style="top:-65px;">';
			tag += '							<span class="_cms_btn_alpha _btn_prev2 ss_imgInspect _move_top2"></span>';
			tag += '							<span class="_cms_btn_alpha _btn_prev ss_imgInspect _move_top"></span>';
			tag += '							<span class="_cms_btn_alpha _btn_next ss_imgInspect _move_bottom"></span>';
			tag += '							<span class="_cms_btn_alpha _btn_next2 ss_imgInspect _move_bottom2"></span>';
			tag += '						</div>';
			tag += '					</div>';
			tag += '				</td>';
			tag += '			</tr>';
			tag += '		</table>';
			tag += '	</div>';
			tag += '</div>';
			
		view.append(tag);
		initBaseStage();
		initEditStage();
		
		//
		v.basic_tabs = view.find("._basic_tab");
		v.basic_tabs.click(function(){ openTab($(this).data("no")) })
		v.basic_tab_bodys = view.find("._basic_tab_body");
		openTab(currentTab);
		
		//ドラッグインベント 
		view.draggable({});
	}
	
	var currentTab = 0
	function openTab(_no){
		currentTab = _no;
		v.basic_tabs.removeClass("_current").eq(currentTab).addClass("_current");
		v.basic_tab_bodys.hide().eq(currentTab).show();
	}
	
	/* ---------- ---------- ---------- */
	
	function initBaseStage(){
		v.btn_del 		= view.find("._btn_del");
		v.btn_edit 		= view.find("._btn_edit");
		v.btn_dup_right 	= view.find("._btn_dup_right");
		v.btn_dup_bottom 	= view.find("._btn_dup_bottom");
		v.btn_move_front 	= view.find("._btn_prev");
		v.btn_move_back 	= view.find("._btn_next");
		v.btn_move_front2 	= view.find("._btn_prev2");
		v.btn_move_back2 	= view.find("._btn_next2");
		
		var M = ImageMap.MainStage;
		v.btn_del		.click(function(){ M.removeItem(); })
		v.btn_edit		.click(function(){ M.editItem(); })
		v.btn_dup_right		.click(function(){ M.dupItem_right(); });
		v.btn_dup_bottom	.click(function(){ M.dupItem_bottom(); });
		v.btn_move_front	.click(function(){ M.moveFront(); });
		v.btn_move_back		.click(function(){ M.moveBack(); });
		v.btn_move_front2	.click(function(){ M.moveFront2(); });
		v.btn_move_back2	.click(function(){ M.moveBack2(); });
		
		//
		v.miniPreviw = view.find("._miniPreviw");
		v.miniPreviw.click(function(){showTag()})
		
		//
		v.btn_svg_lib = view.find("._btn_svg_lib");
		v.btn_svg_lib.click(function(){ window.open(SVG_LIB_URL , "cms_asset") });
		//
		v.btn_bmp_text = view.find("._btn_bmp_text");
		v.btn_bmp_text.click(function(){ window.open(BMP_TEXT_URL , "cms_asset") });
		//
		v.btn_export_image = view.find("._btn_export_image");
		v.btn_export_image.click(function(){uploadImage()});
	}
	
	/* ---------- ---------- ---------- */
	
	var uploadDirName = "";
	var uploadFileName = "";
	
	function uploadImage(){
		var d = currentItem.getData();
		if(!d.id) d.id = ImageMapCode.getUID("item.text");
		
		var s = "";
			s += "アップロードする画像ファイル名を入力してください。<br>";
			s += "OKでアップロードします。<br><br>";
			s += 'アップロード先ディレクトリ：<b>' + UPLOAD_DIR_PATH + '<b>';
		
		var o = {
			type:"single",
			title:"画像ファイル名入力",
			read:s,
			notes:"",
			val:d.id
		}
		CMS_InputView.stageIn(o,function(_val){
			currentItem.setID(_val);
			uploadImage_core(_val);
		})
	}
	function uploadImage_core(_s){
		var d = currentItem.getData();
		
		uploadDirName = UPLOAD_DIR_PATH;
		uploadFileName = uploadDirName + _s + ".png";
		
		var u = '?action=upload64';
			u += '&upload_dir=' + uploadDirName;
			u += '&fileName='+ uploadFileName;

		var param = {};
			param.base64 = ImageMapBMPText.getImage(d);
		
		var this_ = this;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'POST',
			url				: CMS_Path.PHP_UPLOAD+u,
			data			: param,
			dataType		: 'json',
			success: function(data) {
				if (data.status == "1") successUpload();
				if (data.status == "0") errorUpload();
			},
			error: function(data) {
				errorUpload();
			}
		})
	}
	function successUpload(){
		ImageMap.MainStage.assingText2Image(uploadFileName);
	}
	function errorUpload(){
		alert("upload error");
	}
	
	/* ---------- ---------- ---------- */
	
	var in_;
	function initEditStage(){
		v.types 	= view.find("._type_in");
		v.types.hide();
		v.type_rect 	= view.find("._type_rect");
		v.type_line 	= view.find("._type_line");
		v.type_text 	= view.find("._type_text");
		v.type_imageText 	= view.find("._type_text");
		v.type_image 	= view.find("._type_image");
		v.type_svg 		= view.find("._type_svg");
		v.type_link 	= view.find("._type_link");
		v.type_html 	= view.find("._type_html");
		
		/* ---------- ---------- ---------- */
		
		in_ = {};
		// in_.all 	= view.find("input,textarea");
		//in_.all.(function(){ updateState() });
		// in_.all.(function(){ updateState() });
		view.on('keyup',"input,textarea", function(){ updateState() });
		view.on('input',"input,textarea", function(){ updateState() });

		/* ---------- ---------- ---------- */
		//COMMON
		
		in_.top 	= view.find("._in_top");
		in_.left 	= view.find("._in_left");
		in_.width 	= view.find("._in_width");
		in_.height 	= view.find("._in_height");
		in_.opacity = view.find("._in_opacity");
		in_.rotate 	= view.find("._in_rotate");
		// in_.link 	= view.find("._in_link");
		in_.attr 	= view.find("._in_attr");
		in_.class 	= view.find("._in_class");
		in_.style 	= view.find("._in_style");
		in_.btn_anchor = view.find("._btn_anchor");
		
		// v.btn_round 	= view.find("._btn_round");
		// v.btn_round.click(function(){ 
		// 	in_.top.val( roundNo(in_.top.val()))
		// 	in_.left.val( roundNo(in_.left.val()))
		// 	in_.width.val( roundNo(in_.width.val()))
		// 	in_.height.val( roundNo(in_.height.val())).keyup();
		// });
		// function roundNo(_s){
		// 	var s = Number(_s);
		// 	if(isNaN(s)) return 0;
		// 	s = Math.round(s*2)/2;
		// 	return s;
		// }

		/* ---------- ---------- ---------- */
		//TYPEs
		
		//RECT
		in_.rect_color 			= view.find("._in_rect_color");
		in_.rect_border_size	= view.find("._in_rect_border_size");
		in_.rect_border_color 	= view.find("._in_rect_border_color");
		in_.rect_round 			= view.find("._in_rect_round");
		
		//LINE
		in_.line_color 			= view.find("._in_line_color");
		in_.line_w 			= view.find("._in_line_w");
		in_.line_l 			= view.find("._in_line_l");
		in_.line_r 			= view.find("._in_line_r");
		
		//IMAGE
		in_.image 		= view.find("._in_image");
		in_.image_thumb = view.find("._in_data_image");
		in_.image_thumb.click(function(){
			var s = in_.image.val();
			CMS_MainController.openAssetSelectRel("image", s ,function(_s){
				updateImage(_s);
			});
		});
		in_.image_path = view.find("._in_data_image_path");
		in_.image_path.click(function(){
			var val = $(this).html();
			var _s = prompt("画像URLを入力してください",val);
	 		if(_s == val) return;
		 	if(_s == null) return;
		 	updateImage(_s);
		});
		in_.image_round = view.find("._in_image_round");
		in_.image_ratio = view.find("._in_image_ratio");
		
		in_.image_fix 		= view.find("._in_image_fix");
		in_.image_fix_on 	= view.find("._image_fix_on");
		in_.image_fix_off 	= view.find("._image_fix_off");
		in_.image_fix_on.click(function(){
			in_.image_fix_on.hide();
			in_.image_fix_off.show();
			in_.image_fix.val("");
			updateState()
		});
		in_.image_fix_off.click(function(){
			in_.image_fix_on.show();
			in_.image_fix_off.hide();
			in_.image_fix.val("1");
			updateState()
		});
		
		
		//SVG
		in_.svg 		= view.find("._in_svg");
		in_.svg_color 	= view.find("._in_svg_color");
		
		//TEXT
		in_.text 	= view.find("._in_text");
		in_.text_size 	= view.find("._in_text_size");
		in_.text_color 	= view.find("._in_text_color");
		in_.text_align 	= view.find("._in_text_align");
		in_.text_line 	= view.find("._in_text_line");
		in_.text_font 	= view.find("._in_text_font");
		in_.text_bold 	= view.find("._in_text_bold");
		in_.text_sdw 	= view.find("._in_text_sdw");
		
		in_.em_box_inner 	= view.find("._em_box_inner");
		in_.text_bmp 		= view.find("._in_text_bmp");
		in_.text_bmp_on 	= view.find("._text_bmp_on");
		in_.text_bmp_off 	= view.find("._text_bmp_off");
		in_.text_bmp_on.click(function(){
			in_.text_bmp_on.hide();
			in_.text_bmp_off.show();
			in_.text_bmp.val("");
			in_.em_box_inner.hide();
			updateState()
		});
		in_.text_bmp_off.click(function(){
			in_.text_bmp_on.show();
			in_.text_bmp_off.hide();
			in_.text_bmp.val("1");
			in_.em_box_inner.show();
			updateState()
		});
		
		//LINK
		in_.meta 	= view.find("._in_meta");
		
		//HTML
		in_.html 	= view.find("._in_html");
		in_.html_preview 		= view.find("._in_html_preview");
		in_.html_preview_on 	= view.find("._html_preview_on");
		in_.html_preview_off 	= view.find("._html_preview_off");
		in_.html_preview_on.click(function(){
			in_.html_preview_on.hide();
			in_.html_preview_off.show();
			in_.html_preview.val("");
			updateState()
		});
		in_.html_preview_off.click(function(){
			in_.html_preview_on.show();
			in_.html_preview_off.hide();
			in_.html_preview.val("1");
			updateState()
		});
	}
	
	function updateImage(_s){
		in_.image.val(_s);
		var imgPath = CMS_Path.MEDIA.getImagePath( _s , false );
		in_.image_thumb.html('<img src="' + imgPath + '">');
		in_.image_path.html( _s );
		updateState();
	}

	/* ---------- ---------- ---------- */
	
	function reset(){
		
	}
	
	/* ---------- ---------- ---------- */

	var currentItem;
	var currentLinkClass;
	var isHide = false;
	
	function selectedItem(_select){
		stageIn();
		// if(currentItem == _select) return;
		if(currentItem) currentItem.unselect();
			currentItem = _select;
			
		var U = ImageMapU;
		var data = currentItem.getData();
			data.rect = U.convertPixel_2_Percent(data.rect);
		
		if(data["rect"] == undefined) data.rect = {}
		if(data.rect["top"] == undefined) data.rect.top = 0;
		if(data.rect["left"] == undefined) data.rect.left = 0;
		if(data.rect["width"] == undefined) data.rect.width = 0;
		if(data.rect["height"] == undefined) data.rect.height = 0;
		if(data.rect["opacity"] == undefined) data.rect.opacity = 100;
		if(data.rect["rotate"] == undefined) data.rect.rotate = 0;
		if(data.rect["link"] == undefined) data.rect.link = {};
		if(data.rect["attr"] == undefined) data.rect.attr = "";
		if(data.rect["class"] == undefined) data.rect.class = "";
		if(data.rect["style"] == undefined) data.rect.style = "";
		
		/* ---------- ---------- ---------- */
		//COMMON
		
		in_.top		.val(U.treat(data.rect.top));
		in_.left	.val(U.treat(data.rect.left));
		in_.width	.val(U.treat(data.rect.width));
		in_.height	.val(U.treat(data.rect.height));
		in_.opacity	.val(U.treat(data.rect.opacity));
		in_.rotate	.val(U.treat(data.rect.rotate));
		// in_.link	.val(data.rect.link);
		in_.attr	.val(data.rect.attr);
		in_.class	.val(data.rect.class);
		in_.style	.val(data.rect.style);
		// in_.text	.val(data.text);
		isHide 		= data.hide;
		
		currentLinkClass = new InspectView.AnchorClass(
			in_.btn_anchor,
			defaultVal(data.rect.link,{}),
			function (_val){
				updateState() }
		);
		// in_.btn_anchor.
		
		/* ---------- ---------- ---------- */
		//TYPEs
		
		var Code = ImageMapCode;
		v.types.hide();
		if (Code.isRect(data.type)) 		{ v.type_rect.show(); }
		if (Code.isLine(data.type)) 		{ v.type_line.show(); }
		if (Code.isImage(data.type)) 		{ v.type_image.show(); }
		if (Code.isSVG(data.type)) 			{ v.type_svg.show(); }
		if (Code.isText(data.type)) 		{ v.type_text.show(); }
		if (Code.isLink(data.type)) 		{ v.type_link.show(); }
		if (Code.isHTML(data.type)) 		{ v.type_html.show(); }
		
		//値をセット
		Code.setInputValue(data,in_);
		
		//画像テキストの場合は、リサイズでも、描画アップデートするように
		if (Code.isText(data.type)) { 
			updateState();
		}
		
		updateTagPreview();
	}
	
	var tID_state;
	function updateState(){
		if(tID_state) clearTimeout(tID_state);
		tID_state = setTimeout(function(){
			updateState_core();
		},200);
	}
	function updateState_core(){
		if(!currentItem)return;
		
		var data = currentItem.getData();
		
		/* ---------- ---------- ---------- */
		//COMMON
		var _data = {
			type : data.type,
			id : data.id,
			hide : isHide,
			rect : {
				top		: in_.top.val(),
				left	: in_.left.val(),
				width	: in_.width.val(),
				height	: in_.height.val(),
				opacity	: in_.opacity.val(),
				rotate	: in_.rotate.val(),
				// link	: in_.link.val(),
				link	: currentLinkClass.getVal(),
				attr	: in_.attr.val(),
				class	: in_.class.val(),
				style	: in_.style.val()
			},
			data: {}
			// link	: currentLinkClass.getVal(),//*
			// image	: in_.image.val(),
			// text	: in_.text.val()
		}
		_data.rect = ImageMapU.convertPercent_2_Pixel(_data.rect);
		_data.pixel = ImageMapU.copyRect(_data.rect);
		_data.data = ImageMapCode.getInputValue (_data.type,in_);
		currentItem.setData(_data);
		
		updateTagPreview();
	}
	
	/* ---------- ---------- ---------- */
	
	function updateTagPreview(){
		var param = currentItem.getData();
		var s = ""
		if(JSON.stringify(param).length > 1000){
			s = "選択ブロックのデータ量が多く、プレビューに時間がかかるため、このブロックはHTMLプレビューできません。"
		} else{
			s = ImageMapExport.getHTML_item(param,0,true);
			s = HTMLServiceU.getReplacedHTML(s,{},"",false);
			// s = s.split("\n").join("<br>");
			s = CMS_TagU.tag_2_t(s);
		}
		v.miniPreviw.html(s.substr(0,200));
	}
	function showTag(){
		var data = currentItem.getData();
		var this_ = this;
			s = ImageMapExport.getHTML_item(data,0,true);
			s = HTMLServiceU.getReplacedHTML(s,{},"",false);
		Editer_TAGView.stageIn(s,function(_s){});
	}
	
	/* ---------- ---------- ---------- */
	
	function dClick(_type){
		if(_type == "image"){ in_.image_thumb.click(); }
		if(_type == "text"){ view.find("._type_text ._edit").eq(0).click(); }
		if(_type == "svg"){ view.find("._type_svg ._edit").eq(0).click(); }
		if(_type == "html"){ view.find("._type_html ._edit").eq(0).click(); }
	}
	
	/* ---------- ---------- ---------- */
	//表示・非表示処理
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	return {
		init: init,
		reset:reset,
		selectedItem:selectedItem,
		dClick:dClick,
		updateState:updateState,
		stageIn:stageIn,
		stageOut:stageOut
	}
})();



ImageMap.RectViewClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_type) {
	  this.init(_type);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	p.xy;
	p.size;
	p.type = "";
	
	p.init = function(_type) {
		var self = this;
		this.v = {}
		this.view = $('<div class="_design-item"></div>');
		// this.viewIn = this.view
		this.viewIn = $('<div class="_design-item-in"></div>');
		this.view.append(this.viewIn)
		this.type = _type;
		this.setEvent();
	}
	
	/* ---------- ---------- ---------- */

	p.isCurrent;
	p.setEvent = function(){
		var self = this;
		this.isCurrent = false;
		
		//クリック
		this.view.click(function(){
			if(!self.isLock){
				self.select();
			}
		});
		this.viewIn.hover(function(){
			self.setEventResize();
			if(self.getRatio() != false){
				self.viewIn.resizable({aspectRatio:self.getRatio()});
			}
		});
	}
	
	//ホバーするまで、イベントアサインしない
	p.isSetResizeEvent;
	p.setEventResize = function(){
		
		if(this.isSetResizeEvent )return;
		this.isSetResizeEvent = true;
		
		var self = this;
		
		//リサイズイベント
		var ratio = false;
		if(ImageMapCode.isImage(this.type)) ratio = 1;
		this.viewIn.resizable({
			autoHide:false,
			aspectRatio:ratio,
			minWidth:5,
			minHeight:5,
			stop: function( event, ui ) {
			 	self.data.rect.width = ui.size.width;
			 	self.data.rect.height = ui.size.height;
				self.updateRectLive();
            	self.selectItem();
			 }
		});
		
		//回転イベント
        var params = {
            stop: function(event, ui) { 
			 	self.data.rect.rotate = ui.angle.current / Math.PI * 180 ;
            	self.selectItem();
            },
            wheelRotate: false, 
            rotationCenterX: 50.0, 
            rotationCenterY: 50.0
        };
        this.viewIn.rotatable(params);
        
		//ドラッグインベント 
		this.view.draggable({
			 stop: function( event, ui ) { 
			 	self.data.rect.top = ui.position.top;
			 	self.data.rect.left = ui.position.left;
            	self.selectItem();
			 }
		});
		this.updateLockItem();
	}
	
	/* ---------- ---------- ---------- */
	
	p.no = 0;
	p.getRatio = function(){
		var ratio = false;
		if(ImageMapCode.isImage(this.type)){
			var w = this.viewIn.find("._design-item-image").width();
			var h = this.viewIn.find("._design-item-image").height();
			this.viewIn.width(w);
			this.viewIn.height(h);
			ratio = Math.round(w/h*10)/10;
		}
		return ratio;
	}
	
	/* ---------- ---------- ---------- */

	p.setNo = function(_no){
		this.no = _no
	}
	p.isInit = true;
	
	p.setData = function(_data){
		var self = this;
		this.data = _data;
		if(this.isInit){
			this.mainView = ImageMapCode.createItemView(this.type);
			this.viewIn.append(this.mainView);
			this.isInit = false;
			this.v.btn_remove = $('<div class="_btn_remove"><i class="fa fa-fw fa-times "></i></div>');
			this.viewIn.append(this.v.btn_remove);
			this.v.btn_remove.click(function(){  
				self.select();
				ImageMap.MainStage.removeItem();
			});
		}
		
		/* ---------- ---------- ---------- */
		
		this.view.css({
			"position":"absolute",
			"top": this.data.rect.top +"px",
			"left": this.data.rect.left +"px"
		});
		
		var rad = this.data.rect.rotate / 180 * Math.PI;
		this.viewIn.css({
			"position":"absolute",
			"top": "0px",
			"left": "0px",
			"width": this.data.rect.width + "px",
			"height": this.data.rect.height+"px",
			"transform-origin": "50% 50% 0px",
			"transform": "rotate("+rad+"rad)"
		});
		
		this.hideItem(this.data.hide);
		this.lockItem(this.data.lock);
		this.updateHandle();
		
		ImageMapExport.getItemTag( this.type,this.mainView,this.data );
		if(this.layer){
			this.layer.updateData();
		}
	}
	
	/* ---------- ---------- ---------- */

	p.unselect = function(){
		this.isCurrent = false;
		this.view.removeClass("_current");
	}
	p.select = function(){
		this.isCurrent = true;
		ImageMap.MainStage.selectItem(this);
		this.view.addClass("_current");
	}
	
	/* ---------- ---------- ---------- */
	
	p.updateImage = function(){
		ImageMapExport.getItemTag( this.type,this.mainView,this.data );
	}
	
	/* ---------- ---------- ---------- */
	
	p.updateRectLive = function(){
		var self = this;
		if(ImageMapCode.isLine(self.type)){
			ImageMap.InspectView.updateState();
		}
	}
	/* ---------- ---------- ---------- */
	
	p.updateHandle = function(){
		if(this.data.rect.width < 60 || this.data.rect.height < 60 ){
			this.view.addClass("_hide_handle");
		} else{
			this.view.removeClass("_hide_handle");
		}
	}
	
	p.adjustRect = function(){
		var grid = ImageMap.State.grid;
		if(isNaN(grid))return;
		if(!grid) return;
		
		this.data.rect.top = ImageMapU.adjustH(this.data.rect.top);
		this.data.rect.left = ImageMapU.adjustW(this.data.rect.left);
		this.data.rect.width = ImageMapU.adjustW(this.data.rect.width);
		this.data.rect.height = ImageMapU.adjustH(this.data.rect.height);
		this.view.css({
			"position":"absolute",
			"top": this.data.rect.top +"px",
			"left": this.data.rect.left +"px",
			"width": this.data.rect.width + "px",
			"height": this.data.rect.height+"px"
		});
	}
	p.selectItem = function(){
		this.updateHandle();
		this.adjustRect();
		this.select();
	}
	
	p.isHide = false;
	p.hideItem = function(_b){
		this.isHide =_b;
		if(_b){
			this.view.addClass("_hide");
		} else{
			this.view.removeClass("_hide");
		}
	}
	p.isLock = false;
	p.lockItem = function(_b){
		this.isLock =_b;
		this.updateLockItem();
	}
	p.updateLockItem = function(){
		if(this.isSetResizeEvent){
			if(this.isLock){
				this.view.addClass("_lock");
				this.view.draggable( "disable" );
				this.viewIn.resizable( "disable" );
				this.viewIn.rotatable( "disable" );
			} else{
				this.view.removeClass("_lock");
				this.view.draggable( "enable" );
				this.viewIn.resizable( "enable" );
				this.viewIn.rotatable( "enable" );
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	
	p.getData = function(){
		return JSON.parse(JSON.stringify(this.data));
	}
	p.getJson = function(){
		return JSON.stringify(this.data, null, "	");
	}
	p.setID = function(_id){
		this.data.id = _id;
	}
	p.setJson = function(_s){
		var data
		try{
		  data = JSON.parse(_s);
		} catch( e ){
			alert("データ形式が正しくありません。");
			return;
		}
		if(data){
			this.setData(data);
		}
	}
	p.editJson = function(){
		var self = this;
		Editer_JSONView.stageIn(
			self.getJson(),
			function(_s){ 
				self.setJson(_s)
			}
		);
	}
	
	
	p.getView = function(){
		return this.view;
	}
	p.remove = function(){
		this.view.remove();
	}
	return c;
})();



	

ImageMap.LayersView = (function(){
	var view;
	var v = {};
	
	/* ---------- ---------- ---------- */
	//初期化
	
	function init(_view){
		view = _view;
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	//レイアウト作成・イベントアサイン
	
	function createlayout(){ }

	function setBtn(){ }
	
	/* ---------- ---------- ---------- */
	
	function reset(){
		
	}
	
	/* ---------- ---------- ---------- */
	
	var items
	var layers
	function update(_items){
		items = _items;
		layers = [];
		view.empty();
		var leng = items.length
		for (var i = leng-1; i >= 0  ; i--) {
			var layer = new ImageMap.LayerClass();
				layer.setData(items[i],i);
			view.append(layer.getView());
			layers.push(layer);
		}
	}
	
	/* ---------- ---------- ---------- */

	var currentLayer;
	var currentItem;
	function selectedItem(_select){
		if(currentLayer) currentLayer.unselect();
		var leng = items.length;
		for (var i = 0; i < leng ; i++) {
			if(items[i] == _select){
				if(layers[(leng-1)-i]){
					currentLayer = layers[(leng-1)-i];
					currentLayer.select();
					currentItem = _select;
					currentItem.layer = currentLayer;
				}
			} 
		}
	}
	
	return {
		init:init,
		reset:reset,
		update:update,
		selectedItem:selectedItem
	}
})();


/* ---------- ---------- ---------- */



ImageMap.LayerClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	  this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.view;
	p.v;
	
	p.init = function() {
		var s = '<div class="_layer" data-no="{NO}"></div>';
		this.view = $(s);
		this.v = {}
	}

	p.setData = function(_class,_i){
		this.class = _class;
		this.no = _i;
		this.update();
	}
	p.update = function(){
		var self = this;
		var s = '{I_V1}{I_V2} <div class="_lock">{I_L1}{I_L2}</div> {NO}.{TEXT}';
			s = s.split("{NO}").join(this.no);
			s = s.split("{TEXT}").join(ImageMapCode.getLayerData(this.class.data));
			s = s.split("{I_V1}").join('<span class="_btn_hide_on"><i class="fa fa-eye-slash"></i></span>');
			s = s.split("{I_V2}").join('<span class="_btn_hide_off"><i class="fa fa-eye"></i></span>');
			s = s.split("{I_L1}").join('<span class="_btn_lock_on"><i class="fa fa-lock "></i></span>');
			s = s.split("{I_L2}").join('<span class="_btn_lock_off"><i class="fa fa-unlock-alt "></i></span>');
		this.view.html(s);
	
		this.view.click(function(){ self.selectItem()})
		this.v.btn_hide_on = this.view.find("._btn_hide_on");
		this.v.btn_hide_off = this.view.find("._btn_hide_off");
		this.v.btn_lock_on = this.view.find("._btn_lock_on");
		this.v.btn_lock_off = this.view.find("._btn_lock_off");
		
		this.v.btn_hide_on.click(function(){ self.hideItem(false) })
		this.v.btn_hide_off.click(function(){ self.hideItem(true) })
		this.v.btn_lock_on.click(function(){ self.lockItem(false) })
		this.v.btn_lock_off.click(function(){ self.lockItem(true) })
		
		this.updateCheck();
	}
	p.updateCheck=function(){
		this.v.btn_hide_on.hide();
		this.v.btn_hide_off.hide();
		this.v.btn_lock_on.hide();
		this.v.btn_lock_off.hide();
		
		if(this.class.data.hide){
			this.v.btn_hide_on.show();
		} else{
			this.v.btn_hide_off.show();
		}
		if(this.class.data.lock){
			this.v.btn_lock_on.show();
		} else{
			this.v.btn_lock_off.show();
		}
		if(this.class.isCurrent){
			this.select();
		}
	}
	
	/* ---------- ---------- ---------- */

	p.updateData=function(){
		this.update();
	}
	/* ---------- ---------- ---------- */

	p.selectItem=function(){
		this.class.selectItem();
		// ImageMap.MainStage.selectItem(this.class);
	}
	p.hideItem=function(_b){
		this.class.data.hide = _b;
		ImageMap.MainStage.hideItem(this.no,_b);
		this.updateCheck();
	}
	p.lockItem=function(_b){
		this.class.data.lock = _b;
		ImageMap.MainStage.lockItem(this.no,_b);
		this.updateCheck();
	}
	/* ---------- ---------- ---------- */

	p.select=function(){
		this.view.addClass("_current")
	}
	p.unselect=function(){
		this.view.removeClass("_current")
	}
	
	p.getView=function(){
		return this.view;
	}
	return c;
})();


ImageMap.State = {
	//最大サイズ
	stageW: 800, 
	stageH: 600,
	
	//編集サイズ
	canvasW: 0,
	canvasH: 0,
	
	//オリジナルサイズ
	imageW: 100,
	imageH: 100,
	
	grid:0
}

var ImageMapU = (function(){
	/*
	function resize(_wh,_max,_isFit){
		if(_isFit){
			var ss1 = _wh.w / _wh.h ;
			var ss2 = _max.w / _max.h ;
			if( ss1 > ss2 ) {
				var z = _max.w / _wh.w 
				_wh.w = _max.w;
				_wh.h = z *_wh.h
			} else{
				var z = _max.h / _wh.h 
				_wh.h = _max.h;
				_wh.w = z *_wh.w
			}
		}
		
		var w = _wh.w;
		var h = _wh.h;
		var rate = _wh.w / _wh.h;
		if(_wh.w > _max.w){
			w = _max.w;
			h = w / rate;
		}
		if(h > _max.h){
			h = _max.h;
			w = h * rate;
		}
		return {w: Math.round(w), h:Math.round(h)}
	}
	*/
		// 
	function convertPercent_2_Pixel(_rect){
		var ssW = 100 / ImageMap.State.canvasW;
		var ssH = 100 / ImageMap.State.canvasH;
		return { 
			top		: _rect.top / ssH,
			left	: _rect.left / ssW,
			width	: _rect.width / ssW,
			height	: _rect.height / ssH,
			opacity	: _rect.opacity,
			rotate	: _rect.rotate,
			link	: _rect.link,
			attr	: _rect.attr,
			class	: _rect.class,
			style	: _rect.style
		};
	}
	function convertPixel_2_Percent(_rect){
		var ssW = 100 / ImageMap.State.canvasW;
		var ssH = 100 / ImageMap.State.canvasH;
		return {
			left 	: treat(_rect.left * ssW),
			top 	: treat(_rect.top * ssH),
			width 	: treat(_rect.width * ssW),
			height 	: treat(_rect.height * ssH),
			opacity	: _rect.opacity,
			rotate	: _rect.rotate,
			link	: _rect.link,
			attr	: _rect.attr,
			class	: _rect.class,
			style	: _rect.style
		}
	}
	function adjustW(_s){
		var g = ImageMap.State.grid;
		var ssW = 100 / ImageMap.State.canvasW;
		var s = Number(_s) * ssW;
			s = Math.round(s/g)*g;
			s = s / ssW;
		return s;
	}
	function adjustH(_s){
		var g = ImageMap.State.grid;
		var ssH = 100 / ImageMap.State.canvasH;
		var s = Number(_s) * ssH;
			s = Math.round(s/g)*g;
			s = s / ssH;
		return s;
	}
	
	//ImageMapU.treat
	function treat(_n) {
		return Math.round(_n * 100) / 100;
	}
	//
	function getRatio(_r){
		var ratio;
		if(_r){
			if(_r.indexOf(":") != -1){
				var a = _r.split(":");
				ratio = a[1]/a[0] *100;
				ratio = treat(ratio);
			}
		}
		return ratio;
	}
	
	function copyRect(_rect){
		return {
			top	: _rect.top,
			left: _rect.left,
			width: _rect.width,
			height: _rect.height
		}
	}
	return {
		// resize: resize,
		treat:treat,
		getRatio:getRatio,
		convertPercent_2_Pixel:convertPercent_2_Pixel,
		convertPixel_2_Percent:convertPixel_2_Percent,
		adjustW:adjustW,
		adjustH:adjustH,
		copyRect:copyRect
	}

})();

var ImageMapCode = (function(){
	/* ---------- ---------- ---------- */
	//ImageMapCode.getUID
	function getUID (_type) {
		var s = DateUtil.getFormattedDate(new Date(),_type.split(".")[1]+"_YYYYMMDD_RRR");
		return s;
		
	}
	function isRect (_type) { return (_type == "item.rect"); }
	function isLine (_type) { return (_type == "item.line"); }
	function isImage (_type) { return (_type == "item.image"); }
	function isSVG (_type) { return (_type == "item.svg"); }
	function isText (_type) { return (_type == "item.text"); }
	function isLink (_type) { return (_type == "item.link"); }
	function isHTML (_type) { return (_type == "item.html"); }
	
	/* ---------- ---------- ---------- */
	
	function createItemView (_type) { 
		var view
		if(isRect(_type))	{ view = $('<div data-defclass="_design-item-rect" class="_design-item-rect"></div>'); }
		if(isLine(_type))	{ view = $('<div data-defclass="_design-item-line" class="_design-item-line"></div>'); }
		if(isImage(_type))	{ view = $('<div data-defclass="_design-item-image" class="_design-item-image"></div>'); }
		if(isSVG(_type))	{ view = $('<div data-defclass="_design-item-svg" class="_design-item-svg"></div>'); }
		if(isText(_type))	{ view = $('<div data-defclass="_design-item-text" class="_design-item-text"></div>'); }
		if(isLink(_type))	{ view = $('<div data-defclass="_design-item-link" class="_design-item-link"></div>'); }
		if(isHTML(_type))	{ view = $('<div data-defclass="_design-item-html" class="_design-item-html"></div>'); }
		return view;
	}
	
	/* ---------- ---------- ---------- */
	//初期データ取得
	function getInitData(type,_extra){
		var data = {
			type:type,
			id:getUID(type),
			date:0,
			hide:false,
			rect: {
				top: 0,
				left: 0,
				width: 30,
				height: 20,
				opacity: 1,
				rotate: 0,
				link : "",
				attr : "",
				class : "",
				style : ""
			},
			pixel: {
				top: 0,
				left: 0,
				width: 30,
				height: 20
			},
			data:{}
		};
		
		if(isRect(type)){
			data.data.color = '#000'
			data.data.border_color = '#000';
			data.data.border_size = '';
			data.data.round = '';
		}
		if(isLine(type)){
			data.data.color = '#000'
			data.data.arrow_w = '10'
			data.data.arrow_l = ''
			data.data.arrow_r = ''
		}
		if(isSVG(type)){
			data.data.svg = '<svg width="100%" height="100%" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1412 734q0-28-18-46l-91-90q-19-19-45-19t-45 19l-408 407-226-226q-19-19-45-19t-45 19l-91 90q-18 18-18 46 0 27 18 45l362 362q19 19 45 19 27 0 46-19l543-543q18-18 18-45zm252 162q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"></path></svg>'
			data.data.color = '#000'
		}
		if(isImage(type)){
			if(_extra){
				data.data.src = CMS_PathFunc.treatRel(_extra.src);
				// data.data.src = _extra.src.split("../").join("");
			} else{
				data.data.src = 'width:200,height:140';
			}
			
			// data.data.image = 'width:200,height:140';
			// var sa = [
			// 	"images/img/about2_img_4.png",
			// 	"images/img/about3_img_sp.png",
			// 	"images/img/about3_img.png",
			// 	"images/img/airport_back.jpg",
			// 	"images/img/airport_img_1_sp.jpg",
			// 	"images/img/airport_img_1.jpg",
			// 	"images/img/airport_img_2_sp.jpg",
			// 	"images/img/airport_img_2.jpg",
			// 	"images/img/airport_img_3_sp.jpg",
			// 	"images/img/airport_img_3.jpg",
			// 	"images/img/airport_img_4_sp.jpg",
			// 	"images/img/airport_img_4.jpg",
			// 	"images/img/footer_arr_top.png",
			// 	"images/img/jumbotron_back_sp.jpg",
			// 	"images/img/jumbotron_back.jpg",
			// 	"images/img/jumbotron_campain_sp.png",
			// 	"images/img/jumbotron_campain.png"
			// ]
			// data.data.src = sa[Math.round(Math.random() * sa.length)];
			data.data.round = '';
		}
		if(isText(type,data)){
			if(_extra == "multi"){
				data.rect.width = 50;
				data.data.text = "サンプルのタイトル";
				data.data.size = "24px";
				data.data.line = "1.2";
			} else{
				data.rect.width = 50;
				data.data.text = "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。";
				data.data.size = "14px";
				data.data.line = "1.6";
			}
			data.data.color = "";
			data.data.align = "";
			data.data.font = "";
			data.data.bold = "";
			data.data.sdw = "";
			data.data.bmp = "";
		}
		if(isHTML(type,data)){
			data.data.html = '<iframe width="100%" height="100%" src="https://www.youtube.com/embed/rrHBFJUNiXk" frameborder="0" allowfullscreen></iframe>'
			data.data.preview = false;
		}
		return data;
	}
	
	/* ---------- ---------- ---------- */
	//inputへデータ設定
	function setInputValue(_data,in_){
		var type = _data.type;
		var __ = _data.data;
		if (isRect(type)) {
			in_.rect_color.val(__.color);
			in_.rect_border_color.val(__.border_color);
			in_.rect_border_size.val(__.border_size);
			in_.rect_round.val(__.round);
		}
		if (isLine(type)) {
			in_.line_color.val(__.color);
			in_.line_w.val(__.arrow_w);
			in_.line_l.val(__.arrow_l);
			in_.line_r.val(__.arrow_r);
		}
		if (isImage(type)) {
			var imgPath = CMS_Path.MEDIA.getImagePath( __.src , false );
			in_.image.val(__.src)
			in_.image_thumb.html('<img src="' + imgPath + '">');
			in_.image_path.html(__.src);
			in_.image_round.val(__.round);
			in_.image_ratio.val(__.ratio);
			//
			in_.image_fix.val(__.fix)
			in_.image_fix_on.hide()
			in_.image_fix_off.hide()
			if(__.fix){
				in_.image_fix_on.show()
			} else{
				in_.image_fix_off.show()
			}
		}
		if(isSVG(type))		{ 
			in_.svg.val(__.svg);
			in_.svg_color.val(__.color);
		}
		if (isText(type)) {
			in_.text.val(__.text)
			in_.text_size.val(__.size)
			in_.text_color.val(__.color)
			in_.text_align.val(__.align)
			in_.text_line.val(__.line)
			in_.text_font.val(__.font)
			in_.text_bold.val(__.bold)
			in_.text_sdw.val(__.sdw)
			in_.text_bmp.val(__.bmp)
			in_.text_bmp_on.hide()
			in_.text_bmp_off.hide()
			in_.em_box_inner.hide()
			if(__.bmp){
				in_.text_bmp_on.show()
				in_.em_box_inner.show()
			} else{
				in_.text_bmp_off.show()
			}
		}
		if (isLink(type)) {
			in_.meta.val(__.meta);
			// in_.link.val(__.link)
		}
		if (isHTML(type)) {
			in_.html.val(__.html)
			in_.html_preview.val(__.preview)
			in_.html_preview_on.hide()
			in_.html_preview_off.hide()
			if(__.preview){
				in_.html_preview_on.show()
			} else{
				in_.html_preview_off.show()
			}
		}
		return ImageMapExport.getHTML_item(_data,0);
	}
	
	/* ---------- ---------- ---------- */
	//inputからデータ取得
	function getInputValue(type,in_){
		var __ = {}
		if(isRect(type)){
			__.color = in_.rect_color.val();
			__.border_color = in_.rect_border_color.val();
			__.border_size = in_.rect_border_size.val();
			__.round = in_.rect_round.val();
		}
		if(isLine(type)){
			__.color = in_.line_color.val();
			__.arrow_w = in_.line_w.val();
			__.arrow_l = in_.line_l.val();
			__.arrow_r = in_.line_r.val();
		}
		if(isImage(type)){
			__.src = in_.image.val();
			__.round = in_.image_round.val();
			__.ratio = in_.image_ratio.val();
			__.fix = in_.image_fix.val();
		}
		if(isSVG(type)){
			__.svg = in_.svg.val();
			__.color = in_.svg_color.val();
		}
		if(isText(type)){
			__.text = in_.text.val();
			__.size = in_.text_size.val();
			__.color = in_.text_color.val();
			__.align = in_.text_align.val();
			__.line = in_.text_line.val();
			__.font = in_.text_font.val();
			__.bold = in_.text_bold.val();
			__.sdw = in_.text_sdw.val();
			__.bmp = in_.text_bmp.val();
		}
		if(isLink(type)){
			__.meta = in_.meta.val();
		}
		if(isHTML(type)){
			__.html = in_.html.val();
			__.preview = in_.html_preview.val();
		}
		return __;
	}
	
	/* ---------- ---------- ---------- */
	//レイヤー用データ
	function getLayerData(_data){
		var type = _data.type
		if(isRect(type)){
			return "四角" //+ '<div class="_sub">' + _data.rect.width +' * '+ _data.rect.height + '</div>'; 
		}
		if(isLine(type)){
			return "線" //+ '<div class="_sub">' + _data.rect.width +' * '+ _data.rect.height + '</div>'; 
		}
		if(isImage(type)){
			return "画像"+ '<div class="_sub">' + _data.data.src + '</div>'; 
		}
		if(isSVG(type)){
			return "SVG";
		}
		if(isText(type)){
			var s = CMS_TagU.tag_2_t(_data.data.text);
			if(s.length > 50){ s = s.substr(0,50) + "..."; }
			return "テキスト"+ '<div class="_sub">' + s + '</div>'; 
		}
		if(isLink(type)){
			var s = "";
			if(_data.rect.link){
				s += (_data.rect.link.href) ? _data.rect.link.href : "";
			}
			s += (_data.data.meta) ? _data.data.meta : "";
			return "リンク"+ '<div class="_sub">' + s + '</div>'; 
		}
		if(isHTML(type)){
			var s = CMS_TagU.tag_2_t(_data.data.html);
			if(s.length > 50){ s = s.substr(0,50) + "..."; }
			return "HTML"+ '<div class="_sub">' + s + '</div>'; 
		}
		return "--"
	}
	return {
		getUID:getUID,
		
		isRect:isRect,
		isLine:isLine,
		isImage:isImage,
		isSVG:isSVG,
		isText:isText,
		isLink:isLink,
		isHTML:isHTML,
		
		createItemView:createItemView,
		getInitData:getInitData,
		setInputValue:setInputValue,
		getInputValue:getInputValue,
		getLayerData:getLayerData
	}
})();



var ImageMapExport = (function(){
	
	var isRect 			= ImageMapCode.isRect;
	var isLine 			= ImageMapCode.isLine;
	var isImage 		= ImageMapCode.isImage;
	var isSVG 			= ImageMapCode.isSVG;
	var isText 			= ImageMapCode.isText;
	var isLink 			= ImageMapCode.isLink;
	var isHTML 			= ImageMapCode.isHTML;

	/* ---------- ---------- ---------- */
	//プレビュー用タグ取得
	
	function getItemTag(type,_view,__){
		if(isRect(type)){
			var bg = "";
			if(__.data.color){
				bg = __.data.color;
			}
			var bd = "";
			if(__.data.border_size){
				bd = __.data.border_size + ' solid ' + __.data.border_color;
			}
			var rad = ""
			if(__.data.round){
				rad = __.data.round;
			}
			_view.css({
				"position":"absolute",
				"top":"0",
				"left":"0",
				"right":"0",
				"bottom":"0",
				"border":bd,
				"overflow":"hidden",
				"border-radius":rad,
				"background":bg
			});
		}
		if(isLine(type)){
			var svg = getLineSVG({
				W:__.rect.width,
				H:__.rect.height,
				arrowW:(__.data.arrow_w) ? Number(__.data.arrow_w) : 10,
				arrowL:(__.data.arrow_l) ? Number(__.data.arrow_l) : 0,
				arrowR:(__.data.arrow_r) ? Number(__.data.arrow_r) : 0
			});
			_view.html(svg);
			_view.find("svg").css({
				"fill":__.data.color
			});
		}
		
		if(isImage(type)){
			var rad = ""
			if(__.data.round){
				rad = __.data.round;
			}
			var img_st = (__.data.fix == "1") ? "" :"width:100%;";
			_view.empty();
			_view.css({
				"position":"absolute",
				"top":"0",
				"left":"0",
				"width":"100%",
				"overflow":"hidden"
			});
			var imgPath = CMS_Path.MEDIA.getImagePath( __.data.src , false );
			var ratio = ImageMapU.getRatio(__.data.ratio);
			if(isNaN(ratio)){
				_view.css({
					"overflow":"hidden",
					"border-radius":rad
				});
				if(! DummyImageService.isMock(__.data.src)){
					imgPath += "?"+ DateUtil.getRandamCharas(5)
				}
				_view.append($('<img src="'+ imgPath + '" style="'+img_st+'">'));//***
			} else {
				_view.append('<div style="width:100%;padding-top:'+ratio+'%;border:solid 1px #888;"></div>');
				_view.css({
					"background":"url(" + imgPath + ") center center no-repeat",
					"background-size":"cover",
					"overflow":"hidden",
					"border-radius":rad
				});
			}
		}
		
		if(isSVG(type)){
			_view.html(__.data.svg);
			_view.find("svg").css({
				"fill":__.data.color
			});
		}
		if(isText(type)){
			var tag = ""
			if(__.data.bmp){
				tag = '<img src="' + ImageMapBMPText.getImage(__) + '" style="width:100%">';
			} else{
				tag = '<p style="{STYLE}">{TEXT}</p>';
				var s = __.data.text;
					s = s.split("\n").join("<br>");
				tag = tag.split("{TEXT}").join(s);
				tag = tag.split("{STYLE}").join(getFontStyle(__.data));
			}
			_view.html(tag);
		}
		
		if(isLink(type)){
			// _view.html(__.data.link);
		}
		
		if(isHTML(type)){
			if(__.data.preview){
				_view.html(__.data.html);
			} else{
				_view.html(CMS_TagU.tag_2_t(__.data.html));
			}
			_view.css({
				"position":"absolute",
				"top":"0",
				"left":"0",
				"right":"0",
				"bottom":"0"
			});
		}
		// _view.css(_getRotCss(__.rect.rotate));
		_view.css(_getOpaCss(__.rect.opacity));
		_view.attr("class" , _view.data("defclass") +" " + __.rect.class);
	}
	
	/* ---------- ---------- ---------- */
	//HTML
	
	function treatParam(_data){
		if(_data == undefined) _data = {}
		if(_data.canvas == undefined) _data.canvas = {}
		if(_data.canvas.width == undefined) _data.canvas.width = 300;
		if(_data.canvas.height == undefined) _data.canvas.height = 200;
		if(_data.canvas.background == undefined) _data.canvas.background = "";
		if(_data.canvas.color == undefined) _data.canvas.color = "";
		if(_data.canvas.dark == undefined) _data.canvas.dark = false;
		if(_data.canvas.grid == undefined) _data.canvas.grid = 0;
		if(_data.list == undefined) _data.list = [];
		return _data;
	}
	    
	var svgColor = ""
	function getHTML(_data,_w,_isPub){
		_data = treatParam (_data);
		/* ---------- ---------- ---------- */
		var wapCSSs = "";
		if(!_w){
			wapCSSs += "display:inline-block;";
		}
			wapCSSs += "position:relative;overflow:hidden;vertical-align:bottom;"//width:" + w + ";"
		if(_data.canvas.background){
 			wapCSSs += "background:"+ _data.canvas.background+";"
 		}
		if(_data.canvas.color){
 			wapCSSs += "color:"+ _data.canvas.color+";"
 			svgColor = _data.canvas.color;
 		} else{
 			svgColor = ""
 		}
 		
		/* ---------- ---------- ---------- */
		
 		var dummnyCSS = "display:block;"
		if(_w){
			wapCSSs += "width:" + _w + ";";
			dummnyCSS += "width:100%;";
		}
		if(!_isPub){
			wapCSSs += "outline:dashed 1px rgba(74, 102, 160, 0.6);box-shadow:0px 0px 5px rgba(0,0,0,0.2);";
		}
		
		/* ---------- ---------- ---------- */
		var dummy = DummyImageService.getImage("width:"+_data.canvas.width+",height:1,color:trans")

		/* ---------- ---------- ---------- */
		var ratio = ImageMapU.getRatio(_data.canvas.width+":"+_data.canvas.height);

		/* ---------- ---------- ---------- */
		var tag = "";
		for (var i = 0; i < _data.list.length ; i++) {
			if(! _data.list[i].hide){
				tag += getHTML_item( _data.list[i] , i,_isPub);
			}
		}
		var html = ""
			html += '<div class="cms-img-layout" style="' + wapCSSs + '">\n';
			html += '	<img src="'+dummy+'" class="cms-img-width" style="'+dummnyCSS+'">\n';
			html += '	<div class="cms-img-height" style="margin-top:-1px;padding-top:'+ ratio +'%"></div>\n';
			html += tag;
			html += '</div>\n';
		return html;
	}
	
	function getHTML_item(_data,_no,_isPub){
		var baseSel = ImageMap.State.ID;
		var type = _data.type;
		var cls = "_" + type.split(".").join("-");
		
		var tag = '	<{TAG} {ATTR} style="{STYLE}">{MAIN}</{TAG}>\n';
		
		var style = "";
			style = 'position:absolute;top:{Y};left:{X};width:{W};height:{H};{STYLE_ONE}{STYLE_COM}';
			style = style.split("{X}").join(ImageMapU.treat(_data.rect.left) + "%");
			style = style.split("{Y}").join(ImageMapU.treat(_data.rect.top) + "%");
			style = style.split("{W}").join(ImageMapU.treat(_data.rect.width) + "%");
			style = style.split("{H}").join(ImageMapU.treat(_data.rect.height) + "%");
	
		/* ---------- ---------- ---------- */
		
		if(isRect(type)){
			var bg = "";
			var bd = "";
			if(_data.data.color){ bg = "background:" + _data.data.color + ";"; }
			if(_data.data.border_size){ bd = "border:" + _data.data.border_size + ' solid ' + _data.data.border_color + ";"; }
			var rad = "";
			if(_data.data.round){ 
				rad += "-webkit-border-radius:"+_data.data.round +";";
				rad += "border-radius:"+_data.data.round +";";
			}
			style = style.split("{STYLE_ONE}").join( bg + bd + rad );
		} 
		
		if(isLine(type)){
			var svg = getLineSVG({
				W:_data.pixel.width,
				H:_data.pixel.height,
				col:_data.data.color,
				arrowW:(_data.data.arrow_w) ? Number(_data.data.arrow_w) : 10,
				arrowL:(_data.data.arrow_l) ? Number(_data.data.arrow_l) : 0,
				arrowR:(_data.data.arrow_r) ? Number(_data.data.arrow_r) : 0
			});
			tag = tag.split("{MAIN}").join(svg);
			/*
			var svgAttr = ""
			_col = ""
			if(svgColor) _col = svgColor;
			if(_data.data.color) _col = _data.data.color;
			if(_col){
				svgAttr += 'fill:' + _col + ';';
			}
			*/
		}
		
		/* ---------- ---------- ---------- */
		
		if(isImage(type)){
			var ratio = ImageMapU.getRatio(_data.data.ratio);
			var img_st = (_data.data.fix == "1") ? "" :"width:100%;";
			var _main = "";
			var _st = "";
			var src = _data.data.src;
			
			if(_isPub && DummyImageService.isMock(src)){
				_main += '<img src="" class="cms_mock_image" data-src="'+src+'" style="'+img_st+'">'
			} else{
				var imgPath = CMS_Path.MEDIA.getImagePath( src , _isPub );
				if(_data.date){
					if(! DummyImageService.isMock(src)){
						imgPath += "?"+_data.date;
					}
				}
				if(isNaN(ratio)){
					_main += '<img src="' + imgPath + '" style="'+img_st+'">';//***
				} else{
					_main += '<div style="width:100%;padding-top:'+ratio+'%"></div>';
					_st = "background:url("+imgPath+") center center no-repeat;background-size:cover;";
				}
			}
			
			var rad = "";
			if(_data.data.round){ 
				rad += "-webkit-border-radius:"+_data.data.round +";";
				rad += "border-radius:"+_data.data.round +";overflow:hidden;";
			}
			tag = tag.split("{MAIN}").join(_main);
			style = style.split("{STYLE_ONE}").join( _st + rad );
		}
		
		/* ---------- ---------- ---------- */
		
		if(isSVG(type)){
			var svg = _data.data.svg;
			// var svgAttr = "position:absolute;top:0;left:0;right:0;bottom:0;"
			var svgAttr = "position:absolute;top:0;left:0;width:100%;height:100%;"
			_col = ""
			if(svgColor) _col = svgColor;
			if(_data.data.color) _col = _data.data.color;
			if(_col){
				svgAttr += 'fill:' + _col + ';';
			}
			svg = svg.split('<svg').join('<svg style="' + svgAttr + '" ');
			svg = svg.split('	').join(' ');
			svg = svg.split('\n').join('');
			//
			tag = tag.split("{MAIN}").join(svg);
		}
		
		/* ---------- ---------- ---------- */
		
		if(isText(type)){
			if(_data.data.bmp){
				var _b64 = "";
				if(_data.data.bmpData){
					_b64 = _data.data.bmpData;
				} else{
					_b64 = ImageMapBMPText.getImage(_data);
				}
				var alt = _data.data.text;
					alt = alt.split("\n").join(" ");
				var ss = '<img src="' + _b64 + '"  alt="'+alt+'" style="width:100%">';
				tag = tag.split("{MAIN}").join(ss);
			} else{
				var s = _data.data.text;
					s = s.split("\n").join("<br>");
				tag = tag.split("{MAIN}").join(s);
				style = style.split("{STYLE_ONE}").join(getFontStyle(_data.data));
			}
		}
		
		/* ---------- ---------- ---------- */
		
		if (isLink(type)) {
			if(!_isPub){
			style = style.split("{STYLE_ONE}").join("background:rgba(0,0,255,0.05);");
			}
		}
		
		/* ---------- ---------- ---------- */
		
		if(isHTML(type)){
			tag = tag.split("{MAIN}").join(_data.data.html);
		}
		
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		//最後
		
		style = style.split("{STYLE_ONE}").join("");
		tag = tag.split("{MAIN}").join("");
		
		//共通変形
		var sts = [
			_getRotCssText(_data.rect.rotate),
			_getOpaCssText(_data.rect.opacity)
		]
		style = style.split("{STYLE_COM}").join(sts.join(""));
	
		/* ---------- ---------- ---------- */
		//リンク設定
		
		var hasLink = (function(_link){ 
			if(!_link)return;
			if(_link.href) return true;
			return false;
		})(_data.rect.link);
		
		var tagName = 'div';
		var class_ = (_data.rect.class) ? " " + _data.rect.class : "";
		var attr_ = (_data.rect.attr) ? " " + _data.rect.attr : "";
		var extraStyle = (_data.rect.style) ? " " + _data.rect.style : "";
		
		var attr = '';
		if(hasLink){
			tagName = 'a';
			attr = ' href="{URL}" target="{TARGET}" ';
			attr = attr.split("{URL}").join( CMS_Path.MEDIA.getAnchorPath(_data.rect.link.href,_isPub) );
			attr = attr.split("{TARGET}").join( defaultVal(_data.rect.link.target));
			if(_data.rect.attr){
				attr += " " + _data.rect.attr;
			}
		}
		if(class_){
			attr += ' class="' + class_ + '"';
		}
		if(attr_){
			attr += attr_;
		}
		if(_data.data){
			if(_data.data.meta){
				attr += ' data-meta="' + _data.data.meta + '"';
			}
		}
		
		tag = tag.split("{TAG}").join(tagName);
		tag = tag.split("{ATTR}").join(attr);
		tag = tag.split("{STYLE}").join(style +" "+ extraStyle);
		tag = tag.split("   ").join(" ");
		tag = tag.split("  ").join(" ");
		return tag;
	}

	/* ---------- ---------- ---------- */
	
	function getFontStyle(__){
		var _s = '{COLOR}{SIZE}{ALIGN}{LINE}{FONT}{BOLD}{SDW}';
			_s = _s.split("{SIZE}")		.join(__.size ? ("font-size:"+__.size +';') : "");
			_s = _s.split("{COLOR}")	.join(__.color ? ("color:"+__.color +';') : "");
			_s = _s.split("{ALIGN}")	.join(__.align ? ("text-align:"+__.align +';') : "");
			_s = _s.split("{LINE}")		.join(__.line ? ("line-height:"+__.line +';') : "");
			_s = _s.split("{FONT}")		.join(__.font ? ("font-family:"+__.font +";") : "");
			_s = _s.split("{BOLD}")		.join(__.bold ? ("font-weight:"+__.bold +';') : "");
			_s = _s.split("{SDW}")		.join(__.sdw ? ("text-shadow:0 0 "+__.sdw+"px rgba(0,0,0,0.5);") : "");
		return _s
	}
	
	/* ---------- ---------- ---------- */


	function _getRotCss(_rot){
		var css = {}
		if(Number(_rot) == 0){
			css = {
				"-webkit-transform":"",
				"transform":""
			}
		} else{
			css = {
				"-webkit-transform":"rotate("+_rot+"deg)",
				"-ms-transform":"rotate("+_rot+"deg)",
				"transform":"rotate("+_rot+"deg)"
			}
		}
		return css;
	}
	function _getRotCssText(_rot){
		var s = ""
		if(Number(_rot)){
			s += '-webkit-transform:rotate('+_rot+'deg);'
			s += '-ms-transform:rotate('+_rot+'deg);'
			s += 'transform:rotate('+_rot+'deg);'
		}
		return s;
	}
	
	function _getOpaCss(_opa){
		var css = {}
		if(Number(_opa) == 1){
			css = { "opacity":"" }
		} else{
			css = { "opacity":Number(_opa) }
		}
		return css;
	}
	function _getOpaCssText(_opa){
		var s = "";
		if(Number(_opa)){
			if(Number(_opa) == 1){
				//	
			}else{
				s += 'opacity:'+Number(_opa)+';'
			}
		}	
		return s;
	}

	function getLineSVG(_param){
		var W = ImageMapU.treat(_param.W);
		var H = ImageMapU.treat(_param.H);
		var w = ImageMapU.treat(_param.arrowW);
		var attr = "position:absolute;top:0;left:0;width:100%;height:100%;";
		if(_param.col) attr += "fill:" + _param.col + ';'
		var svg = "";
		svg += '<svg style="'+attr+'" width="100%" height="100%" viewBox=" 0 0 {W} {H}" >';
		var L = _param.arrowL;
		var R = _param.arrowR;
		var h = _param.arrowW;
		var WmR = ImageMapU.treat(W-R);
		var cent = ImageMapU.treat(H/2);
		var cent2 = ImageMapU.treat(cent*2);
		if(_param.arrowR){
			svg += [
				'<path d="',
				" M " + (WmR-1) + " " + 0,
				" L " + (W) + " " + (cent),
				" L " + (WmR-1) + " " + (cent2),
				" L " + (WmR-1) + " " + 0,
				" Z ",
				'" />'
			].join("");
		}
		if(_param.arrowL){
			svg += [
				'<path d="',
				" M " + (L+1) + " " + 0,
				" L " + 0 + " " + (cent),
				" L " + (L+1) + " " + (cent2),
				" L " + (L+1) + " " + 0,
				" Z ",
				'" />'
			].join("");
		}
		var y = ImageMapU.treat(cent - (h/2));
		svg += [
			'<path d="',
			" M " + L + " " + y,
			" L " + L + " " + (y+h),
			" L " + (WmR) + " " + (y+h),
			" L " + (WmR) + " " + y,
			" L " + L + " " + y,
			" Z ",
			'" />'
		].join("");
		
		svg += '</svg>'
		svg = svg.split("{W}").join(W);
		svg = svg.split("{H}").join(H);
		
		return svg;
	}

	return {
		getItemTag:getItemTag,
		getHTML:getHTML,
		getHTML_item:getHTML_item,
		treatParam:treatParam
	}
})();



var ImageMapBMPText = (function(){

	var DEF_FONT = "";
	
	var view;
	function init(){
		$("body").append('<div id="ImageMapBMPText" style="display:none;"></div>')
		 view = $("#ImageMapBMPText");
	}
	
	function treatParam(_param){
		if(!_param) _param = {}
		
		if(! _param["pixel"]) _param.rect = {};
		if(! _param.rect["pixel"]) _param.rect.pixel = 300;
		if(! _param.rect["pixel"]) _param.rect.pixel = 50;
		
		if(! _param["data"]) _param.data = {};
		if(! _param.data["width"]) _param.data.width = 300;
		if(! _param.data["height"]) _param.data.height = 50;
		if(! _param.data["text"]) _param.data.text = "サンプルのタイトル";
		if(! _param.data["size"]) _param.data.size = "24px";
		if(! _param.data["line"]) _param.data.line = 1.2;
		if(! _param.data["color"]) _param.data.color = "";
		if(! _param.data["align"]) _param.data.align = "";
		if(! _param.data["font"]) _param.data.font = "";
		if(! _param.data["bold"]) _param.data.bold = "";
		if(! _param.data["sdw"]) _param.data.sdw = "";
		return _param;
	}
	
	var CANVAS_ID = "_ImageMapCanvas_";
	//
	var zoom = IMAGE_BLOCK_BMP_ZOOM;
	function getImage(_param){
		if(typeof _param == "string") return "";
		_param = treatParam(_param);
		
		var w = _param.pixel.width *zoom;
		var h = _param.pixel.height *zoom;
		
		var temp = '<canvas id="{CANVAS_ID}" style="hidden" width="{W}" height="{H}"></canvas>';
			temp = temp.split("{CANVAS_ID}").join(CANVAS_ID);
			temp = temp.split("{W}").join(w);
			temp = temp.split("{H}").join(h);
		view.html(temp);
		
		var canvas = document.getElementById(CANVAS_ID);
		var size = (function(_s){ 
		    return Number( _s.split("px")[0]) * zoom;
		})(_param.data.size);
		
		var _ctx = canvas.getContext('2d');
			_ctx.clearRect(0,0,w,h);
			_ctx.beginPath();
			_ctx.fillStyle = _param.data.color;
			_ctx.font = _getFont(size,_param.data.font); 
			
			if(_param.data.sdw){
				_ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
				_ctx.shadowBlur = _param.data.sdw;
			}
			
			var param = {
				ctx:_ctx,
				text:_param.data.text,
				width:w,
				line:size * Number(_param.data.line),
				align:(_param.data.align) ?_param.data.align : ""
			}
			_createText(param);
		
		return canvas.toDataURL();
	}
	
	function _getFont(_f,_fa,_st){
		var size = (_f != "") ?  _f : "10";
		var s2 = (_fa != "") ?  _fa : "Verdana";
		var s3 = (_st != "") ? _st : "";
		return [ s3 , size + 'px' ,"'"+s2+"'" ].join(" ");
	}
	
	function _createText(_param) {
		//各行のテキスト
		var rows = _createText_getRows(_param.ctx, _param.text, _param.width);
		
		//行揃え
		var startX = 0;
		if(_param.align == "center"){
			_param.ctx.textAlign = _param.align;
			startX = _param.width/2;
		}
		if(_param.align == "right"){
			_param.ctx.textAlign = _param.align;
			startX = _param.width;
		}
		//1行づつレンダー
		for (var i = 0; i < rows.length; ++i) {
			_param.ctx.fillText(rows[i], startX, _param.line * (i+1));
		}
	}
	function _createText_getRows(_ctx, text, _w) {
		if (text.length < 1) { return []; }
		var rows = [];
		var _row = "";
		for (var i = 0; i < text.length; i++) {
			var c = text.charAt(i);
			if (c == "\n") {
				rows.push(_row);
				_row = "";
			} else{
				var w = _ctx.measureText(_row + c).width;
				if (w <= _w) {
					_row += c;
				} else {
					rows.push(_row);
					_row = c;
				}
			}
		}
		if (_row.length > 0) rows.push(_row);
		return rows;
	}
	
	return {
		init:init,
		getImage:getImage 
	}
})();




var BackupView 		 = (function(){
	var view;
	var v = {};
	var baseDir = "";
	var targetDir = ""
	
	var mustVersion ="5.2.0";
	var enableBackup = true
	
	function init(){
		view = $('#BackupView');
		stageInit();
		// setTimeout(function(){
		// 	BackupView.stageIn()
		// },500);
		if(CMS_ServerStatusFunc.checkCoverVersion(mustVersion) == false){
			enableBackup = false;
		}
	}
	function createlayout(){
		v = ModalViewCreater.createBaseView(BackupView,view);

		var tag = ""
			tag += '<div class="_guide">'+CMS_GuideU.getGuideTag("window/backup","_BASE_")+'</div>'
			tag += '<div class="_title"><i class="fa fa-download "></i> サイトバックアップとダウンロード</div>'
		v.header.html(tag);
		
			tag = ''
		if(enableBackup ){
			tag += '<div class="_read">サイトディレクトリ以下の、任意のディレクトリを、ZIPファイルでバックアップすることができます。<br>ZIPファイルは、バックアップ用ディレクトリ( <span class="_icon_dir"></span> ' +CMS_Path.BACKUP.ABS +' )に配置されます。</div><br>'
			tag += '<div id="BackupView_notWritable" style="display:none">';
			tag += 'バックアップディレクトリ（<span class="_icon_dir"></span> ' + CMS_Path.BACKUP.ABS + "）が存在しないか、書き込み権限がありません。 <br>";
			tag += "FTPソフト等で、ディレクトリを作成のうえ、書き込み権限(707など)を設定してください。";
			tag += '</div>';
			tag += '<div id="BackupViewCore" style="display:none">';
			tag += '	<div class="createBlock clearfix">';
			tag += '	<div id="BackupTargetView" class=""></div>';
			tag += '	<div id="BackupTargetArrow" class=""><i class="fa fa-arrow-right "></i> </div>';
			tag += '	<div id="BackupCreateView" class=""></div>';
			tag += '	</div>';
			tag += '	<div id="BackupListView"></div>';
			tag += '</div>';
		}else{
			tag += '<div class="_read">このウェブサーバーでは、バックアップ機能はご利用できません。</div>';
			tag += '<div class="_read">利用中のサーバーのPHPバージョン：<b>'+CMS_ServerStatus.version+'</b></div>';
			tag += '<div class="_read">バックアップ機能に必要なPHPバージョン：<b>'+mustVersion+'〜</b></div>';
		}
		
		v.body.html(tag);
			
			tag = ""
			tag += '<div class="_cms_btn _btn_close" '+TIP_ENTER+'>閉じる</div> ';
		v.footer.html(tag)
		
		v._btn_close = view.find('._btn_close');
		setBtn();

		if(enableBackup){
			BackupTargetView.init();
			BackupCreateView.init();
			BackupListView.init();
		}
	}
	
	function setBtn(){
		view.find('._bg ,._btn_close').click(function(){ stageOut() });
	}
	
	/* ---------- ---------- ---------- */
	
	function checkDir(){
		if(enableBackup == false)return;
		var p = "?action=getDirList&dir_name=" + escape_url(CMS_Path.BACKUP.REL);
			p += '&is_detail=1';
		var url = CMS_Path.PHP_DIRECTORY + p;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: url,
			dataType		: 'json',
			success			: function(data) { checkDir_comp(data)},
			error			: function(data) {
				CMS_ErrorView.stageIn("NET",url,null,data);
			}
		})
	}
	function checkDir_comp(json){
		if(json.w == "1"){
			$("#BackupViewCore").show()
			BackupTargetView.stageIn();
			BackupListView.stageIn();
		} else{
			$("#BackupView_notWritable").show()
		}
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	var callback = true;
	// var currentPath = "";
	function stageInit(){
		view.hide();
	}
	function stageIn(_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			callback = _callback;
			if(isFirst){
				createlayout();
			}
			isFirst = false;
			view.show();
			
			checkDir();
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
		}
	}

	function resize(){
		if(isOpen){}
	}
	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		resize: resize
	}
})();



var BackupTargetView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#BackupTargetView');
		stageInit();
		createlayout();
		setBtn();
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		
		var list = [0,1,2,3,4,5];
		var tag = ""
			tag += '<div class="_p _h2">1. ディレクトリの選択</div>';
			tag += '<div class="_dirList _shadow"></div>';
		
		view.html(tag);
		v.dirList = view.find('._dirList')

		loadList();
	}
	
	function setBtn(){
	}
	
	function loadList(_callback){
		BackupCreateView.stageOut();
		var o = {}
			o.action = "readDirList";
			o.dir_name = escape_url(SITE_DIR_PATH);
		var callback = function(json){	
			update(json);
			BackupCreateView.stageIn();
		}
		BackupU.loadAPI(o,callback);
		
		//test
		/*
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			url				: "../../_test/_backup/backup_test_05.json",
			dataType		: 'json',
			success			: callback
		})
		*/
	}
	function checkName(_memo,_path,_name){
		if(_memo.indexOf(",") == -1){
			if(_name.charAt(0) != "_"){
				return "checked";
			} 
		} else{
			var ls = _memo.split(",");
			for (var i = 0; i < ls.length ; i++) {
				if(ls[i] == _path){
					return "checked";
				}
			}
		}
		return "";
	}
	
	var checkViews = [];
	function update(data){
		var dirs = data.dirs;
		var files = data.files;
		var tag = ''
			tag += '<div class="_p">バックアップの対象となるディレクトリを選択してください。</div>';
			tag += '<div class="_p _arrow"><i class="fa fa-arrow-down "></i></div>'
			tag += '<div class="_p"><span class="_icon_dir"></span>/ (サイトディレクトリ)</div>'
		
		var memoList = Storage.Memo.getBK();
		
		for (var i = 0; i <  dirs.length ; i++) {
			if(dirs[i] != ""){
				
				var uid = "_bk_checkD_" + i;
				var name = dirs[i].split("../").join("");
				var checked = checkName(memoList,dirs[i],name);
				
				if(dirs[i]+"/" == CMS_Path.BACKUP.REL) {
					var temp = "";
						temp+= '<div>'
						temp+= '	-- <span class="_icon_dir"></span> {NAME}</label>'
						temp+= '</div>'
						temp = temp.split("{NAME}").join(name);
						temp = temp.split("{PATH}").join(dirs[i]);
					tag += temp;
				} else{
					var temp = "";
						temp+= '<div>'
						temp+= '	<input type="checkbox" id="{ID}" name="checkbox" {CHECKED} data-type="{TYPE}" data-path="{PATH}" value="checked">'
						temp+= '	<label for="{ID}"><span class="_icon_dir"></span> {NAME}</label>'
						temp+= '</div>'
						temp = temp.split("{ID}").join(uid);
						temp = temp.split("{NAME}").join(name);
						temp = temp.split("{PATH}").join(dirs[i]);
						temp = temp.split("{TYPE}").join("dir");
						temp = temp.split("{CHECKED}").join(checked);
					tag += temp;
				}
			}
		}
		
		for (var i = 0; i <  files.length ; i++) {
			if(files[i] != ""){
				
				var uid = "_bk_checkF_" + i;
				// var checked = "checked";
				// if(name.charAt(0) == "_") checked ="";
				var name = files[i].split("../").join("");
				var checked = checkName(memoList,files[i],name);
				
				var temp = "";
					temp+= '<div>'
					temp+= '	<input type="checkbox" id="{ID}" name="checkbox" {CHECKED} data-type="{TYPE}" data-path="{PATH}" value="checked">'
					temp+= '	<label for="{ID}"> {NAME}</label>'
					temp+= '</div>'
					temp = temp.split("{ID}").join(uid);
					temp = temp.split("{NAME}").join(name);
					temp = temp.split("{PATH}").join(files[i]);
					temp = temp.split("{TYPE}").join("file");
					temp = temp.split("{CHECKED}").join(checked);
				tag += temp;
			}
		}
		
		v.dirList.append(tag);
		checkViews = view.find("input")
		checkViews.change(function() {
			BackupCreateView.selectDirUpdate();
			var ls = BackupTargetView.getSelectsFlat();
			Storage.Memo.setBK(ls);
		});
		
	}
	
	function getSelects(){
		var ds = []
		var fs = []
		checkViews.each(function (index, dom) {
			var tar = $(this);
			if(tar.prop("checked")){
				if(tar.data("type") == "dir"){
					ds.push( tar.data("path"))
				}
				if(tar.data("type") == "file"){
					fs.push( tar.data("path"))
				}
			}
		});
		return { dirs: ds.join(",") , files:fs.join(",") };
	}
	function getSelectsFlat(){
		var ss = getSelects();
		var a = []
		if(getSelects().dirs.length > 0){
			a.push(getSelects().dirs);
		}
		if(getSelects().files.length > 0){
			a.push(getSelects().files);
		}
		return a.join(",")
	}
	//BackupTargetView.getSelectsFlat()]
	// Storage.Memo.getBK();
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
return {
	init: init,
	stageIn: stageIn,
	stageOut: stageOut,
	getSelects: getSelects,
	getSelectsFlat: getSelectsFlat
}
})();



var BackupCreateView = (function(){
	
	var btn_add
	var btn_add_dis
	var btn_diff
	var btn_delete
	var isAdding = false
	
	var v = {}
	
	function init() {
		
		view = $("#BackupCreateView");
		
		var tag = ""
			tag += '<div class="_p _h2">2. バックアップファイル ( ZIP ) 作成</div>';
			tag += '	<ul class="_tab">';
			tag += '		<li>バックアップ用ファイル作成</li>';
			tag += '		<li>差分ファイル作成</li>';
			tag += '	</ul>';
			tag += '	<div class="_backupArea _shadow">';
			tag += '		<div class="_p">バックアップファイル( ZIP ) を作成したい場合は、以下のボタンを押してください。数秒から数十秒ほどで、選択したディレクトリをZIPファイルに変換し、保存・ダウンロードできます。</div>';
			tag += '		<div class="_notes">CMSにはリストア機能は無いので、バックアップからサイトをリストアするには、ZIPファイルをダウンロード、解凍し、FPTで上書きしてください。</div>';
			tag += '		<div class="_zip_selects"></div>';
			tag += '		<div class="_p _arrow"><i class="fa fa-arrow-down "></i></div>';
			tag += '		<div class="_btns">';
			tag += '			<div class="_btn_add">バックアップファイル ( ZIP ) を作成する</div>';
			tag += '			<div class="_btn_add_dis">ZIPファイル作成中 (しばらくお待ちください) ...</div>';
			tag += '			<div class="_btn_add_done">作成しました (下の履歴からZIPを取得できます) <br><br><i class="fa fa-arrow-down "></i> </div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '	<div class="_diffArea _shadow ">';
			tag += '		<div class="_p">指定した時間から、現在までに更新したファイルリストを取得します。ファイルリストから、ZIPファイルを作成し、ダウンロードできます。</div>	';
			tag += '		<div class="_diff_selects"></div>';
			tag += '		<div class="_p _arrow"><i class="fa fa-arrow-down "></i></div>';
			tag += '		<div class="_selectArea">';
			tag += '			更新時間：<span class="_replaceArea"></span>';
			tag += '		</div>';
			tag += '		<div class="_p _arrow"><i class="fa fa-arrow-down "></i></div>';
			tag += '		<textarea class="_diffList"></textarea>';
			tag += '		<div class="_btns">';
			tag += '			<div class="_btn_diff_none">差分ファイル ( ZIP ) を作成する</div>';
			tag += '			<div class="_btn_diff">差分ファイル ( ZIP ) を作成する</div>';
			tag += '			<div class="_btn_diff_dis">ZIPファイル作成中 (しばらくお待ちください) ...</div>';
			tag += '			<div class="_btn_diff_done">作成しました (下の履歴からZIPを取得できます) <br><br><i class="fa fa-arrow-down "></i> </div>';
			tag += '		</div>';
			tag += '	</div>	';
			tag += '	<div class="_p">ZIPファイルの作成が完了すると、下のバックアップ履歴のリストの上に追加されるので、そこからローカルディスクにZIPファイルを保存することもできます。(ファイルをアップロードするには、FTPアカウントが必要)</div>';
			
		view.html(tag);
	}
	
	function main(){
		
		v.btns = view.find('._btns');
		v.zip_selects = view.find('._zip_selects');
		v.diff_selects = view.find('._diff_selects');
		
		v.btn_add	 = view.find('._btn_add');
		v.btn_add_dis = view.find('._btn_add_dis');
		v.btn_add_done = view.find('._btn_add_done');
		v.btn_add.click(function(){ createZipFile() });
		v.btn_add.show();
	
		v.btn_getDiffList= view.find('._btn_getDiffList');
		v.btn_getDiffList.click(function(){ getDiffList() });
		
		v.btn_diff_none	 = view.find('._btn_diff_none');
		v.btn_diff		 = view.find('._btn_diff');
		v.btn_diff_dis	 = view.find('._btn_diff_dis');
		v.btn_diff_done  = view.find('._btn_diff_done');
		v.btn_diff.click(function(){ createDiffZip() });
		
		createView()
	}
	function createView(){
		
		view.find('._selectArea ._replaceArea').html(BackupU.getSelectTag());
		
		$('#hour').change(function(){ selectDiffTime($(this).val()) });
		
		v.tabs = $('._tab > li');
		v.BackupArea = $('._backupArea');
		v.DiffArea = $('._diffArea');
		
		v.tabs.eq(0).click(function(){ openTab(0)});
		v.tabs.eq(1).click(function(){ openTab(1)});
		
		openTab(0);
	}
	var isDiffOpen = false
	function openTab(_n){
		v.BackupArea.hide()
		v.DiffArea.hide()
		
		v.tabs.removeClass("_active")
		v.tabs.eq(_n).addClass("_active")
		if(_n == 0) {
			isDiffOpen = false
			v.BackupArea.show();
		}
		if(_n == 1) {
			isDiffOpen = true
			v.DiffArea.show();
		}
		selectDirUpdate();
	}
	
	/* ---------- ---------- ---------- */

	function selectDirUpdate(){
		if(isDiffOpen){
			updateDiffList();
		} else{
			resetZipFile();
		}
	}
	
	/* ---------- ---------- ---------- */

	function selectDiffTime(_m){
		v.btn_diff_none.show();
		v.btn_diff.hide();
		v.btn_diff_dis.hide();
		currentDiffTime = _m;
		$('.replaceText').html("");
		updateDiffList();
	}
	
	var currentDiffTime = 0;
	function updateDiffList(){
		
		v.diff_selects.html(getSelects ())
		
		var o = {}
			o.action  = "getDiffList";
			o.diff 	 = currentDiffTime;
			o.targetDirs = BackupTargetView.getSelectsFlat();

		v.btn_diff_done.hide();
		view.find('._diffList').val("検索中...");
		var callback = function(json){
			var list = json.files;
			var t = ""
			if(list.length == 0){
				t += "指定時間内に変更したファイルは、見つかりませんでした。" 
				v.btn_diff_none.show();
				v.btn_diff.hide();
			} else{
				t += "●差分ファイル一覧 (ファイル数：" + list.length  + ")\n"
				for (var i = 0; i < list.length ; i++) {
					t += list[i] + "\n";
				}
				v.btn_diff_none.hide();
				v.btn_diff.show();
			}
			v.btn_diff_dis.hide();
			v.btn_diff_done.hide();
		view.find('._diffList').val(t);
		};
		BackupU.loadAPI(o,callback);
	}
	function createDiffZip(){
		if(window.isLocked(true))return;
		if(isAdding)return;
		var o = {}
			o.diff 	 = currentDiffTime;
			o.action = "createDiffZip";
			o.targetDirs = BackupTargetView.getSelectsFlat();
		
		var callback = function(json){	
			v.btn_diff.hide();
			v.btn_diff_dis.hide();
			v.btn_diff_done.show();
	
			isAdding = false;
			loadFileList()
		}
		isAdding = true;
		v.btn_diff_none.hide();
		v.btn_diff.hide();
		v.btn_diff_dis.show();
		v.btn_diff_done.hide();
	
		BackupU.loadAPI(o,callback);
	}
	
	function loadFileList(){
		BackupListView.update()
	}
	function resetZipFile(){
		if(isAdding )return;
		v.btn_add.css("opacity","0.5")
		setTimeout(function(){
			v.btn_add.css("opacity","1")
		},200);
		v.zip_selects.html(getSelects ())
	
		v.btn_add.show();
		v.btn_add_dis.hide();
		v.btn_add_done.hide();
	}
	function getSelects(){
		var _se = BackupTargetView.getSelects();
		var ds = _se.dirs.split(",");
		var fs = _se.files.split(",");
		var tag = ""
			tag += "<table>";
			tag += "	<tr>";
			tag += "		<td>対象ディレクトリ：</td>";
			tag += "		<td>";

		var count = 0
		for (var i = 0; i <  ds.length ; i++) {
			if(ds[i] != ""){
				count++
				tag += '<span class="_icon_dir"></span> ' + ds[i].split("../").join("") + '<br>'
			}
		}
		for (var i = 0; i <  fs.length ; i++) {
			if(fs[i] != ""){
				count++
				tag += '<i class="fa fa-file-text"></i> ' + fs[i].split("../").join("") + '<br>'
			}
		}
		if(count==0){
			v.btns.hide()
			tag += "選択してください" 
		} else{
			v.btns.show()
		}
			tag += "	</td>";
			tag += "	</tr>";
			tag += "</table>";
		return tag;
	}
	function createZipFile(){
		if(window.isLocked(true))return;
		if(isAdding)return;
		var o = {}
			o.action = "createZip";
			o.targetDirs = BackupTargetView.getSelectsFlat();
		var callback = function(json){	
			//v.btn_add.show();
			v.btn_add_dis.hide();
			v.btn_add_done.show();
			isAdding = false;
			loadFileList()
		}
		isAdding = true;
		v.btn_add.hide();
		v.btn_add_dis.show();
		BackupU.loadAPI(o,callback);
	}
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				main()
			}
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	 return {
	 	init: init,
	 	stageIn: stageIn,
	 	stageOut: stageOut,
	 	selectDirUpdate: selectDirUpdate
	 }

})();


var BackupListView = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#BackupListView');
		stageInit();
		setBtn();
		
	}
	
	/* ---------- ---------- ---------- */
	
	function createlayout(){
		var tag = ""
			tag += '<div class="_p _h2">バックアップ履歴とダウンロード</div>';
			tag += '	<div class="_p">これまでバックアップで作成したZIPファイルのリストです。</div>';
			tag += '	<div class="_fileList"></div>';
			tag += '	<div class="_p">※ 上から新しい順に並んでいます。ZIPファイルは、保存した年月日(YYYY/MM/SS)と時間(hh:mm:ss)をもとにファイル名をつけています。</div>';
			tag += '	<div class="_p">※ 差分ファイルについては、ファイル名末尾に"._diff"と追加されます。</div>';
			tag += '	<div class="_p">※ ZIPファイルをダウンロードしたあと、バックアップとして残しておく必要がない場合は、削除してください。</div>';
		view.html(tag);
		v.fileList = view.find('._fileList');
	}
	
	function setBtn(){
		view.on("click","._btn_delete",function(){ 
			deleteFile($(this).data("id"))
		 });
	}
	
	function update(){
		var o = {}
			o.action = "readFileList";
		var callback = function(json){updateList(json)};
		BackupU.loadAPI(o,callback)
	}
	
	function updateList(json){
		var html = ""
		var list = json.files;
		var tag  = '<table class="_filelist">'
			tag += '<tr>';
			tag += '<th>番号</td>';
			tag += '<th>バックアップファイル</td>';
			tag += '<th>作成時間</td>';
			tag += '<th>ファイルサイズ</td>';
			tag += '<th>削除</td>';
			tag += '</tr>';
		
		if(list){
			// list = list.reverse();
			list.sort(function(a, b){
				return ( a.name < b.name ? 1 : -1);
			});
			var count = 0
			for (var i = 0; i < list.length ; i++) {
				if(list[i].name.indexOf(".zip")!= -1){
					var colorObject = BackupU.getDistanceTimeColor(list[i].time)
					var class_ = colorObject[1];
					var time = colorObject[2];
					var size = FileU.formatFilesize(list[i].size)
					// if(_s > 1000*1000){
					// 	size = "<b>" + Math.round(_s/(1000*100))/10 +"MB"+"</b>"
					// } else{
					// 	size = Math.round(_s/100)/10 +"KB"
					// }
					tag += '<tr>';
					tag += '<td>'+(count+1)+'</td>';
					tag += '<td class="'+class_+'"><i class="fa fa-download "></i> <a href="'+CMS_Path.BACKUP.REL+list[i].name+'" >' + list[i].name + '</a></td>';
					tag += '<td>'+time+'</td>';
					tag += '<td style="text-align:right">'+size+'</td>';
					tag += '<td><span class="_cms_btn-nano _cms_btn_red _btn_delete" data-id="'+list[i].name+'"><i class="fa fa-times "></i>  削除</div></td>';
					tag += '</tr>';
					count++
				}
			}
		}
		tag += "<table>";
		v.fileList.html(tag);
	}
	function deleteFile(_id){
		var s1 = "削除の確認"
		var s2 = "ファイルを削除しますか？"
		CMS_ConfirmView.stageIn(s1,s2,function(){
			var o = {}
				o.action = "deleteFile";
				o.filename = _id;
			var callback = function(json){	
				update()
			}
			BackupU.loadAPI(o,callback);
		},"DELL")
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	function stageIn(){
		if(! isOpen){ isOpen = true;
			view.show();
			if(isFirst){
				createlayout();
			}
			update();
			isFirst = false;
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
		}
	}
	 return {
	 	init: init,
	 	stageIn: stageIn,
	 	stageOut: stageOut,
	 	update: update
	 }

})();

var BackupU = (function(){
	
	function loadAPI(param,_callback) {
		
		param.zipDir = escape_url(CMS_Path.BACKUP.REL);
		param.siteDir = escape_url(SITE_DIR_PATH);
		
		if(param["targetDirs"]){
			param.targetDirs = escape_url(param.targetDirs);
		}
		
		var url = CMS_Path.PHP_BACKUP;
		$.ajax({
			scriptCharset	: 'utf-8',
			type			: 'GET',
			data			: param,
			url				: url,
			dataType		: 'json',
			success			: function(data) {
				setTimeout(function(){
					_callback(data)
				},200);
			},
			error			: function(data) {
				// if(isLog) console.log(data);
				CMS_ErrorView.stageIn("NET",url,param,data);
				// alert("ネットワークエラーが発生しました。");
			}
		})
	}
	function getSelectTag(){
		var a = [
			[5		,"5分"],
			[20		,"20分"],
			[1*60		,"1時間"],
			[3*60		,"3時間"],
			[12*60		,"12時間"],
			[1*24*60	,"1日"],
			[2*24*60	,"2日"],
			[4*24*60	,"4日"],
			[7*24*60	,"1週"],
			[14*24*60	,"2週"],
			[1*31*24*60	,"1月"],
			[2*31*24*60	,"2月"],
			[4*31*24*60	,"4月"],
			[12*365*60	,"1年"],
			[24*365*60	,"2年"]
		]
		var tag = ""
		tag += '<select id="hour">'
			tag += '<option value="0">選択してください</option>'
		for (var i = 0; i < a.length ; i++) {
			tag += '<option value='+ a[i][0] +'>'+ a[i][1] +"以内</option> "
		}
		tag += '</select>'
		return tag
	}
		
	function getDistanceTimeColor(old){
		/*
		var s = [
			old.substr(0,4),
			old.substr(4,2),
			old.substr(6,2)
		]
		var s2 = [
			old.substr(9,2),
			old.substr(11,2),
			old.substr(13,2),
		]
		var oldDate = new Date(s.join("/") +" " + s2.join(":"));
		*/
		var newDate = new Date();
		var sa = (newDate.getTime()/1000)-old;
		var min = sa /60;
		var cols = [
			[2				,"min2","数分以内"],
			[10				,"min10","10分以内"],
			[60				,"hour","1時間以内"],
			[60*6			,"hour6","6時間以内"],
			[60*24			,"day","1日以内"],
			[60*24*2		,"day2","2日以内"],
			[60*24*7		,"day7","7日以内"],
			[60*24*30		,"month","1月以内"],
			[60*24*30*2		,"month2","2月以内"],
			[60*24*30*4		,"month4","4月以内"],
			[60*24*30*12	,"year","1年以内"],
			[60*24*30*12*2	,"year2","2年以内"]
		]
		var s = [0,"year_",""]
		for (var i = 0; i < cols.length ; i++) {
			if(cols[i][0] > min){
				s = cols[i]
				break;
			}
		}
		return s;
	}
	return {
		loadAPI: loadAPI,
		getSelectTag: getSelectTag,
		getDistanceTimeColor: getDistanceTimeColor
	}
})();



var BatchPublishView 		 = (function(){
	
	var view;
	var v = {};
	
	function init(){
		view = $('#BatchPublishView');
		stageInit();
		// stageIn();
	}
	/* ---------- ---------- ---------- */
	function createlayout(){
		var tag = ""
			tag += '<div class="_bg"></div>'
			tag += '<div class="_modalBox ">'
			tag += '	<div class="_progress">'
			tag += '		<div class="_bar"></div>'
			tag += '	</div>'
			tag += '	<div class="_t_result"><div class="_core"></div></div>'
			tag += '	<div class="_btns">'
			tag += '		<div class="_cms_btn _cms_btn_active _cms_btn-big _btn_start ">スタート</div> ';
			tag += '		<div class="_cms_btn _btn_close">閉じる</div> ';
			tag += '		<div class="_cms_btn _cms_btn_red _cms_btn-big _btn_cancel">キャンセル</div> ';
			tag += '	</div>'
			tag += '</div>'
		view.html(tag);
		
		v.progress 		= view.find('._progress');
		v.bar	 		= view.find('._bar');
		v.t_result 		= view.find('._t_result ._core');
		v.btn_start 	= view.find('._btn_start');
		v.btn_close 	= view.find('._btn_close');
		v.btn_cancel = view.find('._btn_cancel');
		v.bg = view.find('._bg');
		
		setBtn();
	} 
	
	function setBtn(){
		v.btn_start.click(function(){ start_core() });
		v.btn_cancel.click(function(){ stop() });
		
		v.btn_close.click(function(){ stageOut() });
		v.bg.click(function(){ stageOut() });
	}
	
	/* ---------- ---------- ---------- */
	
	var tID;
	var leng;
	var pubList;
	
	function start(_list){
		leng = _list.length;
		
		//あらかじめ、公開日時を設定してやる。TreeAPIの仕様対策
		for (var i = 0; i <  _list.length ; i++) {
			_list[i].publicDate = CMS_SaveDateU.getDate();
		}
		//
		pubList = _list;
		var tag = '<span class="_fs14"><b>' + _list.length + '<b> ページをまとめて公開します...';
		v.t_result.html(tag);
		
		v.btn_start.show();
		v.btn_close.show();
		v.btn_cancel.hide();
	}
	
	var queue;
	function start_core(_list){
		
		v.btn_start.hide();
		v.btn_close.hide();
		v.btn_cancel.show();
		
		queue = new BatchQueueControllClass(pubList,BATCH_EXPORT_COUNT);
		
		queue.start(10,function(_i,_param){
			stepResult(_i,_param);
		},function(){
			lastResult();
			end();
		});
	}
	function stop(){
		if(queue) queue.stop()
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			stageOut()
		},400);	
	}
	function end(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			stageOut();
		},600);	
	}
	
	/* ---------- ---------- ---------- */
	
	var W = 240;
	function stepResult(_i,_param ){
		var num = ((_i*BATCH_EXPORT_COUNT)+1);
		var tag = ""
			tag += '<b> ' + num + " / " + leng + ' </b><br>' 
			// tag += _param.page.name.split("<br>");
		v.t_result.html(tag);
		var per = Number( num / leng);
		v.bar.css("width", per*W+"px" )
	}
	function lastResult( ){
		v.t_result.html("すべて公開しました");
		v.bar.css("width", W + "px" )
		CMS_PageList_PageDB.updateState();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_list,_callback){
		if(! isOpen){ isOpen = true;
			callback = _callback;
			view.show();
			if(isFirst){createlayout();}
			isFirst = false;
			
			if(_list) start(_list);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			view.hide();
			v.t_result.html("");
			v.bar.css("width","0px" );
			stop()
		}
	}
	function resize(){
		if(isOpen){
		}
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut,resize:resize }
})();

//バッチ用のキューコントローラ
var BatchQueueControllClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_a,_row) {
	  this.init(_a,_row);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	p.max
	p.current
	p.callback
	p.interval
	
	p.init = function(_a,_row){
		this.list = [];
		var row = _row;
		var pages = []
		this.max =  Math.ceil(_a.length / row);
		for(var i = 0; i < this.max; i++) {
			var n = i * row;
			var p = _a.slice(n, n + row);
			pages.push(p);
		}
		
		for (var i = 0; i < pages.length ; i++) {
			this.list.push(new BatchPublishPagesQueueClass(i,pages[i]))
		}
	}
	p.isLive
	p.stop = function() {
		clearInterval(this.tID);
		this.isLive = false;
	}
	p.start = function(_interval,_callbackOne,_callbackAll) {
		this.callbackOne = _callbackOne;
		this.callbackAll = _callbackAll;
		this.interval = _interval;
		this.isLive = true;
		this.current = 0;
		this.next()
	}
	p.next = function() {
		if(this.isLive == false) return;
		var this_ = this;
		this.callbackOne(this.current,this.list[this.current]);
		this.list[this.current].queue(function(){
			this_.nexted()
		})
	}
	p.nexted = function() {
		this.current++;
		if(this.current > this.max-1){
			this.callbackAll();
		} else{
			this.next_pre()
		}
	}
	p.tID
	p.next_pre = function() {
		var this_ = this;
		if(this.interval == 0){
			this.next()
		} else{
			this.tID = setTimeout(function(){
				this_.next()	
			},this.interval);
		}
	}
	return c;
})();



//バッチ用のキュー
var BatchPublishPagesQueueClass = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_i,_pages) {
	  this.init(_i,_pages);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.init = function(_i,_pages) {
		this.no = _i;
		this.pages = _pages;
	}
	p.queue = function(_callback) {
		this.callback = _callback;
		var this_ = this;
		var storage = new Storage.OnlineBatch(this.pages);
			storage.start(function(){
				this_.callback();
			});
	}

	return c;
})();



var TreeAPI_SITE_DIR = "_*_";
var TreeAPI_NOT_MATCH_TEXT = "未定義";
//TreeAPI
var TreeAPI = (function(){ 


	//ノード種類
	var TYPE = {
		DIR 	: "dir",
		PAGE 	: "page",
		ADD 	: "add",
		HTML	: "html"
	};
	
	//置き換えタグ定義
	var ReplaceData = [
		{ id: "{HOME}", 	text:function(){return ROOT + 'index.html'} },
		{ id: "{ID}", 		text: function(_o){ return _o.id }},
		
		{ id: "{NAME}", 	text: function(_o){ return _o.name }},
		{ id: "{NAME[0]}", 	text: function(_o){ return U_.getSplitTextAt(_o.name,0)}},
		{ id: "{NAME[1]}", 	text: function(_o){ return U_.getSplitTextAt(_o.name,1)}},
		{ id: "{NAME[2]}", 	text: function(_o){ return U_.getSplitTextAt(_o.name,2)}},
		{ id: "{NAME[3]}", 	text: function(_o){ return U_.getSplitTextAt(_o.name,3)}},
		{ id: "{NAME[4]}", 	text: function(_o){ return U_.getSplitTextAt(_o.name,4)}},
		{ id: "{NAME.noTag}", text: function(_o){ return treatTag(U_.getSplitTextAt(_o.name,0)) }},
		
		{ id: "{HTML}", 	text: function(_o){ return _o.html }},
		{ id: "{HREF}", 	text: function(_o){ return _o.href }},
		{ id: "{TAR}", 		text: function(_o){ return _o.target }},
		
		{ id: "{TAG}", 		text: function(_o){ return _o.tag }},
		{ id: "{READ}", 	text: function(_o){ return _o.read }},
		{ id: "{DATE}", 	text: function(_o){ return _o.date }},
		
		{ id: "{LEVEL}",	text: function(_o){ return _o.level }},
		{ id: "{SUM}",		text: function(_o){ return _o.sum }},
		{ id: "{NO}",		text: function(_o){ return _o.no }},
		
		{ id: "{CSS.B}", 	text: ' _btn_default ' },
		{ id: "{I.D}", 		text: '<i class="fa fa-folder "></i> ' }, 
		{ id: "{I.D2}", 	text: '<i class="fa fa-folder-open "></i> ' }, 
		{ id: "{I.P}", 		text: '<i class="fa fa-caret-right "></i> ' },
		{ id: "{I.P2}", 	text: '<i class="fa fa-chevron-circle-right "></i> ' },
		{ id: "{I.P3}", 	text: '<i class="fa fa-angle-right "></i> ' },
		{ id: "{I.T}", 		text: '<i class="fa fa-tag "></i> ' },
		{ id: "{I.B}",		text:function(_o){ var s = ' <i class="fa fa-external-link-square "></i> '; if(_o.target != "_blank") s = ""; return s; }}

	]
	
	//タグ削除
	function treatTag(_s){
	 	return _s.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'');
	}
	
	//テンプレートテキスト
	var Template = {};
		Template.Tag = {
			parent_start	:"<ul {}>\n",
			child_start		:"<li {}>",
			child_end		:"</li>\n",
			parent_end		:"</ul>\n"
		};
		//パラーメータで、ClassNameの有無を指定し、取得
		Template.ClassName = (function(){
			var def = {
				clearfix 	: "clearfix",
				current 	: "_current",
				ownCurrent 	: "_ownCurrent",
				hasSub 		: "_hasSub",
				underconst 	: "_underconst",
				toggle 		: "_type-dir-toggle",
				
				type 		: "_type-{}",
				level 		: "_level-{}",
				no 			: "_no-{}",
				sum 		: "_sum-{}"
				
			};
			var state 
			function setState(_state){
				state = _state;
			}
			function getList(){
				var o = {}
				for (var n in def) {
					o[n] = def[n]
				}
				if(state){
					if(state.clearfix === false) 	o.clearfix = "";
					if(state.current === false) 	o.current = "";
					if(state.ownCurrent === false) 	o.ownCurrent = "";
					if(state.hasSub === false) 		o.hasSub = "";
					if(state.underconst === false) 	o.underconst = "";
					
					if(state.type === false) 		o.type = "";
					if(state.level === false) 		o.level = "";
					if(state.no === false) 			o.no = "";
					if(state.sum === false) 		o.sum = "";
				}
				return o;
			}
			return {
				setState: setState,
				getList: getList
			}
		})();

	//デフォルトのPAGEノードの拡張子
	var Extension = ".html"
	
	

	//メインクラス
	var TreeData = (function() {
		/* ---------- ---------- ---------- */
		var c = function(_def,b_) {
		  this.init(_def,b_);
		};
		var p = c.prototype;
		
		/* ---------- ---------- ---------- */
		
		p.init = function(_def,b_) {
		
			if(_def === undefined) _def = {};
			
			this._isRoot = false;
			if(b_ === undefined) this._isRoot = true;
			
			this.state = "";
			this.isHide = false;
			this.isHideMenu = false;
			this.isUnderConst = false;
			this.isNotPublic = false;
			
			this.type = TYPE.DIR;
			this.id = "";
			this.tag = "";//タグ カンマで区切る
			this.read = "";//リード
			this.date = "";//日付
			
			this.name = "";
			this.html = "";
			this.url = "";
			this.dir = "";
			this.dir_rel = "";
			this.href = "";//最終的なリンクパス
			this.target = "";
			this.custom_a = "";
			
			this._isCurrent = false;//現在のノード
			this._ownCurrent = false;//現在のノードを含む、上位のノード
	
			this._isOpenMenu = false;//メニューを開いておくか
			this._isToggleMenu = false;//トルグメニューにしておくか
			
			this._level = 0;//階層
			this._no = 0;//階層
			this._path = "";//currentを特定するときに使う
			this._path_dir = "";//currentを特定するときに使う
			
			this._template = ""//テンプレート
			
			//後処理
			this.setInitData(_def);
			
			this.update();
		};
		/* ---------- ---------- ---------- */
		//初期値セット
		
		p.setInitData = function(_def) {
			//初期値セット
			for (var n in _def) {
				var b = true;
				if(n === "list") b = false;
				if(b) this[n] = _def[n];
			};
			
			//リンクセット
			if(this["custom_a"] !== undefined){
				if(this.custom_a.indexOf(",")!= -1){
					var us = this.custom_a.split(",");
						this.url = us[0];
						this.target = us[1];
				} else{
					this.url = this.custom_a;
				}
			}
			
			//ディレクトリセット
			this.dir = URL_U.treatDirName(this.dir);
			this.dir_rel = this.dir;
			if(this.dir == ""){
				this.dir = html_dir_abs;
				this.dir_rel = html_dir;
			} else{
				this.dir_rel = ROOT + this.dir_rel;
				if(this.dir_rel == "..//") this.dir_rel = "../";
				if(this.dir_rel.charAt(this.dir_rel.length-1) != "/") this.dir_rel = this.dir_rel +"/"
			}
			
			//公開ステート
			if(this.state == undefined ) this.state = "0,0,0";
			var ss = this.state.split(",");
			this.isHide 	 = (ss[0] == "1")? true:false;
			this.isHideMenu  = (ss[1] == "1")? true:false;
			this.isUnderConst  = (ss[2] == "1")? true:false;
			
			//公開出力してなければ、非表示に
			if(this.type ==TYPE.PAGE){
				if(this["publicDate"] !== undefined){
					if(this.publicDate == "-") {
						this.isNotPublic = true;
					}
				}
				//isHideではなく、プレビューでは表示できるように、isHideMenu
				if(this.isNotPublic) {
					//外部リンク設定してたら表示
					if(this.custom_a == ""){
						this.isHide = true;
					}
				}
			}
			//リンクセット
			if(this.url === ""){
				if(this.type != TYPE.DIR){
					this.url = this.id + Extension;
				} else{
					this.url = DIR_CODE;
				}
			}
			//下階層セット
			if(_def["list"] !== undefined){
				this.list = [];
				var _l = _def["list"];
				
				for (var i = 0; i <  _l.length ; i++) {
					if(_l[i] !== undefined){
					var nn = new TreeData( _l[i],true);
					if(nn.isHide === false){
						this.list.push(nn);
					}
					}
				}
			}
			
			this._sum = 0;
			if(this.type ==TYPE.DIR){
				var cc = 0 
				for (var i = 0; i <  this.list.length ; i++) {
					if(this.list[i].type == TYPE.PAGE){
						if(this.list[i].isHideMenu === false){
							cc ++
						}
					}
				}
				this._sum = cc; 
			}
			
		};
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		//upadte
		
		p.update = function(){
			this.clucuURL();
			this.setTreePath();
		};
		
		/* ---------- ---------- ---------- */
		//ディレクトリのリンクセット
		var DIR_CODE = "__DIR__";
		p.clucuURL = function(){
			if(this.type !== TYPE.DIR) return;
			if(this["list"] === undefined)return;
			node = this;
			for (var i = 0; i < this.list.length ; i++) {
				var tree = this.list[i];
				if(tree.url === DIR_CODE){
					if(tree.list.length > 0){
						var a = this._findURL(tree.list);
						if(a === null){
							tree.url = ""
							tree.dir_rel = ""
						} else{
							tree.url = a[0];
							tree.dir_rel = a[1];
						}
					} else{
						tree.url = ""
						tree.dir_rel = ""
					}
				}
				//最終的なパスの生成
				tree.href = U_.meargePath(tree.url,tree.dir_rel);
				if(tree.href == "") tree.href = "#";
			}
		}
		p._findURL = function(list){
			//if(list === undefined) return;
			var u = null;
			for (var i = 0; i < list.length ; i++) {
				if(list[i].url === DIR_CODE ){
					if(list[i].list.length > 0){
						var a = this._findURL(list[i].list);
						list[i].url = a[0];
						list[i].dir_rel = a[1];
					}
				}
				var b = true;
				if(u !== null) b = false;
				if(list[i].url === "") b = false;
				if(list[i].isUnderConst) b = false;
				//if(list[i].isHideMenu) b = false;
				if(list[i].type == TYPE.HTML) b = false;
				if(b) u = [list[i].url,list[i].dir_rel];
			}
			return u;
		};
		
		//ツリーパスの設定
		p.setTreePath = function(_path) {
			_path = (_path !== undefined) ? _path :"";
			if(this._isRoot){
				this._setTreePath_core(_path);
				this._setTreePathDir_core(_path);
			}
		};
		p._setTreePath_core = function(_path) {
			this._path = _path+"/"+this.id;
			if(this["list"] !== undefined){
				for (var i = 0; i < this.list.length ; i++) {
					var tree = this.list[i];
						tree._setTreePath_core(this._path);
				}
			}
		};
		p._setTreePathDir_core = function(_path) {
			this._path_dir = _path+" "+this.id + ":" + this.dir;
			if(this["list"] !== undefined){
				for (var i = 0; i < this.list.length ; i++) {
					var tree = this.list[i];
						tree._setTreePathDir_core(this._path_dir);
				}
			}
		};
		
		
		/* ---------- ---------- ---------- */
		//Tree操作
		// p.getTreeByID = function(_id,_def) {
		// 	return DataU.getTreeByID(this , _id,_def);
		// };
		
		//Treeを追加
		p.addSubTree = function(_tree) {
			this.initList();
			this.list.push(_tree);
			this.update()
		};
		
		//listに追加
		p.addList = function(_tree) {
			if(_tree == undefined) return;
			this.initList();
			this.list = this.list.concat(_tree.list);
			this.update();
		};
		p.initList = function() {
			if(this["list"] === undefined) this.list =[];
		};
		
		//IDで指定したノードの親グループIDを返す
		/*
		p.getCurrentGloupID = function(_id) {
			var tree = DataU.getTreeAliasByID(this , _id);
			if(tree === null) return "";
			var ps = tree._path.split("/");
			for (var i = 0; i <  ps.length ; i++) {
				if(ps[i] !== "") {
					return ps[i];
				}
			}
			return "";
		}*/
	
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		/* ---------- ---------- ---------- */
		//メニュータグ取得
		
		p.getMenuTag = function(_op, _deep) {
			_op.clucu();
			this.setCSS(_op.css);
			this.setCurrent(_op.currentID,_op.currentDIR);
			return this._getMenuTag_core(_op);
		};
		p._getMenuTag_core = function(_op) {
			if(_op === undefined) _op = new MenuOption();
			var tag = "";
			var tb = DataU.getTab(this._level);
		
			var list = this.list;
			var leng = list.length;
			
			var _TG = Template.Tag;
			var child_s = _TG.child_start;
			var child_e = _TG.child_end;
			var parent_s = _TG.parent_start;
			var parent_e = _TG.parent_end;
			
			var bodyTag = "";
			var count = 0;
					
			for (var i = 0; i < leng; i++) {
				var tree = list[i];
					tree._level = this._level + 1;
					tree._no = count+1;
				
				//ディレクトリの深さで制限
				var b = true;
				if(_op.onlyCurrent === true){
					if(tree._ownCurrent === false) {
						if(this._level === 0) b = false;
					}
				}
				if( _op.isMatchType(this._level,tree.type) === false) {
					b = false;
				}
				
				//メニュー非表示
				if(tree.isHideMenu) b = false;
				if(tree.type == "page" && count >= _op.limitSub) b = false;
				if (b) {
					tree._isOpenMenu = (_op._isOpenMenu(this._level, "isOpen")) ? false : true;
					tree._isToggleMenu = _op.useToggle;
					bodyTag += tb + child_s.split("{}").join(DataU.getLI_Attr(count, tree));
					bodyTag += tree._getMenuTagTree(_op);
					
					//下層をレンダリングするか
					if(! DataU.isHideDir(tree) || tree._isToggleMenu){
					bodyTag += tree._getMenuTagDir(_op);
					}
					if (tree.hasSubTree()) bodyTag += tb;
					bodyTag += child_e;
					count++;
				}
			}
			
			tag += "\n" + tb + parent_s.split("{}").join(DataU.getUL_Attr(this,count) );
			tag += bodyTag;
			tag += tb + parent_e;
			tag = tag.split(TreeAPI_SITE_DIR+"/").join(TreeAPI_SITE_DIR)
			//</UL>
			return tag;
		};
		
		//下階層のタグ取得
		p._getMenuTagDir = function(_op) {
			var tag = "";
			if (!this.hasSubTree()) return tag;
	
			//どの階層までレンダリングするか
			var b = false;
			// if (_op.isOpenCurrentTree) {
			// 	if (this._isCurrent) b = true;
			// 	if (this._ownCurrent) b = true;
			// }
			if (_op.isOverLevelEnd(this._level) === false) {
			 	b = true;
			}
			if (b) tag += this._getMenuTag_core(_op);
			return tag;
		}
		
		//ノードのタグ取得
		p._getMenuTagTree = function(_op) {
			var tag = "";
			if (this._level >= 1) {
				var t = this.type;
				this._template = _op.getLevelVal(this._level - 1,this.type,null);
				tag += DataU.doTemplate(this);
			}
			return tag;
		}
		
		/* ---------- ---------- ---------- */
		
		p.setCSS = function(_css) {
			Template.ClassName.setState(_css);
		}
		/* ---------- ---------- ---------- */
		
		//パンくずタグ
		p.getBreadList = function(_id,_dir,_o) {
			var b = false;
			if(_id == "") b = true;
			if(_id == "index" && _dir == "/") b = true;
			this._template = _o.home;
			if(b) return DataU.doTemplate(this);
			
			if(_dir == undefined) _dir = "";
			if(_dir == "") _dir = html_dir_abs;
			
			var _tree = DataU.getTreeAliasByID(this,_id,_dir);
			
			if(_tree === null) return ""
			var s = _tree._path_dir;
			var breds = [];
			var add = "";
			var list = s.split(" ");
			for (var i = 0; i <  list.length ; i++) {
				if(list[i] !== ""){
					var dd = list[i].split(":");
					var id = dd[0];
					var dir = dd[1];
					var res = DataU.getTreeAliasByID(this,id,dir)
					if(res !== null){
						breds.push(DataU.getTreeAliasByID(this,id,dir))
					}
				}
			}
			//
		 	var tags = [];
				this._template = _o.home;
				tags.push(DataU.doTemplate(this));
			for (var i = 0; i < breds.length ; i++) {
				var temp = ""
				if(_id === breds[i].id){
					temp = _o.current;
				} else{
					temp = _o.node;
				}
				breds[i]._template = temp;
				tags.push(DataU.doTemplate(breds[i]));
			}
			var tag = tags.join(_o.delimiter);
			tag = tag.split(TreeAPI_SITE_DIR+"/").join(TreeAPI_SITE_DIR)
			return tag;
		}
		
		/* ---------- ---------- ---------- */
		//パスを指定すると、マッチするノードをisCurrentとして設定する
		var currentPath = "";
		p.setCurrent = function(_currentID,_currentDIR) {
			currentPath = "";
			this._setCurrent_core(_currentID,_currentDIR);
			this._setOwnCurrent(_currentID);
		}
		p._setCurrent_core = function(_currentID,_currentDIR) {
			this._isCurrent = false;
			var b = false;
			if (this.id === _currentID && this.dir === _currentDIR) b = true;
			if (this.type == TYPE.DIR) b = false;// ディレクトリの場合は、スルー
			
			if (this.id === "") b = false;
			if (_currentID === "") b = false;
			if (b) {
				currentPath = this._path;
				this._isCurrent = true;
			}
			if (this.hasSubTree()) {
				for (var i = 0; i < this.list.length; i++) {
					this.list[i]._setCurrent_core(_currentID,_currentDIR);
				}
			}
		}
		p._setOwnCurrent = function(_current) {
			var b = false
			if(this.type === TYPE.DIR) b = true;
			if(this.type === TYPE.PAGE) b = true;
			if(b == false) return;
			//
			var b = false;
			if (currentPath.indexOf(this._path + "/") === 0) {
				//階層が違う場合にown設定
				var r1 = currentPath.split("/").length;
				var r2 = this._path.split("/").length;
				if(r1 != r2) b = true;
				//完全一致であれば、true
				if(currentPath === this._path) b = true;
			}
			this._ownCurrent = b;
			//
			if (this.hasSubTree()) {
				for (var i = 0; i < this.list.length; i++) {
					this.list[i]._setOwnCurrent(_current);
				}
			}
		}
		
		/* ---------- ---------- ---------- */
	
		p.hasSubTree = function () {
			if (this.type === TYPE.DIR){
				//if(this.list === undefined) return false;
				if (this.list.length > 0){
					return true;
				}
			}
			return false;
		}
		return c;
	})();
	

	var BreadListOption = (function() {
		/* ---------- ---------- ---------- */
		var c = function() {
			this.init();
		};
		var p = c.prototype;
		/* ---------- ---------- ---------- */
		p.home;
		p.node;
		p.current;
		p.delimiter;
		
		p.init = function() {
			this.home = '<a href="{HOME}">HOME</a>';
			this.node = '<a href="{URL}">{NAME}</a>';
			this.current = '<b>{NAME}</b>';
			this.delimiter = ' &gt; ';
		};
		return c;
	})();
	
	var MenuOption = (function() {
		/* ---------- ---------- ---------- */
		var c = function() {
			this.init();
		};
		var p = c.prototype;
		/* ---------- ---------- ---------- */
		
		p.init = function() {
			//curren
			this.currentID = "";
			this.currentDIR = "";
			
			//開閉メニューにするか
			this.useToggle = false;
			
			//currentのディレクトリを開いておくか
			// this.isOpenCurrent = false;
			
			//currentのディレクトリのみ表示するか
			//他のディレクトリは、表示しない
			this.onlyCurrent = false;
			
			//
			this.limitSub = "";
			
			//20150416
			this.css = {};
			this.css.clearfix  = true;
			this.css.current  = true;
			this.css.ownCurrent = true;
			this.css.hasSub  = true;
			this.css.underconst = true;
			
			this.css.type 	 = true;
			this.css.level 	 = true;
			this.css.no 	 = true;
			this.css.sum 	 = true;
			
			//階層ごと
			this.levels = null;
		};
		
		p.clucu = function (){
			var cnt = 0;
			var ls = this.levels;
			var b = true;
			if(ls == undefined) ls = [];
			for (var i = 0; i < ls.length; i++) {
				if (b) {
					if (ls[i].isShow) {
						cnt++;
					} else {
						b = false;
					}
				}
			}
			// this.levelEnd = this.levels.length;
			this.levelEnd = cnt;
			if (this.currentDIR == "") this.currentDIR = html_dir_abs;
			this.currentDIR = URL_U.treatDirName(this.currentDIR);
		};
		
		/* ---------- ---------- ---------- */
	
		p._isOpenMenu = function (_level){
			var b = false;
			if(this.levels[_level] === undefined) return b;
			if(this.levels[_level]["isOpen"] === undefined) return b;
			b = this.getLevelVal(_level,"isOpen",false);
			return b;
		};
		p.isMatchType = function (_level,_type){
			if(this.levels[_level] === undefined) return false;
			if(this.levels[_level][_type] === undefined) return false;
			return true;
		};
		p.getLevelVal = function(_lv,_type,_def){	
			var _levels = this.levels;
			var lv = _lv;
			var s = _def;
			if(_levels.length > lv){
				s = _levels[lv][_type];
			} else{
				s = _levels[_levels.length-1][_type];
			}
			return s;
		};
		p.isOverLevelEnd = function (_l){
			if(this.levelEnd <= _l) {
				return true;
			} else{
				return false;
			}
		};
		
		return c;
	})();
	


	/* ---------- ---------- ---------- */
	
	var DataU = (function(){
		
		var TAB = "	";
		
		/* ---------- ---------- ---------- */
		
		function getTab(_deep) {
			var s = "";
			for (var i = 0; i < _deep; i++) {
				s += TAB;
			}
			return s;
		}
		
		/* ---------- ---------- ---------- */
	
		function isHideDir(_tree) {
			var b = false;
			if(_tree._isOpenMenu) b = true;
			if(_tree._isCurrent) b = false;
			if(_tree._ownCurrent) b = false;
			return b;
		}
		function getUL_Attr(_tree, _leng) {
			var _CN = Template.ClassName.getList();
			var st = "";
			
			if(isHideDir(_tree)) st += "display:none;";
			
			var cs = [];
			if(_CN.clearfix !== "") cs.push(_CN.clearfix);
			if(_CN.level !== "") {
				cs.push(_CN.level.split("{}").join(_tree._level+1));
			}
			if(_CN.sum !== "") {
				cs.push(_CN.sum.split("{}").join(_leng));
			}
			var t1 = "";
			var t2 = "";
			if(cs.length !== 0) t1 = 'class="' + cs.join(" ") + '"';
			if(st !== "") t2 = ' style="' + st + '"';
			return t1 + t2;
		}
	
		function getLI_Attr(_i,_tree) {
			var _CN = Template.ClassName.getList();
			var st = "";
			//
			var cs = [];
			
			if(_CN.no !== ""){
				cs.push(_CN.no.split("{}").join(_i + 1));
			}
			if(_CN.current !== ""){
				if(_tree._isCurrent) 	cs.push(_CN.current);
			}
			if(_CN.ownCurrent !== ""){
			if(_tree._ownCurrent) 	cs.push(_CN.ownCurrent);
			}
			if(_CN.hasSub !== ""){
			if(_tree.hasSubTree()) 	cs.push(_CN.hasSub);
			}
			if(_CN.type !== "") {
				cs.push(_CN.type.split("{}").join(_tree.type));
			}
			if(_tree.type == TYPE.DIR){
				if(_tree._isToggleMenu){
					cs.push(_CN.toggle);
				}
			}
			
			if(_tree.isUnderConst){
				//_tree.url = "javascript:void(0);";
				_tree.href = "javascript:void(0);";
				_tree.target = "";
				cs.push(_CN.underconst);
			}
			var t1 = "";
			var t2 = "";
			if(cs.length !== 0) t1 = 'class="' + cs.join(" ") + '"';
			if(st !== "") t2 = ' style="' + st + '"';
			return t1 + t2;
		}

		/* ---------- ---------- ---------- */
		
		//IDでツリーを取得し、そのエイリアスを返す
		function getTreeAliasByID(_tree, _id, _dir) {
			return getTreeAliasByID_core(_tree.list, _id, _dir)
		}
		function getTreeAliasByID_core(_tree, _id, _dir) {
			if(_dir == undefined) _dir = "";
			if(_tree === undefined) return null;
			for (var i = 0; i < _tree.length; i++) {
				var b = false;
				if (_tree[i].id === _id) {
					if (_tree[i].dir === _dir) b = true;
				}
				if (b) {
					return _tree[i];
				} else {
					var list = getTreeAliasByID_core(_tree[i].list, _id, _dir);
					if (list != null) {
						return list;
					}
				}
			}
			return null;
		}
		
		/* ---------- ---------- ---------- */
		
		function doTemplate(_tree) {
			if(_tree === null) return;
			var temp = _tree._template;
			//var callback = _tree.callback;
			//オリジナルを変更しないように、パラメータ用意
			var o = {}
				o.type 	 = _tree.type;
				o.id 	 = _tree.id;
				o.name 	 = _tree.name;
				o.html	  = _tree.html;
				o.level  = _tree._level;
				o.no 	 = _tree._no;
				o.sum 	 = _tree._sum;
				o.url 	 = _tree.url;
				o.href 	 = _tree.href;
				o.target  = _tree.target;
				o.class_  = _tree.class_;
				o.tag 	 = _tree.tag;
				o.read 	 = _tree.read;
				o.date 	 = _tree.date;
			
			//個別処理
			if(typeof (temp) == "string"){
				//
			} else if(typeof (temp) === "function"){
				var res = temp(o);
				if(res !== null) temp = res;
			} else{
				return "";
			}
			
			//ReplaceData
			if(ReplaceData !== undefined){
				temp = _replaceExtra(o,temp,ReplaceData)
			}
			//Treeのカスタム
			if(_tree["extra"] !== undefined){
				temp = _replaceExtra(o,temp,_tree.extra);
			}
			
			//置換えの無かった{...}を削除
			temp = temp.replace(/{.*?}/g,"");
			return temp;
		}
		function _replaceExtra(_o,_s,_extra){
			for (var i = 0; i <  _extra.length ; i++) {
				var s = "";
				if(typeof (_extra[i].text) == "string"){
					s = _extra[i].text;
				} else{
					s = _extra[i].text(_o);
				}
				_s = _s.split(_extra[i].id).join(s);
			}
			return _s;
		}

			
		/* ---------- ---------- ---------- */
		
		return { 
			getTab:getTab,
			isHideDir:isHideDir,
			getUL_Attr:getUL_Attr,
			getLI_Attr:getLI_Attr,
			//
			getAllTag: getAllTag,
			getTreeAliasByID: getTreeAliasByID,
			// getTreeByID: getTreeByID,
			//
			doTemplate:doTemplate
		}
	})();
	
	
	var GetTagU = (function(){
		
		/* ---------- ---------- ---------- */
		//
		function getSubTree(_tree,_dir,_tag){
			
			//ターゲットディレクトリ取得
			if(_dir != false){
				tar == null;
				_coreDir(_dir, _tree);
				if (tar == null) tar = _tree;
			} else {
				tar = _tree;
			}
			
			//タグ構造化
			if(_tag) return _getTagTree(tar,_tag);
			
			//
			return tar;
		}
			var tar;
			//dir
			function _coreDir(id,a){
				var ls = a.list
				for (var i = 0; i < ls.length ; i++) {
					if(ls[i].type == "dir" ){
						if(ls[i].id == id ){
							tar = ls[i];
						} else{
							_coreDir(id,ls[i]);
						}
					}
				}
			}
			//tag
			function _getTagTree(_tree,_tag){
				var tree = {}
					tree.list = [];
				if(_tag == false) return _tree;
				
				if(_tag == "__ALL__") _tag = getAllTag(_tree).join(",")
				
				var tags = _tag.split(",");
				for (var i = 0; i <  tags.length ; i++) {
					var list = [];
					var name = tags[i];
					_core_tag(name, _tree, list);
					tree.list[i] = {
						type : "dir",
						id 	 : name,
						name : name,
						list : list
					}
				}
				if(tree.list.length == 1) return tree.list[0]
				return tree;
			}
			function _core_tag(_tag,_tree,_list){
				var ls = _tree.list;
				for (var i = 0; i < ls.length ; i++) {
					var node = ls[i];
					if(node["tag"]){
						var tags = node["tag"].split(",");
						for (var n = 0; n < tags.length ; n++) {
							if(tags[n] == _tag ){
								_list.push(node);
							}
						}
					}
					if(node.type == "dir"){
						_core_tag(_tag,node,_list);
					}
				}
			}
		/* ---------- ---------- ---------- */
		//TAGでリストを取得
		//空白の場合は、スルーする
		
		function getAllTag(_a) {
			var tags = [];
			_getAllTag_core(_a, tags);
			return tags;
		}
		function _getAllTag_core(_tree,_tags) {
			var list = _tree.list;
			for (var i = 0; i < list.length; i++) {
				var tree = list[i];
				if(tree){
					if(tree.tag){
						_setTag( _tags,tree.tag );
					}
					if(tree.type == TYPE.DIR){
						_getAllTag_core(tree, _tags);
					}
				}
			}
		}
		function _setTag(_tags,_val) {
			var a = _val.split(",");
			for (var i = 0; i < a.length ; i++) {
				var b = true;
				for (var n = 0; n < _tags.length ; n++) {
					if(_tags[n] == a[i]) b = false;
				}
				if(b) _tags.push(a[i]);
			}
		}
		
		/* ---------- ---------- ---------- */
		
		function sortDate(_node,_sort){
			var o = JSON.parse(JSON.stringify(_node, null, "	"));
			sortDate_core(o,_sort);
			return o;
		}
		function sortDate_core(_node,_sort){
			var ls = _node.list
			for (var i = 0; i < ls.length ; i++) {
				if(ls[i].type == "dir"){
					sortDate_core(ls[i],_sort)
				} else{
					if(! ls[i].date) ls[i] = null;
				}
			}
			var a = []
			for (var i = 0; i <  ls.length ; i++) {
				if(ls[i] != null){
					a.push(ls[i])
				}
			}
			if (_sort) {
				a.sort(sortDateFuncOld);
			} else {
				a.sort(sortDateFuncNew);
			}
			_node.list = a;
		}
		
		//ソート
		function sortDateFuncOld(a, b){
			var x = a.date;
			var y = b.date;
			if (x > y) return 1;
			if (x < y) return -1;
			return 0;
		}
		function sortDateFuncNew(a, b){
			var x = a.date;
			var y = b.date;
			if (x > y) return -1;
			if (x < y) return 1;
			return 0;
		}
	
		
		/* ---------- ---------- ---------- */
		
		var _flats;
		function toFlat(_node){
			_flats = [];
			toFlat_core(_node);
			return _flats;
		}
		function toFlat_core(_node){
			var ls = _node.list
			for (var i = 0; i < ls.length ; i++) {
				if(ls[i].type == "dir"){
					toFlat_core(ls[i]);
				} else{
					_flats.push(ls[i]);
				}
			}
		}
	
		return {
			getSubTree:getSubTree,
			getAllTag:getAllTag,
			sortDate: sortDate,
			toFlat: toFlat
		}
	})();
	
	var U_ = (function(){
		function defaultVal(_v,_def){
			var s = _def
			if(_v != undefined){
				s = _v ;
			}
			return s;
		}
		function treatArray(_list) {
			var str = [];
			var list = [];
			var i = 0;
			var n = 0;
			for (var i = 0; i <  _list.length ; i++) {
				if (str[String(_list[i])]) {
					//
				} else {
					str[String(_list[i])] = 1;
					list[n] = _list[i];
					n++;
				}
				i++;
			}
			return list;
		}
		function treatTag(_s){
		 	return _s.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'');
		}
		function meargePath(_s,_add){
			if(_s.indexOf("/") == 0)return _s;
			if(_s.indexOf("./") == 0)return _add + _s.substr(2, _s.length)
			if(_s.indexOf("#")==0)return _s;
			if(_s.indexOf("http://")==0)return _s;
			if(_s.indexOf("https://")==0)return _s;
			if(_s.indexOf("mailto:")==0)return _s;
			
			var p = _add + _s;
				p =  p.split(".//").join("./");
			return  p;
		}
			
		function getSplitTextAt(_s,_n){
			if(!_s)return "";
			if(_n == undefined )return _s;
			if(_s.indexOf(",") == 0) return _s;
			var a = _s.split(",");
			if(a.length > _n){
				return a[_n]
			} else{
				return "";
			}
			/*
			equal (f("0",0),"0");
			equal (f("0",1),"");
			equal (f("0",2),"");
			equal (f("0",3),"");
			
			equal (f("0,1,2",0),"0");
			equal (f("0,1,2",1),"1");
			equal (f("0,1,2",2),"2");
			equal (f("0,1,2",3),"");
			*/
		}

		return {
			defaultVal:defaultVal,
			treatArray:treatArray,
			treatTag:treatTag,
			meargePath:meargePath,
			getSplitTextAt:getSplitTextAt
		}
	})();
	


	/* ---------- ---------- ---------- */

	var ROOT = ""
	var html_dir = ""
	var html_dir_abs = ""
	
	function setCMS_URL(_dir){
		ROOT 	 = TreeAPI_SITE_DIR;
		html_dir  = TreeAPI_SITE_DIR + _dir;
		html_dir_abs = _dir;
	}
	
	/* ---------- ---------- ---------- */
	
	function getAllTag(_sitemap){
		return GetTagU.getAllTag(_sitemap)
	}
	
	/* ---------- ---------- ---------- */
	
	function getSubTree(_s,_d,_tag){	
		return GetTagU.getSubTree(_s,_d,_tag);
	}

	/* ---------- ---------- ---------- */
	//
	function getTag(_htmlDir, _sitemap, _param , _previewPage) {
		
		if(_param == undefined) return TreeAPI_NOT_MATCH_TEXT;
		if(_param.setting == undefined) return TreeAPI_NOT_MATCH_TEXT;
		
		var page;
		if(_param.previewPage != undefined) page = _param.previewPage;
		if(_previewPage != undefined) page = _previewPage;
		if(page == undefined) page = {id:"",dir:""}
		//
		
		var o = new MenuOption();
			o.currentID	 = page.id;
			o.currentDIR = page.dir;
			o.useToggle  = _param.setting.useToggle;
			o.onlyCurrent  = _param.setting.onlyCurrent;
			o.limitSub 	 = Number(_param.setting.limitSub);
			o.indent 	 = Number(_param.setting.indent);
			o.css		 = _param.css;
			o.levels	 = _param.levels;
		
		//リスト数制限
		if(isNaN(o.limitSub)) o.limitSub = 99999;
		if(o.limitSub == 0) o.limitSub = 99999;
		if(isNaN(o.indent)) o.indent = 0;
		
		//HTMLディレクトリ
		setCMS_URL(_htmlDir);

		
		//20160926
		//追加メニューがあれば、sitemap.listに追加
		_sitemap = JSON.parse(JSON.stringify(_sitemap));
		if(_param.setting.add){
			_sitemap.list = mergeAddMenu(_sitemap.list , _param.setting.add)
		}
		
		var node = _sitemap;
		
		//絞り込み、タグ分類
		if(_param.targetDir || _param.targetTag){
			node = GetTagU.getSubTree(_sitemap , _param.targetDir , _param.targetTag );
		}
		
		//フラット化
		if(_param.setting.isFlat){
			node = { name:"list", type:"dir", list:GetTagU.toFlat(node) }
		}
		
		//時別
		if(_param.setting.hasDate){
			node = GetTagU.sortDate(node, _param.setting.isReverse);
		}
		
		//
		var tree = new TreeData(node);
		var s = tree.getMenuTag(o);
		var tab = (function(_n){ 
		    var s = "";
			for (var i = 0; i < _n ; i++) { s += "\t"; }
			return s;
		})(o.indent);
		if(tab !="") s = s.split('\n').join("\n" + tab);
		return s;
	}
	/* ---------- ---------- ---------- */

	//20160926
	function mergeAddMenu(_list,_add) {
		try{
			var ls = _add.list.grid;
			var a = [];
			for (var i = 0; i < ls.length ; i++) {
				a.push(mergeAddMenu_core(ls[i]));
			}
			_list = a.concat(_list);
			//
			var ls = _add.list2.grid;
			var a = [];
			for (var i = 0; i < ls.length ; i++) {
				a.push(mergeAddMenu_core(ls[i]));
			}
			_list = _list.concat(a);
		}catch( e ){}
		return _list;
	}
	function mergeAddMenu_core(_list) {
		var s = _list.text;
		var u = "";
		if(_list.anchor){
			u = _list.anchor.href;
			//20170316 追加
			if(_list.anchor.target){
				u +=","+_list.anchor.target;
			}
			//
		}
		var _o = {}
			_o.type = TYPE.ADD;
			_o.name = s;
		if(URL_U.isFullPath(u)){
			_o.dir = "/";
			_o.custom_a = u;
		} else if(u == "#") {
			_o.dir = "/";
			_o.custom_a = u;
		} else{
			_o.dir = URL_U.getBaseDir(u);
			if(_o.dir == "") _o.dir = "/";
			_o.id = URL_U.getFileID(u);
		}
		return _o;
	}
	
	/* ---------- ---------- ---------- */
	//
	function getBreadListTag(_htmlDir, _sitemap , _previewPage) {
		var tree = new TreeData(_sitemap);
			setCMS_URL(_htmlDir);
		var o = new BreadListOption();
			o.home = '<i class="fa fa-home"></i> <a href="{HOME}">HOME</a>'
			o.node = '<a href="{HREF}">{NAME.noTag}</a>';
			o.current = '<b>{NAME.noTag}</b>';
		return tree.getBreadList(_previewPage.id,_previewPage.dir,o);
	}
	
	/* ---------- ---------- ---------- */
	
	function setToggleMenu(_view){
		var parentView = (_view) ? _view :$("body");
		var mark_open = '<span>+</span>';
		var mark_close = '<span style="opacity:0.5;">-</span>';
		var markArea = '<div class="_toggle-icon" style="float:right;">';
		
		setTimeout(function(){
			var tar = parentView.find("._type-dir-toggle > p,._type-dir-toggle > a");
			tar.each(function (index, dom) {
				var tar = $(this);
				tar.css("cursor","pointer")
				var state = tar.parent().find("> ul").css("display")
				if(state == "block"){
					tar.prepend( markArea + mark_close + '</div>')
				} else {
					tar.prepend( markArea + mark_open + '</div>')
				}
				tar.click(function(){
					var icon = $(this).find("._toggle-icon");
					if(icon.html() == mark_open){
						icon.html(mark_close)
					} else{
						icon.html(mark_open)
					}
					$(this).parent().find("> ul").slideToggle(200);
				event.stopPropagation();
				event.preventDefault();
			});
			});
		},200);
	}
	
	/* ---------- ---------- ---------- */
	
	var sumCnt;
	function getPageSum(_tree){	
		sumCnt = 0;
		getPageSum_core(_tree)
		return sumCnt;
	}
	function getPageSum_core(_tree,_cnt){	
		var ls = _tree.list
		for (var i = 0; i < ls.length ; i++){
			if(ls[i].type == "dir" ){
				getPageSum_core(ls[i]);
			}
			if(ls[i].type == "page"){
				sumCnt ++;
			}
		}
	}

	return {
		setToggleMenu:setToggleMenu,
		getSubTree:getSubTree,
		getAllTag:getAllTag,
		getTag:getTag,
		getBreadListTag:getBreadListTag,
		getPageSum:getPageSum
	};
})();

//プリセットデータ

var TreeViewMakerPreset = (function(){
	
	var data = {}
	
	/* ---------- ---------- ---------- */

	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
 { isShow: true, isOpen: true, dir: '<p>{NAME}</p>', page: '<a href="{HREF}" target="{TAR}">{NAME}</a> ' },
 { isShow: true, isOpen: true, dir: '<p>{NAME}</p>', page: '<a href="{HREF}" target="{TAR}">{NAME}</a> ' },
 { isShow: true, isOpen: true, dir: '<p>{NAME}</p>', page: '<a href="{HREF}" target="{TAR}">{NAME}</a> ' },
 { isShow: true, isOpen: true, dir: '<p>{NAME}</p>', page: '<a href="{HREF}" target="{TAR}">{NAME}</a> ' },
 { isShow: true, isOpen: true, dir: '<p>{NAME}</p>', page: '<a href="{HREF}" target="{TAR}">{NAME}</a> ' }
 		];
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: false,
			useToggle: false
		}
		o.css = {
			hasSub: true,
			underconst: true,
			clearfix: false,
			current: true,
			hasSub: true,
			level: true,
			no: false,
			ownCurrent: true,
			sum: false,
			type: true,
			underconst: true
		}
	data.simple = o;
	
	/* ---------- ---------- ---------- */

	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
			//第1階層
			{
				isShow: true,
				isOpen: true,
				dir: '<a href="{HREF}" target="{TAR}" class="{CSS.B}"><span class="t1">{NAME[0]}</span><span class="t2">{NAME[1]}</span></a>',
				add: '<a href="{HREF}" target="{TAR}" class="{CSS.B}"><span class="t1">{NAME[0]}</span><span class="t2">{NAME[1]}</span></a>'
			}
		]
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: false,
			useToggle: false
		}
	data.gnavi = o;
	
	
	/* ---------- ---------- ---------- */

	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
			//第1階層
			{
				isShow: true,
				isOpen: true,
				add: '<a href="{HREF}" target="{TAR}" class="{CSS.B}"><span class="t1">{NAME[0]}</span><span class="t2">{NAME[1]}</span></a>'
			}
		]
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: false,
			useToggle: false,
			add : {
				list: {
					texts: {},
					grid: [
						{ publicData: "1", text: "メニュー1", anchor: { href: "index.html", target: "" } },
						{ publicData: "1", text: "メニュー2", anchor: { href: "index.html", target: "" } },
						{ publicData: "1", text: "メニュー3", anchor: { href: "index.html", target: "" } },
						{ publicData: "1", text: "メニュー4", anchor: { href: "index.html", target: "" } }
					]
				},
				list2: {
					texts: {},
					grid: []
				}
			}
		}
	data.gnavi_c = o;
	
	/* ---------- ---------- ---------- */

	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
			//第1階層
			{
				isShow: true,
				isOpen: true,
				dir : '<p class="title"><span class="t1">{NAME[0]}</span><span class="t2">{NAME[1]}</span></p>',
				page: '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.P}{NAME}{I.B}</a>',
				html: '{HTML}'
			},
			//第2階層
			{
				isShow: true,
				isOpen: true,
				dir : '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.D}{NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.P}{NAME}{I.B}</a>',
				html: '{HTML}'
			},
			//第3階層
			{
				isShow: true,
				isOpen: false,
				dir : '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.D}{NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.P}{NAME}{I.B}</a>',
				html: '{HTML}'
			},
			//第4階層
			{
				isShow: true,
				isOpen: false,
				dir : '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.D}{NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}" class="{CSS.B}">{I.P}{NAME}{I.B}</a>',
				html: '{HTML}'
			}
		]
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: true,
			useToggle: false
		}
	data.snavi = o;
	
	/* ---------- ---------- ---------- */
	
	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
			//第1階層
			{
				isShow: true,
				isOpen: true,
				dir: '<a href="{HREF}" target="{TAR}">{NAME[0]}</a>'
			}, 
			//第2階層
			{
				isShow: true,
				isOpen: true,
				dir: '<a href="{HREF}" target="{TAR}">{I.D}{NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{I.P}{NAME}</a>'
			}
		]
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: false,
			useToggle: false
		}
	data.footer = o;
	
	
	/* ---------- ---------- ---------- */
	
	var o = {}
		o.targetDir = "--";
		o.targetTag = "--";
		o.levels = [
			//第1階層
			{
				isShow: true,
				isOpen: false,
				dir: '<a href="{HREF}" target="{TAR}">{I.D} {NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{NAME}</a>',
				add: '<a href="{HREF}" target="{TAR}">{NAME}</a>'
			}, 
			//第2階層
			{
				isShow: true,
				isOpen: false,
				dir: '<a href="{HREF}" target="{TAR}">{I.D} {NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{NAME}</a>'
			},
			//第3階層
			{
				isShow: true,
				isOpen: false,
				dir: '<a href="{HREF}" target="{TAR}">{I.D} {NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{NAME}</a>'
			},
			//第4階層
			{
				isShow: true,
				isOpen: false,
				dir: '<a href="{HREF}" target="{TAR}">{I.D} {NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{NAME}</a>'
			},
			//第5階層
			{
				isShow: true,
				isOpen: false,
				dir: '<a href="{HREF}" target="{TAR}">{I.D} {NAME}</a>',
				page: '<a href="{HREF}" target="{TAR}">{NAME}</a>'
			}
		]
		o.setting = {
			hasDate: false,
			isFlat: false,
			isReverse: false,
			limitSub: "",
			indent: "3",
			onlyCurrent: false,
			useToggle: true,
			add: {
				list: {
					texts: {},
					grid: []
				},
				list2: {
					texts: {},
					grid: [
						{ publicData: "1", text: "Facebook", anchor: { href: "#", target: "" } },
						{ publicData: "1", text: "Twitter", anchor: { href: "#", target: "" } }
					]
				}
			}
		}
		o.css = {
			hasSub: true,
			underconst: true,
			clearfix: false,
			current: true,
			hasSub: true,
			level: true,
			no: false,
			ownCurrent: true,
			sum: false,
			type: true
		}
		
	data.mobile = o;
	
	/* ---------- ---------- ---------- */
	
	
	
	
	return data;
	
})();




var TreeViewMakerView = (function(){
	var view;
	var v = {};

	var LEVEL_MAX = 5;
	var dirListView;
	var tagListView;
	var pageListView;
	
	var presetBtns = [
		["simple","ページ一覧"],
		["gnavi","グローバルナビ"],
		["gnavi_c","カスタムナビ"],
		["snavi","ローカルナビ"],
		["footer","フッターリンク"],
		["mobile","スマホメニュー"]
	]
	
	function init(){
		view = $('#TreeViewMakerView');
		
		dirListView = TreeViewMakerView_DirList;
		tagListView = TreeViewMakerView_TagList;
		pageListView = TreeViewMakerView_PageList;
		stageInit();
	}
	/* ---------- ---------- ---------- */
	 
	function createlayout(){
		v = ModalViewCreater.createBaseView(TreeViewMakerView,view);
		var tag = ""
			tag += '<div class="clearfix">';
			tag += '	<div class="_p _title">ナビゲーション編集 </div>'
			
			tag += '<div style="position:absolute;left:200px;top:15px;">' + CMS_GuideU.getGuideTag("window/navigation","_BASE_") + '</div>';
			tag += '	<div class="_dirSelectArea clearfix">';
			tag += '		<div class="_floatLeft "><b><i class="fa fa-sitemap "></i> ターゲットページ数：</b><span class="_matchPageCount">0</span> / <span class="_allPageCount">0</span></div>';

			tag += '		<div class="_floatLeft _selectSet clearfix">';
			tag += '			<div class="_targetDir">グループ：</div>';
			tag += '			<div class="_dirListArea">';
			tag += '				<div class="_dirListBtn"><i class="fa fa-folder "></i>  <i class="fa fa-caret-down "></i> </div>';
			tag += '				<div class="_dirListFuki _simple-scroll"></div>';
			tag += '			</div>';
			tag += '		</div>';
			tag += '		<div class="_floatLeft _selectSet clearfix">';
			tag += '			<div class="_targetTag">タグ : <b>選択なし</b></div>';
			tag += '			<div class="_tagListArea">';
			tag += '				<div class="_tagListBtn"><i class="fa fa-tags "></i>  <i class="fa fa-caret-down "></i> </div>';
			tag += '				<div class="_tagListFuki _simple-scroll"></div>';
			tag += '			</div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '</div>';
		v.header.html(tag);
		
			tag = "";
			tag += '<div class="_cms_btn _btn_close">キャンセル</div> ';
			tag += '<div class="_cms_btn _cms_btn_active _btn_do" '+TIP_ENTER+'><i class="fa fa-check"></i> 編集完了</div> ';
		v.footer.html(tag);
		
		var tag = "";
			tag += '<div class="_previewArea">';
			tag += '	<div class="_pageSelectArea clearfix">';
			tag += '		<div class="_p _pageURL"></div>';
			tag += '		<div class="_pageListArea">';
			tag += '			<div class="_pageListBtn"><i class="fa fa-file-text "></i> プレビューページを選択 <i class="fa fa-caret-down "></i> </div>';
			tag += '			<div class="_pageListFuki _simple-scroll"></div>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '	<div class="_p _previewViewTitle">プレビュー</div>';
			tag += '	<div class="_p _previewTextTitle">HTMLプレビュー</div>';
			tag += '	<div class="_inner _simple-scroll">';
			tag += '		<div class="_previewView _previewTreeView">';
			tag += '			<div class="_previewView_inner"></div>';
			tag += '		</div>';
			tag += '		<div class="_previewText">';
			tag += '			<textarea wrap="off" readonly ></textarea>';
			tag += '		</div>';
			tag += '	</div>';
			tag += '</div>';
			//
			tag += '<div class="_editerArea">';
			tag += '<div class="_inner">';
			tag += '	<div class="_presets">';
			tag += '		<div class="_p"><b>プリセット</b> </div>';
			for (var i = 0; i <  presetBtns.length ; i++) {
				tag += '<div class="_cms_btn-mini _btn_preset preset" data-id="'+presetBtns[i][0]+'"><i class="fa fa-list "></i> '+presetBtns[i][1]+'</div> ';
			}
			tag += '	</div>';
			tag += '	<div class="_p _h3">■階層ごとのテンプレートタグ指定</div>';
			tag += '	<table class="_levelTable">';
			tag += '		<tr>';
			tag += '			<th>階層</th>';
			tag += '			<th>出力</th>';
			tag += '			<th><i class="fa fa-2x fa-folder "></i> グループ</th>';
			tag += '			<th><i class="fa fa-2x fa-file-text "></i> ページ</th>';
			tag += '			<th><i class="fa fa-2x fa-file-text "></i> 追加メニュー</th>';
			tag += '			<th><i class="fa fa-2x fa-font "></i> 見出し</th>';
			tag += '			<th>初期表示</th>';
			tag += '		</tr>';
			tag += '		<tr class="_level l1">';
			tag += '			<th class="_tree"><br>第1階層<br>│ </th>';
			tag += '			<td class="_pd"><input type="checkbox" class="_show" checked></td>';
			tag += '			<td><input type="text" class="_dir"></td>';
			tag += '			<td><input type="text" class="_page"></td>';
			tag += '			<td><input type="text" class="_add"></td>';
			tag += '			<td><input type="text" class="_html"></td>';
			tag += '			<td class="_pd"><input type="checkbox" class="_open" checked></td>';
			tag += '		</tr>';
			tag += '		<tr class="_level l2">';
			tag += '			<th class="_tree">│ <br>├ 第2<br>│ │</th>';
			tag += '			<td class="_pd"><input type="checkbox" class="_show" checked></td>';
			tag += '			<td><input type="text" class="_dir"></td>';
			tag += '			<td><input type="text" class="_page"></td>';
			tag += '			<td><input type="text" class="_add" style="display:none"></td>';
			tag += '			<td><input type="text" class="_html"></td>';
			tag += '			<td class="_pd"><input type="checkbox" class="_open" checked></td>';
			tag += '		</tr>';
			tag += '		<tr class="_level l3">';
			tag += '			<th class="_tree">│ │ <br>│ ├ 第3<br>│ │ │ </th>';
			tag += '			<td class="_pd"><input type="checkbox" class="_show" checked></td>';
			tag += '			<td><input type="text" class="_dir"></td>';
			tag += '			<td><input type="text" class="_page"></td>';
			tag += '			<td><input type="text" class="_add" style="display:none"></td>';
			tag += '			<td><input type="text" class="_html"></td>';
			tag += '			<td class="_pd"><input type="checkbox" class="_open" checked></td>';
			tag += '		</tr>';
			tag += '		<tr class="_level l4">';
			tag += '			<th class="_tree">│ │ │ <br>│ │ ├ 第4<br>│ │ │ │ </th>';
			tag += '			<td class="_pd"><input type="checkbox" class="_show" checked></td>';
			tag += '			<td><input type="text" class="_dir"></td>';
			tag += '			<td><input type="text" class="_page"></td>';
			tag += '			<td><input type="text" class="_add" style="display:none"></td>';
			tag += '			<td><input type="text" class="_html"></td>';
			tag += '			<td class="_pd"><input type="checkbox" class="_open" checked></td>';
			tag += '		</tr>';
			tag += '		<tr class="_level l5">';
			tag += '			<th class="_tree">│ │ │ │ <br>│ │ │ ├ 第5<br>│ │ │ │ │ </th>';
			tag += '			<td class="_pd"><input type="checkbox" class="_show" checked></td>';
			tag += '			<td><input type="text" class="_dir"></td>';
			tag += '			<td><input type="text" class="_page"></td>';
			tag += '			<td><input type="text" class="_add" style="display:none"></td>';
			tag += '			<td><input type="text" class="_html"></td>';
			tag += '			<td class="_pd"><input type="checkbox" class="_open" checked></td>';
			tag += '		</tr>';
			tag += '	</table>';
			
			tag += '	<div class="_p _h3">■第1階層 追加メニュー</div>';
			tag += '	<table class="">';
			tag += '		<tr>';
			tag += '			<td><div class="_cms_btn _btn_add">メニュー編集</div></td>';
			tag += '			<td><i class="fa fa-angle-right " style="margin:10px;"></i></td>';
			tag += '			<td><div class="_area_addMenu"></div></td>';
			tag += '		</tr>';
			tag += '	</table>';
			
			tag += '	<div class="_p _h3">■オプション</div>';
			tag += '	<table class="_optionTable">';
			tag += '		<tr><th><input type="checkbox" class="_setting _useToggle" ></th><td>開閉メニュー</td><td class="sm">トルグメニューを作成できます。グループノードに(+)(-)アイコンが追加されます。</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _onlyCurrent" ></th><td>現在のツリーだけ表示</td><td class="sm">サイドナビなど、特定のノード以下のみ表示。第1階層のみ</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _isFlat" ></th><td>フラットにする</td><td class="sm">グループの階層構造を解除してフラットなページ一覧に</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _hasDate" ></th><td>日付指定のあるページのみ</td><td class="sm">ページ設定で日付を設定しているページのみを表示します</td></tr>';
			tag += '		<tr><th></th><td><input type="checkbox" class="_setting _isReverse" > 日付の古い順に並べる</td><td class="sm">日付の古い順に並べます</td></tr>';
			tag += '	</table>';
			
			tag += '	<table class="_optionTable">';
			tag += '		<tr><td>表示ページ数制限</td><td><input type="number" class="_setting _limitSub" style="width:40px"></td><td class="sm">グループ内のページ数を制限することができます。<br>空欄の場合は、すべて表示されます。</td></tr>';
			tag += '	</table>';
			tag += '	<table class="_optionTable">';
			tag += '		<tr><td>字下げ</td><td><input type="number" class="_setting _indent" style="width:40px"></td><td class="sm">字下げするタブの数を入力できます。</td></tr>';
			tag += '	</table>';
			
			tag += '	<div class="_p _h3">■各ノードに設定されるクラス</div>';
			tag += '	<div class="_p _read">各ノードには、そのノードの情報がクラスとして設定され、自身でCSSをカスタマイズしたり、新規に記述することにより、自由にデザインすることができます。</div>';
			tag += '	<table class="_optionTable">';
			tag += '		<tr><th><input type="checkbox" class="_setting _clearfix" ></th><td>clearfix</td><td class="sm">clearfixが指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _current" ></th><td>_current</td><td class="sm">現在開いているページとノードが同じ場合に指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _ownCurrent" ></th><td>_ownCurrent</td><td class="sm">現在開いているページを含むノードの場合に指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _hasSub" ></th><td>_hasSub</td><td class="sm">サブノードを持ってる場合に指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _underconst" ></th><td>_underconst</td><td class="sm">工事中のノードに指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _type" ></th><td>_type-...</td><td class="sm">ノードの種別が指定されます<br>( _type-dir , _type-page , _type-html )</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _level" ></th><td>_level-...</td><td class="sm">現在の階層の深さが指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _no" ></th><td>_no-...</td><td class="sm">ノード番号が順が指定されます</td></tr>';
			tag += '		<tr><th><input type="checkbox" class="_setting _sum" ></th><td>_sum-...</td><td class="sm">サブノードの合計が指定されます</td></tr>';
			tag += '	</table>';
			tag += '	<br>'
			tag += '	<div class="_p _cms_btn _btn_direct_edit">設定データを直接編集する</div>'
			tag += '</div>';
			tag += '</div>';
		v.body.html(tag);
		
		v.previewArea = view.find('._previewArea')
		v.editerArea = view.find('._editerArea')

		initView();
		
		v.previewView = view.find("._previewView_inner");
		v.previewText = view.find("._previewText textarea");
		v.pageURL 	 = view.find("._pageURL");
		
		view.on("click","._previewView a",function(event){
			pageListView.select_by_href($(this).attr("href"));
			event.stopPropagation();
			event.preventDefault();
		})
		
		v.levelInput = view.find("._levelTable :text");
		v.levelInput.click(function(){
			var tar = $(this);
			TreeViewMakerViewEditor.stageIn(
				tar.val(),
				function(_s){ tar.val(_s).change() },
				[tar.offset().left,tar.offset().top],
				tar.attr("class")
			);
		});

		//input
		v.input = view.find("input");
		v.input.keyup(function(){update_delay()});
		v.input.change(function(){update_delay()});
		v.checks = view.find(":checkbox");
		
		v.allPageCount = view.find("._allPageCount");
		v.matchPageCount = view.find("._matchPageCount");
		
		//preset
		v.btn_preset = view.find("._btn_preset");
		v.btn_preset.click(function(){setPreset($(this).data("id"))});
		
		dirListView.init(view.find("._dirListArea"));
		dirListView.update(sitemap);
		
		tagListView.init(view.find("._tagListArea"));
		tagListView.update(sitemap);
		
		pageListView.init(view.find("._pageListArea"));
		
		//preset
		v.btn_direct_edit = view.find("._btn_direct_edit");
		v.btn_direct_edit.click(function(){openDirectEdit()});
		
		
		//preset
		v.area_addMenu = view.find("._area_addMenu");
		v.btn_add = view.find("._btn_add");
		v.btn_add.click(function(){showInlineGridEditor()});
		
		setBtn();
	}
	
	/* ---------- ---------- ---------- */

	function setBtn(){
		v.bg = view.find("._bg");
		v.bg.click(function(){ 
			stageOut()
		});
		v._btn_close = view.find("._btn_close");
		v._btn_close.click(function(){ 
			stageOut()
		});
		v.btn_do = view.find('._btn_do');
		v.btn_do.click(function(){ 
			callback(getParam());
			stageOut();
		});
	}
	
	/* ---------- ---------- ---------- */

	//直接編集
	function openDirectEdit(){
		var _s = JSON.stringify(getParam(), null, "	");
		Editer_JSONView.stageIn(_s,function(_param){
			try{
				setData(JSON.parse(_param)); 
			}catch( e ){
				alert("データ形式が正しくありません。");
			}
		});
	}
	
	/* ---------- ---------- ---------- */

	//プリセット
	function setPreset(_s){
		var _s = TreeViewMakerPreset[_s];
		 setData(JSON.parse(JSON.stringify(_s)))
	}
	
	function initView(){
		//
		v.targetDir = view.find("._targetDir");
		v.targetTag = view.find("._targetTag");
		//
		v.setting = {}
		
		v.setting.useToggle	 = view.find("._setting._useToggle")
		v.setting.onlyCurrent  = view.find("._setting._onlyCurrent");
		v.setting.isFlat 	 = view.find("._setting._isFlat");
		v.setting.hasDate 	 = view.find("._setting._hasDate");
		v.setting.isReverse  = view.find("._setting._isReverse");
		v.setting.limitSub 	 = view.find("._setting._limitSub");
		v.setting.indent 	 = view.find("._setting._indent");
		//
		v.css = {}
		v.css.clearfix	 = view.find("._setting._clearfix");
		v.css.current	 = view.find("._setting._current");
		v.css.ownCurrent = view.find("._setting._ownCurrent");
		v.css.hasSub	 = view.find("._setting._hasSub");
		v.css.underconst = view.find("._setting._underconst");
		v.css.type		 = view.find("._setting._type");
		v.css.level		 = view.find("._setting._level");
		v.css.no		 = view.find("._setting._no");
		v.css.sum		 = view.find("._setting._sum");
		//
		v.trs = view.find("._level");
		v.ls = [];
		for (var i = 0; i <  LEVEL_MAX ; i++) {
			var s = ".l" + (i+1);
			v.ls.push({
				show:view.find(s + " ._show"),
				open:view.find(s +" ._open"),
				dir :view.find(s +" ._dir"),
				page:view.find(s +" ._page"),
				add:view.find(s +" ._add"),
				html:view.find(s +" ._html")
			})
		}
	}
	
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	
	var targetDir;
	function selectDir(_s,_name){
		targetDir = _s;
		v.targetDir.html(_name);
		updatePageList();
	}
	
	var targetTag;
	function selectTag(_s,_name){
		targetTag = _s;
		v.targetTag.html(_name);
		updatePageList();
	}
	function updatePageList(){
		pageListView.update(TreeAPI.getSubTree(sitemap, targetDir, targetTag));
		pageListView.show();
	}
	
	var previewParam = {}
	function selectPage(_o){
		previewParam.id = _o.id;
		previewParam.dir = _o.dir;
		v.pageURL.html('HTMLプレビュー : <b><i class="fa fa-file-text "></i> ' + TreeViewU.roundText(_o.name) + '</b>');
		update_delay();
	}
	
	/* ! ----------  ---------- ---------- ---------- ---------- */
	/* ! ----------  ---------- ---------- ---------- ---------- */
	/* ! ----------  ---------- ---------- ---------- ---------- */
	var addMenu
	function setData(_param){
		
		if(_param ==undefined) 	_param = {};
		
		v.allPageCount.html('<b>' + TreeAPI.getPageSum(sitemap) + '</b>');
		
		//入力リセット
		v.input.val("");
		v.checks.prop("checked",false);
		//現在値をセット
		dirListView.setCurrent(_param.targetDir);
		tagListView.setCurrent(_param.targetTag);
		pageListView.setCurrent(_param.previewPage);
		
		if(_param.setting ==undefined) _param.setting = {}
		if(_param.setting.useToggle)	v.setting.useToggle.prop("checked",true);
		if(_param.setting.onlyCurrent)	v.setting.onlyCurrent.prop("checked",true);
		if(_param.setting.isFlat)		v.setting.isFlat.prop("checked",true);
		if(_param.setting.hasDate)		v.setting.hasDate.prop("checked",true);
		if(_param.setting.isReverse)	v.setting.isReverse.prop("checked",true);
		v.setting.limitSub.val(_param.setting.limitSub);
		v.setting.indent.val(_param.setting.indent);
		
		if(_param.setting.add == undefined){
			_param.setting.add = {}
		}
		addMenu = _param.setting.add;
		
		//クラス初期値
		if(_param.css == undefined){
			_param.css = {}
			_param.css.clearfix = true;
			_param.css.current = true;
			_param.css.ownCurrent = true;
			_param.css.hasSub = true;
			_param.css.underconst = true;
			
			_param.css.type = true;
			_param.css.level = true;
			_param.css.no = true;
			_param.css.sum = true;
		}
		
		//inputに値をセット
		if(_param.css.clearfix)		v.css.clearfix.prop("checked",true);
		if(_param.css.current)		v.css.current.prop("checked",true);
		if(_param.css.ownCurrent)	v.css.ownCurrent.prop("checked",true);
		if(_param.css.hasSub)		v.css.hasSub.prop("checked",true);
		if(_param.css.underconst)	v.css.underconst.prop("checked",true);
		
		if(_param.css.type)			v.css.type.prop("checked",true);
		if(_param.css.level)		v.css.level.prop("checked",true);
		if(_param.css.no)			v.css.no.prop("checked",true);
		if(_param.css.sum)			v.css.sum.prop("checked",true);

		//階層テーブルに値をセット
		var ls = _param.levels;
		if(ls ==undefined) ls = []
		 for (var i = 0; i < LEVEL_MAX ; i++) {
		 	if(ls[i] == undefined){
		 		ls[i] = {}
		 		ls[i].isShow = false
		 		ls[i].isOpen = false
		 		ls[i].dir = ""
		 		ls[i].page = ""
		 		ls[i].add = ""
		 		ls[i].html = ""
		 	}
			v.ls[i].show.prop("checked",ls[i].isShow) 
			v.ls[i].open.prop("checked",ls[i].isOpen) 
			v.ls[i].dir.val(ls[i].dir);
			v.ls[i].page.val(ls[i].page);
			v.ls[i].add.val(ls[i].add);
			v.ls[i].html.val(ls[i].html);
		}
		update_delay();
	}
	var tID;
	function update_delay(){
		if(tID) clearTimeout(tID);
		tID = setTimeout(function(){
			update();
		},100);
	}
	
	/* ---------- ---------- ---------- */

	function update(){
		v.matchPageCount.html('<b>' + pageListView.getPageSum() + '</b>');
		var _param = getParam();
		var tag = TreeAPI.getTag(htmlDir, sitemap , _param);
			tag = tag.split(TreeAPI_SITE_DIR).join("");
		//
		v.previewView.html(tag);
		v.previewText.val(tag);
		//
		updateAddMenuView(_param.setting);
		updateLevelView(_param.levels);
		TreeAPI.setToggleMenu(view);
	}
	
	function updateAddMenuView(_setting){
		var tag = "";
			tag += '	<table class="_optionTable">';
			tag += '		<tr>';
			tag += '			<td><b>●先頭に追加</b><br>{TOP}</td>';
			tag += '			<td><br></td>';
			tag += '			<td><b>●最後に追加</b><br>{BOTTOM}</td>';
			tag += '		</tr>';
			tag += '	</table>';
		
		var tagT = "";
		var tagB = "";
		if(_setting.add){
			try{
				var adds = _setting.add.list.grid;
				for (var i = 0; i < adds.length ; i++) {
					tagT += adds[i].text + '<br>'
				}
				var adds = _setting.add.list2.grid;
				for (var i = 0; i < adds.length ; i++) {
					tagB += adds[i].text + '<br>'
				}
			}catch( e ){}
		}
		if(tagT=="")tagT = "--";
		if(tagB=="")tagB = "--";
		tag = tag.split("{TOP}").join(tagT);
		tag = tag.split("{BOTTOM}").join(tagB);
		v.area_addMenu.html(tag);
	}
	
	function updateLevelView(_ls){
		v.trs.removeClass("_disable");
		for (var i = 0; i <  LEVEL_MAX ; i++) {
			var b = false;
			if(_ls[i]){
				if(_ls[i].isShow ) b = true;
			}
			if(b == false) v.trs.eq(i).addClass("_disable");
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function getParam(){
		return {
			previewPage : _getPreviewPage(),
			targetTag 	: _getTragetTagVal(),
			targetDir 	: _getTragetDirVal(),
			setting 	: _getSettingVal(),
			css 		: _getCSSVal(),
			levels 		: _getLevelListVal()
		}
	}

	function _getPreviewPage(){
		return {id:previewParam.id,dir:previewParam.dir};
	}
	function _getTragetTagVal(){
		return targetTag;
	}
	function _getTragetDirVal(){
		return targetDir;
	}
	function _getSettingVal(){
		var _o = {}
			_o.useToggle  =  v.setting.useToggle.prop("checked") ? true:false;
			_o.onlyCurrent  =  v.setting.onlyCurrent.prop("checked") ? true:false;
			_o.isFlat 	 =  v.setting.isFlat.prop("checked") ? true:false;
			_o.hasDate 	 =  v.setting.hasDate.prop("checked") ? true:false;
			_o.isReverse  =  v.setting.isReverse.prop("checked") ? true:false;
			_o.limitSub  =  v.setting.limitSub.val();
			_o.indent  =  v.setting.indent.val();
			_o.add  =  addMenu;
		return _o;
	}
	function _getCSSVal(){
		var _o = {}
			_o.clearfix  =  v.css.clearfix.prop("checked") ? true:false;
			_o.current 	 =  v.css.current.prop("checked") ? true:false;
			_o.ownCurrent  =  v.css.ownCurrent.prop("checked") ? true:false;
			_o.hasSub 	 =  v.css.hasSub.prop("checked") ? true:false;
			_o.underconst  =  v.css.underconst.prop("checked") ? true:false;
			
			_o.type 	 =  v.css.type.prop("checked") ? true:false;
			_o.level 	 =  v.css.level.prop("checked") ? true:false;
			_o.no 		 =  v.css.no.prop("checked") ? true:false;
			_o.sum 		 =  v.css.sum.prop("checked") ? true:false;
		return _o;
	}
	function _getLevelListVal(){
		var _a = [];
		var temp = []
		for (var i = 0; i <  LEVEL_MAX ; i++) {
			temp[i] = {}
			temp[i].isShow = v.ls[i].show.prop("checked") ? true:false;
			temp[i].isOpen = v.ls[i].open.prop("checked") ? true:false;
			if(v.ls[i].dir.val()) 	temp[i].dir	 = v.ls[i].dir.val();
			if(v.ls[i].page.val())	temp[i].page = v.ls[i].page.val();
			if(v.ls[i].add.val())	temp[i].add = v.ls[i].add.val();
			if(v.ls[i].html.val())	temp[i].html = v.ls[i].html.val();
			_a.push(temp[i]);
		}
		return _a;
	}
	
	/* ---------- ---------- ---------- */
	
	var detailView;
	function showInlineGridEditor(){
		detailView = null;
		detailView = new EditableView.SubPageView();
		detailView.setObjectType(PageTypeList.tree);
		detailView.registParent(TreeViewMakerView);
		detailView.createView();
		detailView.initData(addMenu);
		detailView.stageIn();
	}
	window.showInlineGridEditor = showInlineGridEditor;
	function hideInlineGridEditor(){
		addMenu = detailView.getData();
		update_delay();
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback;
	var htmlDir;
	function stageIn(_htmlDir, _sitemap,_param,_callback){
		if(! isOpen){ isOpen = true;
			showModalView(this);
			view.show();
			callback = _callback;
			htmlDir = _htmlDir;
			sitemap = _sitemap;
			
			if(isFirst){
				createlayout();
				isFirst = false;
			}
			setData(_param);
		}
	}
	function stageOut(){
		if(isOpen){ isOpen = false;
			hideModalView();
			view.hide();
			TreeViewMakerViewEditor.stageOut()
		}
	}

	return {
		init: init,
		stageIn: stageIn,
		stageOut: stageOut,
		selectDir:selectDir,
		selectTag:selectTag,
		selectPage:selectPage,
		update_delay:update_delay,
		hideInlineGridEditor:hideInlineGridEditor
	}
})();


var TreeViewU = (function(){
	//TreeViewU.roundText(_s,10)
	function roundText(_s ,_n) {
		_n = _n || 15;
		if(_s.length > _n) _s = _s.substr(0,_n) + "..."
		return _s;
	}
	return { roundText:roundText }
})();


var TreeViewMakerView_DirList = (function(){
	var view;
	var v = {};
	
	function init(_view){
		view = _view;
		createView();
	}
	
	/* ---------- ---------- ---------- */
	
	function createView(){
		
	 	view.hover(function(){ 
			TreeViewMakerViewEditor.stageOut();
			v.dirListFuki.show()
	 	},function(){ 
			v.dirListFuki.hide()
	 	})
		
		v.dirListFuki = view.find("._dirListFuki");
		v.dirListFuki.html("");
		
		var prevPage;
		view.on("click","._dirListFuki ._dir",function(){
			if(prevPage) prevPage.removeClass("_current")
			var tar = $(this);
			tar.addClass("_current");
			prevPage = tar;
			var o = {
				name:tar.data("name"),
				id:tar.data("id")
			}
			selectDir( o);
		});
		view.on("click","a",function(){
			event.stopPropagation();
			event.preventDefault();
		});
	}
	function setCurrent(_s){
		if(_s == "--" )return;
		var tar = view.find("#_dl_" + _s);
		if(tar.size() == 0){
			view.find("#_dl_root").click();
		} else{
			tar.click();	
		}
	}
	
	function selectDir(_o){
		var s = 'グループ：<b><i class="fa fa-folder "></i> ';
			s += TreeViewU.roundText(_o.name,10) + "</b>";
		TreeViewMakerView.selectDir(_o.id,s);
	}
	
	/* ---------- ---------- ---------- */
	
	var sitemap
	function update(_sitemap){
		sitemap = _sitemap;
		var tag = '<div id="_dl_root" class="_dir" data-name="サイトルート" data-id=""><i class="fa fa-folder "></i> サイトルート</div>'
			tag += '<ul>'
			tag += createPageList(sitemap,0);
			tag += '</ul>'
		v.dirListFuki.html(tag);
	}
	
	var initDirID;
	var pageCnt = 0;
	
	var iconDir = '<i class="fa fa-folder-open"></i> '
	function createPageList(_tree,_deep){
		var tag = ""
		var ls = _tree.list;
		tag += '<ul>'
		for (var i = 0; i <  ls.length ; i++) {
			var ss = getStateText(ls[i].state);
			if(ls[i].type == "dir"){
				var uid = "_dl_" + ls[i].id;
				if(_deep == 1){ 
					if(initDirID == undefined) initDirID = uid;
				}
				tag += '<li><div id="'+uid+'" class="_dir" '
				tag += 'data-name="'+ls[i].name+'" data-id="'+ls[i].id+'">'
				tag += iconDir + ls[i].name + ss +"</div></li>";
				tag += createPageList(ls[i],_deep+1)
			} 
		}
		tag += '</ul>'
		return tag;
	}
	function getStateText(_s){
		try{
			if(_s.split(",")[1] == "1") return '<span class="state"> (メニュー非表示)</span>'
		}catch( e ){}
		return ""
	}
	return {
		init: init,
		update: update,
		setCurrent: setCurrent
	}
})();


var TreeViewMakerView_PageList = (function(){
	var view;
	var v = {};
	
	var sitemap
	function init(_view){
		view = _view;
		createView();
	}
	
	/* ---------- ---------- ---------- */
	
	function createView(){
	 	view.hover(function(){ 
			TreeViewMakerViewEditor.stageOut();
			v.pageListFuki.show()
	 	},function(){ 
			v.pageListFuki.hide()
	 	})
	 	
		v.pageListFuki = view.find("._pageListFuki");
		v.pageListFuki.html("");
		
		var prevPage
		view.on("click","._pageListFuki ._page",function(){
			if(prevPage) prevPage.removeClass("_current")
			var tar = $(this);
			tar.addClass("_current")
			prevPage = tar;
			var o = {
				name:tar.data("name"),
				id:tar.data("id"),
				dir:tar.data("dir")
			}
			selectPage( o );
		});
		view.on("click","a",function(){
			event.stopPropagation();
			event.preventDefault();
		});
	}
	
	function setCurrent(_o){
		if(_o == undefined) {
			_o = {id:"",dir:""}
		}
		var tar = view.find("#_dl_" + _o.id + "_" + _o.dir.split("/").join("__"));
		if(tar.size() == 0){
			// view.find("#_dl_root").click();
		} else{
			tar.click();	
		}
	}
	
	function selectPage(_o){
		TreeViewMakerView.selectPage(_o);
	}
	
	/* ---------- ---------- ---------- */
	
	var hrefList 
	var pageCnt = 0;
	function update(_sitemap){
		sitemap = _sitemap;
		hrefList = []
		if(sitemap.list.length > 0){
			pageCnt = 0
			v.pageListFuki.html(createPageList(sitemap,0));
			view.find("._pageListFuki ._page").eq(0).click();
		} else{
			v.pageListFuki.html("マッチするページはありません。");
			TreeViewMakerView.update_delay();
		}
	}
	
	var iconDir = '<i class="fa fa-folder-open"></i> '
	var iconFile = '<i class="fa fa-file-text "></i> '
	function createPageList(_tree,_deep){
		var tag = ""
		var ls = _tree.list;
		tag += '<ul>'
		for (var i = 0; i <  ls.length ; i++) {
			var ss = getStateText(ls[i].state);
			if(ls[i].type == "dir"){
				tag += '<li><div class="_dir">' + iconDir + ls[i].name + ss + "</div></li>";
				tag += createPageList(ls[i],_deep+1)
			} else if(ls[i].type == "page"){
				if(ls[i].dir == undefined) ls[i].dir = "";
				var href = CMS_Path.PAGE.getAbsPath(ls[i].id,ls[i].dir);
				var uid = "_dl_" + ls[i].id + "_" + ls[i].dir.split("/").join("__");
				tag += '<li><div id="'+uid+'" class="_page" '
				tag += 'data-name="'+ls[i].name+'" data-id="'+ls[i].id+'" data-dir="'+ls[i].dir+'">'
				tag += iconFile + ls[i].name + ss;
				tag += "</div></li>";
				hrefList.push([href,uid])
				pageCnt++
			}
		}
		tag += '</ul>'
		return tag;
	}
	function getStateText(_s){
		try{
			if(_s.split(",")[1] == "1") return '<span class="state"> (メニュー非表示)</span>'
		}catch( e ){}
		return ""
	}
	
	/* ---------- ---------- ---------- */

	function show(){
		v.pageListFuki.show()
	}
	function select_by_href(_s){
		if(hrefList == undefined) return ;
		for (var i = 0; i <  hrefList.length ; i++) {
			if(hrefList[i][0] == "/"+_s){
				view.find("#"+hrefList[i][1]).click();
			}
		}
	}
	
	/* ---------- ---------- ---------- */
	
	function getPageSum(){
		return pageCnt;
	}
	
	return {
		init: init,
		update: update,
		show: show,
		setCurrent: setCurrent,
		select_by_href: select_by_href,
		getPageSum: getPageSum
	}
})();


var TreeViewMakerView_TagList = (function(){
	var view;
	var v = {};
	
	function init(_view){
		view = _view;
		createView();
	}
	
	/* ---------- ---------- ---------- */
	
	function createView(){
		
	 	view.hover(function(){ 
			TreeViewMakerViewEditor.stageOut();
			v.tagListFuki.show()
	 	},function(){ 
			v.tagListFuki.hide()
	 	})
		
		v.tagListFuki = view.find("._tagListFuki");
		v.tagListFuki.html("");
		
		var prevPage;
		view.on("click","._tagListFuki ._tag",function(){
			if(prevPage) prevPage.removeClass("_current")
			var tar = $(this);
			tar.addClass("_current");
			prevPage = tar;
			selectTag(tar.data("name"));
		});
		view.on("click","a",function(){
			event.stopPropagation();
			event.preventDefault();
		});
	}
	
	function setCurrent(_s){
		if(_s == "--" )return;
		if(_s == ""){
			 view.find("#_tag_none").click();
			 return;
		}
		if(_s == "__ALL__"){
			 view.find("#_tag_all").click();
			 return;
		}
		for (var i = 0; i <  btns.length ; i++) {
			if(btns[i][1] ==_s){
				view.find("#"+btns[i][0]).click();
			}
		}
	}
	var icon = '<i class="fa fa-tags "></i> '
	function selectTag(_tag){
		var id = _tag
		var name = _tag
		if(_tag == "__ALL__"){
			 name = 'タグ : <b>' + icon + 'すべてのタグ</b>'
		} else if(_tag == ""){
			 name = '<b>タグ : '+icon+'選択なし<b>'
		} else{
			name = 'タグ : <b>' + icon + TreeViewU.roundText(name,10) + '</b>'
		}
		TreeViewMakerView.selectTag(id,name);
	}
	
	/* ---------- ---------- ---------- */
	
	var sitemap
	function update(_sitemap){
		sitemap = _sitemap;
		var tags = TreeAPI.getAllTag(sitemap);
		var tag = '<div id="_tag_none" class="_tag" data-name=""> 選択しない</div>'
			tag += '<div id="_tag_all" class="_tag" data-name="__ALL__"><i class="fa fa-tags "></i> すべてのタグ</div>'
			tag += '<ul>\n';
			tag += createPageList(tags);
			tag += '</ul>\n';
		v.tagListFuki.html(tag);
	}
	
	var initDirID;
	var pageCnt = 0;
	
	var btns 
	var iconDir = '<i class="fa fa-tag"></i> '
	function createPageList(_ls){
		btns = [];
		var tag = ""
		var ls = _ls;
			tag += '<ul>\n';
		for (var i = 0; i <  ls.length ; i++) {
			var name = ls[i];
			var uid = "_tag_" + pageCnt; pageCnt++;
			tag += '<li><div id="'+uid+'" class="_tag" '
			tag += 'data-name="'+name+'">'
			tag += iconDir + name + "</div></li>\n";
			btns.push([uid,name])
		}
			tag += '</ul>\n';
		return tag;
	}
	return {
		init: init,
		update: update,
		setCurrent: setCurrent
	}
})();


var TreeViewMakerViewEditor 	 = (function(){
	var view;
	var v = {};
	
	function init(){
		view = $('#TreeViewMakerViewEditor');
		stageInit();
		// stageIn("test",function(){},[800,200]);
	}
var ids = [
["{ID}","IDに置き換えられます"],
["{NAME}","ラベル名に置き換えられます"],
["{NAME[0]}","ラベル名にカンマ区切り(,)が入ってる場合、1つめのラベル名に置き換えられます"],
["{NAME[1]}","ラベル名にカンマ区切り(,)が入ってる場合、2つめのラベル名に置き換えられます"],
["{NAME[2]}","ラベル名にカンマ区切り(,)が入ってる場合、3つめのラベル名に置き換えられます"],
["{NAME[3]}","ラベル名にカンマ区切り(,)が入ってる場合、4つめのラベル名に置き換えられます"],
["{NAME[4]}","ラベル名にカンマ区切り(,)が入ってる場合、5つめのラベル名に置き換えられます"],
["{NAME.noTag}","ラベル名にタグが入ってる場合、タグを取り除いた値に置き換えられます"],
["{HREF}"	,"リンク先に置き換えられます"],
["{TAR}"	,"リンクターゲットに置き換えられます"],
["{TAG}"	,"タグに置き換えられる予定です"],
["{READ}"	,"ページ説明に置き換えられる予定です"],
["{DATE}"	,"日付に置き換えられる予定です"],

["{SUM}"	,"グループ配下のページ数を表示する"],
["{NO}"		,"階層内での連番に置き換えられます"],
["{LEVEL}"	,"階層のレベルに置き換えられます"],
["{CSS.B}"	,"CMSでデフォルトで設定されているボタンクラス ( _btn_default ) に置き換えられます"],
["{HOME}"	,"ホームページのリンクパスに置き換えられます"],

["{I.D}"	,'<i class="fa fa-lg fa-folder "></i> アイコンに置き換えられます'],
["{I.D2}"	,'<i class="fa fa-lg fa-folder-open "></i> アイコンに置き換えられます'],
["{I.P}"	,'<i class="fa fa-lg fa-caret-right "></i> アイコンに置き換えられます'],
["{I.P2}"	,'<i class="fa fa-lg fa-chevron-circle-right "></i> アイコンに置き換えられます'],
["{I.P3}"	,'<i class="fa fa-lg fa-angle-right "></i> アイコンに置き換えられます'],
["{I.T}"	,'<i class="fa fa-lg fa-tag "></i> アイコンに置き換えられます'],
["{I.B}"	,'<i class="fa fa-lg fa-external-link-square "></i> リンクターゲットが_blankの場合、別ウィンドウアイコンに置き換えられます'],
]

	var ids2 = [
	 ["{HTML}","見出しテンプレで使用し、HTMLに置き換えられます"]
	]
	function createlayout(){
		var tag = ""
			tag += '<div class="_btn_close"></div>';
			tag += '<div class="_body"></div>'
			tag += '<div class="_cms_anno"></div>'
			tag += '<div class="_typeDef">'
			tag += '	<div class="_presets">'
			tag += '		<div class="_btn_preset" data-id="reset"><i class="fa fa-times "></i> リセット</div>'
			tag += '		<div class="_btn_preset" data-id="link1"><i class="fa fa-code "></i> リンク1</div>'
			tag += '		<div class="_btn_preset" data-id="link2"><i class="fa fa-code "></i> リンク2</div>'
			tag += '	</div>'
			tag += '	<div class="_snippets">'
			tag += '		<div class="_title"><i class="fa fa-caret-down "></i> 置き換えキー</div>'
			tag += '		<div class="_inner">'
			tag += '		<div class="_p">グループ、ページ設定画面で設定した値などを取得できます。</div>'
		
			for (var i = 0; i <  ids.length ; i++) {
				tag += '<div class="_btn_rep_id">'+ids[i][0]+'</div>'
			}
			tag += '		<div class="_p _disc"></div>'
			tag += '		</div>'
			tag += '	</div>'
			tag += '</div>'
			tag += '<div class="_typeHtml">'
			tag += '	<div class="_presets">'
			tag += '		<div class="_btn_preset" data-id="reset"><i class="fa fa-times "></i> リセット</div>'
			tag += '	</div>'
			tag += '	<div class="_snippets">'
			tag += '		<div class="_title"><i class="fa fa-caret-down "></i> 置き換えキー</div>'
			tag += '		<div class="_inner">'
			for (var i = 0; i <  ids2.length ; i++) {
				tag += '<div class="_btn_rep_id" >'+ids2[i][0]+'</div>'
			}
			tag += '		</div>'
			tag += '	</div>'
			tag += '</div>'
		view.html(tag);
		v.body = view.find('._body');
		
		v.body.html(CMS_FormU.getTextarea("","html"))
		
		v.textarea	 = view.find('textarea');
		v._btn_close = view.find('._btn_close');
		v.cms_anno = view.find('._cms_anno');
		
		
		v.typeDef = view.find('._typeDef');
		v.typeHtml = view.find('._typeHtml');
		
		v.btn_rep_id = view.find('._btn_rep_id');
		v.btn_rep_id.click(function(){ appendID($(this).text())});
		v.btn_rep_id.hover(function(){ showPresetDisc( $(this).text()  )});
		v.disc = view.find('._disc');
		
		v.btn_preset = view.find('._btn_preset');
		v.btn_preset.click(function(){ presetText($(this).data("id"))});
		setBtn();
	}
	function setBtn(){
		v._btn_close.click(function(){  stageOut() });
		v.textarea.keyup(function(){ getData(); });
	}
	
	/* ---------- ---------- ---------- */
	
	function showPresetDisc(_s1){
		var desc = ""
		for (var i = 0; i <  ids.length ; i++) {
			if(_s1 == ids[i][0]) desc = ids[i][1];
		}
		v.disc.html('<b>' + _s1 + '</b>' + " : " + desc);	
	}
	function presetText(_s){
		var s = ""
		if(_s =="link1"){
			s = '<a href="{HREF}" target="{TAR}">{NAME}</a>'
		}
		if(_s =="link2"){
			s = '<a href="{HREF}" target="{TAR}" class="{CSS.B}"><span class="t1">{NAME.1}</span><span class="t2">{NAME.2}</span></a>'
		}
		v.textarea.val(s).keyup();
	}
	function appendID(_s){
		var s = v.textarea.val();
		v.textarea.val(s + _s).keyup();
	}
	
	/* ---------- ---------- ---------- */
	
	// var defS = ""
	function setValue(_s,_type){
		v.textarea.focus().val(_s);
		//
		v.typeDef.hide();
		v.typeHtml.hide();
		if(_type == "html"){
			v.typeHtml.show();
		} else{
			v.typeDef.show();
		}
	}
	function getData(){
		var s = v.textarea.val();
		callback_main(s);
	}
	
	var tID
	function callback_main(s){
		if(tID)clearTimeout(tID);
		tID = setTimeout(function(){
			callback(s);
		},200);
	}
	
	/* ---------- ---------- ---------- */
	
	var isOpen = false;
	var isFirst = true;
	function stageInit(){
		view.hide();
	}
	var callback
	function stageIn(_s,_callback,_xy,_type){
		if(view === undefined) return;
		if(isFirst){
			createlayout();
			isFirst = false;
		}
		callback = _callback
		view.show();
		// if(CMS_StatusW-300 < _xy[0]){_xy[0] = CMS_StatusW-300}
		view.css("left",_xy[0]+25);
		view.css("top",_xy[1]+15);
		setValue(_s,_type)
	}
	function stageOut(){
		if(view === undefined) return;
		view.hide();
	}

	return { init:init, stageIn:stageIn, stageOut:stageOut }
})();//

var SS 			 = (function(){ 
	var o = {}
		o.repID  = "color:#4A66A0;font-size:12px;font-weight:bold;";
		o.repID20  = "color:#4A66A0;font-size:16px;font-weight:bold;width:200px;";
		o.memo 	 = "color:#999;font-size:12px;";
		o.multiDef  = "width:600px;height:100px;";
		o.w50 	 = "width:50px;";
		o.w100 	 = "width:100px;";
		o.w150 	 = "width:150px;";
		o.w200 	 = "width:200px;";
		o.w300 	 = "width:300px;";
		o.w400 	 = "width:400px;";
		o.w500 	 = "width:500px;";
		o.w600 	 = "width:600px;";
		o.w300h50  = "width:300px;height:50px;";
		o.w300h100  = "width:300px;height:100px;";
		o.w300h200  = "width:300px;height:200px;";
		o.w400h50  = "width:400px;height:50px;";
		o.w400h100  = "width:400px;height:100px;";
		o.w400h200  = "width:400px;height:200px;";
		o.w600h50  = "width:600px;height:50px;";
		o.w600h100  = "width:600px;height:100px;";
		o.w600h200  = "width:600px;height:200px;";
		o.w600h50  = "width:600px;height:50px;";
		o.w600h100  = "width:600px;height:100px;";
		o.w600h200  = "width:600px;height:200px;";
		o.w800 	 = "width:800px;";
		o.w800h50  = "width:800px;height:50px;";
		o.w800h100  = "width:800px;height:100px;";
		o.w800h200  = "width:800px;height:200px;";
		o.img80  = "width:80px;height:80px;overflow:scroll";
		o.img50p  = "max-width:300px;";
		o.html 	 = "color:#888;font-weight:bold;";
		o.js 	 = "color:#B20000;";
		o.css 	 = "color:#003ca4;";
		
		o.SelectVals = {
			pub 		: [["公開","公開"], ["非公開","非公開"]],
			linkTarget 	: [["_self","同一ウィンドウ"], ["_blank","別ウィンドウ"]],
			YN 			: [["1","YES"], ["0","NO"]],
			TRBL 		: [["top","上に配置"],["right","右に配置"],["bottom","下に配置"],["left","左に配置"]]
		}
	return o;
})();

var PageElement_DIC = []
window.PageElement_DIC = PageElement_DIC;


var CELL_TYPE = {}
	CELL_TYPE.SINGLE = "single";
	CELL_TYPE.MULTI = "multi";
	CELL_TYPE.MULTI_JS = "multi,js"
	CELL_TYPE.MULTI_STYLE = "multi,style"
	CELL_TYPE.MULTI_HTML = "multi,html"
	CELL_TYPE.TABLE = "table"
	CELL_TYPE.SELECT = "select";
	CELL_TYPE.CHECK = "checkbox";
	CELL_TYPE.IMAGE = "image";
	CELL_TYPE.ANCHOR = "anchor";
	CELL_TYPE.BTN = "textAnchor";
	CELL_TYPE.YYYYMMDD = "yyyymmdd";
	CELL_TYPE.STATE = "_state";


var PageModel = {};
window.PageModel = PageModel;



PageModel.Tag_ = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	 this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param 
	p.pageType 
	p.pageInfo 
	p.grids
	
	p.init = function() {
	}
	p.getInitData = function() {
		//overrdie
	}
	p.getPreview = function() {
		//overrdie
		return "";
	}
	p.getHTML = function() {
		//overrdie
		return "";
	}
	p.getTestTag = function() {
		return "--";
	}
	return c;
})();

PageModel.Object_ = (function() {
	/* ---------- ---------- ---------- */
	var c = function() {
	 this.init();
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param 
	p.pageType 
	p.pageInfo 
	p.grids
	
	p.init = function() {
	}
	p.getInitData = function() {
		//overrdie
	}
	p.getPreview = function() {
		//overrdie
		return "";
	}
	p.getHTML = function() {
		//overrdie
		return "";
	}
	p.getDefData = function(_n) {
		var _param = {}
		for (var i = 0; i < this.grids.length ; i++) {
			this.grids[i].getInitData(_param,_n);
		}
		return _param;
	}
	p.getTestTag = function() {
		var infoTag = this.pageInfo.getTestTag();
		var gridTag = ""
		var list = this.grids;
		for (var i = 0; i < list.length; i++) {
			gridTag += list[i].getTestTag()
		}
		var tag = ""
			tag += infoTag
			tag += gridTag
		return tag;
	}
	return c;
})();
 	

PageModel.Object_Info = (function() {
	/* ---------- ---------- ---------- */
	var c = function(o) {
	 this.init(o);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param 
	p.id;
	p.name;
	p.def;
	p.cssDef;
	
	p.init = function(o) {
		this.param = o; 
		this.setParam();
	}
	p.setParam = function (){
		this.id  = defaultVal(this.param.id, "");
		this.custom  = defaultVal(this.param.custom, false);
		this.name  = defaultVal(this.param.name, "");
		this.name2  = defaultVal(this.param.name2, "");
		this.guide  = defaultVal(this.param.guide, "");
		this.def  = defaultVal(this.param.def, "");
		this.cssDef = defaultVal(this.param.cssDef, {file:"block",key:""});
		this.inputs = defaultVal(this.param.inputs, []);
		
		var o = {}
			o.type = this.id;
			o.custom = this.custom;
			o.name = this.name;
			o.name2 = (this.name2) ? this.name2 :"";
			o.inputs = this.inputs;
			
		PageElement_DIC.push(o);
	}
	p.getHeadTag = function (){
		var tag = ""
		tag += '<div class="_head">'
		tag += '</div>'
		return tag;
	}
	p.getGuideTag = function (){
		var tag = ""
		if(this.guide){
			if(window["CMS_GuideU"]){
			tag = CMS_GuideU.getGuideTag(this.guide,"_BASE_");
			}
		}
		return tag;
	}
	p.getFootTag = function (){
		var tag = ""
		tag += '<div class="_head">'
		tag += '</div>'
		return tag;
	}
	p.getTestTag = function (){
		var tag = "";
			tag += '<div class="_ut_object_info">'
			tag += '<span class="_t1">id</span><span class="_t2">'+this.id +'</span>';
			tag += '<span class="_t1">name</span><span class="_t2">'+this.name +'</span>';
			tag += '<span class="_t1">def</span><span class="_t2">'+this.def +'</span>';
			tag += '</div>'
		return tag;
	}
	p.getGuideImageTag = function (){
		return "";
	}
	return c;
})();

PageModel.Object_Grid = (function() {
	/* ---------- ---------- ---------- */
	var c = function(o,addPub) {
	 this.init(o,addPub);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	p.addPub
	p.init = function (o,_addPub){
		this.param = o; 
		this.addPub = (_addPub == undefined) ? true : _addPub;
		this.setParam();
	}
	p.setParam = function (){
		this.isNarrow	 = (this.param.isNarrow !== undefined) ? this.param.isNarrow : false;
		this.gridType 	 = this.param.gridType;
		this.gridInfo 	 = this.param.gridInfo;
		this.multiGridRepeat = this.param.multiGridRepeat;
		this.textData 	 = this.param.textData;
		this.hideGridEdit  = (this.param.hideGridEdit !== undefined) ? this.param.hideGridEdit : false;
		
		if(this.param.gridData){
			if(this.addPub){
				var pub = new PageModel.OG_Cell({
					id: "publicData",
					name: "公開",
					type: CELL_TYPE.CHECK,
					style: "",
					view: "",
					def: "1"
				});
				this.param.gridData.cells.unshift(pub);
				var edit = new PageModel.OG_Cell({
					id: "_state",
					name: "編集フラグ",
					type: CELL_TYPE.STATE,
					style: "",
					view: "",
					def: ""
				});
				this.param.gridData.cells.push(edit);
			}
		}
		this.gridData  = this.param.gridData;
	}
	p.getInitData = function (_o,_n){
		if(_n == undefined) _n = 1;
		var o = { texts:{}, grid:[] }
		if(this.textData){
			for (var i = 0; i < this.textData.cells.length ; i++) {
				var tar = this.textData.cells[i];
				o.texts[tar.id] = tar.def;
			}
		}
		if(this.param.gridData){
			for (var n = 0; n < _n ; n++) {
				o.grid[n] = {}
				for (var i = 0; i < this.param.gridData.cells.length ; i++) {
					var tar = this.param.gridData.cells[i];
					o.grid[n][tar.id] = tar.def;
				}
			}

		}
		_o[this.gridInfo.id] = o;
	}
	p.getTestTag = function() {
		function _getTag(_list){
			var tag = "";
			tag += '	<table>';
			tag += '	<tr>';
			tag += '	<td>';
			tag += _list.info.getTestTag();
			tag += '	</td>';
			tag += '	<td>';
			tag += '		<table class="_ut_grid">';
			tag += '			<tr>';
			tag += '			<th>id</th>';
			tag += '			<th>name</th>';
			tag += '			<th>type</th>';
			tag += '			<th>view</th>';
			tag += '			<th>def</th>';
			tag += '			<th>note</th>';
			tag += '			<th>list</th>';
			tag += '			<th>style</th>';
			//tag += '			<th>class_</th>';
			tag += '			<th>vals</th>';
			tag += '			</tr>';
			var cells = _list.cells;
			for (var i = 0; i <  cells.length ; i++) {
				tag += cells[i].getTestTag()
			}
			tag += '		</table>';
			tag += '	</td>';
			tag += '	</tr>';
			tag += '	</table>';
			return tag
		}
		
		var gridTag = "";
		gridTag += '<div class="_ut_gridText_text">'
		if(this.textData != undefined){
			gridTag += _getTag(this.textData)
		}
		gridTag += '</div>';
		
		gridTag += '<div class="_ut_gridText_grid">'
		if(this.gridData != undefined){
			gridTag += _getTag(this.gridData)
		}
		gridTag += '</div>';
		
		var tag = "";
			tag += '<div class="_ut_grids">'
			tag += '	<table>';
			tag += '	<tr>';
			tag += '	<td>'+this.gridInfo.getTestTag()+'</td>';
			tag += '	<td>'+gridTag+'</td>';
			tag += '	</tr>';
			tag += '	</table>';
			tag += '</div>';
		return tag;
	}	
	return c;
})();

PageModel.OG_info 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(o) {
	 this.init(o);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param;
	p.id;
	p.name;
	p.note;
	p.sub;
	p.image;
	p.def;//フリーレイアウトの初期値として使用している
	p.callback;
	
	p.init = function(o) {
		this.param = o; 
		this.setParam();
	}
	p.setParam = function (){
		this.id 	 = defaultVal(this.param.id, "");
		this.freeHTML  = defaultVal(this.param.freeHTML, "");
		this.name 	 = defaultVal(this.param.name, "");
		this.note 	 = defaultVal(this.param.note, "");
		this.sub 	 = defaultVal(this.param.sub, "");
		this.image 	 = defaultVal(this.param.image, "");
		this.def 	 = defaultVal(this.param.def, "");
		this.callback = defaultVal(this.param.callback, null);
	}
	p.getHeadTag = function (){
		var tag = ""
		tag += '<div class="_head">'
		if(this.freeHTML != "")tag += this.freeHTML;
		if(this.name != "")tag += '<div class="_h2">'+this.name +'</div>'
		if(this.note != "")tag += '<div class="_read">'+this.note +'</div>'
		tag += this.getGuideImageTag();
		tag += '</div>'
		return tag;
	}
	p.uid = ""
	p.getFootTag = function (){
		var tag = "";
		tag += '<div class="_foot">'
		if(this.sub != ""){
			tag += '<div class="_read">'+this.sub +'</div>'
		}
		tag += '</div>'
		//
		if(this.callback){
			this.uid = "_pagemodel_" + DateUtil.getRandamCharas(10);
			tag += '<div id="'+this.uid+'"></div>'
		}
		return tag;
	}
	p.getGuideImageTag = function (){
		var tag = "";
		if(this.image) tag += '<img src="' + this.image +'?1" style="">'
		return tag;
	}
	// p.callbackView
	p.update = function (o){
		var s = ""
		if(this.callback){
			// if(!this.callbackView) {
			// 	this.callbackView = $("#SubPageView").find("#"+this.uid);
			// 	console.log(this.callbackView);
			// }
			s = this.callback(o,this.uid);
		}
		return s;
	}
	p.getTestTag = function() {
		var tag = "";
			tag += '<table class="_ut_info _ut_w200">';
			tag += '<tr><th>id</th><td>' + 		this.id + '</td></tr>';
			tag += '<tr><th>name</th><td>' + 	this.name + '</td></tr>';
			tag += '<tr><th>note</th><td>' + 	this.note + '</td></tr>';
			tag += '<tr><th>sub</th><td>' + 	this.sub + '</td></tr>';
			tag += '<tr><th>image</th><td>' + 	this.image + '</td></tr>';
			//tag += '<tr><th>def</th><td>' + 	this.def + '</td></tr>';
			tag += '<tr><th>callback</th><td>' + this.callback + '</td></tr>';
			tag += '</table>';
		return tag;
	}
	return c;
})();

PageModel.OG_SubInfo  = (function() {
	/* ---------- ---------- ---------- */
	var c = function(o) {
	 this.init(o);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param; 
	p.name;
	p.note;
	p.sub;
	p.image;
	
	p.init 		 = function (o) {
		this.param = o; 
		this.name;
		this.note;
		this.sub;
		this.image;//BaseGridのサイドに表示される
		this.image2;//
		this.setParam();
	}
	p.setParam 	 = function (){
		this.name  = defaultVal(this.param.name, "");
		this.note  = defaultVal(this.param.note, "");
		this.sub  = defaultVal(this.param.sub, "");
		this.image  = defaultVal(this.param.image, "");
		this.freeHTML  = defaultVal(this.param.freeHTML, "");
	}
	p.getHeadTag  = function (){
		var tag = ""
		tag += '<div class="_head ">'
		if(this.name != "")tag += '<div class="_h3">'+this.name +'</div>'
		if(this.note != "")tag += '<div class="_read">'+this.note +'</div>'
		if(this.freeHTML != "")tag += this.freeHTML;
		
		tag += '</div>'
		return tag;
	}
	p.getFootTag  = function (){
		var tag = ""
		tag += '<div class="_foot">'
		if(this.sub != ""){
			tag += '<div class="_read">'+this.sub +'</div>'
		}
		tag += '</div>'
		return tag;
		
	}
	p.getTestTag = function (){
		var tag = ""
			tag += '<table class="_ut_info _ut_w300">';
			tag += '	<tr><th>name</th><td>' + this.name + '</td></tr>';
			tag += '	<tr><th>note</th><td>' + this.note + '</td></tr>';
			tag += '	<tr><th>sub</th><td>' + this.sub + '</td></tr>';
			tag += '	<tr><th>image</th><td>' + this.image + '</td></tr>';
			tag += '</table>';
		return tag;
	}
	
	//BaseGridのサイドに表示される
	p.getGuideImageTag = function (){
		var tag = "";
		// if(this.image) tag += '<img src="' + this.image +'" style="">'
		if(this.image) tag += this.image
		return tag;
	}
	return c;
})();

PageModel.OG_Cell 	 = (function() {
	/* ---------- ---------- ---------- */
	var c = function(_view) {
		this.init(_view);
	}
	var p = c.prototype;
	/* ---------- ---------- ---------- */
	
	p.param;
	p.id;
	p.name;
	p.type;//入力タイプ 
	p.view; //detail:詳細編集画面の項目, one :マルチグリッド時にサマリーで表示する項目
	p.def;//初期値をいれる
	p.note;//注釈
	p.vals;//セレクトボックスのアイテムs
	p.placeholder;
	
	p.list;//候補リスト
	p.codeType;//フォームのコードの種類。HTML,CSS,JSなど
	p.style;
	//p.class_;
	p.init = function(o) {
		this.param = o;
		this.setParam();
	}
	
	p.setParam = function (){
		this.id  = defaultVal(this.param.id, "--");
		this.name  = defaultVal(this.param.name, "-");
		this.type  = defaultVal(this.param.type, CELL_TYPE.SINGLE);
		this.view  = defaultVal(this.param.view, "");
		this.def  = defaultVal(this.param.def, "");
		this.note  = defaultVal(this.param.note, "");
		
		this.list  = defaultVal(this.param.list, "");
		this.style  = defaultVal(this.param.style, "");
		//this.class_ = defaultVal(this.param.class_, "");
		this.vals  = defaultVal(this.param.vals, ["--"]);
		this.placeholder = defaultVal(this.param.placeholder, "");
		//
		var ts = this.type.split(",")
		this.type = ts[0]
		this.codeType = "text";
		if(ts[1]){ this.codeType = ts[1]; }
	}
	p.getTestTag = function() {
		var tag = "";
			tag += '<tr>';
			tag += '<td class="id">' + this.id + '</td>';
			tag += '<td class="name">' + this.name + '</td>';
			tag += '<td class="type">' + this.type + '</td>';
			tag += '<td class="view">' + this.view + '</td>';
			tag += '<td class="def">' + this.def + '</td>';
			tag += '<td class="note">' + this.note + '</td>';
			
			tag += '<td class="list">' + this.list + '</td>';
			tag += '<td class="style">' + this.style + '</td>';
			//tag += '<td class="class_">' + this.class_ + '</td>';
			tag += '<td class="vals">' + this.vals + '</td>';
			tag += '</tr>';
		return tag;
	}
	return c;
})();

var PageTypeList = {}

window.PageTypeList = PageTypeList;


//ナビゲーション編集の追加ナビ
PageTypeList.tree = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.btnList", 
		name	: "ボタンリスト",
		name2	: "＜UL＞＜LI＞＜A＞",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[ボタンリストブロック]"}
		cssDef	: {selector:".cms-btns"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "先頭に追加",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"" }),
				cells:[
					new PageModel.OG_Cell({
						id: "text",
						name: "ラベル名",
						type: CELL_TYPE.SINGLE,
						def: "ラベル名"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitData()
					})
				]
			}
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list2",
				name	: "最後に追加",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"" }),
				cells:[
					new PageModel.OG_Cell({
						id: "text",
						name: "ラベル名",
						type: CELL_TYPE.SINGLE,
						def: "ラベル名"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitData()
					})
				]
			}
		})
	]

    return _;
})();

window.FREEPAGE_DEF_DATA = [
	
	{
		"type": "tag.heading",
		"data": {
			"heading": "h1",
			"main": {
				"text": "{{PAGE_NAME}}",
				"link": null
			},
			"right": {
				"text": "",
				"link": null
			}
		},
		"attr": {
			"css": "default",
			"narrow": "",
			"class": "default",
			"hide": ""
		}
	},
	{
		"type": "tag.markdown",
		"data": "##大見出し\n文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n\n###中見出し\n文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n\n####小見出し\n文書が入ります。文書が入ります。文書が入ります。\n\n * 項目1\n * 項目2\n * 項目3\n",
		"attr": {
			"preview": "",
			"narrow": "",
			"class": "default",
			"hide": "",
			"css": "default "
		}
	}
]
PageTypeList.page = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */

    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "free", 
		name	: "自由入力ページ", 
	});
	
	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.FREE,
			gridInfo:new PageModel.OG_info({ 
				id		: "free", 
				name	: "自由入力エリア", 
				def		:  [{
				  "type": "layout.div",
				  "attr": {},
				  "data": FREEPAGE_DEF_DATA
				}]
				
			})
		})
		/* ---------- ---------- ---------- */
	]
    
	/* ---------- ---------- ---------- */

    return _;
})();


var PageElement = {}
window.PageElement = PageElement;


var PageElement_JText = {}

//デフォルト文字
PageElement_JText.P = "<b>サンプルのタイトル</b>\n文書が入ります。<b style=\"color:red\">赤文字や</b>、{{-}} <a href='http://www.yahoo.co.jp'>リンク</a> もはれます。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n<small>※注釈の文書が入ります。注釈の文書が入ります。</small>";

//タブコンテンツ作成時のデータ
PageElement_JText.tabListData01 = '{"type": "layout.div","attr": {"class": "p10","css": "p10","id": "tab03"},"data": [{"type": "tag.p","attr": {"css": "default"},"data": "タブ03.文書が入ります。"}]}'
PageElement_JText.tabListData02 = '{"type": "layout.div","attr": {"class": "p10","css": "p10","id": "tab02"},"data": [{"type": "tag.p","attr": {"css": "default"},"data": "タブ02.文書が入ります。"}]}'
PageElement_JText.tabListData03 = '{"type": "layout.div","attr": {"class": "p10","css": "p10","id": "tab01"},"data": [{"type": "tag.p","attr": {"css": "default"},"data": "タブ01.文書が入ります。"}]}'

//リセットボタンを押したときのデータ
PageElement_JText.resetJSON = (function(){ 
    var o = {
		head: {},
		body: {
			free: [{
				type: "layout.div",
				attr: {},
				data: [{
					type: "tag.heading",
					data: {
						heading: "h1",
						main: {
							"text": "{{PAGE_NAME}}"
						},
						right: {
							text: ""
						}
					},
					attr: {
						css: "default ",
						"class": "default "
					}
				}]
			}]
		}
	}
	return JSON.stringify(o);
})();

//テンプレートプレビュー時のデータ
PageElement_JText.templatePreviewPageData = '{"meta":{},"head":{},"body":{"free":[{"type":"layout.div","attr":{},"data":[{"type":"layout.h1","attr":{"class":"default","css":"default"},"data":"タイトル"},{"type":"tag.p","attr":{"class":"default","css":"default"},"data":"文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。"},{"type":"layout.h2","attr":{"class":"designD","css":"designD"},"data":"大見出し"},{"type":"tag.p","attr":{"class":"default","css":"default"},"data":"文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。"},{"type":"cols","attr":{"class":"free","css":"free"},"data":[{"type":"layout.div","attr":{},"data":[{"type":"layout.h3","attr":{"class":"designC","css":"designC"},"data":"中見出し"},{"type":"tag.p","attr":{"class":"default","css":"default"},"data":"文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。"}]},{"type":"layout.div","attr":{},"data":[{"type":"layout.h3","attr":{"class":"designC","css":"designC"},"data":"中見出し"},{"type":"tag.p","attr":{"class":"default","css":"default"},"data":"文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。"}]}]}]}]}}'

window.PageElement_JText = PageElement_JText;



var PageElement_Util = (function(){

	function _traceElementInfo(){
		var a = ["layout","replace","tag","object"];
		for (var i = 0; i <  a.length ; i++) {
			var tar = PageElement[a[i]];
			for (var m in tar) {
				console.log([tar[m].pageInfo.id,tar[m].pageInfo.name]);
			}
		}
	}
	//現在登録されているブロックを調べる。開発用。
	window.traceElementInfo = _traceElementInfo;

	/* ---------- ---------- ---------- */
	
	function getElementInfo(_type){
		var o = {}
		if(!_type) return o;
		if(_type == "replace.div"){ o = PageElement.replace.div;}
		if(_type == "layout.div"){ o = PageElement.layout.div;}
		if(_type == "layout.cols"){ o = PageElement.layout.cols;}
		if(_type == "layout.colDiv"){ o = PageElement.layout.colDiv;}
		if(isElement(_type)){
			var t = _type.split(".")[1];
			if (_type.indexOf("tag.") == 0) {
				o = PageElement.tag[t];
			}
			if (_type.indexOf("object.") == 0) {
				o = PageElement.object[t];
			}
		}
		return o;
	}
	window.getElementInfo = getElementInfo;
	
	/* ---------- ---------- ---------- */

	//初期データ取得
	function getInitData(_type,_param){
		var tar = getElementInfo(_type)
		var o = tar.getInitData(_param);
		o["class"] = o.css;
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	//プレビューHTMLデータ取得
	function getPreview(param){
		//
		var attr = (function(_p){ 
			var s  = defaultVal(_p.attr["style"],"");
			var c = defaultVal(_p.attr["class"],"");
			return ' class="' + c + '" style="' + s + '" ';
		})(param);
		
		var o = createParam(param);
			o.attrs = attr;
			o.extra = (param["extra"]) ? param.extra : {};
		
		if(isElement(param.type)){
			
			var ts = param.type.split(".");
			if(PageElement[ts[0]]){
				var tar = PageElement[ts[0]][ts[1]];
				if(tar) return tar.getPreview(o);
			}
		}
		return "";
	}
	

	/* ---------- ---------- ---------- */

	//HTMLデータ取得
	function getHTML(param,attr,tab){
		var o = createParam(param)
			o.attrs = attr;
			o.extra = (param["extra"]) ? param.extra : {};
		
		if(isElement(param.type)){
			var tar;
			var t = param.type.split(".")[1];
			if (param.type.indexOf("tag.") == 0) tar = PageElement.tag[t];
			if (param.type.indexOf("object.") == 0) tar = PageElement.object[t];
			if(tar) return tar.getHTML(o,tab);
		}
		return "";
	}
	
	/* ---------- ---------- ---------- */

	function createParam(param){
		var o = {}
			o.type 		 = param.type;
			o.data 		 = param.data;
			o.link 		 = defaultVal(param.attr["link"], "");
			o.preview 	 = defaultVal(param.attr["preview"], "");//HTMLのプレビュ
			o.id 		 = defaultVal(param.attr["id"], "");
		return o;
	}
	
	/* ---------- ---------- ---------- */

	//tabもしくはobjectか？
	function isElement(_type){
		var b = false
		if (_type.indexOf("tag.") == 0) b = true;
		if (_type.indexOf("object.") == 0) b = true;
		return b;
	}

	/* ---------- ---------- ---------- */
	
	function hasAttr(_attr){
		var s = _attr;
			s = s.split(" ").join("");
			s = s.split('class=""').join('');
			s = s.split('style=""').join('');
		if(s == "") return false;
		return true;
	}
	
	/* ---------- ---------- ---------- */

	//インスペクタビューでの名前取得
	function getTypeName(_type){
		var list = PageElement_DIC;
		var n = "";
		for (var i = 0; i <list.length ; i++) {
			if(_type == list[i].type){
				n = '<span class="_t1">'+ list[i].name + "ブロック</span>"
				// n += '<span class="_t2">'+ list[i].name2 + "</span>"
			}
		}
		n = n.split("<br>").join("")
		return n;
	}
	function getTypeName_t1(_type){
		var list = PageElement_DIC;
		var n = "";
		for (var i = 0; i <list.length ; i++) {
			if(_type == list[i].type){
				return list[i].name;
			}
		}
		return "";
	}

	/* ---------- ---------- ---------- */

	//インスペクタビューの入力可能タイプの取得
	function hasInputType(_type,_input){
		var list = PageElement_DIC;
		var n = "";
		for (var i = 0; i <list.length ; i++) {
			if(_type == list[i].type){
				var inputs = list[i].inputs;
				for (var ii = 0; ii <inputs.length ; ii++) {
					if(inputs[ii] == _input) return true;
					
				}
			}
		}
		return false;
	}

	/* ---------- ---------- ---------- */
	
	//データグリッドでの値の範囲を取得
	function getGridMaxLeng(_a,_leng){
		var max = 0
		for (var i = 0; i < _a.length ; i++) {
			for (var ii = 0; ii < _leng ; ii++) {
				if(_a[i]["c"+(ii+1)]){
					if(max < ii){
						max = ii
					}
				}
			}
		}
		return max;
	}
	
	/* ---------- ---------- ---------- */
	
	/* ---------- ---------- ---------- */
	
	function _getMaxLeng(_type){
		var n;
		if(window["GRID_PREVIEW_MAX_ROW"]){
			var o = GRID_PREVIEW_MAX_ROW;
			if(_type == "news") n = o["NEWS"];
			if(_type == "table") n = o["TABLE"];
			if(_type == "custom") n = o["CUSTOM"];
			if(_type == "data") n = o["DATA"];
		}
		if(isNaN(n)) n = 50;
		return n;
	}
	function getOmitLeng(_n,_type,_isPub){
		if (_isPub) return _n;
		var max = _getMaxLeng(_type);
		if(max < _n){
			return max;
		}
		return _n;
	}
	function getOmitPreviewTag(_n,_type,_isPub){
		if (_isPub) return "";
		var max = _getMaxLeng(_type);
		if(max < _n){
			 return '<div class="_cms_blockAnno">※ページ編集画面では、'+max+"件以上は、省略して表示されます。</div>" ;
		}
		return "";
	}
	function getListLeng(_data,_leng){
		if(!_data.setting) _data.setting = {}
		if(!_data.setting.texts) _data.setting.texts = {}
		if(!_data.setting.texts.max) _data.setting.texts.max = _leng;
		var max = _data.setting.texts.max;
		if(max){
			if(!isNaN(max)){
				_leng = (_leng < max) ? _leng : max;
			}
		}
		return _leng;
	}
	/* ---------- ---------- ---------- */
	
	function isReplaceTag(_type){
		if(!_type) return false;
		if(_type == "object.replaceTexts") return true;
		if(_type == "replace.div")return true;
		return false;
	}
	
	/* ---------- ---------- ---------- */
	
	function getCaption(_extra){
		var tag = "";
		if(_extra){
			if(_extra.head){
				tag += '<div class="caption">' +_extra.head+ '</div>\n'
			}
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	return {
		getElementInfo: getElementInfo,
		getInitData: getInitData,
		getPreview: getPreview,
		getHTML: getHTML,
		isElement: isElement,
		hasAttr: hasAttr,
		getTypeName: getTypeName,
		getTypeName_t1: getTypeName_t1,
		hasInputType: hasInputType,
		getGridMaxLeng: getGridMaxLeng,
		
		getOmitLeng:getOmitLeng,
		getOmitPreviewTag:getOmitPreviewTag,
		getListLeng:getListLeng,
		
		isReplaceTag:isReplaceTag,
		
		getCaption: getCaption
	}
})();

window.PageElement_Util = PageElement_Util;




var PageElement_HTMLService = (function(){
	
	var tag = "";
	
	function getExportTag(o, _extra, _deep) {
		return getTag(o, "export", _deep);
	}
	
	/* ---------- ---------- ---------- */

	function getTag(o, _extra, _deep) {
		if(typeof o == "string")return o;
		var tag = "";
		if (_extra == undefined) _extra = "";
		if (_deep == undefined) _deep = 1;
		//
		tag = _core(o, _extra, _deep);
		tag = tagTreatment(tag);
		tag = tag.split("_narrow-element").join("")
		return tag;
	}
	
	function _core(o,_extra,_deep){
		var tag = ""
		//if (o.attr == undefined) return;
        if(o == null) return tag;
		if (o.attr.hide) return tag;
		if(_extra == "export"){
			//
		} else{
			if (o.attr["embedName"])return tag;
			if (o.attr["pubFileName"])return tag;
		}
	
		var tb = getTab(_deep);
		var attr = CMS_BlockAttrU.getHTMLArrs(o.attr);
		
		//基本的なタグや、Objectを処理
		if(PageElement_Util.isElement(o.type)){
			var t = PageElement_Util.getHTML(o,attr,tb);
			if(t != undefined){
				tag += t;
			}
			return tag;
		}
		
		//レイアウトタグ生成
		/* ---------- ---------- ---------- */
		
		var type = o.type;
		var data = o.data;
		
		/* ---------- ---------- ---------- */
		if (_extra == "td") {
			
			attr = attr.split('class="').join('class="cms-column-col ');
			tag += tb + '<div ' + attr + '>\n';
			for (var i = 0; i < data.length; i++) {
				tag += _core(data[i], "", _deep + 1);
			}
			if(data.length == 0) tag += "<br>";
			tag += "\n" + tb + "</div>\n";
		
		/* ---------- ---------- ---------- */
		} else if (type == "replace.div") {
			tag += ""
		
		/* ---------- ---------- ---------- */
		} else if (type == "layout.div")  {
			attr = attr.split('class="').join('class="cms-layout ');
			if(o.extra){
				var bg = CMS_ImgBlockU.getBgStyle(o.extra,true);
				if(attr.indexOf("style=") == -1){
					attr = attr.split('class="').join('style="" class="');
				}
				attr = attr.split('style="').join('style="' + bg);
			}
			
			if (_deep != 0) tag += tb + '<div ' + attr + ' >\n';
			for (var i = 0; i < data.length; i++) {
				tag += _core(data[i], "", _deep + 1); //コンポジット
			}
			if (_deep != 0) tag += tb + "</div>\n";
		
		/* ---------- ---------- ---------- */
		} else if (type == "layout.cols") {
			var _d = o.attr.devide;
			if (o.attr.devide == undefined) _d = ",,,,,,,,,,,,,,,";
			d = _d.split(",");
			//
			attr = attr.split('class="').join('class="cms-column ');
			tag += tb + '<div ' + attr + '>\n';
			for (var i = 0; i < data.length; i++) {
				tag += _core(data[i], "td", _deep + 1); //コンポジット
			}
			tag += tb + "</div>\n";
		
		/* ---------- ---------- ---------- */
		//h1など、上記にでてこなかったタグを処理する
		} else {
			try {
				var ss = data.split("\n").join("<br>\n" + tb);
				tag += tb + '<' + type + attr + '>' + ss + '</' + type + '>\n';
			} catch (e) {}
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	function getTab(_deep){
		var s = ""
		for (var i = 1; i < _deep; i++) { s += "	"; }
		return s;
	}
	
	/* ---------- ---------- ---------- */
	
	function tagTreatment(_s){
		_s = _s.split("  ").join(" ");
		_s = _s.split('=" ').join('="');
		_s = _s.split('class="" ').join('');
		_s = _s.split(' >').join('>');
		return _s;
	}
		
	/* ---------- ---------- ---------- */
	return {
		getExportTag: getExportTag,
		getTag: getTag
	}
})();

window.PageElement_HTMLService = PageElement_HTMLService;


PageElement.tag = {}


PageElement.tag.heading = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.heading", 
		name	: "見出し",
		name2	: "＜H1＞〜＜H6＞",
		inputs	: ["HEADLINE","CLASS","CSS"],
		// cssDef	: {file:"block",key:"[見出しブロック]",tag:"heading"}
		cssDef	: {selector:"{h1-h6}"}
	});
	
/* {  "node" : "h1.designA", "name" : "注釈" } */

	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		
		var o = {};
		o.type = _.pageInfo.id;
		o.data = {
			heading: "h1",
			main: 	{ text: "", link: null },
			right: 	{ text: "", link: null }
		}
		o.data.heading = _param;
		if(_param == "h1")o.data.main.text = "<em>h1</em> {{PAGE_NAME}} <small>headline1</small>";//<em>H1</em> 
		if(_param == "h2")o.data.main.text = "<em>h2</em> 大見出し <small>headline2</small>";//<em>H2</em> 
		if(_param == "h3")o.data.main.text = "<em>h3</em> 中見出し <small>headline3</small>";//<em>H3</em> 
		if(_param == "h4")o.data.main.text = "<em>h4</em> 小見出し <small>headline4</small>";//<em>H4</em> 
		if(_param == "h5")o.data.main.text = "<em>h5</em> 小見出し2 <small>headline5</small>";//<em>H4</em> 
		if(_param == "h6")o.data.main.text = "<em>h6</em> 小見出し3 <small>headline6</small>";//<em>H4</em> 
		
		o.attr = { css:"default " }
		o.attr.class = o.attr.css;
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		if(data.main.text == "" ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var nn = data.heading.split("h").join("");
			tag += getHeaderTag(nn, data,attr, "");
		}
		return tag;
	}
	
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		var tab = (_tab != undefined) ? _tab:"";
		var tag = "";
		{
			var nn = data.heading.split("h").join("")
			tag += getHeaderTag(nn, data,attr, _tab);
		}
		return tag;
		
	}
	
	function getHeaderTag (_tag,_data,_attr,_tab) {
		_attr = _attr.split('class="').join('class="cms-h ');
		var s = {
			main : "",
			right : ""
		}
		try{
			s.main 	 = CMS_AnchorU.getWapperTag(_data.main.link, 		_data.main.text);
			s.right  = CMS_AnchorU.getWapperTag(_data.right.link, 	_data.right.text);
		}catch( e ){}
		
		var tag = "";
						tag += _tab + '	<h{TAG} '+_attr+'>' 
		if(s.right) 	tag += _tab + '<span class="cms-h-right">' + s.right + '</span>'
						tag += s.main
						tag += '</h{TAG}>\n'
		tag = tag.split("{TAG}").join(_tag);
		
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.p = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.p", 
		name	: "文書",
		name2	: "＜P＞",
		inputs	: ["TEXTAREA","CLASS","CSS"],
		// cssDef	: { file:"block",key:"[文書ブロック]",tag:"p"}
		cssDef	: {selector:".cms-p"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = PageElement_JText.P
		o.attr = { css:"default " }
		o.attr.class = o.attr.css;
		
		if(_param){
			o.data = _param.text;	
		}
		return o;
	}
	
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-p ');
		var tag = "";
		if(data == "") {
			tag += '<span class="_no-input-data">テキストを入力...</span>';
		} else{
			tag += '<div>';
			tag += '<p ' + attr + '>' + data.split("\n").join("<br>\n") + '</p>';
			tag += '</div>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-p ');
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += tab + '<p ' + attr+'>' + data.split("\n").join("<br>\n" + tab) + '</p>\n' ;
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.tag.code = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.code", 
		name	: "コード",
		name2	: "＜CODE＞",
		inputs	: ["CAPTION","CLASS","CSS"],
		// cssDef	: {file:"block",key:"[コードブロック]"}
		cssDef	: {selector:".cms-code"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = 'var s = "hello world!";'
		o.attr = { css:"default " }
		o.attr.class = o.attr.css;
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-code ');
		var extra = _o.extra;
		
		var tag = "";
		if(data == "") {
			tag += '<span class="_no-input-data">テキストを入力...</span>';
		} else{
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<code>' + _core(data) + '</code>\n';
			tag += '</div>\n';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-code ');
		var extra = _o.extra;
		
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<code>' + _core(data) + '</code>\n';
			tag += '</div>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	function _core(t){
		t = t.split("&").join("&amp;");
		t = t.split("<").join("&lt;");
		t = t.split(">").join("&gt;");
		t = t.split("\t").join('<span class="tag">	</span>');
		t = t.split("\n").join("<br>\n");
		return t;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.tag.blockquote = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.blockquote", 
		name	: "引用",
		name2	: "＜BLOCKQUOTE＞",
		inputs	: ["TEXTAREA","CLASS","CSS"],
		// cssDef	: {file:"block",key:"[引用ブロック]"}
		cssDef	: {selector:".cms-bq"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = '文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n<small>文書が入ります。文書が入ります。文書が入ります。</small>'
		o.attr = { css:"default" }
		o.attr.class = o.attr.css;
		return o;
	}
	
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-bq ');
		var tag = "";
		if(data == "") {
			tag += '<span class="_no-input-data">テキストを入力...</span>';
		} else{
			tag += '<blockquote ' + attr + '>' + data.split("\n").join("<br>\n") + '</blockquote>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-bq ');
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += tab + '<blockquote ' + attr+'>' + data.split("\n").join("<br>\n" + tab) + '</blockquote>\n' ;
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

 
PageElement.tag.btn = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.btn", 
		name	: "ボタン",
		name2	: "＜A＞",
		inputs	: ["CLASS","CSS"],
		cssDef	: {selector:".cms-btn"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = CMS_AnchorU.getInitData();
		o.data.href="#"
		
		if(_param){
			o.data.href = _param.url;	
			o.data.text = URL_U.getFileName(_param.url);
		}
		o.attr = {}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-btn ');
		var tag = ""
			tag += '<div '+attr+'>' + CMS_AnchorU.getAnchorTag(data,"",false,true) + '</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-btn ');
		var tab = (_tab != undefined) ? _tab:"";
		
		var idTag = ""
		if(_o.id) idTag = ' id="'+_o.id+'"';
		var tag = "";
			tag += _tab + '<div '+attr+'>' + CMS_AnchorU.getAnchorTag(data , idTag,true,true) + '</div>';
		
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.anchor = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.anchor", 
		name	: "ページ内リンク",
		name2	: "＜A＞",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = "anchor_id";
		o.attr = {};
		return o;
	}
	
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		if(data == ""){
			tag += '<span class="_no-input-data">IDを入力...</span>'
		} else{
			tag += '<div class="_element_anchor"> ' + data + '</div>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += tab+'<div class="_element_anchor" id="'+data+'">　</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.img = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.img", 
		name	: "イメージ",
		name2	: "＜DIV＞",
		inputs	: ["CLASS","CSS"],
		// cssDef	: {file:"block",key:"[画像ブロック]"}
		cssDef	: {selector:".cms-img"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		var o = {};
		o.type = _.pageInfo.id;
		
		o.data = {
			img: "width:200,height:140",
			link: null, 
			isZoom: false,
			//
			isLayoutMode:false,
			layout:null,
			onlyImgTag:false
		}
		o.extra = {
			caption: "",
			width: "",
			margin: "",
			layout_width:""
		}
		if(_param){
			o.data.img = _param.url;	
		}
		o.attr = { css:"default "}
		o.attr.class = o.attr.css;
		return o;
	}

	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		if(_isPub ==undefined) _isPub = false
		
		if(data["layout"] == undefined) data.layout = {};
		if(data["isLayoutMode"] == undefined) data.isLayoutMode = false;
		
		var tag = ""
		if(data == ""){
			tag += '<span class="_no-input-data">画像URLを入力...</span>';
		} else{
			
			//パスとwidthを設定
			var _w = extra["width"];
			var _h = extra["height"];
			var _path = "";
			if(data.isLayoutMode) {
				_path = data.layout;
				if(!_path["canvas"]){
					_path = ImageMapExport.treatParam(_path);
					_path.list.push({
						type : "item.image",
						hide: false,
						rect: {
							left: 0,
							top: 0,
							width: 100,
							height: 100
						},
						data : { src : data.img }
					})
				}
			} else{ 
				_path = data.img;
			}
			
			//IMGタグ生成
			var imgTag = CMS_ImgBlockU.getImageTag({
				path	: _path,
				isPub	: _isPub,
				width	: (_w) ? "100%" : "",
				ratio	: _h,
				alt		: extra["alt"],
				attr	: ""
			});
			
			//リンクあれば設定
			var link = CMS_AnchorU.getZoomLink(data.link , _path , data.isZoom);
			
			//Aタグをwrap
			imgTag 	= CMS_AnchorU.getWapperTag(link, imgTag );
			
			// onlyImgTag
			if(data.onlyImgTag){
				//IMGタグのみ
				tag += imgTag + '\n';
				
			}else{
				//IMGブロックでwrap
				attr = CMS_ImgBlockU.attrInit(attr);
				attr = attr.split('class="').join('class="cms-img ');
				if(_h){ if(! _w) _w = "100%"; }
				if(_w) attr = attr.split('style="').join('style="width:' + _w + "; ");
				tag += '<div ' + attr + '>\n';
				tag += imgTag + '\n';
				tag += CMS_ImgBlockU.getCaption(extra["caption"]) + '\n';
				tag += '</div>\n';
			}
		}
		return tag;
	}

	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return this.getPreview(_o,true);
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.tag.margin = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.margin", 
		name	: "高さマージン",
		name2	: "＜DIV＞",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = "20px";
		o.attr ={css:"default"}
		o.attr.class = o.attr.css;
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-margin ');
		var tag = ""
	
		if(data == ""){
			tag += '<span class="_no-input-data">数値を入力...</span>'
		} else{
			data = data.split(" ").join("");
			if(data.charAt(0) == "-"){
				attr = attr.split('style="').join('style="height:15px;"');
			} else{
				attr = attr.split('style="').join('style="height:'+data+'"');
			}
		}
		tag += '<div '+ attr +'>マージン'+data+'</div>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-margin ');
		//
		var tag = "";
		data = data.split(" ").join("");
		if(data.charAt(0) == "-"){
			attr += ' style="height:0px;margin-top:'+data+'"';
		} else{
			attr += ' style="height:'+data+'"';
		}
		tag += '<div '+ attr +'></div>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.note = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.note", 
		name	: "制作用ノート",
		name2	: "",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = "このテキストは制作用のノートです。HTMLには出力されません。";
		o.attr ={}
		return o;
	}
	
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
	
		if(data == ""){
			tag += '<span class="_no-input-data">制作用ノートを入力...</span>'
		} else{
			tag += '<div class="_element_note"><i class="fa fa-lg fa-comment-o"></i> <b>制作用ノート：</b>' + CMS_TagU.t_2_tag(data) + '</div>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.place = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.place", 
		name	: "制作用アタリ",
		name2	: "",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = "このテキストは制作用のアタリです。HTMLに出力されます。";
		// o.attr ={width:"",height:"200px"}
		o.attr = {}
		o.extra = {width:"",height:"200px"};
		return o;
	}
	
	
	/* ---------- ---------- ---------- */

	_.getPreview = function(_o) {
		var data = _o.data;
		var attr = _o.attrs;
		
		var extra = _o.extra;
		var tag = ""

		if (data == "") {
			tag += '<span class="_no-input-data">アタリ...</span>';
		} else {
			var _t = '<div class="_element_place" style="{W}{H}"><p><i class="fa fa-lg fa-comment "></i> {V}</p></div>\n';
			var _w = (extra["width"]) ? "width:" + extra.width + ";" : "";
			var _h = (extra["height"]) ? "height:" + extra.height + ";" : "";
				_t = _t.split("{W}").join(_w);
				_t = _t.split("{H}").join(_h);
				_t = _t.split("{V}").join(CMS_TagU.t_2_tag(data));
			tag += _t;
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
		
		var _t = '<div class="_element_place" style="{W}{H}"><p><i class="fa fa-lg fa-comment "></i> {V}</p></div>\n';
		var _w = (extra["width"]) ? "width:" + extra.width + ";" : "";
		var _h = (extra["height"]) ? "height:" + extra.height + ";" : "";
			_t = _t.split("{W}").join(_w);
			_t = _t.split("{H}").join(_h);
			_t = _t.split("{V}").join(CMS_TagU.t_2_tag(data));
		tag += tab+_t;
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.html = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.html", 
		name	: "HTML",
		name2	: "",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var s = ""
			s += '<b>\n'
			s += 'HTML\n'
			s += '</b>\n'
			s += '<style></style>\n'
			s += '<script></script>\n'
		o.data = s
		o.attr ={preview:""}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";

		if(data == ""){
			tag += '<span class="_no-input-data">HTML,JS,CSSデータを入力...</span>'
		} else{
			if(_o.preview) {
				tag += '<div class="_element_html">' + data + '</div>';
			} else{
				tag += '<div class="_element_html_code">'+CMS_TagU.tag_2_t(data).split("\n").join("<br>")+'</div>';
			}
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += data
			// tag += data;
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.tag.js = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.js", 
		name	: "JavaScript",
		name2	: "",
		inputs	: []
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var s = ""
			s += '//ページ公開時に、JavaScriptコードを実行し、返り値を出力します。\n\n';
			s += '(function(_param){\n';
			s += '	var tag = "";\n';
			s += '	var a = _param["{1}"];\n';
			s += '	var b = _param["{2}"];\n';
			s += '	return a + b;\n';
			s += '});\n';
		o.data = s;
		o.attr = { }
		// o.attr ={ }
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";

		if(data == ""){
			tag += '<span class="_no-input-data">JavaScriptを入力...</span>'
		} else{
			tag += '<div class="_element_js_code">'
			tag += '<div class="_code_inner">'
			tag += CMS_TagU.tag_2_t(data).split("\n").join("<br>")
			tag += '</div>';
			tag += '<div class="_anno">※ 上記のJavaScriptは、ページ公開時などに実行され、return が出力されます。</div>';
			tag += '</div>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		// var tab = (_tab != undefined) ? _tab:"";
		// throw new Error();
		var tag = "";
			try{
				var jsparam = CMS_Data.HinagataSearvice.getJSParam();
				tag += eval(data)(jsparam);
			} catch( e ){ }
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.tag.markdown = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "tag.markdown", 
		name	: "フリーテキスト",
		name2	: "＜Markdown＞",
		inputs	: ["CLASS","CSS"],
		// cssDef	: {file:"block",key:"[フリーテキストブロック]"}
		cssDef	: {selector:".cms-markdown"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var s = this.getInitText();
		o.data = s
		o.attr = { css:"default " }
		o.attr.class = o.attr.css;
		return o;
	}
	/* ---------- ---------- ---------- */
	
	_.getInitText = function(){
		var s = "";
			s += '#タイトル\n';
			s += '\n';
			s += '##大見出し\n';
			s += '文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n';
			s += '\n';
			s += '###中見出し\n';
			s += '文書が入ります。文書が入ります。文書が入ります。文書が入ります。\n';
			s += '\n';
			s += '####小見出し\n';
			s += '文書が入ります。文書が入ります。文書が入ります。\n';
			s += '\n';
			s += ' * 項目1\n';
			s += ' * 項目2\n';
			s += ' * 項目3\n';
			s += '';
		return s
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-markdown ')
		var tag = "";
		if(data == ""){
			tag += '<span class="_no-input-data">マークダウンデータを入力...</span>'
		} else{
			tag += '<div  ' + attr + ' >' + marked(data) + '</div>';
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-markdown ')
		var tab = (_tab != undefined) ? _tab:"";
		var s = marked(data);
			s = s.split('id="-"').join("");
		var tag = ""
			tag += '<div  ' + attr + ' >' + s + '</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();
PageElement.layout = {}


PageElement.layout.div = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "layout.div", 
		name	: "コンテナ",
		name2	: "＜DIV＞",
		inputs	: ["CLASS","CSS"],
		// cssDef	: {file:"block",key:"[コンテナブロック]"},
		cssDef	: {selector:".cms-layout"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var _p = PageElement_JText.P;
		
		var o = {};
			o.type = _.pageInfo.id;
			o.data = [{
				type: "tag.p",
				attr: {
					"class": "default",
					css: "default"
				},
				data: _p
			}];
			o.attr = {
				"class": "default p20 waku",
				css: "default p20 waku",
				style: ""
			}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		return "";
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.layout.cols = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "layout.cols", 
		name	: "段組み",
		name2	: "＜TABLE＞",
		inputs	: ["CLASS","CSS"],
		cssDef	: {selector:".cms-column"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		var _p = PageElement_JText.P;
		var n = Number(_param);
		
		var o = {};
		o.type = _.pageInfo.id;
		o.data = [];
		o.attr ={css:"col-p40",class:"col-p40"}
		for (var i = 0; i < n ; i++) {
			o.data.push({
				type: "layout.div",
				attr: {
					style: ""
				},
				data: [{
					type: "tag.p",
					attr: {
						"class": "default",
						css: "default"
					},
					data: _p
				}]
			});
		}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		return "";
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.layout.colDiv = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "layout.colDiv", 
		name	: "段組みセル",
		name2	: "＜TD＞",
		inputs	: ["CLASS","CSS"],
		cssDef	: {selector:".cms-column-col"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		return {};
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		return "";
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.replace = {}

PageElement.replace.div = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "replace.div", 
		name	: "Myタグ-コンテナ定義",
		name2	: "",
		inputs	: [],
		// cssDef	: {file:"block",key:"[コンテナブロック]"},
		cssDef	: {selector:".cms-replace-div"}
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var _p = PageElement_JText.P;
		
		var o = {};
			o.type = _.pageInfo.id;
			o.data = [{
				type: "tag.p",
				attr: {
					"class": "default",
					css: "default"
				},
				data: _p
			}];
			o.attr = {
				"class": "_cms_replace",
				css: " _cms_replace",
				style: "",
				replaceID: "ID名を入力",
				replaceTitle: "説明を入力"
			}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		return "";
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

PageElement.object = {}


PageElement.object.list = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.list", 
			name	: "リスト",
			name2	: "＜UL＞＜LI＞",
		inputs	: ["CLASS","CSS","DETAIL","CAPTION"],
		// cssDef	: {file:"block",key:"[リストブロック]"}
		cssDef	: {selector:".cms-ul"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リスト",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"" }),
				cells:[
					new PageModel.OG_Cell({
						id: "t1",
						name: "テキスト",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "追加リンク",
						type: CELL_TYPE.BTN,
						def: CMS_AnchorU.getInitData()
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		
		var def = {
			list: {
				texts: {},
				grid: [
					{
						publicData: "1",
						t1: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					 	anchor: CMS_AnchorU.getInitData_Blank()
					},
					{
						publicData: "1",
						t1: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: CMS_AnchorU.getInitData_Blank()
					},
					{
						publicData: "1",
						t1: "ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: CMS_AnchorU.getInitData_Blank()
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tag = "";
		attr = attr.split('class="').join('class="cms-ul clearfix ');
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0){
			tag += '<span class="_no-input-data">リストデータを入力...</span>'
		} else{
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<ul>\n';
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",false);
				if(aTag)aTag = "<br>"+aTag;
				tag += '	<li>'+CMS_TagU.t_2_tag(list[i].t1)+aTag+'</li>\n';
			}
			tag += '</ul>\n';
			tag += '</div>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		attr = attr.split('class="').join('class="cms-ul clearfix ');
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return "";
		
		var tag = "";
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<ul>\n';
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",true);
				if(aTag)aTag = "<br>"+aTag;
				tag += '	<li>'+CMS_TagU.t_2_tag(list[i].t1)+aTag+'</li>\n';
			}
			tag += '</ul>\n';
			tag += '</div>\n';
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.dl = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.dl", 
			name	: "Q&Aリスト",
			name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[Q&Aリストブロック]"}
		cssDef	: {selector:".cms-qa"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "設定",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"", 
					note:"",
					image	: '<div class="ss_guide _qa"></div>'
					}),
				cells:[
				new PageModel.OG_Cell({
					id:"accordion",	
					name:"アコーディオンにするか？",
					type:CELL_TYPE.SELECT , 
					vals:SS.SelectVals.YN,
					view:"",
					def:"0",
					note:"開閉メニュースタイルにすることができます"
				}),
				]
			},
			gridData:null
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リスト",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "t1",
						name: "質問",
						type: CELL_TYPE.MULTI,
						def: "Q.サンプルの文書です？"
					}),
					new PageModel.OG_Cell({
						id: "t2",
						name: "解答",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "追加リンク",
						type: CELL_TYPE.BTN,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			setting: {
				texts: {
					accordion: "0"
				},
				grid: []
			},
			list: {
				texts: {},
				grid: [
					{
						publicData: "1",
						t1: "Q.サンプルの文書です？",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					 	anchor: { "href": "#", "target": "_blank", "text": "さらに詳しく <i class='fa fa-arrow-right'></i>", "class_": "cms-btn-text-box  cms-btn-size-m", "image": "" }
					},
					{
						publicData: "1",
						t1: "Q.サンプルの文書ですので、ご注意ください。？",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: CMS_AnchorU.getInitData_Blank()
					},
					{
						publicData: "1",
						t1: "Q.サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。？",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitData_Blank()
					},
					{
						publicData: "1",
						t1: "Q.サンプルの文書ですので、ご注意ください。？",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitData_Blank()
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default",style:""};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		attr = attr.split('class="').join('class="cms-qa ');
			var list = CMS_U.getPublicList(data.list.grid);
		
		if(list.length == 0){
			tag += '<span class="_no-input-data">Q&Aデータを入力...</span>'
		} else {
			tag += '<dl '+attr+'>\n';
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",false);
				if(aTag)aTag = "<br>"+aTag;
				tag += '	<dt>'+CMS_TagU.t_2_tag(list[i].t1)+'</dt>\n';
				tag += '	<dd>'+CMS_TagU.t_2_tag(list[i].t2)+aTag+'</dd>\n';
			}
			tag += '</dl>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		attr = attr.split('class="').join('class="cms-qa ');
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return "";
		
		if(data.setting.texts.accordion == "1"){
			attr = attr.split('class="').join('class="cms-accordion ');
		}
		{
			tag += '<dl '+attr+'>\n';
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",true);
				if(aTag)aTag = "<br>"+aTag;
				tag += '	<dt>'+CMS_TagU.t_2_tag(list[i].t1)+'</dt>\n';
				tag += '	<dd>'+CMS_TagU.t_2_tag(list[i].t2)+aTag+'</dd>\n';
			}
			tag += '</dl>\n';
			tag += '<script>\n'
			tag += '$(function(){\n';
			tag += '	$(".cms-accordion dt").cms_accordion();\n';
			tag += '});\n';
			tag += '</script>\n';
		}
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.talk = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.talk", 
			name	: "インタビュー",
			name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[インタビューブロック]"}
		cssDef	: {selector:".cms-talk"}
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:50,height:50", width: "50px", ratio: "1:1" }

	_.grids = [
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リスト",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "画像",
						type: CELL_TYPE.IMAGE,
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "t1",
						name: "名前",
						type: CELL_TYPE.SINGLE,
						def: "田中"
					}),
					new PageModel.OG_Cell({
						id: "t2",
						name: "発言",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		
		var def = {
			list: {
				texts: {},
				grid: [
					{
						publicData: "1",
						image: defImage,
						t1: "田中",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					},
					{
						publicData: "1",
						image: defImage,
						t1: "田中",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					},
					{
						publicData: "1",
						image: defImage,
						t1: "長谷川",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。<br><br>サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					},
					{
						publicData: "1",
						image: defImage,
						t1: "田中",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default",style:""};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		if(_isPub ==undefined) _isPub = false
		var tag = "";
		attr = attr.split('class="').join('class="cms-talk ');
			var list = CMS_U.getPublicList(data.list.grid);
		
		if(list.length == 0){
			tag += '<span class="_no-input-data">インタビューデータを入力...</span>'
		} else{
			tag += '<table '+attr+'>\n';
			
			for (var i = 0; i < list.length ; i++) {
				var t = ""
					t += '	<tr>\n';
					t += '		<th>{IMG}{T1}</th>\n';
					t += '		<td>{T2}</td>\n';
					t += '	</tr>\n';
					t = t.split("{T1}").join(CMS_TagU.t_2_tag(list[i].t1))
					t = t.split("{T2}").join(CMS_TagU.t_2_tag(list[i].t2))
					var imgTag = ""
					if(list[i].image) {
						var img = list[i].image;
						imgTag = CMS_ImgBlockU.getImageTag({
							path	: img.path,
							isPub	: _isPub,
							width	: img.width,
							ratio	: img.ratio,
							alt		: "",
							attr	: ""
						});
					}
					t = t.split("{IMG}").join(imgTag)
				tag += t;
			}
			tag += '</table>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return "";
		
		return this.getPreview(_o,true);
		
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.table = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.table", 
		name	: "表組",
		name2	: "＜TABLE＞",
		inputs	: ["CLASS","CSS","DETAIL","CAPTION"],
		// cssDef	: {file:"block",key:"[表組ブロック]"}
		cssDef	: {selector:".cms-table"}
	});

	/* ---------- ---------- ---------- */
	
	//セルの準備。設定でデフォルトセル数を設定
	var maxCellLeng = 15;
	var tableCells = [];
	
	if (window["GRID_EDIT_MAX_CELL"]) maxCellLeng = GRID_EDIT_MAX_CELL["TABLE"];
	for (var i = 0; i < maxCellLeng ; i++) {
		var n = i+1;
		var def = "";
		if(i == 0) def = "サンプルの文書";
		if(i == 1) def = "サンプルの文書ですので、ご注意ください";
		var p = new PageModel.OG_Cell({
			id: "c" + n,
			name: n,
			type: CELL_TYPE.TABLE,
			style: "",
			view: "",
			def: def
		});
		tableCells.push(p);
	}

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "基本設定",
				note 	: "",
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"",
					image	: '<div class="ss_guide _table"></div>'
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "row1",
						name: "1行目を<br>見出し＜TH＞にする",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "row2",
						name: "2行目...",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "row3",
						name: "3行目...",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "col1",
						name: "1列目を<br>見出し＜TH＞にする",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "col2",
						name: "2列目...",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "col3",
						name: "3列目...<br><br><br>",
						type: CELL_TYPE.CHECK
					}),
					new PageModel.OG_Cell({
						id: "swipe",
						name: "スマホで<br>スワイプ化する",
						type: CELL_TYPE.CHECK
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "table",
				name	: "テーブルデータ",
				style	: "",
				note 	: "空のセルは、出力されません。空のセルを表示したい場合は、-(ハイフン)を入力してください。"
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:tableCells
			}
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "cols",
				name	: "列(縦方向のセル)設定",
				note 	: "",
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "wides",
						name: "幅リスト",
						type: CELL_TYPE.SINGLE,
						note:"列のセル &lt;col&gt; ごとの幅属性 ( width= ) を , (カンマ区切り)で入力。無指定の場合は * (アスタリスク)。例：[ 20%,20%,*,* ]"
					}),
					new PageModel.OG_Cell({
						id: "attrs",
						name: "属性リスト",
						type: CELL_TYPE.SINGLE,
						style	: "width:500px",
						note:"列のセル &lt;col&gt; ごとの属性を , (カンマ区切り)で入力。無指定の場合は * (アスタリスク)。例：[style=\"width:20%\",style=\"width:20%\";,*,* ]"
					})
				]
			},
			gridData:null
		})
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = {
			"setting": {
				"texts": {
					"row1": "1",
					"col1": "1",
					"wides": "20%,*,*,*,*"
				},
				"grid": []
			},
			"cols": {
				"texts": {
					"wides": "20%,*,*,*,*"
				},
				"grid": []
			},
			"table": {
				"texts": {},
				"grid": [
					{
						"publicData": "1",
						"c1": "項目名",
						"c2": "項目名"
					},
					{
						"publicData": "1",
						"c1": "項目名",
						"c2": "サンプルの文書ですので、ご注意ください\n <a href='http://www.google.co.jp'><i class='fa fa-caret-right '></i> リンク</a> "
					},
					{
						"publicData": "1",
						"c1": "項目名",
						"c2": "サンプルの文書ですので、ご注意ください"
					},
					{
						"publicData": "1",
						"c1": "項目名",
						"c2": "サンプルの文書ですので、ご注意ください"
					}
				],
				"_state": {
					"currentRow": 0,
					"currentPage": 0,
					"fitWide": true,
					"hideCols": ""
				}
			}
		}
		o.attr = {css:"default w100p",style:""};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tag = "";
		
		attr = attr.split('class="').join('class="cms-table ');
		var list = CMS_U.getPublicList(data.table.grid);
		if(list.length == 0){
				tag += '<span class="_no-input-data">表データを入力...</span>'
		} else{
			var leng = PageElement_Util.getOmitLeng(list.length,"table");
			var row1 = data.setting.texts.row1;
			var row2 = data.setting.texts.row2;
			var row3 = data.setting.texts.row3;
			
			var col1 = data.setting.texts.col1;
			var col2 = data.setting.texts.col2;
			var col3 = data.setting.texts.col3;
			tag += '<div>\n'
			tag += '<table '+attr+'>\n'
			tag += this.getCaption(extra)
			tag += this.getColTags(data);
			tag += '<tbody>\n'
			
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				for (var ii = 1; ii < maxCellLeng ; ii++) {
					if(list[i]["c"+ii]){
						var v = list[i]["c"+(ii)];
						if(v == "-") v = ""; 
						var att = CMS_TagU.getCellAttr(v);
						v = CMS_TagU.deleteCellAttr(v);
						
						var b = false;
						if(row1 == "1" && i == 0) b= true;
						if(row2 == "1" && i == 1) b= true;
						if(row3 == "1" && i == 2) b= true;
						if(col1 == "1" && ii == 1) b= true;
						if(col2 == "1" && ii == 2) b= true;
						if(col3 == "1" && ii == 3) b= true;
						   
						var tname = (b) ? "th" : "td";
						tag += '		<'+tname+' '+att+'>' + CMS_TagU.t_2_tag(v) + '</'+tname+'>\n';
					}
				}
				tag += '	</tr>\n';
			}
			tag += "</tbody>\n";
			tag += "</table>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"table")
			tag += '</div>\n'
		}
		return tag;
	}
	
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tag = "";

		attr = attr.split('class="').join('class="cms-table ');
		var list = CMS_U.getPublicList(data.table.grid);
		if(list.length == 0) return "";
			var swipe = data.setting.texts.swipe;
			var swipeTag = (function(_b){ 
				if(_b == "1") return { start:'<div class="tableWapper">\n',end: "</div>\n"};
				return  { start:"", end:"" }
			})(swipe);
			tag += swipeTag.start;
			
			var leng = list.length;
			var row1 = data.setting.texts.row1;
			var row2 = data.setting.texts.row2;
			var row3 = data.setting.texts.row3;
			
			var col1 = data.setting.texts.col1;
			var col2 = data.setting.texts.col2;
			var col3 = data.setting.texts.col3;
			
			tag += '<table '+attr+'>\n'
			tag += this.getCaption(extra);
			tag += this.getColTags(data);
			tag += '	<tbody>\n'
			
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				for (var ii = 1; ii < maxCellLeng ; ii++) {
					if(list[i]["c"+ii]){
						var v = list[i]["c"+(ii)];
						if(v == "-") v = ""; 
						var att = CMS_TagU.getCellAttr(v);
						v = CMS_TagU.deleteCellAttr(v);
						
						var b = false;
						if(row1 == "1" && i == 0) b= true;
						if(row2 == "1" && i == 1) b= true;
						if(row3 == "1" && i == 2) b= true;
						if(col1 == "1" && ii == 1) b= true;
						if(col2 == "1" && ii == 2) b= true;
						if(col3 == "1" && ii == 3) b= true;
						   
						var tname = (b) ? "th" : "td";
						tag += '		<'+tname+' '+att+'>' + CMS_TagU.t_2_tag(v) + '</'+tname+'>\n';
					}
				}
				tag += '	</tr>\n';
			}
			tag += "	</tbody>\n";
			tag += "</table>\n";
			tag += swipeTag.end
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getColTags = function(_data){
		var tag =  "";
		if(_data.cols){
			if(_data.cols.texts){
				var wides = [];
				var attrs = [];
				
				function __core(_val){
					var a = []
					var vals = _val.split(" ").join("").split(",");
					for (var i = 0; i < vals.length ; i++) {
						a.push(vals[i]);
					}
					return a;
				}
				
				if(_data.cols.texts.wides){
					wides = __core(_data.cols.texts.wides);
				}
				if(_data.cols.texts.attrs){
					attrs = __core(_data.cols.texts.attrs);
				}
				tag += '		<colgroup>\n'
				for (var i = 0; i < maxCellLeng ; i++) {
					var ts = ""
					if(wides[i]) ts+= 'width="'+wides[i]+'" ';
					if(wides[i] == "") ts+= 'width="" ';
					if(attrs[i]) ts+= attrs[i]+' ';
					if(ts) tag +='			<col ' + ts + '>\n';
				}
				tag += '		</colgroup>\n'
			}
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getCaption = function(_extra){
		var tag =  ""
		if(_extra){
			if(_extra.head){
				tag += '	<caption>' +_extra.head+ '</caption>\n'
			}
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.news = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.news", 
		name	: "ニュースリスト",
		name2	: "＜TABLE＞",
		guide	: "block/object.news",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[ニュースリストブロック]"}
		cssDef	: {selector:".cms-news"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
					id		: "setting",
					name	: "ニュース一覧",
					note 	: ""
				}),
			textData:{
				info:new PageModel.OG_SubInfo({
					 name:""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "max",
						name: "最大出力件数",
						type: CELL_TYPE.SINGLE,
						style: SS.repID20,
						def: "999"
					})
				]
			},
			gridData:null
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
					id		: "news",
					name	: "ニュース一覧",
					note 	: ""
				}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ 
				id		: "news",
				name	: "ニュース一覧",
				note 	: ""
			}),
				cells:[
					new PageModel.OG_Cell({
						id: "date",
						name: "日時",
						type: CELL_TYPE.SINGLE,
						def: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD")
					}),
					new PageModel.OG_Cell({
						id: "t1",
						name: "テキスト",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書"
					}),
					new PageModel.OG_Cell({
						id: "t2",
						name: "詳細",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})

		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			setting: {
				texts: {
					max: 999
				},
				grid: []
			},
			news: {
				texts: {},
				grid: [
					{
						publicData: "1",
						date: "2013/02/25",
						// category: "<span class='news-a'>会社情報<span>",
						t1: "会社案内ページを更新しました。",
						t2: "",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date: "2013/03/25",
						// category: "<span class='news-b'>製品情報<span>",
						t1: "製品ページを更新しました。",
						t2: "製品ページを更新しました。新製品のお知らせや、開発中の製品のプレビューもご覧いただけます。",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date: "2013/01/25",
						// category: "<span class='news-c'>お知らせ<span>",
						t1: "ホームページを公開しました。",
						t2: "ホームページを公開しました。今後ともよろしくお願いいたします。",
						anchor: { href: "",target:"" }
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	
	_.hasData = function(_data){
		if (!_data) return false;
		if (!_data.news) return false;
		if (!_data.news.grid) return false;
		if(_data.news.grid.length == 0) return false;
		return true;
	}
	
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
			
		var tag = "";
		if(! this.hasData(data)){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var list = CMS_U.getPublicList(data.news.grid);
			var leng = PageElement_Util.getOmitLeng(list.length,"news",_isPub);
				leng = PageElement_Util.getListLeng(data,leng);
			attr = attr.split('class="').join('class="cms-news ');
			tag += '<div ' + attr + '>\n';				
			for (var n = 0; n < leng ; n++) {
				tag += '<div class="news-row clearfix">\n';
				tag += '	<div class="news-cell-date"><span class="news-date">' + list[n].date + '</span></div>\n';
				// tag += '	<div class="news-cell-category ">' + list[n].category + '</div>\n';
				tag += '	<div class="news-cell-text">'
				tag += (function(__){ 
					var _s = CMS_TagU.t_2_tag(__.t1);
					if(CMS_TagU.hasLink(__.anchor)){
						_s = '<a '+CMS_TagU.getLinkTag(__.anchor)+'>' + _s + '</a>';
					}
					_s = '	<div class="news-_s">' + _s 
					_s += '	<span class="news-date2">( '+__.date+')</span>\n'
					_s += '	</div>';
					return _s;
				})(list[n]);
				if(isFilledText(list[n].t2)){
					tag += '	<div class="news-body">'+ CMS_TagU.t_2_tag(list[n].t2) + "</div>\n";
				}
				tag += '	</div>\n';
				tag += '</div>\n';
			}
			tag += "</div>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"news",_isPub);
		}
		return tag;
	}
	_.getHTML = function(_o){
		return this.getPreview(_o ,true);
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.newsB = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.newsB", 
		name	: "ニュースリスト(カテゴリ)",
		name2	: "＜TABLE＞",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[ニュースリスト(カテゴリ)ブロック]"}
		cssDef	: {selector:".cms-newsB"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
					id		: "setting",
					name	: "ニュース一覧",
					note 	: ""
				}),
			textData:{
				info:new PageModel.OG_SubInfo({
					 name:""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "max",
						name: "最大出力件数",
						type: CELL_TYPE.SINGLE,
						style: SS.repID20,
						def: "999"
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "news",
				name	: "ニュース一覧",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ 
					id		: "news",
					name	: "ニュース一覧",
					note 	: ""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "date",
						name: "日時",
						type: CELL_TYPE.SINGLE,
						def: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD")
					}),
					new PageModel.OG_Cell({
						id: "category",
						name: "カテゴリ",
						type: CELL_TYPE.MULTI,
						def: "<span class='news-a'>会社情報</span>"
					}),
					new PageModel.OG_Cell({
						id: "t1",
						name: "テキスト",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書"
					}),
					new PageModel.OG_Cell({
						id: "t2",
						name: "詳細",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})


		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			setting: {
				texts: {
					max: 999
				},
				grid: []
			},
			news: {
				texts: {},
				grid: [
					{
						publicData: "1",
						date: "2013/02/25",
						category: "<span class='news-a'>会社情報</span>",
						t1: "会社案内ページを更新しました。",
						t2: "",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date: "2013/03/25",
						category: "<span class='news-b'>製品情報</span>",
						t1: "製品ページを更新しました。",
						t2: "製品ページを更新しました。新製品のお知らせや、開発中の製品のプレビューもご覧いただけます。",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date: "2013/01/25",
						category: "<span class='news-c'>お知らせ</span>",
						t1: "ホームページを公開しました。",
						t2: "ホームページを公開しました。今後ともよろしくお願いいたします。",
						anchor: { href: "",target:"" }
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	
	_.hasData = function(_data){
		if (!_data) return false;
		if (!_data.news) return false;
		if (!_data.news.grid) return false;
		if(_data.news.grid.length == 0) return false;
		return true;
	}
	
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
			
		var tag = "";
		if(! this.hasData(data)){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var list = CMS_U.getPublicList(data.news.grid);
			var leng = PageElement_Util.getOmitLeng(list.length,"news",_isPub);
				leng = PageElement_Util.getListLeng(data,leng);
			attr = attr.split('class="').join('class="cms-newsB ');
			tag += '<div ' + attr + '>\n';				
			for (var n = 0; n < leng ; n++) {
				tag += '<div class="news-row clearfix">\n';
				tag += '	<div class="news-cell-date"><span class="news-date">' + list[n].date + '</span></div>\n';
				tag += '	<div class="news-cell-category ">' + list[n].category + '</div>\n';
				tag += '	<div class="news-cell-text">'
				tag += (function(__){ 
					var _s = CMS_TagU.t_2_tag(__.t1);
					if(CMS_TagU.hasLink(__.anchor)){
						_s = '<a '+CMS_TagU.getLinkTag(__.anchor)+'>' + _s + '</a>';
					}
					_s = '	<div class="news-_s">' + _s 
					_s += '	<span class="news-date2">( '+__.date+')</span>\n'
					_s += '	</div>';
					return _s;
				})(list[n]);
				if(isFilledText(list[n].t2)){
					tag += '	<div class="news-body">'+ CMS_TagU.t_2_tag(list[n].t2) + "</div>\n";
				}
				tag += '	</div>\n';
				tag += '</div>\n';
			}
			tag += "</div>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"news",_isPub);
		}
		return tag;
	}
	_.getHTML = function(_o){
		return this.getPreview(_o ,true);
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();

//PageElement.object.imageTexts 20150515 delete

PageElement.object.images = (function(){
    var _ = new PageModel.Object_();

	/* ---------- ---------- ---------- */

    _.pageInfo = new PageModel.Object_Info({
			id 		: "object.images",
			name	: "イメージリスト",
			name2	: "＜UL＞＜LI＞＜IMG＞",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[画像リストブロック]"}
		cssDef	: {selector:".cms-images"}
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:150,height:100", width: "", ratio: "" }

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({
				id		: "list",
				name	: "リスト",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "画像",
						type: CELL_TYPE.IMAGE,
						style: SS.img50p,
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "alt",
						name: "Alt(代替テキスト)",
						type: CELL_TYPE.SINGLE
					}),
					new PageModel.OG_Cell({
						id: "text",
						name: "キャプション",
						type: CELL_TYPE.SINGLE
					}),
					new PageModel.OG_Cell({
						id: "isZoom",
						name: "クリックで画像を拡大する",
						type: CELL_TYPE.CHECK,
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						style: SS.w300,
						def:CMS_AnchorU.getInitDataS()
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;

		var def = {
			setting: {
				texts: {
					f: "1",
					m: "margin:0 10px 10px 0;"
				},
				grid: []
			},
			list: {
				texts: {},
				grid: [
					{
						publicData: "1",
						image: defImage,
						alt: "",
						text: "",
						anchor: { href: "", target: "" }
					},
					{
						publicData: "1",
						image: defImage,
						alt: "",
						text: "",
						anchor: { href: "", target: "" }
					},
					{
						publicData: "1",
						image: defImage,
						alt: "",
						text: "",
						anchor: { href: "", target: "" }
					},
					{
						publicData: "1",
						image: defImage,
						alt: "",
						text: "",
						anchor: { href: "", target: "" }
					}
				]
			}
		}
		o.data = def;
		o.extra = {width:"150px",height:"",float:"1",margin:"0 10px 10px 0"};
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		if(_isPub ==undefined) _isPub = false
		var tag = "";
		var list = CMS_U.getPublicList(data.list.grid);

		if(list.length == 0){
			tag += '<span class="_no-input-data">表データを入力...</span>'
		} else{
			var _cs = 'cms-images clearfix ' + ((extra["float"] == "1") ? " floats " :"");
			attr = attr.split('class="').join('class="' + _cs);

			var isSetW = (extra["width"]) ? true:false;
			var style_li = "";
				if(extra["width"]) style_li += 'width:'+getWidth(extra.width)+';';
				if(extra["margin"]) style_li += 'margin:'+extra.margin+';';

			var tag = "";
			tag += '<ul ' + attr + '>\n'
			for (var i = 0; i < list.length ; i++) {
				//IMGタグ生成
				var img = list[i].image;
				var imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: _isPub,
					// width	: isSetW ? "100%" : "",
					// ratio	: extra["height"],
					// width	: (!img.width) ? "100%" : "",
					width	: isSetW ? "100%" : img.width ,
					ratio	: img.ratio,
					alt		: list[i].alt,
					attr	: ""
				});
				//リンクあれば設定
				var link = CMS_AnchorU.getZoomLink(list[i].anchor , img.path , list[i].isZoom);

				//Aタグをwrap
				imgTag 	= CMS_AnchorU.getWapperTag(link, imgTag );
				tag += '<li style="'+style_li+'">'
				tag += imgTag;
				tag += CMS_ImgBlockU.getCaption(list[i].text);
				tag += '</li>\n';
			}
			tag += '</ul>\n'
			return tag;
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0)return ""
		return this.getPreview(_o,true);
	}

	function getWidth(_s){
		if(!_s)return ""
		if(_s.indexOf("px") != -1) return _s;
		if(_s.indexOf("%") != -1) return _s;
		if(Number(_s) == 0)return "";
		if(isNaN(Number(_s))) return "";
		return _s+"px";
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.btnList = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.btnList", 
		name	: "ボタンリスト",
		name2	: "＜UL＞＜LI＞＜A＞",
		inputs	: ["CLASS","CSS","DETAIL","CAPTION"],
		// cssDef	: {file:"block",key:"[ボタンリストブロック]"}
		cssDef	: {selector:".cms-btns"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リスト",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"" }),
				cells:[
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.BTN,
						def: CMS_AnchorU.getInitData()
					}),
					new PageModel.OG_Cell({
						id: "t1",
						name: "テキスト",
						type: CELL_TYPE.MULTI,
						def: "キャプションがはいります"
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
			o.type = _.pageInfo.id;
		var def ={
			list: {
				texts: {},
				grid: [
					{
						publicData: "1",
						anchor: { href: "http://www.google.com", target: "", text: "{{(-)}} リンクボタン", class_: "", image: "" },
						t1: "キャプションがはいります"
					},
					{
						publicData: "1",
						anchor: { href: "http://www.google.com", target: "", text: "{{(-)}} リンクボタン", class_: "", image: "" },
						t1: "キャプションがはいります"
					},
					{
						publicData: "1",
						anchor: { href: "http://www.google.com", target: "", text: "{{(-)}} リンクボタン", class_: "", image: "" },
						t1: "キャプションがはいります"
					},
					{
						publicData: "1",
						anchor: { href: "http://www.google.com", target: "", text: "{{(-)}} リンクボタン", class_: "", image: "" },
						t1: "キャプションがはいります"
					},
					{
						publicData: "1",
						anchor: { href: "http://www.google.com", target: "", text: "{{(-)}} リンクボタン", class_: "", image: "" },
						t1: "キャプションがはいります"
					}
				]
			}
		}
			o.data = def
			o.attr = {css:"default",style:""};
			o.attr.class = o.attr.css;
		return o;
	}
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tag = "";
		attr = attr.split('class="').join('class="cms-btns clearfix ');
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) {
			tag += '<span class="_no-input-data">リストデータを入力...</span>'
		} else{
			var style = ""
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<ul>\n'
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",false)
				tag += '	<li>'
				tag += aTag ;
				if(list[i].t1){
					tag += '<span class="btn-caption">' + list[i].t1 + '</span>';
				}
				tag += '</li>\n'
			}
			tag += '</ul>\n'
			tag += '</div>\n'
		}
		return tag;
	}
	
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var extra = _o.extra;
		var tag = ""
		attr = attr.split('class="').join('class="cms-btns clearfix ')
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return;
		
		{
			var style = ""
			tag += '<div ' + attr + '>\n';
			tag += PageElement_Util.getCaption(extra);
			tag += '<ul>\n'
			for (var i = 0; i < list.length ; i++) {
				var aTag = CMS_AnchorU.getAnchorTag(list[i].anchor,"",true)
				tag += '	<li>'
				tag += aTag ;
				if(list[i].t1){
					tag += '<span class="btn-caption">' + list[i].t1 + '</span>';
				}
				tag += '</li>\n'
			}
			tag += '</ul>\n'
			tag += '</div>\n'
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.pageLink = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	//ブロック定義
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.pageLink", 
		name	: "ページ内リンク",
		name2	: "見出しタグの情報を元に、ページ内リンクを自動で生成します",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */
	//入力の設定
	
	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "設定"
			}),
			textData:{
				info: new PageModel.OG_SubInfo({
					name: "設定",
					note: "見出しタグの情報を元に、ページ内リンクを自動で生成します"
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "h2",
						name: "大見出し(H2)",
						type: CELL_TYPE.CHECK,
						note: "ページ内リンクに、大見出しを加えます",
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "h3",
						name: "中見出し(H3)",
						type: CELL_TYPE.CHECK,
						note: "ページ内リンクに、中見出しを加えます",
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "h4",
						name: "小見出し(H4)",
						type: CELL_TYPE.CHECK,
						note: "ページ内リンクに、小見出しを加えます",
						def: ""
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
	]
	
	/* ---------- ---------- ---------- */
	//初期データ
	
	_.getInitData = function(){
		var o = {};
			o.type = _.pageInfo.id;
			o.data = _.getDefData(3);
			o.attr = {};
		return o;
	}
	
	/* ---------- ---------- ---------- */
	//プレビュー用のタグを返す (管理画面での表示)
	
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var tag = "";
			tag += '<div class="_cms_preview">\n'
			tag += '<div class="_title">ページ内リンク</div>'
			tag += '<div class="_notes">公開ページを表示したタイミングで、見出し情報を元に、自動生成されます。</div>'
			tag += '</div>';
		return tag;
	}
	
	/* ---------- ---------- ---------- */
	//公開HTML用のタグを返す
	
	_.getHTML = function(_o){
		var tag = "";
		var data  = _o.data;

		var seti = data.setting.texts;
		var ss = [];
		if(seti.h2 == "1")ss.push("h2")
		if(seti.h3 == "1")ss.push("h3")
		if(seti.h4 == "1")ss.push("h4")
		tag += '<div class="cms-pagelink" data-head="'+ss.join(",")+'"></div>'
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.photos = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.photos", 
			name	: "スライド(シンプル)",
		name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		cssDef	: {selector:".cms-slider"}
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:800,height:400", width: "", ratio: "2:1" }
		
	_.grids = [
	
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "スライドショー設定",
				note 	: ""
			}),
			textData:{
				info: new PageModel.OG_SubInfo({
					name: "オートプレイモード",
					note: "オートプレイモードを選択すると、指定した秒数ごとに、スライドが入れ替わります。"
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "slideshow",
						name: "オートプレイ",
						type: CELL_TYPE.SELECT,
						vals: SS.SelectVals.YN,
						view: "",
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "slideshowSpeed",
						name: "表示間隔(秒)",
						type: CELL_TYPE.SINGLE,
						style: SS.w100,
						view: "",
						def: "5",
						note: "次の写真を表示する間での秒数を入力してください。"
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "photos",
				name	: "写真一覧",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info: new PageModel.OG_SubInfo({
					name: "写真一覧",
					note: "スライドする写真一覧を登録します。<br>リンクを設定したい場合は、[リンク先URL]を入力してください。<br>文書を表示したい場合は、[タイトル]と[説明]を入力してください。"
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "写真",
						type: CELL_TYPE.IMAGE,
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "text",
						name: "タイトル",
						type: CELL_TYPE.MULTI
					}),
					new PageModel.OG_Cell({
						id: "text2",
						name: "説明",
						type: CELL_TYPE.MULTI
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		
		var def = {
			setting: {
				texts: {
					slideshow: "1",
					slideshowSpeed: "5"
				},
				grid: []
			},
			photos: {
				texts: {},
				grid: [
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:800,height:400,color:#0fc", width: "", ratio: "2:1" },
						anchor: CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:800,height:400,color:#ccf", width: "", ratio: "2:1" },
						anchor: CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:800,height:400,color:#fc0", width: "", ratio: "2:1" },
						anchor: CMS_AnchorU.getInitDataS()
					}
				]
			}
		}
		
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		attr = attr.split('class="').join('class="cms-slider clearfix ');
		var tag = ""
		var list = CMS_U.getPublicList(data.photos.grid);

		if(data == undefined || list.length == 0 ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			attr = attr.split('class="').join('class="_cms_preview_subblock ')
			tag += '<div class="_cms_preview">\n'
			tag += '<div class="_title">ガジェット / スライド（シンプル）</div>\n';
			tag += "公開ページで確認してください<br> \n";
			tag += '	<table class="_simpleTable">\n'
			tag += '	<tr>\n'
			tag += '		<th>番号</th>\n'
			tag += '		<th>画像</th>\n'
			tag += '		<th>タイトル</th>\n'
			tag += '		<th>説明</th>\n'
			tag += '	</tr>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '	<tr>\n'
				tag += '	<th>'+(i+1)+'</th>\n'
				tag += '	<td>\n'
				var img = list[i].image;
				tag += CMS_ImgBlockU.getImageTag({ 
					path : img.path,
					isPub : false, 
					width : "100px",
					ratio : img.ratio,
					alt : "",
					attr : ""
				});
 				tag += '	</td>\n'
				if(isFilledText(list[i].text)) {
					tag += '<td>'+list[i].text+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				if(isFilledText(list[i].text2)) {
					tag += '<td>'+list[i].text2+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				tag += '	</tr>\n'
			}
			tag += '	</table>\n'
			tag += '<div class="_notes">※ このブロックでは、個々の画像に横幅を設定しても、すべて100％と設定されます。</div>';
			tag += '</div>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		attr = attr.split('class="').join('class="cms-slider clearfix ');
		var tag = ""
		var setting = data.setting.texts;
		var list = CMS_U.getPublicList(data.photos.grid);
		if(list.length == 0)return "";
			// tag += '<ul class="cms-slider" '
			tag += '<ul ' + attr + _getJSONAttr(setting) + '>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '	<li>\n'
				var img = list[i].image;
				var imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: true,
					width	: "100%",
					ratio	: img.ratio, //extra["height"]
					alt		: "",
					attr	: ""
				});
				tag += CMS_AnchorU.getWapperTag(list[i].anchor,imgTag) + '\n';
				if(isFilledText(list[i].text)) tag += '<p class="title">'+list[i].text+'</p>\n';
				if(isFilledText(list[i].text2)) tag += '<p class="read">'+list[i].text2+'</p>\n';
				tag += '	</li>\n'
			}
			tag += '</ul>\n';
			//
			tag += '<script>\n';
			tag += '$(function(){\n';
			tag += '	$(".cms-slider").cms_slider();\n';
			tag += '});\n';
			tag += '</script>\n';
		return tag;
	}

	function _getJSONAttr(_s){
		var _num = NumberU.defaultNumber;
		var param = {}
			param.auto = (_s.slideshow == "1") ? true :false;
			param.pause = _num(_s.slideshowSpeed) *1000;
		var s = '{}';
		try{
		  s = JSON.stringify(param);
		}catch( e ){}
		return " data-json='" + s + "' ";
	}

	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.slides = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.slides", 
			name	: "スライド(カスタム)",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:800,height:400", width: "", ratio: "2:1" }
		
	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "スライドショー設定",
				note 	: "bxSlider（http://bxslider.com/）を利用したスライドショーを作成することができます。直接、HTMLやJSなどを記述することにより、bxSliderの機能を制限なく利用できます。<br>"
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ name:"カスタマイズ", note:"" }),
				cells:[
					new PageModel.OG_Cell({
						id: "js",
						name: "JavaScript",
						type: CELL_TYPE.MULTI_JS,
						style: SS.w800h100
					}),
					new PageModel.OG_Cell({
						id: "css",
						name: "css",
						type: CELL_TYPE.MULTI_STYLE,
						style: SS.w800h100
					}),
					new PageModel.OG_Cell({
						id: "html",
						name: "HTML",
						type: CELL_TYPE.MULTI_HTML,
						style: SS.w800h100
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "photos",
				name	: "スライド一覧",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"スライド一覧",note:"スライドのデータを登録します。入力した値は、上のカスタマイズテンプレート組み合わさって、HTMLとして出力されます。" }),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "写真{IMG}",
						type: CELL_TYPE.IMAGE,
						def: defImage
					}),
					new PageModel.OG_Cell({id:"a1", name:"{1}",	type:CELL_TYPE.MULTI , def:"サンプルの文書" }),
					new PageModel.OG_Cell({id:"a2", name:"{2}",	type:CELL_TYPE.MULTI , def:"サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。" }),
					new PageModel.OG_Cell({id:"a3", name:"{3}",	type:CELL_TYPE.MULTI , def:"サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。" }),
					new PageModel.OG_Cell({id:"a4", name:"{4}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({id:"a5", name:"{5}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({id:"a6", name:"{6}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({id:"a7", name:"{7}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({id:"a8", name:"{8}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({id:"a9", name:"{9}",	type:CELL_TYPE.MULTI , def:"" }),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						style: SS.w300,
						def: CMS_AnchorU.getInitDataS()
					}),
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		
		var _o = {}
			_o.setting = {}
			_o.setting.texts = {}
			_o.setting.texts.html = (function(){ 
				var s = ""
					s += '<div id="SlideA">\n'
					s += '<ul class="cms-slider-custom">\n'
					s += '{REPEAT_START}\n'
					s += '	<li>\n'
					s += '		<p class="img">{IMG}</p>\n'
					s += '		<p class="t1">{1}</p>\n'
					s += '		<p class="t2">{2}</p>\n'
					s += '		<p class="t3">{3}</p>\n'
					s += '	</li>\n'
					s += '{REPEAT_END}\n'
					s += '</ul>\n'
					s += '</div>\n'
					return s;
			})();
			_o.setting.texts.js = (function(){ 
				var s = ""
					s += '$(function(){\n'
					s += '	$(\'#SlideA> .cms-slider-custom\').bxSlider({\n'
					s += '		auto:false,\n'
					s += '		pause:4000\n'
					s += '	});\n'
					s += '});'
				return s;
			})();
			_o.setting.texts.css = (function(){ 
				var s = ""
					s += '#SlideA {padding:10px;background:#fff;border:2px solid #eee;}\n'
					s += '#SlideA img{width:100%;}\n'
					s += '#SlideA .t1{font-size:18px;border-bottom:2px solid #999;margin:10px 0 5px 0; padding:5px 0;}\n'
					s += '#SlideA .t2{font-size:14px;line-height:1.6;}\n'
					s += '#SlideA .t3{font-size:12px;line-height:1.2;color:#888;}'
				return s;
			})();
			_o.photos = {}
			
			_o.photos.grid= [
				{
					publicData: "1",
					image: { mode:"simple" , path: "width:800,height:400,color:#0fc", width: "", ratio: "2:1" },
					a1: "サンプルの文書",
					a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					anchor:CMS_AnchorU.getInitDataS()
				},
				{
					publicData: "1",
					image: { mode:"simple" , path: "width:800,height:400,color:#ccf", width: "", ratio: "2:1" },
					a1: "白い花びら",
					a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					anchor:CMS_AnchorU.getInitDataS()
				},
				{
					publicData: "1",
					image: { mode:"simple" , path: "width:800,height:400,color:#fc0", width: "", ratio: "2:1" },
					a1: "夕焼けに染まる空",
					a2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					a3: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
					anchor:CMS_AnchorU.getInitDataS()
				}
			]
		o.data = _o;
		o.attr = {};
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		var list = CMS_U.getPublicList(data.photos.grid);
		
		if(data == undefined || list.length == 0 ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{			
			// function _temp (_t,_s,_v){
			// 	if(_v != "")_t = _t.split(_s).join(_v);
			// 	return _t;
			// }
			attr = attr.split('class="').join('class="_cms_preview_subblock ')
			tag += '<div class="_cms_preview">\n'
			tag += '<div class="_title">ガジェット / スライド(カスタム)</div>\n';
			tag += "公開ページで確認してください<br> \n"
			tag += '	<table class="_simpleTable">\n'
			tag += '	<tr>\n'
			tag += '		<th>番号</th>\n'
			tag += '		<th>{IMG}</th>\n'
			tag += '		<th>{1}</th>\n'
			tag += '		<th>{2}</th>\n'
			tag += '	</tr>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '	<tr>\n'
				tag += '	<th>'+(i+1)+'</th>\n'
				tag += '	<td>\n'
				var img =  list[i].image;
				tag += CMS_ImgBlockU.getImageTag({
					path: img.path,
					isPub: false,
					width: "100px",
					ratio: img.ratio,
					alt: "",
					attr: ""
				});
				tag += '	</td>\n'
				if(isFilledText(list[i].a1)) {
					tag += '<td>'+list[i].a1+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				if(isFilledText(list[i].a2)) {
					tag += '<td>'+list[i].a2+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				tag += '	</tr>\n'
			}
			tag += '	</table>\n'
			tag += '<div class="_notes">※ このブロックでは、個々の画像に横幅を設定しても、すべて100％と設定されます。</div>';
			tag += '</div>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		var setting = data.setting.texts;
		var list = CMS_U.getPublicList(data.photos.grid);
		if(list.length == 0) return "";
		
			var htmls = CMS_TemplateU.getTemplateHTML(setting.html);
			tag += htmls[0];			
			function _temp (_t,_s,_v){
				if(_v != "")_t = _t.split(_s).join(_v);
				return _t;
			}
			for (var i = 0; i < list.length ; i++) {
				var temp = htmls[1];
				var img =  list[i].image;
				var imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: true,
					width	: "100%",
					ratio	: img.ratio,
					alt		: "",
					attr	: ""
				});
				if(CMS_TagU.hasLink(list[i].anchor)){
					imgTag = '<a '+CMS_TagU.getLinkTag(list[i].anchor)+'>' + imgTag + '</a>';
				}
				temp = _temp(temp,"{IMG}",imgTag);
				temp = _temp(temp,"{1}",CMS_TagU.t_2_tag(list[i].a1));
				temp = _temp(temp,"{2}",CMS_TagU.t_2_tag(list[i].a2));
				temp = _temp(temp,"{3}",CMS_TagU.t_2_tag(list[i].a3));
				temp = _temp(temp,"{4}",CMS_TagU.t_2_tag(list[i].a4));
				temp = _temp(temp,"{5}",CMS_TagU.t_2_tag(list[i].a5));
				temp = _temp(temp,"{6}",CMS_TagU.t_2_tag(list[i].a6));
				temp = _temp(temp,"{7}",CMS_TagU.t_2_tag(list[i].a7));
				temp = _temp(temp,"{8}",CMS_TagU.t_2_tag(list[i].a8));
				temp = _temp(temp,"{9}",CMS_TagU.t_2_tag(list[i].a9));
				tag += temp;
			}
		
			tag += htmls[2];
			tag += "<script>\n";
			tag += setting.js;
			tag += "\n</script>\n";
			tag += '<style type="text/css" media="screen">\n';
			tag += setting.css;
			tag += "\n</style>\n";
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.carrousel = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.carrousel", 
		name	: "カルーセル",
		name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		cssDef	: {selector:".cms-carrousel"}
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" }
		
	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "スライドショー設定",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
				new PageModel.OG_Cell({id:"slideWidth",	name:"画像幅",			type:CELL_TYPE.SINGLE , style:SS.w100,	view:"",def:"200",note:"ブロックごとの幅(px)を指定してください。"}),
				new PageModel.OG_Cell({id:"minSlides",	name:"最小スライド数",	type:CELL_TYPE.SINGLE , style:SS.w100,	view:"",def:"2",note:"最小のブロック数"}),
				new PageModel.OG_Cell({id:"maxSlides",	name:"最大スライド数",	type:CELL_TYPE.SINGLE , style:SS.w100,	view:"",def:"2",note:"最大のブロック数"}),
				new PageModel.OG_Cell({id:"slideMargin",name:"マージン幅",		type:CELL_TYPE.SINGLE , style:SS.w100,	view:"",def:"5",note:"ブロックごとのマージン(px)を指定してください。"}),
				new PageModel.OG_Cell({id:"slideshow",	name:"オートプレイ",	type:CELL_TYPE.SELECT , vals:SS.SelectVals.YN,	view:"",def:"1"}),
				new PageModel.OG_Cell({id:"slideshowSpeed",	name:"表示間隔(秒)",type:CELL_TYPE.SINGLE , style:SS.w100,	view:"",def:"5",note:"次の写真を表示する間での秒数を入力してください。"})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "photos",
				name	: "写真一覧",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"写真一覧", note:"スライドする写真一覧を登録します。<br>リンクを設定したい場合は、[リンク先URL]を入力してください。<br>文書を表示したい場合は、[タイトル]と[説明]を入力してください。" }),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "写真",
						type: CELL_TYPE.IMAGE,
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "text",
						name: "タイトル",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書"
					}),
					new PageModel.OG_Cell({
						id: "text2",
						name: "説明",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "isZoom",
						name: "クリックで画像を拡大する",
						type: CELL_TYPE.CHECK,
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})
		
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;

		var def = {
			setting: {
				texts: {
					slideWidth: "200",
					minSlides: "2",
					maxSlides: "6",
					slideMargin: "5",
					slideshow: "0",
					slideshowSpeed: "5"
				},
				grid: []
			},
			photos: {
				texts: {},
				grid: [
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" },
						text: "タイトル1",
						text2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" },
						text: "タイトル2",
						text2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" },
						text: "タイトル3",
						text2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" },
						text: "タイトル4",
						text2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitDataS()
					},
					{
						publicData: "1",
						image: { mode:"simple" , path: "width:200,height:200", width: "", ratio: "1:1" },
						text: "タイトル5",
						text2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor:CMS_AnchorU.getInitDataS()
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}

	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-slider-carrousel clearfix ');
		var tag = ""
		
		var setting = data.setting.texts;
		var w = setting.slideWidth;
		var list = CMS_U.getPublicList(data.photos.grid);
		
		if(data == undefined || list.length == 0 ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var i = 0
			attr = attr.split('class="').join('class="_cms_preview_subblock ')
			tag += '<div class="_cms_preview">\n'
			tag += '<div class="_title">ガジェット / カルーセル</div>\n';
			tag += "公開ページで確認してください<br> \n"
			
			tag += '	<table class="_simpleTable">\n'
			tag += '	<tr>\n'
			tag += '		<th>番号</th>\n'
			tag += '		<th>画像</th>\n'
			tag += '		<th>タイトル</th>\n'
			tag += '		<th>説明</th>\n'
			tag += '	</tr>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '	<tr>\n'
				tag += '	<th>'+(i+1)+'</th>\n'
				tag += '	<td>\n'
				var img = list[i].image;
				tag += CMS_ImgBlockU.getImageTag({
					path: img.path,
					isPub: false,
					width: "100px",
					ratio: img.ratio,
					alt: "",
					attr: ""
				});				tag += '	</td>\n'
				if(isFilledText(list[i].text)) {
					tag += '<td>'+list[i].text+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				if(isFilledText(list[i].text2)) {
					tag += '<td>'+list[i].text2+'</td>\n';
				} else{
					tag += '<td><br></td>\n';
				}
				tag += '	</tr>\n'
			}
			tag += '	</table>\n'
			tag += '<div class="_notes">※ このブロックでは、個々の画像に横幅を設定しても、すべて100％と設定されます。</div>';
			tag += '</div>\n';
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-carrousel clearfix ');
		var tag = ""
		var setting = data.setting.texts;
		var list = CMS_U.getPublicList(data.photos.grid);
		if(list.length==0) return "";

			tag += '<ul ' + attr + _getJSONAttr(setting) + '>\n'
			for (var i = 0; i < list.length ; i++) {
				tag += '	<li>\n'
				var img = list[i].image;
				var imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: true,
					width	: "100%",
					ratio	: img.ratio,
					alt		: "",
					attr	: ""
				});
				var anchor = CMS_AnchorU.getZoomLink(list[i].anchor , list[i].image , list[i].isZoom);
					tag += CMS_AnchorU.getWapperTag(anchor,imgTag);
				if (isFilledText(list[i].text)) tag += '<p class="title">' + CMS_TagU.t_2_tag(list[i].text) + '</p>\n';
				if (isFilledText(list[i].text2)) tag += '<p class="read">' + CMS_TagU.t_2_tag(list[i].text2) + '</p>\n';			tag += '	</li>\n'
			}
			tag += '</ul>\n'
			//
			tag += '<script>\n';
			tag += '$(function(){\n';
			tag += '	$(".cms-carrousel").cms_carrousel();\n';
			tag += '});\n';
			tag += '</script>\n';
			
		return tag;
	}

	function _getJSONAttr(_s){
		var _num = NumberU.defaultNumber;
		var param = {}
			param.slideWidth 	= _num(_s.slideWidth);
			param.minSlides 	= _num(_s.minSlides);
			param.maxSlides 	= _num(_s.maxSlides);
			param.slideMargin 	= _num(_s.slideMargin);
			param.auto 			= (_s.slideshow == "1") ? true :false;
			param.pause 		= _num(_s.slideshowSpeed) *1000;
		var s = '{}';
		try{
		  s = JSON.stringify(param);
		}catch( e ){}
		return " data-json='" + s + "' ";
	}

	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.tabList = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.tabList", 
			name	: "タブリスト",
		name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[タブリストブロック]"}
		cssDef	: {selector:".cms-tab"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リスト＜UL＞",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "t1",
						name: "タブ名＜LI＞",
						type: CELL_TYPE.SINGLE
					}),
					new PageModel.OG_Cell({
						id: "id",
						name: "選択したときに表示する要素ID",
						type: CELL_TYPE.SINGLE
					}),
					new PageModel.OG_Cell({
						id: "class",
						name: "class",
						type: CELL_TYPE.SINGLE
					})
				]
			}
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = JSON.parse('{"list": {"texts": {},"grid": [{"t1": "タブ01","id": "tab01","publicData": "1"},{"t1": "タブ02","id": "tab02","publicData": "1"},{"t1": "タブ03","id": "tab03","publicData": "1"}]}}')
		o.attr = {css:"default",style:""};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		attr = attr.split('class="').join('class="cms-tab clearfix ');
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0 ){
			tag += '<span class="_no-input-data">タブデータを入力...</span>'
		} else{
			var style = "";
			tag += '<ul '+ attr+' >\n';
			for (var i = 0; i < list.length ; i++) {
				var c = (list[i]["class"] != undefined) ? list[i]["class"] :"";
				tag += '	<li style="' + style +'" data="'+list[i].id+'" class="'+c+'">'
				tag += list[i].t1
				tag += '</li>\n'
			}
			tag += '</ul>\n'
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		attr = attr.split('class="').join('class="cms-tab clearfix ')
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return "";
		{
			var style = "";
			tag += '<ul '+ attr+'>\n';
			for (var i = 0; i < list.length ; i++) {
				var c = (list[i]["class"] != undefined) ? list[i]["class"] :"";
				tag += '	<li style="' + style +'"  data="'+list[i].id+'" class="_btn_default '+c+'">'
				tag += list[i].t1
				tag += '</li>\n'
			}
			tag += '</ul>\n'
			tag += '<script>\n'
			tag += '$(function(){\n';
			tag += '	$(".cms-tab").cms_tab();\n';
			tag += '});\n';
			tag += '</script>\n';
		}
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.pagenation = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.pagenation", 
		name	: "ページネーション",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */
// 数値 (1 2 3 ...)
// 点 ( ● ○ ○ ... )


	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "ページネーション",
				note 	: "<UL><LI>"
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"設定",
					note:"",
					image: "" 
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "target",
						name: "ターゲットリスト<br>( jQueryセレクタ )",
						type: CELL_TYPE.SINGLE,
						style: SS.w200,
						view: "",
						def: "#targetID"
					}),
					new PageModel.OG_Cell({
						id: "max",
						name: "1ページあたりの件数",
						type: CELL_TYPE.SINGLE,
						style: SS.w50,
						view: "",
						def: "5"
					}),
					new PageModel.OG_Cell({
						id: "label_back",
						name: "戻るボタンラベル",
						type: CELL_TYPE.SINGLE,
						style: SS.w200,
						view: "",
						def: "&lt; PREV"
					}),
					new PageModel.OG_Cell({
						id: "label_next",
						name: "進むボタンラベル",
						type: CELL_TYPE.SINGLE,
						style: SS.w200,
						view: "",
						def: "NEXT &gt;"
					}),
					new PageModel.OG_Cell({
						id:"listType",	
						name:"リストタイプ",
						type:CELL_TYPE.SELECT , 
						vals:[
							["0","数値リスト値 (1 2 3 ...)","0"],
							["1","ドットリスト ( ● ○ ○ ... )","1"],
							["2","カスタムリスト ( はじめに,1ページ目,2ページ目 ... )","2"]
						],
						view:"",
						def:"0",
						note:""
					}),
					new PageModel.OG_Cell({
						id: "listTypeCustom",
						name: "カスタムリストの値",
						type: CELL_TYPE.SINGLE,
						style: SS.w200,
						view: "",
						def: "",
						note:"リストタイプで、カスタムリストを選択した場合に入力して下さい。値はカンマで区切ってください。<br>例) [ はじめに,1ページ目,2ページ目 ]"
					}),				
					new PageModel.OG_Cell({
						id: "isJumpToTop",
						name: "クリック時に、<br>ページトップに移動するか",
						type: CELL_TYPE.CHECK,
						style: "",
						view: "",
						def: "1"
					})
				]
			},
			gridData:null
		})
	]
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = {
			setting: {
				texts: {
					target: "#targetID",
					max: "5",
					label_back: "&lt; PREV",
					label_next: "NEXT &gt;",
					isJumpToTop: ""
				},
				grid: []
			}
		}
		o.attr = {css:"",style:""};
		return o;
	}
	
	/* ---------- ---------- ---------- */

	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var tag = "";
		var target = data.setting.texts.target;
		var max = data.setting.texts.max;
		
		// new CMS_PagenationView(
		// 	$('#imageList > *'),
		// 	$('#pager'),
		// 	{ max:3, initPage:0 }
		// );
		
		//if(gridHasNoData(data)){
		// if(list.length == 0){
		// 	tag += '<span class="_no-input-data">表データを入力...</span>'
		// } else{
			attr = attr.split('class="').join('class=" ')
			tag += '<div '+attr+'>'
			tag += '<div class="_cms_preview">'
			tag += '<div class="_title">ガジェット / ページネーション</div>'
			tag += '<div class="_notes">※この要素の表示は、プレビューページか、公開サイトで確認してください。</div>';
			tag += '<p>ターゲットセレクタ:' + target + '</p>';
			tag += '</div>'
		// }
		
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		function createID(_s){
			_s = _s.split(" ").join("_")
			_s = _s.split(">").join("gt")
			_s = _s.split("*").join("asta")
			_s = _s.match(/[A-Za-z0-9_]/g).join("");
			return _s;
		}
		
		var setting = data.setting;
		// var uid ="_pager_"+ createID(target);
		var tag = ""
			tag += '<div class="cms-pagenation" ' + _getJSONAttr(setting) + '></div>\n'
			tag += "<script>\n";
			tag += '$(function(){\n';
			tag += '	$(".cms-pagenation").cms_pagenation();\n';
			tag += '});\n';
			tag += '</script>\n';
		return tag;
	}
	
	function _getJSONAttr(_s){
		var _num = NumberU.defaultNumber;
		var param = {}
			param.target 		= _s.texts.target;
			param.max 			= _num(_s.texts.max);
			param.label_back 	= defaultVal(_s.texts.label_back,"");
			param.label_next 	= defaultVal(_s.texts.label_next,"");
			param.listType 		= defaultVal(_s.texts.listType,"0");
			param.listTypeCustom = defaultVal(_s.texts.listTypeCustom,"");
			param.isJumpToTop 	=  (_s.texts.isJumpToTop == "1") ? true:false;
			
		var s = '{}';
		try{
		  s = JSON.stringify(param);
		}catch( e ){}
		return " data-json='" + s + "' ";
	}

	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.share = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.share", 
			name	: "シェアボタン",
			name2	: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[シェアボタンブロック]"}
		cssDef	: {selector:".cms-socials"}
	});

	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "シェアボタン",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({
					name: "ボタンの種類",
					note: ""
				}),
				cells:[
					 new PageModel.OG_Cell( {
						id:"facebook_share", 
						name:"Facebook シェアボタン", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					}),
					 new PageModel.OG_Cell( {
						id:"facebook", 
						name:"Facebook いいねボタン", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					}),
					 new PageModel.OG_Cell( {
						id:"twitter", 
						name:"Tweetボタン", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					}),
					 new PageModel.OG_Cell( {
						id:"plus", 
						name:"Google Plusボタン", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					}),
					 new PageModel.OG_Cell( {
						id:"hatena", 
						name:"はてなブックマークボタン", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					}),
					 new PageModel.OG_Cell( {
						id:"pocket", 
						name:"Pocketボタン(あとで読む系のサービス)", 
						type:CELL_TYPE.CHECK , 
						def:"1" 
					})
				]
			},
			gridData:null
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "param",
				name	: "",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({
					name: "ボタンの設定",
					note: ""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "select",
						name: "サイズ",
						type: CELL_TYPE.SELECT,
						vals: [
							["M","Mサイズ","1"],
							["L","Lサイズ","0"]
							],
						view: "",
						def: "1"
					}),
					new PageModel.OG_Cell({
						id: "url_input",
						name: "シェアするURL",
						type: CELL_TYPE.SINGLE,
						style:SS.w400,
						note:(function(){ 
						    var s = ""
						    	s += '何も入力しない場合は、個々のページのURLがシェア設定されます。<br>'
						    	s += '例えば、個々のページURLではなく、サイトトップのURLを個別のページでシェアしたい場合は、URLを入力してください。<br>'
						    return s;
						})()
					}),
					new PageModel.OG_Cell({
						id: "title",
						name: "シェアするタイトル名",
						type: CELL_TYPE.SINGLE,
						style:SS.w200,
						note:(function(){ 
						    var s = ""
						    	s += '何も入力しなければ、個々のページHTMLのタイトルタグの値が使用されます。<br>'
						    	s += 'サイトトップのURLを指定した場合などに、サイトタイトルを設定したりします。'
						    return s;
						})()
					}),
					 new PageModel.OG_Cell( {
						id:"preview", 
						name:"シェア情報（タイトルとURL）を表示", 
						type:CELL_TYPE.CHECK , 
						style:"", 
						view:"",
						def:"1" 
					})
				]
			},
			gridData:null
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data =  {
			list: {
				texts: {
					facebook_share: "1",
					facebook: "1",
					twitter: "1",
					plus: "1",
					hatena: "1",
					pocket: "1"
				},
				grid: []
			},
			param: {
				texts: {
					select: "M",
					url: "PAGE",
					url_input: ""
				},
				grid: []
			}
		}
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
			attr = attr.split('class="').join('class="cms-socials clearfix ');
			tag += '<div '+attr+'>\n'
			tag += '<ul class="clearfix">\n'
			
			if(data.list.texts.facebook_share){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _fs_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _fs_l"></div></li>';
				}
			}
			if(data.list.texts.facebook){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _f_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _f_l"></div></li>';
				}
			}
			if(data.list.texts.twitter){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _t_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _t_l"></div></li>';
				}
			}
			if(data.list.texts.plus){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _g_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _g_l"></div></li>';
				}
			}
			if(data.list.texts.hatena){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _h_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _h_l"></div></li>';
				}
			}
			if(data.list.texts.pocket){
				if(data.param.texts.select == "M"){
					tag += '	<li><div class="_share ss_share _p_m"></div></li>';
				} else {
					tag += '	<li><div class="_share ss_share _p_l"></div></li>';
				}
			}
					tag += '	<li style="color:#888;padding:5px 0 0 0;font-size:10px;"></li>';
			tag += '</ul>';
			tag += '<div style="color:red;margin:10px 0 0 0;font-size:12px;">※ボタンは仮表示です。ページを公開して、確認してください。</div>';
			var ss = (data.param.texts.url_input) ? data.param.texts.url_input :"現在のページのURL";
			tag += '<div style="color:#888;margin:10px 0 0 0;font-size:12px;">シェアされるURL：'+ ss +'</div>';

			tag += '</div>';
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
			attr = attr.split('class="').join('class="cms-socials clearfix ');
	
		var s = [];
		if(data.list.texts.twitter) s.push("twitter");
		if(data.list.texts.plus) s.push("plus");
		if(data.list.texts.facebook) s.push("facebook");
		if(data.list.texts.facebook_share) s.push("facebook_share");
		if(data.list.texts.hatena) s.push("hatena");
		if(data.list.texts.pocket) s.push("pocket");
		
		var url =""
		if(data.param.texts.url_input){
			url = data.param.texts.url_input;
		}
		var title = ""
		if(data.param.texts.title){
			title = data.param.texts.title;
		}
		var preview = ""
		if(data.param.texts.preview){
			preview = "1"
		}
		var tag = ""
			tag = '<div '+attr+' data-share="{DATA}" data-size="{SIZE}" data-url="{URL}" data-title="{TITLE}" data-preview="{PREVIEW}"></div>\n'
			tag = tag.split("{DATA}").join(s.join(","));
			tag = tag.split("{SIZE}").join(data.param.texts.select);
			tag = tag.split("{URL}").join(url);
			tag = tag.split("{TITLE}").join(title);
			tag = tag.split("{PREVIEW}").join(preview);
			tag += '<script>\n'
			tag += '$(function(){\n';
			tag += '	$(".cms-socials").cms_socials();\n';
			tag += '});\n'
			tag += '</script>\n'
		return tag;
	}

	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.feed = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.feed", 
			name	: "RSSフィード表示",
		name2		: "",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[RSSフィード表示ブロック]"}
		cssDef	: {selector:".cms-feed"}
	});
	/* ---------- ---------- ---------- */

	_.grids = [
	
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "RSSフィード登録",
				note 	: ""
			}),
			textData:{
				info: new PageModel.OG_SubInfo({
					name: "",
					note: ""
				}),
				cells:[
					new PageModel.OG_Cell( {
						id:"url",
						name:"RSSフィードのファイルパス<br>もしくはフルパス",
						type:CELL_TYPE.SINGLE , 
						style:SS.w400,
						note:(function(){
							var s = ""
								s += 'サイトルートからのRSSフィードのファイルパスを入力してください。ex... rss.xml <br>'
								s += 'ファイルパスでの場合は、対応するフィードの形式はRSSのみになります。<br>'
								s += 'データブロックのRSSデータで作成・書き出したデータに対応しています。<br><br>'
								s += 'フルパス（http://〜）で指定した場合は、Google Feed API ( https://developers.google.com/feed/ )を使用してフィードを取得します。<br>'
								s += 'Google Feed APIが対応してるフィードの形式であれば、読み込むことができます。<br>'
								s += 'ただし、Feed APIにキャッシュされるので、最新のフィードの内容とは、少しタイムラグが出る場合があります。'
							return s;
						})()
					}),
					new PageModel.OG_Cell( {
						id:"sum",
						name:"表示件数（上限数）",
						type:CELL_TYPE.SINGLE , 
						style:SS.w100
					}),
					new PageModel.OG_Cell({
						id: "template",
						name: "テンプレートHTML",
						type: CELL_TYPE.MULTI,
						style: SS.w800h200,
						view: "",
						note: (function(){ 
							var s = "";
								s += '使用できるテンプレート用置き換えタグ<br>';
								s += '<b>{LINK}</b>...リンクURL<br>';
								s += '<b>{DATE}</b>...更新日<br>';
								s += '<b>{TITLE}</b>...タイトル<br>';
								s += '<b>{CONTENT}</b>...サマリー（本文）<br>';
								s += '<b>{REPEAT_START}</b>...繰り返し領域の始まり<br>';
								s += '<b>{REPEAT_END}</b>...繰り返し領域のおわり<br>';
							return s;
						})()
					}),
				]
			},
			gridData:null
		})
		/* ---------- ---------- ---------- */
	]
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		
		var def = {
			setting: {
				texts: {
					url: "http://rss.dailynews.yahoo.co.jp/fc/rss.xml",
					sum: "5",
					template: (function(){ 
						var s = "";
							s += '<ul>\n'; //  id="{ID}"
							s += '{REPEAT_START}\n';
							s += '	<li>\n';
							s += '		<p class="feed_date">{DATE}</p>\n';
							s += '		<p class="feed_title"><a href="{LINK}">{TITLE}</a></p>\n';
							s += '		<p class="feed_content">{CONTENT}</p>\n';
							s += '	</li>\n';
							s += '{REPEAT_END}\n';
							s += '</ul>\n';
						return s;
					})()
				},
				grid: []
			}
		}
		
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		var url = defaultVal(data.setting.texts.url,"");
		var tag = "";
			tag += '<div class="_cms_preview">'
			tag += '	<div class="_title">ガジェット / RSSフィード表示</div>';
			tag += '	<div class="_notes">※この要素の表示は、プレビューページか、公開サイトで確認してください。</div>';
			tag += '	<p>RSSのURL：<b>' + url + '</b></p>'
			tag += '</div>'
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		attr = attr.split('class="').join('class="cms-feed clearfix ');
		var sum = defaultVal(data.setting.texts.sum,"1");
		var url = defaultVal(data.setting.texts.url,"");
			url = url.split(" ").join("");
			url = url.split("	").join("");
		
		var temp = defaultVal(data.setting.texts.template,"");
		
		var tag = "";
		
		if(url.substr(0,4) == "http"){
			tag += '<script type="text/javascript" src="//www.google.com/jsapi"></script>\n';
			tag += '<script type="text/javascript">google.load("feeds", "1");</script>\n';
		} else{
			url = CONST.SITE_DIR + url
		}
		url = url.split('"').join("");
		sum = sum.split('"').join("");
		
			tag += '<div ' + attr + '>\n';
			tag += '<div class="cms-rss" data-url="'+url+'" data-sum="'+sum+'">\n';
			tag += '<textarea style="display:none;">';
			tag += temp;
			tag += '</textarea>\n';
			tag += '</div>\n';
			tag += '</div>\n';
			tag += '<script>\n';
			tag += '$(function(){\n';
			tag += '	$(".cms-rss").cms_rss();\n';
			tag += '});\n'
			tag += '</script>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.formMail = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.formMail", 
		name	: "メールフォーム",
		name2	: "＜FORM＞",
		guide	: "block/object.formMail",
		inputs	: ["CLASS","CSS","DETAIL"],
		// cssDef	: {file:"block",key:"[ニュースリストブロック]"}
		cssDef	: {selector:".cms-form-mail"}
	});

	/* ---------- ---------- ---------- */
	
	var _FORM_ = {}
		_FORM_.html		= "html";
		_FORM_.embed	= "embed";
		_FORM_.checkbox = "checkbox";
		_FORM_.radio	= "radio";
		_FORM_.select	= "select";
		_FORM_.text		= "text";
		_FORM_.number	= "number";
		_FORM_.email	= "email";
		_FORM_.url		= "url";
		_FORM_.textarea = "textarea";
		_FORM_.name		= "name";
		_FORM_.kana		= "kana";
		_FORM_.address	= "address";
		_FORM_.tel		= "tel";
		
	var formTypes = [
		[_FORM_.html	,"表示：見出し" ,"0"],
		[_FORM_.embed	,"表示：ブロック埋込み" ,"0"],
		[_FORM_.checkbox ,"入力：チェックボックス","0"],
		[_FORM_.radio	,"入力：ラジオボタン","0"],
		[_FORM_.select	,"入力：セレクトボックス","0"],
		[_FORM_.text	,"入力：1行入力（テキスト）","1"],
		[_FORM_.number	,"入力：1行入力（数値）","0"],
		[_FORM_.email	,"入力：1行入力（メールアドレス）","0"],
		[_FORM_.url		,"入力：1行入力（URL）","0"],
		[_FORM_.textarea ,"入力：複数行入力","0"],
		[_FORM_.name	,"入力：定型入力（氏,名）","0"],
		[_FORM_.kana	,"入力：定型入力（シ,メイ）","0"],
		[_FORM_.address ,"入力：定型入力（住所）","0"],
		[_FORM_.tel		,"入力：定型入力（電話番号）","0"]
	]

	_.grids = [
		
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "設定",
				note 	: "※注意：メールフォームブロックは、1ページに複数設置することはできません。"
			}),
			textData:{
				info: new PageModel.OG_SubInfo({
					name: "",
					note: ""
				}),
				cells:[
					new PageModel.OG_Cell({
						id:"php",
						name:"送信プログラムパス",
						type:CELL_TYPE.SINGLE , 
						style:SS.w200
					}),
					new PageModel.OG_Cell( {
						id:"mail",
						name:"送信先メール",
						type:CELL_TYPE.SINGLE , 
						style:SS.w200,
						note:(function(){
							var s = ""
								s += '問い合わせメールが送信されるメールアドレスを入力してください。'
								return s;
						})()
					}),
					new PageModel.OG_Cell( {
						id:"last_midashi",
						name:"完了画面タイトル",
						type:CELL_TYPE.SINGLE , 
						style:SS.w400
					}),
					new PageModel.OG_Cell( {
						id:"last_read",
						name:"完了画面リード",
						type:CELL_TYPE.SINGLE , 
						style:SS.w400
					})
				]
			},
			gridData:null
		}),
		
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "forms",
				name	: "入力一覧",
				sub 	: (function(){ 
					var s = "";
						s += '<b>■選択肢リストについて</b><br>';
						s += '選択肢リストは、以下の入力タイプにおいて有効な値です。<br>';
						s += '<div class="_box">';
						s += '- チェックボックス&lt;input type="checkbox"&gt;<br>';
						s += '- ラジオボタン&lt;input type="radio"&gt;<br>';
						s += '- セレクトボックス&lt;select&gt;<br>';
						s += '</div>';
						s += '選択肢リストは複数行を入力すると、そのまま選択肢となります。<br>';
						s += '初期状態でチェック済み、選択済みとする場合は、先頭に*を入力してください。<br>';
						s += '<div class="_box">';
						s += '	入力例：<br>';
						s += '	りんご<br>';
						s += '	*みかん<br>';
						s += '	いちご<br>';
						s += '	ばなな<br>';
						s += '	ぶどう<br>';
						s += '</div>';
						
						s += '<b>■ブロック埋込について</b><br>';
						s += 'HTML埋込みは、ページ内のブロックを埋め込めます。<br>'
						s += '例えば、文書ブロックで、個人情報規約などを入力し、ブロックID ( 例：id=kiyaku ) を割り振ります。<br>';
						s += 'その後、HTML埋込みの選択肢リストで、そのブロックID ( 例：#kiyaku ) を入力してください。';
					return s;
				})()
			}),

			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "label",
						name: "ラベル名",
						type: CELL_TYPE.SINGLE,
						style: "",
						view: "",
						def: "ラベル名"
					}),
					new PageModel.OG_Cell({
						id: "type",
						name: "入力タイプ",
						type: CELL_TYPE.SELECT,
						vals: formTypes,
						view: "",
						def: "text"
					}),
					new PageModel.OG_Cell({
						id: "req",
						name: "必須入力",
						type: CELL_TYPE.CHECK,
						view: "",
						def: ""
					}),
					new PageModel.OG_Cell({
						id: "sels",
						name: "選択肢リスト<br>チェックラジオや<br>セレクトボックス用",
						type: CELL_TYPE.MULTI,
						style: "",
						view: "",
						def: ""
					}),
					new PageModel.OG_Cell({
						id: "note",
						name: "ノート<br>入力フォームの下に表示",
						type: CELL_TYPE.MULTI,
						style: "",
						view: "",
						def: ""
					})
				]
			}
		})


		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			setting: {
				texts: {
					mail: "sample@example.com",
					php: "html/php/mail.php",
					last_midashi: "ありがとうございました",
					last_read: "近日中に返答いたします"
				},
				grid: []
			},
			forms: {
				texts: {},
				grid: [
					{
						publicData: "1",
						label: "問い合わせ",
						type: _FORM_.html
					},
					{
						publicData: "1",
						label: "ご用件",
						type: _FORM_.checkbox,
						req: "",
						sels: "サービスについて\n製品について\n採用について\nそのほか"
					},
					{
						publicData: "1",
						label: "お問い合わせ内容",
						type: _FORM_.textarea,
						req: "1"
					},
					{
						publicData: "1",
						label: "登録者情報",
						type: _FORM_.html
					},
					{
						publicData: "1",
						label: "貴社名",
						type: _FORM_.text,
						req: "",
						note: "※法人の方は、入力してください。"
					},
					{
						publicData: "1",
						label: "お名前",
						type: _FORM_.text,
						req: "1"
					},
					{
						publicData: "1",
						label: "メールアドレス",
						type: _FORM_.email,
						req: "1"
					},
					{
						publicData: "1",
						label: "住所",
						type: _FORM_.address
					},
					{
						publicData: "1",
						label: "電話番号",
						type: _FORM_.tel
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		
		attr = attr.split('class="').join('class="cms-news ');
		var list = CMS_U.getPublicList(data.forms.grid);
		if(data == undefined  || data.length == 0 ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var table = "";
				table += '<table class="_simpleTable">'
				table += '<tr><th>ラベル名</th><th>入力タイプ</th><th>必須入力</th><th>選択肢</th><th>ノート</th></tr>'
			var a = []
			for (var n = 0; n < list.length ; n++) {
				var t = '		{ "type":"{TYPE}","label":"{NAME}","id":"input_{TYPE}_{N}", "req": "{REQ}" }'
				a.push(_template(t,list[n],n+1));
				var tr = '		<tr><td style="padding-left:1em">{NAME}</td><td>{TYPE}</td><td>{REQ_S}</td><td>{SELS_S}</td><td>{NOTE}</td></tr>'
				if(list[n].type == _FORM_.html){
					tr = '		<tr><td colspan="5">■{NAME}</td></tr>'
				}
				table += _template(tr,list[n],n+1);
			}
				table += '</table>'
			var mail = (data.setting.texts.mail);
			window.formMailCode = [mail, a.join(",\n")];
			tag += '<div class="_cms_preview">'
			tag += '<div class="_title">ガジェット / フォームメール</div>';
			tag += '<div class="_notes">'
			tag += '※この要素の表示は、プレビューページか、公開サイトで確認してください。<br>';
			tag += '※動作にはPHP4.2以上が必要です。お使いのサーバーのPHPバージョンは'+CMS_ServerStatus.version+'です。</div>';
			tag += table;
			tag += '<div class="_title">送信側プログラム</div>'
			tag += 'フォームメールには送信側のプログラムが必要です。<br>'
			tag += '以下のコードを、サイト設定の<b>php/mail.php</b>へコピーしてください。<br>'
			tag += '<textarea onfocus="javascript:window.openFormMailCode()" style="width:100%;height:80px;margin:10px 0;background:#ffc;color:blue;font-size:18px;">'
			tag += 'クリックして、PHPコードをコピー...'
			tag += '</textarea>';
			tag += '設定を変更した時は、変更毎にPHPコードを再設定する必要があります。';
			tag += '</div>';
		}
		return tag;
	}
	
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		attr = attr.split('class="').join('class="cms-form-mail clearfix ')
		var list = CMS_U.getPublicList(data.forms.grid);
		if(list.length == 0) return "";
		var tag = "";
			var a = [];
			for (var n = 0; n < list.length ; n++) {
				var t = '		{ "type":"{TYPE}","label":"{NAME}","id":"input_{TYPE}_{N}", {SELS} "req": "{REQ}","note":"{NOTE}" }'
				a.push(_template(t,list[n],n+1));
			}
			var s = "";
				s += '<div '+ attr+'>\n';
				s += '<textarea style="display:none;">\n';
				s += '{\n';
				s += '	"php":"{PHP}",\n';
				s += '	"lastTexts":["{LAST_MDISHI}","{LAST_READ}"],\n';
				s += '	"forms":[\n';
				s += '{FORMS}\n';
				s += '	]\n';
				s += '}\n';
				s += '</textarea>\n';
				s += '</div>\n';
				s = s.split("{PHP}").join('{{SITE_DIR}}' + data.setting.texts.php);
				s = s.split("{LAST_MDISHI}").join(data.setting.texts.last_midashi);
				s = s.split("{LAST_READ}").join(data.setting.texts.last_read);
				s = s.split("{FORMS}").join(a.join(",\n"));
				//
				s += '<script>\n'
				s += '$(function(){\n';
				s += '	$(".cms-form-mail").cms_mailForm();\n';
				s += '});'
				s += '</script>\n'
			tag += s;
			
			//
 		return tag;
	}
	
	/* ---------- ---------- ---------- */
	
	function _template(t,param,n){
		t = t.split("{N}").join(n);
		t = t.split("{NAME}").join((param.label)?param.label:"");
		t = t.split("{TYPE}").join(param.type);
		t = t.split("{REQ_S}").join((param.req =="1") ? "●":"-");
		t = t.split("{REQ}").join((param.req =="1") ? param.req:"");
		t = t.split("{NOTE}").join((param.note)?param.note:"");
		t = t.split("{SELS_S}").join((param.sels)?param.sels.split("\n").join("<br>"):"");
		var b = false
		if(param.type == _FORM_.checkbox)b =true;
		if(param.type == _FORM_.radio)b =true;
		if(param.type == _FORM_.select)b =true;
		if(param.type == _FORM_.embed)b =true;
		if(b){
			var _sel = param.sels.split("\n")
			var sel = [];
			for (var i = 0; i <  _sel.length ; i++) {
				if(_sel[i]) sel.push(_sel[i]);
			}
			t = t.split("{SELS}").join('"sels":"' + sel.join(",") + '",');
		} else{
			t = t.split("{SELS}").join("");
		}
		return t;
	}
	window.openFormMailCode = function(){
		var s = window.formMailCode;
		Editer_CodeCopyView.stageIn("formMail",s,function(){});
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.repeat = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.repeat", 
			name	: "カスタムリスト",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:200,height:133", width: "100%", ratio: "3:2" }
	
	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "list",
				name	: "リストデータ",
				style	: "",
				// note 	: "・セルID<b>{1}〜{10}</b>までのデータは、テンプレートデータ内の<b>{1}〜{10}</b>と記述されている個所に置き換えられます。<br>・リストデータを更新した場合は、右上の更新ボタンで、プレビューを更新できます。<br>・リンクを設定する場合は、リンク{LINK}に入力することで、要素全体にリンク設定を行えます。(公開サイト表示時に、{LINK}と入ってる個所をリンク設定に置き換えます。)"
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "image",
						name: "{IMG}",
						type: CELL_TYPE.IMAGE,
						style: SS.img50p,
						view: "",
						def: defImage
					}),
					new PageModel.OG_Cell({id:"a1",	name:"{1}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a2",	name:"{2}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a3",	name:"{3}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a4",	name:"{4}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a5",	name:"{5}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a6",	name:"{6}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a7",	name:"{7}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a8",	name:"{8}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a9",	name:"{9}",	type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({id:"a10",name:"{10}",type:CELL_TYPE.MULTI }),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "{LINK}<br>{LINK.href}<br>{LINK.target}",
						type: CELL_TYPE.ANCHOR
					})
				]
			}
		}),
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.TEMPLATE,
			gridInfo:new PageModel.OG_info({ 
				id		: "template",
				name	: "",
				note 	: ""
			}),
			textData:null,
			gridData:null
		})
		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		
		var _data = {
			template: ["myID","","",{}],
			list: {
				texts: {},
				grid: []
			}
		}
		var o = {};
		o.type = _.pageInfo.id;
		o.data = _data
		o.attr = {};
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var tag = "";
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0){
			tag += '<span class="_no-input-data">表データを入力...</span>'
		} else {
			var leng = PageElement_Util.getOmitLeng(list.length,"custom");
				
			tag += '<div>\n'
			tag += '<div '+ attr +'>\n'
			tag += CMS_TemplateU.doTemplate( {
				id : data.template[0],
				htmls : data.template[1],
				css : data.template[2],
				//
				isPub : false,
				list : list,
				leng : list.length,
				isEdit : false
			});
			tag += '</div>\n';
			tag += PageElement_Util.getOmitPreviewTag(list.length,"custom")
			tag += '</div>\n'
		}
		return tag;
	}
	_.getHTML = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var tag = "";
		var list = CMS_U.getPublicList(data.list.grid);
		if(list.length == 0) return "";
		
		var hasAttr = PageElement_Util.hasAttr(attr);
		if(hasAttr)	tag += '<div ' + attr + '>\n';
		
		tag += CMS_TemplateU.doTemplate( {
			id : data.template[0],
			htmls : data.template[1],
			css : data.template[2],
			//
			isPub : true,
			list : list,
			leng : list.length,
			isEdit : false
		});
		if(hasAttr)	tag += '</div>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.replaceTexts = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.replaceTexts", 
		name	: "Myタグ-リスト定義",
		name2	: "",
		guide	: "block/object.replaceTexts",
		inputs	: ["DETAIL"],
		cssDef	: {selector:""}
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:150,height:100", width: "", ratio: "" }

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
					id		: "texts",
					name	: "テキスト",
					note 	: ""
				}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name : "テキストMyタグ一覧", }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "Myタグ名ID",
						type: CELL_TYPE.SINGLE,
						view: "",
						style: SS.repID,
						def: "id"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "値(テキストやHTML)",
						type: CELL_TYPE.MULTI,
						view: "",
						def: "値"
					}),
					new PageModel.OG_Cell({
						id: "memo",
						name: "メモ",
						type: CELL_TYPE.MULTI,
						view: "",
						style: SS.memo,
						def: "メモ"
					})
				]
			}
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "images",
				name	: "",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"イメージMyタグ一覧" }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "Myタグ名ID",
						type: CELL_TYPE.SINGLE,
						style: SS.repID,
						view: "",
						def: "img"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "画像",
						type: CELL_TYPE.IMAGE,
						view: "",
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "isTag",
						name: "出力",
						type: CELL_TYPE.SELECT,
						view: "",
						vals: [
							["","タグを出力"],
							["path","画像パスのみ出力"]
						]
					}),
					new PageModel.OG_Cell({
						id: "memo",
						name: "メモ",
						type: CELL_TYPE.MULTI,
						view: "",
						style: SS.memo,
						def: "メモ"
					})
				]
			}
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "links",
				name	: "",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"リンクMyタグ一覧" }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "Myタグ名ID",
						type: CELL_TYPE.SINGLE,
						style: SS.repID,
						view: "",
						def: "link"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "値 (リンク)",
						type: CELL_TYPE.BTN,
						style: "",
						view: "",
						def: CMS_AnchorU.getInitDataS()
					}),
					new PageModel.OG_Cell({
						id: "isTag",
						name: "出力",
						type: CELL_TYPE.SELECT,
						view: "",
						vals: [
							["","ボタン一式を出力"],
							["path","リンクパスのみ出力"],
							["attr","href,target属性を書き出す"]
						]
					}),
					new PageModel.OG_Cell({
						id: "memo",
						name: "メモ",
						type: CELL_TYPE.MULTI,
						view: "",
						style: SS.memo,
						def: "メモ"
					})
				]
			}
		})
	]
	
	/* ---------- ---------- ---------- */
	
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			"texts": {
				"texts": {},
				"grid": [
					{
						"publicData": "1",
						"id": "HEAD_TITLE",
						"val": "株式会社サンプルサイト | {{PAGE_NAME}}",
						"_state": [
							"val",
							"memo"
						],
						"memo": "HTMLヘッダの＜TITLE＞タグで使用。{{PAGE_NAME}}部分は、ページタグです。各ページの名前に変更されます。"
					},
					{
						"publicData": "1",
						"id": "HEAD_KEYWORD",
						"val": "サンプルの文書ですので、ご注意ください",
						"_state": [],
						"memo": "HTMLヘッダの＜META＞タグのkeywordで使用。"
					},
					{
						"publicData": "1",
						"id": "HEAD_DESCRIPTION",
						"val": "サンプルの文書ですので、ご注意くださいサンプルの文書ですので、ご注意ください",
						"_state": [],
						"memo": "HTMLヘッダの＜META＞タグのdescriptionで使用。"
					}
				],
				"_state": {
					"currentRow": 0,
					"currentPage": 0,
					"fitWide": true,
					"hideCols": ""
				}
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		o.attr.class = o.attr.css;
		return o;
	}
	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = ""
		
		var hasData = false;
		if(data.texts){
			if(CMS_U.getPublicList(data.texts.grid).length){ hasData = true; }
		}
		if(data.images){
			if(CMS_U.getPublicList(data.images.grid).length){ hasData = true; }
		}
		if(data.links){
			if(CMS_U.getPublicList(data.images.links).length){ hasData = true; }
		}
		
		if(!hasData ){
			tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			attr = attr.split('class="').join('class=" ');
			tag += '<div class="_cms_replace_table">\n'	;		
			tag += '<table>\n';
			if(data.texts){
				var _ls = CMS_U.getPublicList(data.texts.grid);
				for (var i = 0; i < _ls.length ; i++) {
					tag+= '<tr>';
					tag+= '	<th><span class="_id">' + _ls[i].id + '</span></th>';
					tag+= '	<td>'+CMS_TagU.t_2_tag(_ls[i].val) ;
					tag+= '	<p class="_memo">' + CMS_TagU.t_2_tag(_ls[i].memo) + '</p>'
					tag+='	</td>';
					tag+= '</tr>';
				}
			}
			if(data.images){
				var _ls = CMS_U.getPublicList(data.images.grid);
				for (var i = 0; i < _ls.length ; i++) {
					tag+= '<tr>';
					tag+= '	<th><span class="_id">' + _ls[i].id + '</span></th>';
					var imgTag = "";
					if(_ls[i].isTag == "path"){
						if(_ls[i].val.mode == "simple"){
							imgTag = CMS_Path.MEDIA.getImagePath( _ls[i].val.path , _isPub );
						}
					} else {
						var img = _ls[i].val;
						imgTag = CMS_ImgBlockU.getImageTag({
							path	: img.path,
							isPub	: _isPub,
							width	: "50px",
							ratio	: img.ratio,
							alt		: "",
							attr	: ""
						});
					}
					tag+= '	<td>' + imgTag;
					tag+= '	<p class="_memo">' + CMS_TagU.t_2_tag(_ls[i].memo) + '</p>'
					tag+='	</td>';
					tag+= '</tr>';
				}
			}
			if(data.links){
				var _ls = CMS_U.getPublicList(data.links.grid);
				for (var i = 0; i < _ls.length ; i++) {
					tag+= '<tr>';
					tag+= '	<th><span class="_id">' + _ls[i].id + '</span></th>';
					var aTag = "";
					if(_ls[i].isTag == "path"){
						aTag = CMS_Path.MEDIA.getAnchorPath( _ls[i].val.href , _isPub );
					} else if(_ls[i].isTag == "attr"){
						aTag = CMS_Data.MyTagU.getAnchorAttr(_ls[i].val , _isPub)
					} else {
						aTag = CMS_AnchorU.getAnchorTag(_ls[i].val,"",true);
					}
					tag+= '	<td>' + aTag;
					tag+= '	<p class="_memo">' + CMS_TagU.t_2_tag(_ls[i].memo) + '</p>'
					tag+='	</td>';
					tag+= '</tr>';
				}
			}
			tag += '</table>\n'
			tag += '</div>\n'
		}
		return tag;
	}
	_.getHTML = function(_o){
		// var data  = _o.data;
		// var attr = _o.attrs;
		// var list = CMS_U.getPublicList(data.list.grid);
		// if(list.length == 0) return ""
		// return this.getPreview(_o,true);
		return "";
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.tree = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
			id 		: "object.tree", 
			name	: "ナビゲーション",
			name2	: "",
		inputs	: ["CLASS","CSS","TREE"],
		// cssDef	: {file:"block",key:"[ナビゲーションブロック]"}
		cssDef	: {selector:".cms-navi"}
	});

	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = {
			previewPage: {
				id: "index",
				dir: "/"
			},
			targetDir: "",
			setting: {
				useToggle: false,
				onlyCurrent: false,
				isFlat: false,
				hasDate: false,
				isReverse: false,
				limitSub: ""
			},
			css: {
				clearfix: false,
				current: true,
				ownCurrent: true,
				hasSub: true,
				underconst: true,
				type: true,
				level: true,
				no: false,
				sum: false
			},
			levels: [
				{
					isShow: true,
					isOpen: true,
					dir: "<p>{NAME}</p>",
					page: "<a href=\"{HREF}\" target=\"{TAR}\">{NAME}</a>"
				},
				{
					isShow: true,
					isOpen: true,
					dir: "<p>{NAME}</p>",
					page: "<a href=\"{HREF}\" target=\"{TAR}\">{NAME}</a>"
				},
				{
					isShow: true,
					isOpen: true,
					dir: "<p>{NAME}</p>",
					page: "<a href=\"{HREF}\" target=\"{TAR}\">{NAME}</a>"
				},
				{
					isShow: true,
					isOpen: true,
					dir: "<p>{NAME}</p>",
					page: "<a href=\"{HREF}\" target=\"{TAR}\">{NAME}</a>"
				},
				{
					isShow: true,
					isOpen: true,
					dir: "<p>{NAME}</p>",
					page: "<a href=\"{HREF}\" target=\"{TAR}\">{NAME}</a>"
				}
			]
		}
		o.attr = {css:"default",style:""};
		o.attr.class = o.attr.css;
		return o;
	}

	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var htmlAbs = CMS_Path.PAGE.ABS;
		var tree = CMS_Data.Sitemap.getData();
		var treeTag = TreeAPI.getTag( htmlAbs, tree , data);
		
		//マッチしない時のテキスト
		var notText = (window["TreeAPI_NOT_MATCH_TEXT"]) ? TreeAPI_NOT_MATCH_TEXT :"";
		
		var tag = ""; 
		if(treeTag == TreeAPI_NOT_MATCH_TEXT || treeTag == ""){
			tag += '<span class="_no-input-data">条件データを入力...</span>'
		} else{
			var cs = 'class="clearfix cms-navi ';
			attr = attr.split('class="').join(cs);
			var tag = "";
			tag += '<div class="_cms_preview _cms_preview-mini">'
			tag += '<div class="_title">ナビゲーションブロック</div>'
			tag += '<div '+attr+'>\n'
			tag += treeTag;
			tag += '</div>\n'
			tag += '</div>'
		}
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var htmlAbs = CMS_Path.PAGE.ABS;
		var tree = CMS_Data.Sitemap.getData();
		
		var treeTag = TreeAPI.getTag( htmlAbs, tree , data, HTML_ExportState.getCurrent());
	 		treeTag = treeTag.split('target=""').join("");
			treeTag = treeTag.split(TreeAPI_SITE_DIR).join(CONST.SITE_DIR);
		
		//
			var cs = 'class="clearfix cms-navi ';
			attr = attr.split('class="').join(cs);
			var tag = "";
			tag += '<div '+attr+'>\n'
			tag += treeTag;
			tag += '</div>\n'
			
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();





PageElement.object.hinagata = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.hinagata", 
		name	: "ひな形",
		name2	: "",
		inputs	: ["DETAIL","RELOAD"]
	});

	/* ---------- ---------- ---------- */

	var defImage = { mode:"simple" , path: "width:150,height:100", width: "", ratio: "" }
	
	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "mytag",
				name	: "Myタグ設定",
				note:"パーツ・ひな形設定ページで設定した、ひな形タグを入力してください。",
				callback:function(_o,_uid){
					var s = CMS_Data.MyTagReplace.replaceHinagata( _o.texts.id , [] );
					var keys = (function(_s){
						var a = [];
						var _ks = _s.match(/{.*?}/g);
						if(_ks){
							_ks = _ks.filter(function (x, i, self) {
								return self.indexOf(x) === i;
							});
							if(_ks){
								for (var i = 0; i < _ks.length ; i++) {
									if(_ks[i].indexOf("{{") == -1){
										if(_ks[i].indexOf(";") == -1){
											a.push('<span class="_cms_btn_copy_text" data-text="'+_ks[i]+'">' + _ks[i] +'</span>');
										}
									}
								}
							}
						}
						return a;
					})(s);
					
					var tag = "";
						tag += '<div class="_codePreview">'
						tag += '	<div class="_codearea">';
						tag += '		<table>';
						tag += '			<tr>';
						tag += '				<th>選択中のMyタグコード<br>(変換前)</th>';
						tag += '				<td><textarea>'+CMS_TagU.tag_2_t(s)+'</textarea></td>';
						tag += '			</tr>';
						tag += '			<tr>';
						tag += '				<th></th>';
						tag += '				<td><i class="fa fa-arrow-down "></i></td>';
						tag += '			</tr>';
						tag += '			<tr>';
						tag += '				<th>Myタグ内のひな形タグ</th>';
						tag += '				<td><div class="_keys">' + keys.join(" ") + '</div></td>';
						tag += '			</tr>';
						tag += '		</table>';
						tag += '	</div>'
						tag += '	<p>JavaScriptブロックは、上記では、正しく出力されませんので、ご注意下さい</p>'
						tag += '</div>'
					$("#"+_uid).html(tag);
				}
			}),
			textData:{
				info:new PageModel.OG_SubInfo({
					 name:""
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "MyタグID",
						type: CELL_TYPE.SINGLE,
						style: SS.repID20,
						view: "",
						// note: "例：{{タグ名}} ",
						note: (function(){ 
							var s = ""
							    s += '<a class="_btn_dic" href="javascript:window._cms.openEmbedList(\'my\',1);void(0);">';
							    s += '<i class="fa fa-file-text"></i> {{ 埋込みタグ }} 取得</a>'
							    return s;
							})(),
						def: "{id}"
					})
				]
			},
			gridData:null
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "texts",
				name	: "ひな形タグ設定",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"テキストに置換え" }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "ひな形タグ",
						type: CELL_TYPE.SINGLE,
						style: SS.repID,
						view: "",
						def: "{id}"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "値",
						type: CELL_TYPE.MULTI,
						view: "",
						def: "サンプルの文書ですので、ご注意ください。"
					})
				]
			}
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "images",
				name	: "",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"イメージに置換え" }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "ひな形タグ",
						type: CELL_TYPE.SINGLE,
						style: SS.repID,
						view: "",
						def: "{img}"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "画像",
						type: CELL_TYPE.IMAGE,
						view: "",
						def: defImage
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "リンク",
						type: CELL_TYPE.ANCHOR,
						style: SS.w300,
						def:CMS_AnchorU.getInitDataS()
					}),
					new PageModel.OG_Cell({
						id: "isTag",
						name: "出力",
						type: CELL_TYPE.SELECT,
						view: "",
						vals: [
							["","タグを出力"],
							["path","画像パスのみ出力"]
						]
					})
				]
			}
		}),
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "links",
				name	: "",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"リンクに置換え" }),
				cells:[
					new PageModel.OG_Cell({
						id: "id",
						name: "ひな形タグ",
						type: CELL_TYPE.SINGLE,
						style: SS.repID,
						view: "",
						def: "{link}"
					}),
					new PageModel.OG_Cell({
						id: "val",
						name: "値 (リンク)",
						type: CELL_TYPE.BTN,
						style: "",
						view: "",
						def: CMS_AnchorU.getInitDataS()
					}),
					new PageModel.OG_Cell({
						id: "isTag",
						name: "出力",
						type: CELL_TYPE.SELECT,
						view: "",
						vals: [
							["","ボタン一式を出力"],
							["path","リンクパスのみ出力"],
							["href",'href="*" target="*"を出力']
						]
					})
				]
			}
		})
	]
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(_param){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = {
			mytag : {
				texts:{
					id:"{{ひな形デモ}}"
				}	
			},
			texts : {
				grid:[ 
					{ publicData: "1" ,id:"{1}", val:"サンプルの文書です。" },
					{ publicData: "1" ,id:"{2}", val:"サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。" },
					{ publicData: "1" ,id:"{3}", val:"サンプルの文書ですので、ご注意ください。" }
				]
			},
			images : {
				grid:[]
			},
			links : {
				grid:[]
			}
		}
		o.attr = {css:"",style:""};
		
		if(_param){
			o.data.mytag.texts.id = _param.id;
			o.data.texts.grid = [];
		}
		return o;
	}

	/* ---------- ---------- ---------- */

	_.getList = function(data,_isPub){
		var list = [];
		
		/* ---------- ---------- ---------- */
		//テキスト置換え
		if(!data.texts) data.texts = {}
		if(!data.texts.grid) data.texts.grid = []
		var _ls = CMS_U.getPublicList(data.texts.grid);
		for (var i = 0; i < _ls.length ; i++) {
			list.push({ id:_ls[i].id, val:_ls[i].val });
		}
		
		/* ---------- ---------- ---------- */
		//画像置換え
		if(!data.images) data.images = {}
		if(!data.images.grid) data.images.grid = []
		var _ls = CMS_U.getPublicList(data.images.grid);
		for (var i = 0; i < _ls.length ; i++) {
			var imgTag = "";
			if(_ls[i].isTag == "path"){
				if(_ls[i].val.mode == "simple"){
					imgTag = CMS_Path.MEDIA.getImagePath( _ls[i].val.path , _isPub );
				}
			} else {
				var img = _ls[i].val;
				imgTag = CMS_ImgBlockU.getImageTag({
					path	: img.path,
					isPub	: _isPub,
					width	: img.width,
					ratio	: img.ratio,
					alt		: "",
					attr	: ""
				});
				//後工程で改行が<BR>になるので、削除
				imgTag = imgTag.split("\n").join("");
			}
			var tag = CMS_AnchorU.getWapperTag(_ls[i].anchor,imgTag);
			list.push({ id: _ls[i].id, val: tag });
		}
		
		/* ---------- ---------- ---------- */
		//リンク置換え
		if(!data.links) data.links = {}
		if(!data.links.grid) data.links.grid = []
		var _ls = CMS_U.getPublicList(data.links.grid);
		for (var i = 0; i < _ls.length ; i++) {
			var aTag = "";
			if(_ls[i].isTag == "path"){
				aTag = CMS_Path.MEDIA.getAnchorPath( _ls[i].val.href , _isPub );
			} else if(_ls[i].isTag == "href"){
				aTag +=' href="' + CMS_Path.MEDIA.getAnchorPath( _ls[i].val.href , _isPub ) + '"';
				aTag +=' target="' + _ls[i].val.target + '" ';
			} else {
				aTag = CMS_AnchorU.getAnchorTag(_ls[i].val,"",true);
			}
			list.push({ id: _ls[i].id, val: aTag });
		}
		return list;
	}

	/* ---------- ---------- ---------- */

	_.getPreview = function(_o,_isPub){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		if(!data.texts) return tag;
		if(!data.mytag.texts.id){
				tag += '<span class="_no-input-data">データを入力...</span>'
		} else{
			var list = this.getList(data,_isPub);
			var id = data.mytag.texts.id;
				id = id.split("{{").join("");
				id = id.split("}}").join("");
			
			var hasAttr = PageElement_Util.hasAttr(attr);
			if(hasAttr)	tag += '<div ' + attr + '>';
			if(_isPub){
				if(window["CMS_Data"]){
					tag += CMS_Data.MyTagReplace.replaceHinagata( data.mytag.texts.id , list );
				}
			} else{
				tag += '<div class="_hinagata_id_area"><div class="_hinagata_id"><span>' + id + '</span></div>';
				if(window["CMS_Data"]){
					tag += CMS_Data.MyTagReplace.replaceHinagata( data.mytag.texts.id , list );
				}
				tag += "</div>"
			}
			if(hasAttr)	tag += '</div>';
		} 
		return tag;
	}
	

	/* ---------- ---------- ---------- */

	_.getHTML = function(_o){
		return this.getPreview(_o ,true);
	}

	/* ---------- ---------- ---------- */

    return _;
})();




if(window["GRID_EDIT_MAX_CELL"] == undefined){
	window.GRID_EDIT_MAX_CELL = {}
	GRID_EDIT_MAX_CELL.DATA = 15;
}

var PageElement_data_gridCell = (function(_max){ 
   var a = [];
   var defs = [
		"サンプルの文書。",
		"サンプルの文書ですので、ご注意ください。" ,
		"サンプルの文書ですので、ご注意ください。"
	];
   for (var i = 0; i <  _max ; i++) {
   		var def = (defs.length > i) ? defs[i] :"";
		a.push(
			new PageModel.OG_Cell({
				id: "c" + (i+1),
				name: (i+1),
				type: CELL_TYPE.MULTI,
				def: def
			})
		);
	}
	return a;
})(GRID_EDIT_MAX_CELL.DATA);
	
PageElement.object.data_csv = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.data_csv", 
		name	: "データブロックCSV",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */
	
	var gridSum = GRID_EDIT_MAX_CELL.DATA;

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "table",
				name	: "データ",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"設定",
					note:"",
					image: "" 
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "spliter",
						name: "区切り文字",
						type: CELL_TYPE.SINGLE,
						style: SS.w50,
						view: "",
						def: ",",
						note: "データの区切り文字を入力してください。一般的には、カンマやタブを使用します。<br>なにも入力しない場合は、タブが使用されます。"
					}),
					new PageModel.OG_Cell({
						id: "text_before",
						name: "データの前に追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;textarea id=\"data\" style=\"display:none;\"&gt;"
					}),
					new PageModel.OG_Cell({
						id: "text_after",
						name: "データの後ろに追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;/textarea&gt;"
					})
				]
			},
			gridData:{
				info: new PageModel.OG_SubInfo({
					name: "データグリッド",
					note: "セル内の改行は、出力時には無視されます。"
				}),
				cells:JSON.parse(JSON.stringify(PageElement_data_gridCell))
			}
		})
	]
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = _.getDefData(3);
		o.attr = {css:"",style:""};
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		var list = CMS_U.getPublicList(data.table.grid);
		tag += '<div class="_cms_preview">\n'
		tag += '<div class="_title">データブロック / CSVデータ</div>'
		tag += '<div class="_notes">ブロック情報パネルの、[出力]タブよりファイル名を設定し、書出せます。</div>'
		if(list.length == 0){
				tag += '<span class="_no-input-data">データリストを入力...</span>'
		} else{
			var maxLeng = PageElement_Util.getGridMaxLeng(list,gridSum);
			tag += '<table class="_dataTable">\n'
			tag += '<tbody>\n'
			
			var leng = PageElement_Util.getOmitLeng(list.length,"data");
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				for (var ii = 0; ii < maxLeng +1 ; ii++) {
					var s = CMS_TagU.tag_2_t(list[i]["c"+(ii+1)]);
						s = s.split("\n").join("");
					tag += '		<td>' + s + '</td>\n';
				}
				tag += '	</tr>\n';
			}
			tag += "</tbody>\n";
			tag += "</table>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length ,"data")
		}
			tag += "</div>\n";
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var sep = data.table.texts.spliter || "\t";
		var text_before = data.table.texts.text_before || "";
		var text_after = data.table.texts.text_after || "";
		
		var grid = CMS_U.getPublicList(data.table.grid);
		if(grid.length == 0) return "";
		var a = [];
		
		var maxLeng = PageElement_Util.getGridMaxLeng(grid,gridSum);
		var lines = []
		for (var i = 0; i < grid.length ; i++) {
			var row = []
			for (var ii = 0; ii < maxLeng + 1 ; ii++) {
				var s = grid[i]["c"+(ii+1)];
				if(s ==undefined) s = "";
					s = s.split("\n").join("");
				row.push(s);
			}
			lines.push(row.join(sep))
		}
		return text_before + lines.join("\n") + text_after;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.data_json = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.data_json", 
		name	: "データブロックJSON",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */
	
	var gridSum = GRID_EDIT_MAX_CELL.DATA;

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "table",
				name	: "データ",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"設定",
					note:"",
					image: "" 
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "text_before",
						name: "データの前に追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;textarea id=\"data\" style=\"display:none;\"&gt;"
					}),
					new PageModel.OG_Cell({
						id: "text_after",
						name: "データの後ろに追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;/textarea&gt;"
					})
				]
			},
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"データグリッド" }),
				cells:JSON.parse(JSON.stringify(PageElement_data_gridCell))

			}
		})
	]
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = _.getDefData(3);
		o.attr = {css:"",style:""};
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		var list = CMS_U.getPublicList(data.table.grid);
		tag += '<div class="_cms_preview">\n'
		tag += '<div class="_title">データブロック / JSONデータ</div>'
		tag += '<div class="_notes">ブロック情報パネルの、[出力]タブよりファイル名を設定し、書出せます。</div>'
		tag += '<div class="">\n'
		if(list.length == 0){
				tag += '<span class="_no-input-data">データリストを入力...</span>'
		} else{
			var maxLeng = PageElement_Util.getGridMaxLeng(list,gridSum);
			tag += '<table class="_dataTable">\n'
			tag += '<tbody>\n'
			var leng = PageElement_Util.getOmitLeng(list.length,"data");
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				for (var ii = 0; ii < maxLeng +1 ; ii++) {
					var v = CMS_TagU.t_2_tag(list[i]["c"+(ii+1)]);
					tag += '		<td>' + v + '</td>\n';
				}
				tag += '	</tr>\n';
			}
			tag += "</tbody>\n";
			tag += "</table>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"data")
		}
			tag += "</div>\n";
			tag += "</div>\n";
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var text_before = data.table.texts.text_before || "";
		var text_after = data.table.texts.text_after || "";
		
		var grid = CMS_U.getPublicList(data.table.grid);
		if(grid.length == 0) return "";
		var a = [];
		
		var maxLeng = PageElement_Util.getGridMaxLeng(grid,gridSum);
		for (var i = 0; i < grid.length ; i++) {
			a[i] = []
			for (var ii = 0; ii < maxLeng + 1 ; ii++) {
				a[i][ii] = CMS_TagU.t_2_tag(grid[i]["c"+(ii+1)])
				if(a[i][ii] == null) a[i][ii] = ""
			}
		}
		return text_before + JSON.stringify({list:a}, null, "	") + text_after;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.data_xml = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.data_xml", 
		name	: "データブロックXML",
		name2	: "",
		inputs	: ["DETAIL"]
	});

	/* ---------- ---------- ---------- */
	
	var gridSum = GRID_EDIT_MAX_CELL.DATA;

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "table",
				name	: "データ",
				note 	: ""
			}),
			textData:{
				info:new PageModel.OG_SubInfo({ 
					name:"設定",
					note:"",
					image: "" 
				}),
				cells:[
					new PageModel.OG_Cell({
						id: "text_before",
						name: "データの前に追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;textarea id=\"data\" style=\"display:none;\"&gt;"
					}),
					new PageModel.OG_Cell({
						id: "text_after",
						name: "データの後ろに追加するテキスト",
						style: SS.w400,
						type: CELL_TYPE.MULTI,
						view: "",
						def: "",
						note: "例: &lt;/textarea&gt;"
					})
				]
			},
			gridData:{
				info:new PageModel.OG_SubInfo({ name:"データグリッド" }),
				cells:JSON.parse(JSON.stringify(PageElement_data_gridCell))
			}
		})
	]
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		o.data = _.getDefData(3);
		o.attr = {css:"",style:""};
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		var list = CMS_U.getPublicList(data.table.grid);
		tag += '<div class="_cms_preview">\n'
		tag += '<div class="_title">データブロック / XMLデータ</div>'
		tag += '<div class="_notes">ブロック情報パネルの、[出力]タブよりファイル名を設定し、書出せます。</div>'
		tag += '<div class="">\n'
		if(list.length == 0){
				tag += '<span class="_no-input-data">データリストを入力...</span>'
		} else{
			var maxLeng = PageElement_Util.getGridMaxLeng(list,gridSum);
			tag += '<table class="_dataTable">\n'
			tag += '<tbody>\n'
			var leng = PageElement_Util.getOmitLeng(list.length,"data");
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				for (var ii = 0; ii < maxLeng +1 ; ii++) {
					var v = CMS_TagU.t_2_tag(list[i]["c"+(ii+1)]);
					tag += '		<td>' + v + '</td>\n';
				}
				tag += '	</tr>\n';
			}
			tag += "</tbody>\n";
			tag += "</table>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"data")
		}
		tag += "</div>\n";
		tag += "</div>\n";
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		
		var text_before = data.table.texts.text_before || "";
		var text_after = data.table.texts.text_after || "";
		
		var grid = CMS_U.getPublicList(data.table.grid);
		if(grid.length == 0) return "";
		var a = [];
		
		var maxLeng = PageElement_Util.getGridMaxLeng(grid,gridSum);
		var tag = ""
			tag += '<?xml version="1.0" encoding="UTF-8" ?>\n'
			tag += '<rows>\n'
		for (var i = 0; i < grid.length ; i++) {
			tag += '<row>\n'
			for (var ii = 0; ii < maxLeng + 1 ; ii++) {
				var s = CMS_TagU.t_2_tag(grid[i]["c" + (ii + 1)])
				var nnS = '<c' + (ii + 1) + '>'
				var nnE = '</c' + (ii + 1) + '>'
				tag += '	' + nnS + s + nnE + '\n'
			}
			 tag+= '</row>\n'
		}
			tag += '</rows>\n'
		return text_before + tag + text_after;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();



PageElement.object.data_rss = (function(){ 
    var _ = new PageModel.Object_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.data_rss", 
		name	: "データブロックRSS",
		name2	: "",
		inputs	: ["DETAIL"]
	});


	/* ---------- ---------- ---------- */

	_.grids = [
		/* ---------- ---------- ---------- */
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "setting",
				name	: "RSS設定",
				note 	: ""
			}),
			textData:{
				info: new PageModel.OG_SubInfo({
					name: "RSS情報",
					note: ""
				}),
				cells:[
					new PageModel.OG_Cell( {
						id:"t1",
						name:"サイト名", 
						type:CELL_TYPE.SINGLE,  
						style:SS.w400,
						def:"タイトル"
					}),
					new PageModel.OG_Cell( {
						id:"t2",
						name:"サイト名の説明", 
						type:CELL_TYPE.MULTI,  
						style:SS.w400h100,
						def:"サイト名の説明"
					}),
					new PageModel.OG_Cell( {
						id:"url",
						name:"サイトURL", 
						type:CELL_TYPE.SINGLE,  
						style:SS.w400,
						def:"URL"
					})
				]
			},
			gridData:null
		}),
		
		/* ---------- ---------- ---------- */
		
		new PageModel.Object_Grid({
			gridType:Dic.GridType.BASE,
			gridInfo:new PageModel.OG_info({ 
				id		: "table",
				name	: "ページ一覧",
				note 	: ""
			}),
			textData:null,
			gridData:{
				info:new PageModel.OG_SubInfo({}),
				cells:[
					new PageModel.OG_Cell({
						id: "date",
						name: "更新日時",
						type: CELL_TYPE.YYYYMMDD,
						def: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD hh:mm")
					}),
					new PageModel.OG_Cell({
						id: "t1",
						name: "ページ名",
						type: CELL_TYPE.MULTI,
						def: "サイト名"
					}),
					new PageModel.OG_Cell({
						id: "t2",
						name: "ページの説明",
						type: CELL_TYPE.MULTI,
						def: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。"
					}),
					new PageModel.OG_Cell({
						id: "anchor",
						name: "ページのファイルパス",
						type: CELL_TYPE.ANCHOR,
						def: CMS_AnchorU.getInitDataS()
					})
				]
			}
		})


		/* ---------- ---------- ---------- */
	]
	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var def = {
			setting:{
				texts:{
					date: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD hh:mm"),
					t1: "タイトル",
					t2: "説明",
					url: "http://www.yahoo.co.jp/"
				}
			},
			table: {
				texts: {},
				grid: [
					{
						publicData: "1",
						date: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD hh:mm"),
						t1: "会社案内ページを更新しました。",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date: DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD hh:mm"),
						t1: "製品ページを更新しました。",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: { href: "index.html",target:"" }
					},
					{
						publicData: "1",
						date:DateUtil.getFormattedDate(new Date(), "YYYY/MM/DD hh:mm"),
						t1: "ホームページを公開しました。",
						t2: "サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。サンプルの文書ですので、ご注意ください。",
						anchor: { href: "index.html",target:"" }
					}
				]
			}
		}
		o.data = def;
		o.attr = {css:"default"};
		return o;
	}
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";
		var list = CMS_U.getPublicList(data.table.grid);
		tag += '<div class="_cms_preview">\n'
		tag += '<div class="_title">データブロック / RSSデータ</div>'
		tag += '<div class="_notes">ブロック情報パネルの、[出力]タブよりファイル名を設定し、書出せます。</div>'
		tag += '<div class="_notes">RSSデータの書き出しファイル名は***.xmlとしてください。</div>'
		tag += '<div class="">\n'
		if(list.length == 0){
				tag += '<span class="_no-input-data">データリストを入力...</span>'
		} else{
			tag += '<table class="_dataTable">\n'
			tag += '<tbody>\n'
			tag += '	<tr>\n';
			tag += '	<th>更新日時</th>\n';
			tag += '	<th>ページ名</th>\n';
			tag += '	<th>ページの説明</th>\n';
			tag += '	<th>URL</th>\n';
			tag += '	</tr>\n';
			var leng = PageElement_Util.getOmitLeng(list.length,"data");
			for (var i = 0; i < leng ; i++) {
				tag += '	<tr>\n';
				tag += '	<td>' + defaultVal(list[i].date,"") + '</td>\n';
				tag += '	<td>' + defaultVal(list[i].t1,"") + '</td>\n';
				tag += '	<td>' + defaultVal(list[i].t2,"") + '</td>\n';
				tag += '	<td>' + defaultVal(list[i].anchor.href,"") + '</td>\n';
				tag += '	</tr>\n';
			}
			tag += "</tbody>\n";
			tag += "</table>\n";
			tag += PageElement_Util.getOmitPreviewTag(list.length,"data")
		}
		tag += "</div>\n";
		tag += "</div>\n";
		return tag;
	}
	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		// var attr = _o.attrs;
			var tag = "";		
		
		var temp = "";
			temp += '<?xml version="1.0" encoding="utf-8"?>\n';
			temp += '<rss version="2.0">\n';
			// temp += '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">\n';
			temp += '<channel>\n';
			temp += '<title>{T1}</title>\n';
			temp += '<link>{URL}</link>\n';
			temp += '<description>{T2}</description>\n';
			// temp += '<pubDate>{DATE}</pubDate>\n';
		if(data.setting){
			temp = temp.split("{T1}").join(defaultVal(data.setting.texts.t1,""));
			temp = temp.split("{T2}").join(defaultVal(data.setting.texts.t2,""));
			temp = temp.split("{URL}").join(defaultVal(data.setting.texts.url,""));
		}
		tag += temp;
		var CMS_URL = data.setting.texts.url;
		if(CMS_URL.charAt(CMS_URL.length-1) != "/") {
			CMS_URL = CMS_URL+"/";
		}
		var list = CMS_U.getPublicList(data.table.grid);
		if(list.length == 0) return "";
			for (var n = 0; n < list.length ; n++) {
				var temp = "";
					temp += '<item>\n';
					temp += '	<title>{T1}</title>\n';
					temp += '	<link>{URL}</link>\n';
					temp += '	<guid isPermaLink="true">{URL}</guid>\n';
					temp += '	<pubDate>{DATE}</pubDate>\n';
					temp += '	<description><![CDATA[ {T2} ]]></description>\n';
					temp += '</item>\n';
					temp = temp.split("{T1}").join(defaultVal(list[n].t1,""));
					temp = temp.split("{T2}").join(defaultVal(list[n].t2,""));
					// temp = temp.split("{DATE}").join(new Date(list[n].date));
					var dd = list[n].date.split("/").join("-");
					temp = temp.split("{DATE}").join(moment(dd).format('ddd, DD MMM YYYY HH:mm:ss ZZ') );
					// temp = temp.split("{DATE}").join(list[n].date);
					// temp = temp.split("{DATE}").join("Thu, 5 Jun 2008 19:36:28 +0900");
					temp = temp.split("{URL}").join(CMS_URL + defaultVal(list[n].anchor.href,"")) ;
				tag += temp	
			}
		tag += '</channel>\n';
		tag += '</rss>\n';
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();


PageElement.object.data_text = (function(){ 
    var _ = new PageModel.Tag_();
    
	/* ---------- ---------- ---------- */
	
    _.pageInfo = new PageModel.Object_Info({ 
		id 		: "object.data_text", 
		name	: "生データ",
		name2	: "",
		inputs	: ["TEXTAREA"]
	});
	
	/* ---------- ---------- ---------- */

	_.getInitData = function(){
		var o = {};
		o.type = _.pageInfo.id;
		var s = "サンプルの文書ですので、ご注意ください。"
		o.data = s
		o.attr = {css:"",style:""}
		return o;
	}
	
	/* ---------- ---------- ---------- */
	
	_.getPreview = function(_o){
		var data  = _o.data;
		var attr = _o.attrs;
		var tag = "";

		tag += '<div class="_cms_preview">\n'
		tag += '<div class="_title">データブロック / TEXTデータ</div>'
		tag += '<div class="_notes">データブロックは、[公開する]でHTML公開しても、書出されません。<br>ブロック情報パネルの、[出力]タブよりファイル名を設定し、書出せます。</div>'
		tag += '<div class="">\n'
		if(data == ""){
			tag += '<span class="_no-input-data">データリストを入力...</span>'
		} else{
			tag += '<table class="_dataTable">\n'
			tag += '<tbody>\n'
			tag += '<tr>\n'
			tag += '<td>\n'
			tag += CMS_TagU.tag_2_t(data).split("\n").join("<br>");
			tag += "</td>\n";
			tag += "</tr>\n";
			tag += "</tbody>\n";
			tag += "</table>\n";
		}
		tag += "</div>\n";
		tag += "</div>\n";
		
		return tag;
	}
	
	/* ---------- ---------- ---------- */

	_.getHTML = function(_o,_tab){
		var data  = _o.data;
		var attr = _o.attrs;
		// var tab = (_tab != undefined) ? _tab:"";
		var tag = ""
			tag += data;
		return tag;
	}
	
	/* ---------- ---------- ---------- */

    return _;
})();
